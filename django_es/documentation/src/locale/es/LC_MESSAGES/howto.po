# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# 
# Translators:
# albertoalcolea <albertoalcolea@gmail.com>, 2014
# Ernesto Avilés Vázquez <whippiii@gmail.com>, 2015
# Ernesto Avilés Vázquez <whippiii@gmail.com>, 2014
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-06-25 03:09-0500\n"
"PO-Revision-Date: 2015-06-22 13:14+0000\n"
"Last-Translator: Jannis Leidel <jannis@leidel.info>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/django-docs/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 109f29a038fc4d1ca2e3528694ce8eef
#: ../../../../1.8/docs/howto/auth-remote-user.txt:3
msgid "Authentication using ``REMOTE_USER``"
msgstr "Autenticación con el uso de ``REMOTE_USER``"

# 5dbfb7e1e2d84c6db6f0334e72a2abce
#: ../../../../1.8/docs/howto/auth-remote-user.txt:5
msgid ""
"This document describes how to make use of external authentication sources "
"(where the Web server sets the ``REMOTE_USER`` environment variable) in your"
" Django applications.  This type of authentication solution is typically "
"seen on intranet sites, with single sign-on solutions such as IIS and "
"Integrated Windows Authentication or Apache and `mod_authnz_ldap`_, `CAS`_, "
"`Cosign`_, `WebAuth`_, `mod_auth_sspi`_, etc."
msgstr ""

# 8842702c7fbd4681ac065a3ed5cfc66d
#: ../../../../1.8/docs/howto/auth-remote-user.txt:18
msgid ""
"When the Web server takes care of authentication it typically sets the "
"``REMOTE_USER`` environment variable for use in the underlying application."
"  In Django, ``REMOTE_USER`` is made available in the :attr:`request.META "
"<django.http.HttpRequest.META>` attribute.  Django can be configured to make"
" use of the ``REMOTE_USER`` value using the ``RemoteUserMiddleware`` and "
":class:`~django.contrib.auth.backends.RemoteUserBackend` classes found in "
":mod:`django.contrib.auth`."
msgstr ""

# 56e86c173b904d0095cc7cc260a78f2f
#: ../../../../1.8/docs/howto/auth-remote-user.txt:27
msgid "Configuration"
msgstr "Configuración"

# 9b0267b4794f4c6e974cf6c2cbb398d3
#: ../../../../1.8/docs/howto/auth-remote-user.txt:29
msgid ""
"First, you must add the "
":class:`django.contrib.auth.middleware.RemoteUserMiddleware` to the "
":setting:`MIDDLEWARE_CLASSES` setting **after** the "
":class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"
msgstr "Primeramente, debes añadir la clase :class:`django.contrib.auth.middleware.RemoteUserMiddleware` a la configuración :setting:`MIDDLEWARE_CLASSES` **después** de :class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"

# b7aa95548349497e839b03f8926d3889
#: ../../../../1.8/docs/howto/auth-remote-user.txt:41
msgid ""
"Next, you must replace the "
":class:`~django.contrib.auth.backends.ModelBackend` with "
":class:`~django.contrib.auth.backends.RemoteUserBackend` in the "
":setting:`AUTHENTICATION_BACKENDS` setting::"
msgstr "Luego, debes remplazar la clase :class:`~django.contrib.auth.backends.ModelBackend` por :class:`~django.contrib.auth.backends.RemoteUserBackend` en la configuración :setting:`AUTHENTICATION_BACKENDS`::"

# 36cb20a992da41148e50b7aeb2c83eb5
#: ../../../../1.8/docs/howto/auth-remote-user.txt:49
msgid ""
"With this setup, ``RemoteUserMiddleware`` will detect the username in "
"``request.META['REMOTE_USER']`` and will authenticate and auto-login that "
"user using the :class:`~django.contrib.auth.backends.RemoteUserBackend`."
msgstr "Con esta configuración, ``RemoteUserMiddleware`` detectará el usuario en ``request.META['REMOTE_USER']`` y autenticará e iniciará automáticamente la sesión de usuario usando :class:`~django.contrib.auth.backends.RemoteUserBackend`."

# f9f6ab01a1bf4762ba5e0b307679d567
#: ../../../../1.8/docs/howto/auth-remote-user.txt:53
msgid ""
"Be aware that this particular setup disables authentication with the default"
" ``ModelBackend``. This means that if the ``REMOTE_USER`` value is not set "
"then the user is unable to log in, even using Django's admin interface. "
"Adding ``'django.contrib.auth.backends.ModelBackend'`` to the "
"``AUTHENTICATION_BACKENDS`` list will use ``ModelBackend`` as a fallback if "
"``REMOTE_USER`` is absent, which will solve these issues."
msgstr ""

# f34ebf4ebf89495aa918474f457d6f6d
#: ../../../../1.8/docs/howto/auth-remote-user.txt:60
msgid ""
"Django's user management, such as the views in ``contrib.admin`` and the "
":djadmin:`createsuperuser` management command, doesn't integrate with remote"
" users. These interfaces work with users stored in the database regardless "
"of ``AUTHENTICATION_BACKENDS``."
msgstr ""

# 710b22e019504fe193e2dad98f8b2d2a
#: ../../../../1.8/docs/howto/auth-remote-user.txt:66
msgid ""
"Since the ``RemoteUserBackend`` inherits from ``ModelBackend``, you will "
"still have all of the same permissions checking that is implemented in "
"``ModelBackend``."
msgstr "Como ``RemoteUserBackend`` hereda de ``ModelBackend``, todavía tendrás la misma comprobación de permisos implementada en ``ModelBackend``."

# 0774b642d213410fa432fc92dc2b4512
#: ../../../../1.8/docs/howto/auth-remote-user.txt:70
msgid ""
"If your authentication mechanism uses a custom HTTP header and not "
"``REMOTE_USER``, you can subclass ``RemoteUserMiddleware`` and set the "
"``header`` attribute to the desired ``request.META`` key.  For example::"
msgstr "Si tu mecanismo de autenticación usa una cabecera HTTP personalizada y no ``REMOTE_USER``, puedes crear una clase hija de ``RemoteUserMiddleware`` y configurar el atributo ``header`` con la llave de ``request.META`` deseada. Por ejemplo::"

# d760006a87a945a0853b9931dba357fa
#: ../../../../1.8/docs/howto/auth-remote-user.txt:81
msgid ""
"Be very careful if using a ``RemoteUserMiddleware`` subclass with a custom "
"HTTP header. You must be sure that your front-end web server always sets or "
"strips that header based on the appropriate authentication checks, never "
"permitting an end-user to submit a fake (or \"spoofed\") header value. Since"
" the HTTP headers ``X-Auth-User`` and ``X-Auth_User`` (for example) both "
"normalize to the ``HTTP_X_AUTH_USER`` key in ``request.META``, you must also"
" check that your web server doesn't allow a spoofed header using underscores"
" in place of dashes."
msgstr ""

# 4bde2b9e98c848b0a2b05d26b8bf00fa
#: ../../../../1.8/docs/howto/auth-remote-user.txt:90
msgid ""
"This warning doesn't apply to ``RemoteUserMiddleware`` in its default "
"configuration with ``header = 'REMOTE_USER'``, since a key that doesn't "
"start with ``HTTP_`` in ``request.META`` can only be set by your WSGI "
"server, not directly from an HTTP request header."
msgstr "Esta advertencia no se aplica a ``RemoteUserMiddleware`` en su configuración por omisión con ``header = 'REMOTE_USER'``, pues las llaves de ``request.META`` que no comiencen con ``HTTP_`` solo pueden ser establecidas por el servidor WSGI, no directamente desde una cabecera de petición HTTP."

# 948a9913714345839f0159610d268b16
#: ../../../../1.8/docs/howto/auth-remote-user.txt:95
msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"and override one or more of its attributes and methods."
msgstr "Si necesitas más control, puedes crear tu propio backend de autenticación que herede de :class:`~django.contrib.auth.backends.RemoteUserBackend` y redefinir uno o más de sus atributos y métodos."

# 009f7d7c99a14da1a726e8badb057026
#: ../../../../1.8/docs/howto/custom-file-storage.txt:2
msgid "Writing a custom storage system"
msgstr "Creación de sistema de almacenamiento personalizado"

# ee9ffaa1d3b24cdf83ce6d5e257d736f
#: ../../../../1.8/docs/howto/custom-file-storage.txt:6
msgid ""
"If you need to provide custom file storage -- a common example is storing "
"files on some remote system -- you can do so by defining a custom storage "
"class. You'll need to follow these steps:"
msgstr "Si necesitas proporcionar un almacenamiento de archivos personalizado -un ejemplo común es almacenar archivos en algún sistema de archivos remoto- puedes hacerlo definiendo una clase de almacenamiento personalizada. Deberás seguir estos pasos:"

# 2a70b21b2b2c4bf096289fffe4f050f5
#: ../../../../1.8/docs/howto/custom-file-storage.txt:10
msgid ""
"Your custom storage system must be a subclass of "
"``django.core.files.storage.Storage``::"
msgstr "Tu sistema de almacenamiento personalizado debe heredar de ``django.core.files.storage.Storage``::"

# 91ba17811e31467490f01d7d333bbcde
#: ../../../../1.8/docs/howto/custom-file-storage.txt:18
msgid ""
"Django must be able to instantiate your storage system without any "
"arguments. This means that any settings should be taken from "
"``django.conf.settings``::"
msgstr "Djando debe ser capaz de crear una instancia de tu sistema de almacenamiento sin pasarle argumentos. Esto significa que cualquier ajuste debe ser tomado de ``django.conf.settings``::"

# 04071ee179c249038320223597e558cc
#: ../../../../1.8/docs/howto/custom-file-storage.txt:30
msgid ""
"Your storage class must implement the :meth:`_open()` and :meth:`_save()` "
"methods, along with any other methods appropriate to your storage class. See"
" below for more on these methods."
msgstr "La clase de almacenamiento deberá implementar los métodos :meth:`_open()` y :meth:`_save()`, junto con cualquier otro método apropiado para tu clase de almacenamiento. Observar debajo más sobre estos métodos."

# 073dcf9ec66a44ef98dbac3d251ce913
#: ../../../../1.8/docs/howto/custom-file-storage.txt:34
msgid ""
"In addition, if your class provides local file storage, it must override the"
" ``path()`` method."
msgstr "Adicionalmente, la clase proporciona almacenamiento local de archivos, debe redefinir el método ``path()``."

# c6bf43678bd14507b9ba438b78bbdd96
#: ../../../../1.8/docs/howto/custom-file-storage.txt:37
msgid ""
"Your storage class must be :ref:`deconstructible <custom-deconstruct-"
"method>` so it can be serialized when it's used on a field in a migration. "
"As long as your field has arguments that are themselves :ref:`serializable "
"<migration-serializing>`, you can use the "
"``django.utils.deconstruct.deconstructible`` class decorator for this "
"(that's what Django uses on FileSystemStorage)."
msgstr "La clase de almacenamiento debe ser :ref:`deconstruible <custom-deconstruct-method>` para que pueda ser serializada al usarse en un campo en una migración. Siempre y cuando el campo tenga argumentos que sean :ref:`serializables <migration-serializing>` por sí mismos, puedes usar el decorador de clase ``django.utils.deconstruct.deconstructible`` con este propósito (es lo que Django usa en FileSystemStorage)."

# 9c44072ea8a14af18617832234eb4799
#: ../../../../1.8/docs/howto/custom-file-storage.txt:44
msgid ""
"By default, the following methods raise `NotImplementedError` and will "
"typically have to be overridden:"
msgstr "Por omisión, los siguientes métodos lanzan como excepción `NotImplementedError` por lo que deberán ser redefinidos:"

# f229f601f7824346bf94d3a85c962045
#: ../../../../1.8/docs/howto/custom-file-storage.txt:47
msgid ":meth:`Storage.delete`"
msgstr ":meth:`Storage.delete`"

# 06c7b7b55b134ac0bc68f96ce8ac1ffb
#: ../../../../1.8/docs/howto/custom-file-storage.txt:48
msgid ":meth:`Storage.exists`"
msgstr ":meth:`Storage.exists`"

# a3bcd3d793344763b884abb480f3de6d
#: ../../../../1.8/docs/howto/custom-file-storage.txt:49
msgid ":meth:`Storage.listdir`"
msgstr ":meth:`Storage.listdir`"

# af6500a900af4cd2baa43a18f1bcd421
#: ../../../../1.8/docs/howto/custom-file-storage.txt:50
msgid ":meth:`Storage.size`"
msgstr ":meth:`Storage.size`"

# 5090a4701c904846a3c4c82be5d99022
#: ../../../../1.8/docs/howto/custom-file-storage.txt:51
msgid ":meth:`Storage.url`"
msgstr ":meth:`Storage.url`"

# 9658b9c81c3345c5825fed9bcd83e253
#: ../../../../1.8/docs/howto/custom-file-storage.txt:53
msgid ""
"Note however that not all these methods are required and may be deliberately"
" omitted. As it happens, it is possible to leave each method unimplemented "
"and still have a working Storage."
msgstr "Nótese sin embargo que no todos estos métodos son requeridos y pueden ser omitidos. Como suele ocurrir, es posible dejar cada método sin ser implementado y tener un Storage funcional."

# 4ae33ac184e046d7a388779a536e1dab
#: ../../../../1.8/docs/howto/custom-file-storage.txt:57
msgid ""
"By way of example, if listing the contents of certain storage backends turns"
" out to be expensive, you might decide not to implement `Storage.listdir`."
msgstr "Por medio de ejemplos, si listar el contenido de cierto backend de almacenamiento se vuelve costoso, puedes decidir si implementar `Storage.listdir`."

# 02ab5c1d8ecc4d758636db5520956d9e
#: ../../../../1.8/docs/howto/custom-file-storage.txt:60
msgid ""
"Another example would be a backend that only handles writing to files. In "
"this case, you would not need to implement any of the above methods."
msgstr "Otro ejemplo sería un backend que solo contemple la escritura de archivos. En este caso, no necesitarías implementar ninguno de los métodos de arriba."

# 713bb33fb5a941cabdca9ad257368e70
#: ../../../../1.8/docs/howto/custom-file-storage.txt:63
msgid ""
"Ultimately, which of these methods are implemented is up to you. Leaving "
"some methods unimplemented will result in a partial (possibly broken) "
"interface."
msgstr "Por último, la implementación de estos métodos depende de ti. Dejar algunos sin implementar darían una interfaz parcial (posiblemente rota)."

# 0bb45e27fa324f64b2eabf617c64fd57
#: ../../../../1.8/docs/howto/custom-file-storage.txt:66
msgid ""
"You'll also usually want to use hooks specifically designed for custom "
"storage objects. These are:"
msgstr ""

# 73b2a7b8c58c40299082d064cd72ebe0
#: ../../../../1.8/docs/howto/custom-file-storage.txt:71
msgid "**Required**."
msgstr "**Requerido**"

# 30e0e0b50f75436db020eeb2a05439de
#: ../../../../1.8/docs/howto/custom-file-storage.txt:73
msgid ""
"Called by ``Storage.open()``, this is the actual mechanism the storage class"
" uses to open the file. This must return a ``File`` object, though in most "
"cases, you'll want to return some subclass here that implements logic "
"specific to the backend storage system."
msgstr ""

# f48274b1217e4b6694e25463ca319afd
#: ../../../../1.8/docs/howto/custom-file-storage.txt:80
msgid ""
"Called by ``Storage.save()``. The ``name`` will already have gone through "
"``get_valid_name()`` and ``get_available_name()``, and the ``content`` will "
"be a ``File`` object itself."
msgstr ""

# 4557ec32a13e4a7eb716505792713f71
#: ../../../../1.8/docs/howto/custom-file-storage.txt:84
msgid ""
"Should return the actual name of name of the file saved (usually the "
"``name`` passed in, but if the storage needs to change the file name return "
"the new name instead)."
msgstr ""

# f397e92cf213487193987c1483e9d249
#: ../../../../1.8/docs/howto/custom-file-storage.txt:90
msgid ""
"Returns a filename suitable for use with the underlying storage system. The "
"``name`` argument passed to this method is the original filename sent to the"
" server, after having any path information removed. Override this to "
"customize how non-standard characters are converted to safe filenames."
msgstr ""

# 17ffa626785d4cc0ac7750b5d50bf5fb
#: ../../../../1.8/docs/howto/custom-file-storage.txt:95
msgid ""
"The code provided on ``Storage`` retains only alpha-numeric characters, "
"periods and underscores from the original filename, removing everything "
"else."
msgstr ""

# 9f16f7455a554f7c847408941a65e06c
#: ../../../../1.8/docs/howto/custom-file-storage.txt:100
msgid ""
"Returns a filename that is available in the storage mechanism, possibly "
"taking the provided filename into account. The ``name`` argument passed to "
"this method will have already cleaned to a filename valid for the storage "
"system, according to the ``get_valid_name()`` method described above."
msgstr ""

# c43742205fe54609918dfebd6ab6c490
#: ../../../../1.8/docs/howto/custom-file-storage.txt:105
msgid ""
"The length of the filename will not exceed ``max_length``, if provided. If a"
" free unique filename cannot be found, a :exc:`SuspiciousFileOperation "
"<django.core.exceptions.SuspiciousOperation>` exception is raised."
msgstr ""

# 60bd57cfbd76456b98b77d55766e093c
#: ../../../../1.8/docs/howto/custom-file-storage.txt:109
msgid ""
"If a file with ``name`` already exists, an underscore plus a random 7 "
"character alphanumeric string is appended to the filename before the "
"extension."
msgstr ""

# 0bce684e195147d69652cf0277064095
#: ../../../../1.8/docs/howto/custom-file-storage.txt:114
msgid ""
"Previously, an underscore followed by a number (e.g. ``\"_1\"``, ``\"_2\"``,"
" etc.) was appended to the filename until an available name in the "
"destination directory was found. A malicious user could exploit this "
"deterministic algorithm to create a denial-of-service attack. This change "
"was also made in Django 1.6.6, 1.5.9, and 1.4.14."
msgstr ""

# 6e8ad06d02854b91bf7d6144a3bb1f7c
#: ../../../../1.8/docs/howto/custom-file-storage.txt:122
msgid "The ``max_length`` argument was added."
msgstr ""

# 60f42ba7e48148aeb1a8a7740f5e8920
#: ../../../../1.8/docs/howto/custom-lookups.txt:3
msgid "Custom Lookups"
msgstr ""

# 291b1dcc53984e0fb676b222fdf07b05
#: ../../../../1.8/docs/howto/custom-lookups.txt:9
msgid ""
"Django offers a wide variety of :ref:`built-in lookups <field-lookups>` for "
"filtering (for example, ``exact`` and ``icontains``). This documentation "
"explains how to write custom lookups and how to alter the working of "
"existing lookups. For the API references of lookups, see the "
":doc:`/ref/models/lookups`."
msgstr ""

# 82c5496ad1cd4d2aa6473fcbe69bdf56
#: ../../../../1.8/docs/howto/custom-lookups.txt:15
msgid "A simple lookup example"
msgstr ""

# f3bba37033cf4a4f878aaf49a5a37b3c
#: ../../../../1.8/docs/howto/custom-lookups.txt:17
msgid ""
"Let's start with a simple custom lookup. We will write a custom lookup "
"``ne`` which works opposite to ``exact``. "
"``Author.objects.filter(name__ne='Jack')`` will translate to the SQL::"
msgstr ""

# 085fe1f56a8a4cd8a565e65ac3d364cb
#: ../../../../1.8/docs/howto/custom-lookups.txt:23
msgid ""
"This SQL is backend independent, so we don't need to worry about different "
"databases."
msgstr ""

# 9408b2e740ad47aeb3e8d43817b8d95f
#: ../../../../1.8/docs/howto/custom-lookups.txt:26
msgid ""
"There are two steps to making this work. Firstly we need to implement the "
"lookup, then we need to tell Django about it. The implementation is quite "
"straightforward::"
msgstr ""

# 1175148938144e038c05d272815953f1
#: ../../../../1.8/docs/howto/custom-lookups.txt:41
msgid ""
"To register the ``NotEqual`` lookup we will just need to call "
"``register_lookup`` on the field class we want the lookup to be available. "
"In this case, the lookup makes sense on all ``Field`` subclasses, so we "
"register it with ``Field`` directly::"
msgstr ""

# f4266a014c4c48c8a2a5661eb1c85e53
#: ../../../../1.8/docs/howto/custom-lookups.txt:49
msgid "Lookup registration can also be done using a decorator pattern::"
msgstr ""

# 84d60eb225c542ab882666396e89b0d1
#: ../../../../1.8/docs/howto/custom-lookups.txt:59
msgid "The ability to use the decorator pattern was added."
msgstr ""

# 41d610277655475ca17e515609f467a1
#: ../../../../1.8/docs/howto/custom-lookups.txt:61
msgid ""
"We can now use ``foo__ne`` for any field ``foo``. You will need to ensure "
"that this registration happens before you try to create any querysets using "
"it. You could place the implementation in a ``models.py`` file, or register "
"the lookup in the ``ready()`` method of an ``AppConfig``."
msgstr ""

# c715ada7f63840f788b9633e6b0dbba6
#: ../../../../1.8/docs/howto/custom-lookups.txt:66
msgid ""
"Taking a closer look at the implementation, the first required attribute is "
"``lookup_name``. This allows the ORM to understand how to interpret "
"``name__ne`` and use ``NotEqual`` to generate the SQL. By convention, these "
"names are always lowercase strings containing only letters, but the only "
"hard requirement is that it must not contain the string ``__``."
msgstr ""

# 51a86077b3d04e7692087a5915d0cdc4
#: ../../../../1.8/docs/howto/custom-lookups.txt:72
msgid ""
"We then need to define the ``as_sql`` method. This takes a ``SQLCompiler`` "
"object, called ``compiler``,  and the active database connection. "
"``SQLCompiler`` objects are not documented, but the only thing we need to "
"know about them is that they have a ``compile()`` method which returns a "
"tuple containing a SQL string, and the parameters to be interpolated into "
"that string. In most cases, you don't need to use it directly and can pass "
"it on to ``process_lhs()`` and ``process_rhs()``."
msgstr ""

# 0553de331ff24f32b6d0acb2f94c59dd
#: ../../../../1.8/docs/howto/custom-lookups.txt:80
msgid ""
"A ``Lookup`` works against two values, ``lhs`` and ``rhs``, standing for "
"left-hand side and right-hand side. The left-hand side is usually a field "
"reference, but it can be anything implementing the :ref:`query expression "
"API <query-expression>`. The right-hand is the value given by the user. In "
"the example ``Author.objects.filter(name__ne='Jack')``, the left-hand side "
"is a reference to the ``name`` field of the ``Author`` model, and ``'Jack'``"
" is the right-hand side."
msgstr ""

# b4872331b9744d5abf986d4c5aee0170
#: ../../../../1.8/docs/howto/custom-lookups.txt:88
msgid ""
"We call ``process_lhs`` and ``process_rhs`` to convert them into the values "
"we need for SQL using the ``compiler`` object described before. These "
"methods return tuples containing some SQL and the parameters to be "
"interpolated into that SQL, just as we need to return from our ``as_sql`` "
"method. In the above example, ``process_lhs`` returns "
"``('\"author\".\"name\"', [])`` and ``process_rhs`` returns ``('\"%s\"', "
"['Jack'])``. In this example there were no parameters for the left hand "
"side, but this would depend on the object we have, so we still need to "
"include them in the parameters we return."
msgstr ""

# f8b36fd14c084c0f8e7c60b1dfd25df5
#: ../../../../1.8/docs/howto/custom-lookups.txt:97
msgid ""
"Finally we combine the parts into a SQL expression with ``<>``, and supply "
"all the parameters for the query. We then return a tuple containing the "
"generated SQL string and the parameters."
msgstr ""

# a944f344312840469febb2c50bc74cd5
#: ../../../../1.8/docs/howto/custom-lookups.txt:102
msgid "A simple transformer example"
msgstr ""

# f8b806e948a74309a30f1b3f4c68ccf3
#: ../../../../1.8/docs/howto/custom-lookups.txt:104
msgid ""
"The custom lookup above is great, but in some cases you may want to be able "
"to chain lookups together. For example, let's suppose we are building an "
"application where we want to make use of the ``abs()`` operator. We have an "
"``Experiment`` model which records a start value, end value, and the change "
"(start - end). We would like to find all experiments where the change was "
"equal to a certain amount (``Experiment.objects.filter(change__abs=27)``), "
"or where it did not exceed a certain amount "
"(``Experiment.objects.filter(change__abs__lt=27)``)."
msgstr ""

# cd11cef99edd4e6496b0671f62da9f66
#: ../../../../1.8/docs/howto/custom-lookups.txt:114
msgid ""
"This example is somewhat contrived, but it nicely demonstrates the range of "
"functionality which is possible in a database backend independent manner, "
"and without duplicating functionality already in Django."
msgstr ""

# 2db3592c5a304321bf01d19ae759cd6e
#: ../../../../1.8/docs/howto/custom-lookups.txt:118
msgid ""
"We will start by writing a ``AbsoluteValue`` transformer. This will use the "
"SQL function ``ABS()`` to transform the value before comparison::"
msgstr ""

# 17191c92b6b749058eb5290e96dd39e5
#: ../../../../1.8/docs/howto/custom-lookups.txt:130
msgid "Next, let's register it for ``IntegerField``::"
msgstr ""

# 6bce4c91d7084edf904904e75d06fb1c
#: ../../../../1.8/docs/howto/custom-lookups.txt:135
msgid ""
"We can now run the queries we had before. "
"``Experiment.objects.filter(change__abs=27)`` will generate the following "
"SQL::"
msgstr ""

# 9b8e7bfa3dab444398437a8236245fa5
#: ../../../../1.8/docs/howto/custom-lookups.txt:140
msgid ""
"By using ``Transform`` instead of ``Lookup`` it means we are able to chain "
"further lookups afterwards. So "
"``Experiment.objects.filter(change__abs__lt=27)`` will generate the "
"following SQL::"
msgstr ""

# e625a36476a2463aa8f98ebcf2d55c70
#: ../../../../1.8/docs/howto/custom-lookups.txt:147
msgid ""
"Note that in case there is no other lookup specified, Django interprets "
"``change__abs=27`` as ``change__abs__exact=27``."
msgstr ""

# 67b6112daaef40eebe118a48aa7d0317
#: ../../../../1.8/docs/howto/custom-lookups.txt:150
msgid ""
"When looking for which lookups are allowable after the ``Transform`` has "
"been applied, Django uses the ``output_field`` attribute. We didn't need to "
"specify this here as it didn't change, but supposing we were applying "
"``AbsoluteValue`` to some field which represents a more complex type (for "
"example a point relative to an origin, or a complex number) then we may have"
" wanted to specify that the transform returns a ``FloatField`` type for "
"further lookups. This can be done by adding an ``output_field`` attribute to"
" the transform::"
msgstr ""

# 16060e92aec0457a84fbcea2071a260d
#: ../../../../1.8/docs/howto/custom-lookups.txt:171
msgid ""
"This ensures that further lookups like ``abs__lte`` behave as they would for"
" a ``FloatField``."
msgstr ""

# 74b9ea7152c14e0c88b294ca065166b4
#: ../../../../1.8/docs/howto/custom-lookups.txt:175
msgid "Writing an efficient abs__lt lookup"
msgstr ""

# fc3ff9dbd3184bc28ec0818b7283a3cf
#: ../../../../1.8/docs/howto/custom-lookups.txt:177
msgid ""
"When using the above written ``abs`` lookup, the SQL produced will not use "
"indexes efficiently in some cases. In particular, when we use "
"``change__abs__lt=27``, this is equivalent to ``change__gt=-27`` AND "
"``change__lt=27``. (For the ``lte`` case we could use the SQL ``BETWEEN``)."
msgstr ""

# e9699016962445fb851b796d0bd54df6
#: ../../../../1.8/docs/howto/custom-lookups.txt:182
msgid ""
"So we would like ``Experiment.objects.filter(change__abs__lt=27)`` to "
"generate the following SQL::"
msgstr ""

# 5587d63df8244275bfa99734e3b6db57
#: ../../../../1.8/docs/howto/custom-lookups.txt:187
msgid "The implementation is::"
msgstr ""

# 45476f04911f4d56ba33fcbc118147c1
#: ../../../../1.8/docs/howto/custom-lookups.txt:202
msgid ""
"There are a couple of notable things going on. First, "
"``AbsoluteValueLessThan`` isn't calling ``process_lhs()``. Instead it skips "
"the transformation of the ``lhs`` done by ``AbsoluteValue`` and uses the "
"original ``lhs``. That is, we want to get ``27`` not ``ABS(27)``. Referring "
"directly to ``self.lhs.lhs`` is safe as ``AbsoluteValueLessThan`` can be "
"accessed only from the ``AbsoluteValue`` lookup, that is the ``lhs`` is "
"always an instance of ``AbsoluteValue``."
msgstr ""

# 0b70d9b014ee4761b0960c859bc542a0
#: ../../../../1.8/docs/howto/custom-lookups.txt:210
msgid ""
"Notice also that  as both sides are used multiple times in the query the "
"params need to contain ``lhs_params`` and ``rhs_params`` multiple times."
msgstr ""

# 0e1334afccd545b7a6c0081f76495e78
#: ../../../../1.8/docs/howto/custom-lookups.txt:213
msgid ""
"The final query does the inversion (``27`` to ``-27``) directly in the "
"database. The reason for doing this is that if the ``self.rhs`` is something"
" else than a plain integer value (for example an ``F()`` reference) we can't"
" do the transformations in Python."
msgstr ""

# 4a05f629f3a446dcb84fe481074e47ae
#: ../../../../1.8/docs/howto/custom-lookups.txt:219
msgid ""
"In fact, most lookups with ``__abs`` could be implemented as range queries "
"like this, and on most database backends it is likely to be more sensible to"
" do so as you can make use of the indexes. However with PostgreSQL you may "
"want to add an index on ``abs(change)`` which would allow these queries to "
"be very efficient."
msgstr ""

# 3dfd8dc23b3d41ababc2b0a9ab3a68b7
#: ../../../../1.8/docs/howto/custom-lookups.txt:226
msgid "A bilateral transformer example"
msgstr ""

# 0b7f54ea35e74ffdb7d81d83326535b2
#: ../../../../1.8/docs/howto/custom-lookups.txt:228
msgid ""
"The ``AbsoluteValue`` example we discussed previously is a transformation "
"which applies to the left-hand side of the lookup. There may be some cases "
"where you want the transformation to be applied to both the left-hand side "
"and the right-hand side. For instance, if you want to filter a queryset "
"based on the equality of the left and right-hand side insensitively to some "
"SQL function."
msgstr ""

# 8dac762877b54a96b41f3e37de2744d9
#: ../../../../1.8/docs/howto/custom-lookups.txt:234
msgid ""
"Let's examine the simple example of case-insensitive transformation here. "
"This transformation isn't very useful in practice as Django already comes "
"with a bunch of built-in case-insensitive lookups, but it will be a nice "
"demonstration of bilateral transformations in a database-agnostic way."
msgstr ""

# fcd00572506140b18a643707db3d2f7e
#: ../../../../1.8/docs/howto/custom-lookups.txt:239
msgid ""
"We define an ``UpperCase`` transformer which uses the SQL function "
"``UPPER()`` to transform the values before comparison. We define "
":attr:`bilateral = True <django.db.models.Transform.bilateral>` to indicate "
"that this transformation should apply to both ``lhs`` and ``rhs``::"
msgstr ""

# b23896b3a23f4db593a00fa92c8c245c
#: ../../../../1.8/docs/howto/custom-lookups.txt:254
msgid "Next, let's register it::"
msgstr ""

# e7983802347b49cd988dbd965d967919
#: ../../../../1.8/docs/howto/custom-lookups.txt:260
msgid ""
"Now, the queryset ``Author.objects.filter(name__upper=\"doe\")`` will "
"generate a case insensitive query like this::"
msgstr ""

# 18642f3f4f894eec93ad86a2580b4296
#: ../../../../1.8/docs/howto/custom-lookups.txt:266
msgid "Writing alternative implementations for existing lookups"
msgstr ""

# 827a1ecf5dfa487bbb57c1d774470efb
#: ../../../../1.8/docs/howto/custom-lookups.txt:268
msgid ""
"Sometimes different database vendors require different SQL for the same "
"operation. For this example we will rewrite a custom implementation for "
"MySQL for the NotEqual operator. Instead of ``<>`` we will be using ``!=`` "
"operator. (Note that in reality almost all databases support both, including"
" all the official databases supported by Django)."
msgstr ""

# 02e1b21128a04ed48d0a1cea278ce073
#: ../../../../1.8/docs/howto/custom-lookups.txt:274
msgid ""
"We can change the behavior on a specific backend by creating a subclass of "
"``NotEqual`` with a ``as_mysql`` method::"
msgstr ""

# 7578d69ceb294b6cbbf8af9bb5c34c95
#: ../../../../1.8/docs/howto/custom-lookups.txt:286
msgid ""
"We can then register it with ``Field``. It takes the place of the original "
"``NotEqual`` class as it has the same ``lookup_name``."
msgstr ""

# 471954e703b74cefb131af3ef22171c9
#: ../../../../1.8/docs/howto/custom-lookups.txt:289
msgid ""
"When compiling a query, Django first looks for ``as_%s % connection.vendor``"
" methods, and then falls back to ``as_sql``. The vendor names for the in-"
"built backends are ``sqlite``, ``postgresql``, ``oracle`` and ``mysql``."
msgstr ""

# 37cd575f23f54c69837daa58a6e38f12
#: ../../../../1.8/docs/howto/custom-lookups.txt:294
msgid "How Django determines the lookups and transforms which are used"
msgstr ""

# 78d4227964094355b26a77e4f47537dc
#: ../../../../1.8/docs/howto/custom-lookups.txt:296
msgid ""
"In some cases you may wish to dynamically change which ``Transform`` or "
"``Lookup`` is returned based on the name passed in, rather than fixing it. "
"As an example, you could have a field which stores coordinates or an "
"arbitrary dimension, and wish to allow a syntax like "
"``.filter(coords__x7=4)`` to return the objects where the 7th coordinate has"
" value 4. In order to do this, you would override ``get_lookup`` with "
"something like::"
msgstr ""

# 20462fdbf2fc4fc38260badb40e1a0ed
#: ../../../../1.8/docs/howto/custom-lookups.txt:314
msgid ""
"You would then define ``get_coordinate_lookup`` appropriately to return a "
"``Lookup`` subclass which handles the relevant value of ``dimension``."
msgstr ""

# e0d1d4d9b9c14c31a23255dccec047a1
#: ../../../../1.8/docs/howto/custom-lookups.txt:317
msgid ""
"There is a similarly named method called ``get_transform()``. "
"``get_lookup()`` should always return a ``Lookup`` subclass, and "
"``get_transform()`` a ``Transform`` subclass. It is important to remember "
"that ``Transform`` objects can be further filtered on, and ``Lookup`` "
"objects cannot."
msgstr ""

# 73d6e39bd55047668a94bfa6881ef25f
#: ../../../../1.8/docs/howto/custom-lookups.txt:322
msgid ""
"When filtering, if there is only one lookup name remaining to be resolved, "
"we will look for a ``Lookup``. If there are multiple names, it will look for"
" a ``Transform``. In the situation where there is only one name and a "
"``Lookup`` is not found, we look for a ``Transform`` and then the ``exact`` "
"lookup on that ``Transform``. All call sequences always end with a "
"``Lookup``. To clarify:"
msgstr ""

# 3fb1f03e49de424d81825ae5f5a73c0e
#: ../../../../1.8/docs/howto/custom-lookups.txt:328
msgid ""
"``.filter(myfield__mylookup)`` will call ``myfield.get_lookup('mylookup')``."
msgstr ""

# f9a7d91bca734535847aaf47aa958a30
#: ../../../../1.8/docs/howto/custom-lookups.txt:329
msgid ""
"``.filter(myfield__mytransform__mylookup)`` will call "
"``myfield.get_transform('mytransform')``, and then "
"``mytransform.get_lookup('mylookup')``."
msgstr ""

# a4e35de5011e41c0b3f566abcd08a06a
#: ../../../../1.8/docs/howto/custom-lookups.txt:332
msgid ""
"``.filter(myfield__mytransform)`` will first call "
"``myfield.get_lookup('mytransform')``, which will fail, so it will fall back"
" to calling ``myfield.get_transform('mytransform')`` and then "
"``mytransform.get_lookup('exact')``."
msgstr ""

# 5ea60e45a9e2401d82245ed16fe258dd
#: ../../../../1.8/docs/howto/custom-management-commands.txt:3
msgid "Writing custom django-admin commands"
msgstr "Creación de comandos personalizados para django-admin"

# 680cbb4730ee416292e6c26f5c65d09c
#: ../../../../1.8/docs/howto/custom-management-commands.txt:7
msgid ""
"Applications can register their own actions with ``manage.py``. For example,"
" you might want to add a ``manage.py`` action for a Django app that you're "
"distributing. In this document, we will be building a custom ``closepoll`` "
"command for the ``polls`` application from the "
":doc:`tutorial</intro/tutorial01>`."
msgstr ""

# e3c74e72b4ac4efcb94d9da3877e1b4c
#: ../../../../1.8/docs/howto/custom-management-commands.txt:13
msgid ""
"To do this, just add a ``management/commands`` directory to the application."
" Django will register a ``manage.py`` command for each Python module in that"
" directory whose name doesn't begin with an underscore. For example::"
msgstr ""

# 6bc166c82765401b88282e870a6faa5a
#: ../../../../1.8/docs/howto/custom-management-commands.txt:29
msgid ""
"On Python 2, be sure to include ``__init__.py`` files in both the "
"``management`` and ``management/commands`` directories as done above or your"
" command will not be detected."
msgstr ""

# 191e54de778a412982cf2c5384446e55
#: ../../../../1.8/docs/howto/custom-management-commands.txt:33
msgid ""
"In this example, the ``closepoll`` command will be made available to any "
"project that includes the ``polls`` application in "
":setting:`INSTALLED_APPS`."
msgstr ""

# e0cf5e654f954cccb0a2a959b221fbde
#: ../../../../1.8/docs/howto/custom-management-commands.txt:36
msgid ""
"The ``_private.py`` module will not be available as a management command."
msgstr "El módulo ``_private.py`` no estará disponible como comando de administración."

# 5afbc9aea3ec4b9b9d7d328b9dfa3e80
#: ../../../../1.8/docs/howto/custom-management-commands.txt:38
msgid ""
"The ``closepoll.py`` module has only one requirement -- it must define a "
"class ``Command`` that extends :class:`BaseCommand` or one of its "
":ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 06eb05ad9c5740fbbc85bd7e69c916aa
#: ../../../../1.8/docs/howto/custom-management-commands.txt:42
msgid "Standalone scripts"
msgstr ""

# 75994c944960433c96da9d97d66e3b2b
#: ../../../../1.8/docs/howto/custom-management-commands.txt:44
msgid ""
"Custom management commands are especially useful for running standalone "
"scripts or for scripts that are periodically executed from the UNIX crontab "
"or from Windows scheduled tasks control panel."
msgstr ""

# 6d55650dfb75443da2bab77d814db118
#: ../../../../1.8/docs/howto/custom-management-commands.txt:48
msgid ""
"To implement the command, edit ``polls/management/commands/closepoll.py`` to"
" look like this::"
msgstr ""

# f9a698d0d92a43d1ae4f0748ef51e80a
#: ../../../../1.8/docs/howto/custom-management-commands.txt:74
msgid ""
"Before Django 1.8, management commands were based on the :py:mod:`optparse` "
"module, and positional arguments were passed in ``*args`` while optional "
"arguments were passed in ``**options``. Now that management commands use "
":py:mod:`argparse` for argument parsing, all arguments are passed in "
"``**options`` by default, unless you name your positional arguments to "
"``args`` (compatibility mode). You are encouraged to exclusively use "
"``**options`` for new commands."
msgstr ""

# 4541e1aa29d84990884b1e77302343a9
#: ../../../../1.8/docs/howto/custom-management-commands.txt:85
msgid ""
"When you are using management commands and wish to provide console output, "
"you should write to ``self.stdout`` and ``self.stderr``, instead of printing"
" to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes "
"much easier to test your custom command. Note also that you don't need to "
"end messages with a newline character, it will be added automatically, "
"unless you specify the ``ending`` parameter::"
msgstr ""

# 7f72abb8987e405db5eaadb1916348db
#: ../../../../1.8/docs/howto/custom-management-commands.txt:95
msgid ""
"The new custom command can be called using ``python manage.py closepoll "
"<poll_id>``."
msgstr ""

# a4c773081002432780f21932b672d271
#: ../../../../1.8/docs/howto/custom-management-commands.txt:98
msgid ""
"The ``handle()`` method takes one or more ``poll_ids`` and sets "
"``poll.opened`` to ``False`` for each one. If the user referenced any "
"nonexistent polls, a :class:`CommandError` is raised. The ``poll.opened`` "
"attribute does not exist in the :doc:`tutorial</intro/tutorial01>` and was "
"added to ``polls.models.Poll`` for this example."
msgstr ""

# 530a7ac5ebb54c0cb9d665f48ac796e0
#: ../../../../1.8/docs/howto/custom-management-commands.txt:107
msgid "Accepting optional arguments"
msgstr ""

# c284d36bb9454bf0ba41bc7ca2e6801e
#: ../../../../1.8/docs/howto/custom-management-commands.txt:109
msgid ""
"The same ``closepoll`` could be easily modified to delete a given poll "
"instead of closing it by accepting additional command line options. These "
"custom options can be added in the :meth:`~BaseCommand.add_arguments` method"
" like this::"
msgstr ""

# 0f5232353df24a99bc09b5bff7a0ee96
#: ../../../../1.8/docs/howto/custom-management-commands.txt:133
msgid ""
"Previously, only the standard :py:mod:`optparse` library was supported and "
"you would have to extend the command ``option_list`` variable with "
"``optparse.make_option()``."
msgstr ""

# 8a45e0de76c24ee78af7f22a3176ef2a
#: ../../../../1.8/docs/howto/custom-management-commands.txt:137
msgid ""
"The option (``delete`` in our example) is available in the options dict "
"parameter of the handle method. See the :py:mod:`argparse` Python "
"documentation for more about ``add_argument`` usage."
msgstr ""

# 177c7ccbf4e249b09e3dbbb277317d3a
#: ../../../../1.8/docs/howto/custom-management-commands.txt:141
msgid ""
"In addition to being able to add custom command line options, all "
":doc:`management commands</ref/django-admin>` can accept some default "
"options such as :djadminopt:`--verbosity` and :djadminopt:`--traceback`."
msgstr ""

# 97e2b961c24b43b9a4a83f918096df54
#: ../../../../1.8/docs/howto/custom-management-commands.txt:148
msgid "Management commands and locales"
msgstr ""

# e3e4beffd9a04b2baafb46882b441c64
#: ../../../../1.8/docs/howto/custom-management-commands.txt:150
msgid ""
"By default, the :meth:`BaseCommand.execute` method deactivates translations "
"because some commands shipped with Django perform several tasks (for "
"example, user-facing content rendering and database population) that require"
" a project-neutral string language."
msgstr ""

# dbd29eb57515421189f5d138a824ad71
#: ../../../../1.8/docs/howto/custom-management-commands.txt:157
msgid ""
"In previous versions, Django forced the \"en-us\" locale instead of "
"deactivating translations."
msgstr ""

# de8f198a520d4762b18377dc32c3ccf9
#: ../../../../1.8/docs/howto/custom-management-commands.txt:160
msgid ""
"If, for some reason, your custom management command needs to use a fixed "
"locale, you should manually activate and deactivate it in your "
":meth:`~BaseCommand.handle` method using the functions provided by the I18N "
"support code::"
msgstr ""

# 6c58b37ec9934e55b51f603eca716fcc
#: ../../../../1.8/docs/howto/custom-management-commands.txt:186
msgid ""
"Another need might be that your command simply should use the locale set in "
"settings and Django should be kept from deactivating it. You can achieve it "
"by using the :data:`BaseCommand.leave_locale_alone` option."
msgstr ""

# 81c8a679465341518e71a3f3b1258944
#: ../../../../1.8/docs/howto/custom-management-commands.txt:190
msgid ""
"When working on the scenarios described above though, take into account that"
" system management commands typically have to be very careful about running "
"in non-uniform locales, so you might need to:"
msgstr ""

# cf86a917f5484579b16ac5915bfa74eb
#: ../../../../1.8/docs/howto/custom-management-commands.txt:194
msgid ""
"Make sure the :setting:`USE_I18N` setting is always ``True`` when running "
"the command (this is a good example of the potential problems stemming from "
"a dynamic runtime environment that Django commands avoid offhand by "
"deactivating translations)."
msgstr ""

# e5655026f5634fe5ad8a321b9b291a24
#: ../../../../1.8/docs/howto/custom-management-commands.txt:199
msgid ""
"Review the code of your command and the code it calls for behavioral "
"differences when locales are changed and evaluate its impact on predictable "
"behavior of your command."
msgstr ""

# cf0715291cad4485a0b31043a8166128
# ee21810571d44e81a8c09eb0e489fb86
# 9b1768b8eece4e54a514f4e3d7c6e8c8
#: ../../../../1.8/docs/howto/custom-management-commands.txt:204
#: ../../../../1.8/docs/howto/static-files/index.txt:143
#: ../../../../1.8/docs/howto/upgrade-version.txt:69
msgid "Testing"
msgstr ""

# 7757f73c3be3450d88b23c7b99e5767c
#: ../../../../1.8/docs/howto/custom-management-commands.txt:206
msgid ""
"Information on how to test custom management commands can be found in the "
":ref:`testing docs <topics-testing-management-commands>`."
msgstr ""

# b3b19c6c94404b63b03758554789b437
#: ../../../../1.8/docs/howto/custom-management-commands.txt:210
msgid "Command objects"
msgstr ""

# c8001dd205e4478c97b4130a84dd901b
#: ../../../../1.8/docs/howto/custom-management-commands.txt:214
msgid "The base class from which all management commands ultimately derive."
msgstr ""

# 732e4710acd34330a935b5c6074afdcc
#: ../../../../1.8/docs/howto/custom-management-commands.txt:216
msgid ""
"Use this class if you want access to all of the mechanisms which parse the "
"command-line arguments and work out what code to call in response; if you "
"don't need to change any of that behavior, consider using one of its "
":ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 1fa3ed47a4f44c29a27d06f8e40eb140
#: ../../../../1.8/docs/howto/custom-management-commands.txt:221
msgid ""
"Subclassing the :class:`BaseCommand` class requires that you implement the "
":meth:`~BaseCommand.handle` method."
msgstr ""

# cad60e238aa044598dbc0f4e959b209b
#: ../../../../1.8/docs/howto/custom-management-commands.txt:225
msgid "Attributes"
msgstr "Atributos"

# fbdb09867339441eb7d6b60608959584
#: ../../../../1.8/docs/howto/custom-management-commands.txt:227
msgid ""
"All attributes can be set in your derived class and can be used in "
":class:`BaseCommand`’s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 19676ce4c5a34df0be2027ce83c39eb0
#: ../../../../1.8/docs/howto/custom-management-commands.txt:232
msgid ""
"A string listing the arguments accepted by the command, suitable for use in "
"help messages; e.g., a command which takes a list of application names might"
" set this to '<app_label app_label ...>'."
msgstr ""

# 3fd60b5fe20d454dbfa3ce93da7231ad
#: ../../../../1.8/docs/howto/custom-management-commands.txt:239
msgid ""
"This should be done now in the :meth:`~BaseCommand.add_arguments()` method, "
"by calling the ``parser.add_argument()`` method. See the ``closepoll`` "
"example above."
msgstr ""

# 1fce4c9dc53549639432103b2bb4f59a
#: ../../../../1.8/docs/howto/custom-management-commands.txt:245
msgid ""
"A boolean indicating whether the command needs to be able to import Django "
"settings; if ``True``, ``execute()`` will verify that this is possible "
"before proceeding. Default value is ``True``."
msgstr ""

# 1a80aee17bcb4f838e2ec08b84cc34bc
#: ../../../../1.8/docs/howto/custom-management-commands.txt:252
msgid ""
"A short description of the command, which will be printed in the help "
"message when the user runs the command ``python manage.py help <command>``."
msgstr "Una breve descripción del comando que será imprimida en el mensaje de ayuda cuando el usuario ejecute  ``python manage.py help <comando>``."

# 96818095f7d74a18be76328d18b08cdf
#: ../../../../1.8/docs/howto/custom-management-commands.txt:260
msgid ""
"If your command defines mandatory positional arguments, you can customize "
"the message error returned in the case of missing arguments. The default is "
"output by :py:mod:`argparse` (\"too few arguments\")."
msgstr ""

# 8241ecea07e84cbf93828e0588f285d4
#: ../../../../1.8/docs/howto/custom-management-commands.txt:266
msgid ""
"This is the list of ``optparse`` options which will be fed into the "
"command's ``OptionParser`` for parsing arguments."
msgstr ""

# 442501043efb49028b3d77d6a428c3cd
#: ../../../../1.8/docs/howto/custom-management-commands.txt:271
msgid ""
"You should now override the :meth:`~BaseCommand.add_arguments` method to add"
" custom arguments accepted by your command. See :ref:`the example above "
"<custom-commands-options>`."
msgstr ""

# a280bf02392b4180bb5563d35e1a58f9
#: ../../../../1.8/docs/howto/custom-management-commands.txt:277
msgid ""
"A boolean indicating whether the command outputs SQL statements; if "
"``True``, the output will automatically be wrapped with ``BEGIN;`` and "
"``COMMIT;``. Default value is ``False``."
msgstr ""

# d285560d188f44cbbc064c6327a02c8a
#: ../../../../1.8/docs/howto/custom-management-commands.txt:285
msgid ""
"A boolean; if ``True``, the entire Django project will be checked for "
"potential problems prior to executing the command. If "
"``requires_system_checks`` is missing, the value of "
"``requires_model_validation`` is used. If the latter flag is missing as "
"well, the default value (``True``) is used. Defining both "
"``requires_system_checks`` and ``requires_model_validation`` will result in "
"an error."
msgstr ""

# 6365fe253b0c4e7ea8d24ceb816562e7
#: ../../../../1.8/docs/howto/custom-management-commands.txt:295
msgid "Replaced by ``requires_system_checks``"
msgstr ""

# 688a9a1ef7194bdbaca72d8e0649fb2f
#: ../../../../1.8/docs/howto/custom-management-commands.txt:298
msgid ""
"A boolean; if ``True``, validation of installed models will be performed "
"prior to executing the command. Default value is ``True``. To validate an "
"individual application's models rather than all applications' models, call "
":meth:`~BaseCommand.validate` from :meth:`~BaseCommand.handle`."
msgstr ""

# 0c6e7cbd984c480b925e37da3e1db9cc
#: ../../../../1.8/docs/howto/custom-management-commands.txt:305
msgid ""
"A boolean indicating whether the locale set in settings should be preserved "
"during the execution of the command instead of being forcibly set to 'en-"
"us'."
msgstr ""

# f34a23e826ae48b8977c13ecdd2e27ad
#: ../../../../1.8/docs/howto/custom-management-commands.txt:308
msgid "Default value is ``False``."
msgstr ""

# 6345820c17f04907b43a737364b968dc
#: ../../../../1.8/docs/howto/custom-management-commands.txt:310
msgid ""
"Make sure you know what you are doing if you decide to change the value of "
"this option in your custom command if it creates database content that is "
"locale-sensitive and such content shouldn't contain any translations (like "
"it happens e.g. with django.contrib.auth permissions) as making the locale "
"differ from the de facto default 'en-us' might cause unintended effects. "
"Seethe `Management commands and locales`_ section above for further details."
msgstr ""

# c3fdc1ef7a4c40188970d7058fd69cbb
#: ../../../../1.8/docs/howto/custom-management-commands.txt:318
msgid ""
"This option can't be ``False`` when the "
":data:`~BaseCommand.can_import_settings` option is set to ``False`` too "
"because attempting to set the locale needs access to settings. This "
"condition will generate a :class:`CommandError`."
msgstr ""

# 1a02356064bf44bbad2ee2264e83cb91
#: ../../../../1.8/docs/howto/custom-management-commands.txt:324
msgid "Methods"
msgstr "Métodos"

# 30a7fbd71e8547ac9afb1c0aa4fbffd6
#: ../../../../1.8/docs/howto/custom-management-commands.txt:326
msgid ""
":class:`BaseCommand` has a few methods that can be overridden but only the "
":meth:`~BaseCommand.handle` method must be implemented."
msgstr ""

# 53caa46c61ab4465b2473b488fc0c841
#: ../../../../1.8/docs/howto/custom-management-commands.txt:329
msgid "Implementing a constructor in a subclass"
msgstr ""

# c2b78b4d7c1d4c2ea396a6651da9346c
#: ../../../../1.8/docs/howto/custom-management-commands.txt:331
msgid ""
"If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you "
"must call :class:`BaseCommand`’s ``__init__``::"
msgstr ""

# 0dad2813877242cc891683864805faff
#: ../../../../1.8/docs/howto/custom-management-commands.txt:343
msgid ""
"Entry point to add parser arguments to handle command line arguments passed "
"to the command. Custom commands should override this method to add both "
"positional and optional arguments accepted by the command. Calling "
"``super()`` is not needed when directly subclassing ``BaseCommand``."
msgstr ""

# 2791daff790f466faccd20ed8c0bac6a
#: ../../../../1.8/docs/howto/custom-management-commands.txt:350
msgid ""
"Returns the Django version, which should be correct for all built-in Django "
"commands. User-supplied commands can override this method to return their "
"own version."
msgstr ""

# e1207ec0ad3d42278772a6cd95bafc29
#: ../../../../1.8/docs/howto/custom-management-commands.txt:356
msgid ""
"Tries to execute this command, performing system checks if needed (as "
"controlled by the :attr:`requires_system_checks` attribute). If the command "
"raises a :class:`CommandError`, it's intercepted and printed to stderr."
msgstr ""

# 076a8d5287bc43da84be06ae6501a846
#: ../../../../1.8/docs/howto/custom-management-commands.txt:360
msgid "Calling a management command in your code"
msgstr ""

# 7aa8edcc601149ffb80fb5c98a27796d
#: ../../../../1.8/docs/howto/custom-management-commands.txt:362
msgid ""
"``execute()`` should not be called directly from your code to execute a "
"command. Use :ref:`call_command <call-command>` instead."
msgstr ""

# b9d6e94ddfeb4a1398b90303de452ccb
#: ../../../../1.8/docs/howto/custom-management-commands.txt:367
msgid ""
"The actual logic of the command. Subclasses must implement this method."
msgstr ""

# 9f5cb89228764a909b485b3f74eef26e
#: ../../../../1.8/docs/howto/custom-management-commands.txt:373
msgid ""
"Uses the system check framework to inspect the entire Django project for "
"potential problems. Serious problems are raised as a :class:`CommandError`; "
"warnings are output to stderr; minor notifications are output to stdout."
msgstr ""

# 7fd82e8c877743cdb8fe89e752352ada
#: ../../../../1.8/docs/howto/custom-management-commands.txt:377
msgid ""
"If ``app_configs`` and ``tags`` are both ``None``, all system checks are "
"performed. ``tags`` can be a list of check tags, like ``compatibility`` or "
"``models``."
msgstr ""

# ecdfc99b892643189940a63e756e3867
#: ../../../../1.8/docs/howto/custom-management-commands.txt:383
msgid "Replaced with the :djadmin:`check` command"
msgstr ""

# 029a7851bdc343799b81743a9e3e7e98
#: ../../../../1.8/docs/howto/custom-management-commands.txt:386
msgid "If ``app`` is None, then all installed apps are checked for errors."
msgstr ""

# b27b5de5d9734e22a813d298ff612644
#: ../../../../1.8/docs/howto/custom-management-commands.txt:391
msgid "BaseCommand subclasses"
msgstr ""

# 8a2ffc65953543d48052e826d86faa9b
#: ../../../../1.8/docs/howto/custom-management-commands.txt:395
msgid ""
"A management command which takes one or more installed application labels as"
" arguments, and does something with each of them."
msgstr ""

# acea8e93b3de4b8195ef0c785d05adf5
#: ../../../../1.8/docs/howto/custom-management-commands.txt:398
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~AppCommand.handle_app_config`, which will be called once "
"for each application."
msgstr ""

# df6b593ffea34684b4a52a0eab538b91
#: ../../../../1.8/docs/howto/custom-management-commands.txt:404
msgid ""
"Perform the command's actions for ``app_config``, which will be an "
":class:`~django.apps.AppConfig` instance corresponding to an application "
"label given on the command line."
msgstr ""

# fbb8834b122b4783a2f4ecab300b1879
#: ../../../../1.8/docs/howto/custom-management-commands.txt:410
msgid ""
"Previously, :class:`AppCommand` subclasses had to implement "
"``handle_app(app, **options)`` where ``app`` was a models module. The new "
"API makes it possible to handle applications without a models module. The "
"fastest way to migrate is as follows::"
msgstr ""

# 3c34166d583a494fac1eb4ec010c5320
#: ../../../../1.8/docs/howto/custom-management-commands.txt:421
msgid ""
"However, you may be able to simplify the implementation by using directly "
"the attributes of ``app_config``."
msgstr ""

# 851c5e76abd94284bbbf2448e0a50b89
#: ../../../../1.8/docs/howto/custom-management-commands.txt:426
msgid ""
"A management command which takes one or more arbitrary arguments (labels) on"
" the command line, and does something with each of them."
msgstr ""

# 040a707b8d7c4f418257d1419e5e5127
#: ../../../../1.8/docs/howto/custom-management-commands.txt:429
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~LabelCommand.handle_label`, which will be called once for "
"each label."
msgstr ""

# 75ee56a0f8dd4ba395eb5d8027cb8efd
#: ../../../../1.8/docs/howto/custom-management-commands.txt:434
msgid ""
"Perform the command's actions for ``label``, which will be the string as "
"given on the command line."
msgstr ""

# dfab509e18b7441bb2320083c91714be
#: ../../../../1.8/docs/howto/custom-management-commands.txt:441
msgid "Use :class:`BaseCommand` instead, which takes no arguments by default."
msgstr ""

# 0463e8946c524ad688e6878bde902d9c
#: ../../../../1.8/docs/howto/custom-management-commands.txt:443
msgid "A command which takes no arguments on the command line."
msgstr ""

# beade61f111f41f098cb9144617889c9
#: ../../../../1.8/docs/howto/custom-management-commands.txt:445
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~NoArgsCommand.handle_noargs`; :meth:`~BaseCommand.handle` "
"itself is overridden to ensure no arguments are passed to the command."
msgstr ""

# 8faa1b38a428476f919b8bbaaa997c93
#: ../../../../1.8/docs/howto/custom-management-commands.txt:451
msgid "Perform this command's actions"
msgstr ""

# f7316d98896c4ab3ac0ebf0280cce0d2
#: ../../../../1.8/docs/howto/custom-management-commands.txt:456
msgid "Command exceptions"
msgstr ""

# 5f3b57670bee40299652077288ede54b
#: ../../../../1.8/docs/howto/custom-management-commands.txt:460
msgid ""
"Exception class indicating a problem while executing a management command."
msgstr ""

# 12068e036c1746e996b9352ec066e900
#: ../../../../1.8/docs/howto/custom-management-commands.txt:462
msgid ""
"If this exception is raised during the execution of a management command "
"from a command line console, it will be caught and turned into a nicely-"
"printed error message to the appropriate output stream (i.e., stderr); as a "
"result, raising this exception (with a sensible description of the error) is"
" the preferred way to indicate that something has gone wrong in the "
"execution of a command."
msgstr ""

# 83d787c3b5ff42ffa46296d33fc774ae
#: ../../../../1.8/docs/howto/custom-management-commands.txt:468
msgid ""
"If a management command is called from code through :ref:`call_command "
"<call-command>`, it's up to you to catch the exception when needed."
msgstr ""

# 874277b0d37848a4965e651e55c7c4b4
#: ../../../../1.8/docs/howto/custom-model-fields.txt:3
msgid "Writing custom model fields"
msgstr ""

# d6314c8b2abf4829bca929222c18798b
#: ../../../../1.8/docs/howto/custom-model-fields.txt:8
msgid "Introduction"
msgstr "Introducción"

# 7118ae31db124a9691d1a4294f22a810
#: ../../../../1.8/docs/howto/custom-model-fields.txt:10
msgid ""
"The :doc:`model reference </topics/db/models>` documentation explains how to"
" use Django's standard field classes -- "
":class:`~django.db.models.CharField`, :class:`~django.db.models.DateField`, "
"etc. For many purposes, those classes are all you'll need. Sometimes, "
"though, the Django version won't meet your precise requirements, or you'll "
"want to use a field that is entirely different from those shipped with "
"Django."
msgstr ""

# 117bd61b4cb54bcea1accfdd58689ec3
#: ../../../../1.8/docs/howto/custom-model-fields.txt:17
msgid ""
"Django's built-in field types don't cover every possible database column "
"type -- only the common types, such as ``VARCHAR`` and ``INTEGER``. For more"
" obscure column types, such as geographic polygons or even user-created "
"types such as `PostgreSQL custom types`_, you can define your own Django "
"``Field`` subclasses."
msgstr ""

# 0f07438a975f45d682d20c8850bfb43a
#: ../../../../1.8/docs/howto/custom-model-fields.txt:24
msgid ""
"Alternatively, you may have a complex Python object that can somehow be "
"serialized to fit into a standard database column type. This is another case"
" where a ``Field`` subclass will help you use your object with your models."
msgstr ""

# aed4d16a949642f9b8480284dbcdf575
#: ../../../../1.8/docs/howto/custom-model-fields.txt:29
msgid "Our example object"
msgstr ""

# 6bb45525d5044f0196c8cb7a4f668b1a
#: ../../../../1.8/docs/howto/custom-model-fields.txt:31
msgid ""
"Creating custom fields requires a bit of attention to detail. To make things"
" easier to follow, we'll use a consistent example throughout this document: "
"wrapping a Python object representing the deal of cards in a hand of "
"Bridge_. Don't worry, you don't have to know how to play Bridge to follow "
"this example. You only need to know that 52 cards are dealt out equally to "
"four players, who are traditionally called *north*, *east*, *south* and "
"*west*.  Our class looks something like this::"
msgstr ""

# c1a5c3ba5f85447abb43d989b5c44837
#: ../../../../1.8/docs/howto/custom-model-fields.txt:53
msgid ""
"This is just an ordinary Python class, with nothing Django-specific about "
"it. We'd like to be able to do things like this in our models (we assume the"
" ``hand`` attribute on the model is an instance of ``Hand``)::"
msgstr ""

# ecf7fda2037d4e4a8a20bce65f5c558f
#: ../../../../1.8/docs/howto/custom-model-fields.txt:64
msgid ""
"We assign to and retrieve from the ``hand`` attribute in our model just like"
" any other Python class. The trick is to tell Django how to handle saving "
"and loading such an object."
msgstr ""

# f9487a3f257348ffa25f51e67a55d6c9
#: ../../../../1.8/docs/howto/custom-model-fields.txt:68
msgid ""
"In order to use the ``Hand`` class in our models, we **do not** have to "
"change this class at all. This is ideal, because it means you can easily "
"write model support for existing classes where you cannot change the source "
"code."
msgstr ""

# d5c45cf18f794b4985ec2a12b31e42bd
#: ../../../../1.8/docs/howto/custom-model-fields.txt:73
msgid ""
"You might only be wanting to take advantage of custom database column types "
"and deal with the data as standard Python types in your models; strings, or "
"floats, for example. This case is similar to our ``Hand`` example and we'll "
"note any differences as we go along."
msgstr ""

# 01a6cd6f635745338e23a6930a5d5ea8
#: ../../../../1.8/docs/howto/custom-model-fields.txt:79
msgid "Background theory"
msgstr ""

# e50967f056a14502937919ff85f1c7c1
#: ../../../../1.8/docs/howto/custom-model-fields.txt:82
msgid "Database storage"
msgstr ""

# 5fb9cad5c082461b921006c2e5a6613f
#: ../../../../1.8/docs/howto/custom-model-fields.txt:84
msgid ""
"The simplest way to think of a model field is that it provides a way to take"
" a normal Python object -- string, boolean, ``datetime``, or something more "
"complex like ``Hand`` -- and convert it to and from a format that is useful "
"when dealing with the database (and serialization, but, as we'll see later, "
"that falls out fairly naturally once you have the database side under "
"control)."
msgstr ""

# f9fb571a2c984562a59a5b0dd434c356
#: ../../../../1.8/docs/howto/custom-model-fields.txt:90
msgid ""
"Fields in a model must somehow be converted to fit into an existing database"
" column type. Different databases provide different sets of valid column "
"types, but the rule is still the same: those are the only types you have to "
"work with. Anything you want to store in the database must fit into one of "
"those types."
msgstr ""

# fc30cc9d532b43cea24a023f0986d17e
#: ../../../../1.8/docs/howto/custom-model-fields.txt:96
msgid ""
"Normally, you're either writing a Django field to match a particular "
"database column type, or there's a fairly straightforward way to convert "
"your data to, say, a string."
msgstr ""

# 08529db71d734838962fde16004a787d
#: ../../../../1.8/docs/howto/custom-model-fields.txt:100
msgid ""
"For our ``Hand`` example, we could convert the card data to a string of 104 "
"characters by concatenating all the cards together in a pre-determined order"
" -- say, all the *north* cards first, then the *east*, *south* and *west* "
"cards. So ``Hand`` objects can be saved to text or character columns in the "
"database."
msgstr ""

# 6c8df6ac53de42faa21120ba92765ed2
#: ../../../../1.8/docs/howto/custom-model-fields.txt:106
msgid "What does a field class do?"
msgstr ""

# 2ca6bc9df51a4fd4b28f94eb3c5f2aab
#: ../../../../1.8/docs/howto/custom-model-fields.txt:108
msgid ""
"All of Django's fields (and when we say *fields* in this document, we always"
" mean model fields and not :doc:`form fields </ref/forms/fields>`) are "
"subclasses of :class:`django.db.models.Field`. Most of the information that "
"Django records about a field is common to all fields -- name, help text, "
"uniqueness and so forth. Storing all that information is handled by "
"``Field``. We'll get into the precise details of what ``Field`` can do later"
" on; for now, suffice it to say that everything descends from ``Field`` and "
"then customizes key pieces of the class behavior."
msgstr ""

# 287066fcad164120bc962e282bd74039
#: ../../../../1.8/docs/howto/custom-model-fields.txt:117
msgid ""
"It's important to realize that a Django field class is not what is stored in"
" your model attributes. The model attributes contain normal Python objects. "
"The field classes you define in a model are actually stored in the ``Meta`` "
"class when the model class is created (the precise details of how this is "
"done are unimportant here). This is because the field classes aren't "
"necessary when you're just creating and modifying attributes. Instead, they "
"provide the machinery for converting between the attribute value and what is"
" stored in the database or sent to the :doc:`serializer "
"</topics/serialization>`."
msgstr ""

# a4ef8b70a3e245f882e10b0bd90c42f2
#: ../../../../1.8/docs/howto/custom-model-fields.txt:126
msgid ""
"Keep this in mind when creating your own custom fields. The Django ``Field``"
" subclass you write provides the machinery for converting between your "
"Python instances and the database/serializer values in various ways (there "
"are differences between storing a value and using a value for lookups, for "
"example). If this sounds a bit tricky, don't worry -- it will become clearer"
" in the examples below. Just remember that you will often end up creating "
"two classes when you want a custom field:"
msgstr ""

# 6e75699827a44da3a5c8c5e330e6fe01
#: ../../../../1.8/docs/howto/custom-model-fields.txt:134
msgid ""
"The first class is the Python object that your users will manipulate. They "
"will assign it to the model attribute, they will read from it for displaying"
" purposes, things like that. This is the ``Hand`` class in our example."
msgstr ""

# c2d4353dea4941e1932ff3a2ae617f73
#: ../../../../1.8/docs/howto/custom-model-fields.txt:139
msgid ""
"The second class is the ``Field`` subclass. This is the class that knows how"
" to convert your first class back and forth between its permanent storage "
"form and the Python form."
msgstr ""

# 1b09da25840a4c4789f2f569e3e224c5
#: ../../../../1.8/docs/howto/custom-model-fields.txt:144
msgid "Writing a field subclass"
msgstr ""

# d20a690cb02649d48467502578d21a22
#: ../../../../1.8/docs/howto/custom-model-fields.txt:146
msgid ""
"When planning your :class:`~django.db.models.Field` subclass, first give "
"some thought to which existing :class:`~django.db.models.Field` class your "
"new field is most similar to. Can you subclass an existing Django field and "
"save yourself some work? If not, you should subclass the "
":class:`~django.db.models.Field` class, from which everything is descended."
msgstr ""

# c00be795125a4124b1b44cd3ac02fc45
#: ../../../../1.8/docs/howto/custom-model-fields.txt:152
msgid ""
"Initializing your new field is a matter of separating out any arguments that"
" are specific to your case from the common arguments and passing the latter "
"to the ``__init__()`` method of :class:`~django.db.models.Field` (or your "
"parent class)."
msgstr ""

# fc87350020d148dbbd1999e45cb7b727
#: ../../../../1.8/docs/howto/custom-model-fields.txt:157
msgid ""
"In our example, we'll call our field ``HandField``. (It's a good idea to "
"call your :class:`~django.db.models.Field` subclass ``<Something>Field``, so"
" it's easily identifiable as a :class:`~django.db.models.Field` subclass.) "
"It doesn't behave like any existing field, so we'll subclass directly from "
":class:`~django.db.models.Field`::"
msgstr ""

# 63b6922660324e2d8527092133a6dd00
#: ../../../../1.8/docs/howto/custom-model-fields.txt:173
msgid ""
"Our ``HandField`` accepts most of the standard field options (see the list "
"below), but we ensure it has a fixed length, since it only needs to hold 52 "
"card values plus their suits; 104 characters in total."
msgstr ""

# c1f413d087cc4b389dd8644fc3ef6227
#: ../../../../1.8/docs/howto/custom-model-fields.txt:179
msgid ""
"Many of Django's model fields accept options that they don't do anything "
"with. For example, you can pass both "
":attr:`~django.db.models.Field.editable` and "
":attr:`~django.db.models.DateField.auto_now` to a "
":class:`django.db.models.DateField` and it will simply ignore the "
":attr:`~django.db.models.Field.editable` parameter "
"(:attr:`~django.db.models.DateField.auto_now` being set implies "
"``editable=False``). No error is raised in this case."
msgstr ""

# 5673aa8e7e2b461f99b4d8afa51c18c0
#: ../../../../1.8/docs/howto/custom-model-fields.txt:188
msgid ""
"This behavior simplifies the field classes, because they don't need to check"
" for options that aren't necessary. They just pass all the options to the "
"parent class and then don't use them later on. It's up to you whether you "
"want your fields to be more strict about the options they select, or to use "
"the simpler, more permissive behavior of the current fields."
msgstr ""

# 34e4a99d25844115844672f8a7d16ac3
#: ../../../../1.8/docs/howto/custom-model-fields.txt:194
msgid "The ``Field.__init__()`` method takes the following parameters:"
msgstr ""

# a8086e8fadeb457593921461190d27ed
#: ../../../../1.8/docs/howto/custom-model-fields.txt:196
msgid ":attr:`~django.db.models.Field.verbose_name`"
msgstr ""

# 6fff3a9ef1ba4bd2b20425406887178d
#: ../../../../1.8/docs/howto/custom-model-fields.txt:197
msgid "``name``"
msgstr ""

# ea989adf02754ecfa1948256a37b65df
#: ../../../../1.8/docs/howto/custom-model-fields.txt:198
msgid ":attr:`~django.db.models.Field.primary_key`"
msgstr ""

# 40891a27f2674cf2a6c0c93aa3d5cec8
#: ../../../../1.8/docs/howto/custom-model-fields.txt:199
msgid ":attr:`~django.db.models.CharField.max_length`"
msgstr ""

# 307f22c7e6994beeb24f279045e62a74
#: ../../../../1.8/docs/howto/custom-model-fields.txt:200
msgid ":attr:`~django.db.models.Field.unique`"
msgstr ""

# d7ed6680abd34377bfa4e417b67e7036
#: ../../../../1.8/docs/howto/custom-model-fields.txt:201
msgid ":attr:`~django.db.models.Field.blank`"
msgstr ""

# d204b77b1e3747fe86b87b3f2e5bc068
#: ../../../../1.8/docs/howto/custom-model-fields.txt:202
msgid ":attr:`~django.db.models.Field.null`"
msgstr ""

# cf8738b490db4628a3cb126d41c056d6
#: ../../../../1.8/docs/howto/custom-model-fields.txt:203
msgid ":attr:`~django.db.models.Field.db_index`"
msgstr ""

# a1a286da062844af86bc311085a2eb3f
#: ../../../../1.8/docs/howto/custom-model-fields.txt:204
msgid ""
"``rel``: Used for related fields (like :class:`ForeignKey`). For advanced "
"use only."
msgstr ""

# 88958306429844368dcc94c0ca07f282
#: ../../../../1.8/docs/howto/custom-model-fields.txt:206
msgid ":attr:`~django.db.models.Field.default`"
msgstr ""

# a451deae29a8480f892f9a81e7046302
#: ../../../../1.8/docs/howto/custom-model-fields.txt:207
msgid ":attr:`~django.db.models.Field.editable`"
msgstr ""

# 11815ab6b7fb48af8d035460265c15ac
#: ../../../../1.8/docs/howto/custom-model-fields.txt:208
msgid ""
"``serialize``: If ``False``, the field will not be serialized when the model"
" is passed to Django's :doc:`serializers </topics/serialization>`. Defaults "
"to ``True``."
msgstr ""

# 2dc9f1d43a9a41129a9fba1fddeded18
#: ../../../../1.8/docs/howto/custom-model-fields.txt:211
msgid ":attr:`~django.db.models.Field.unique_for_date`"
msgstr ""

# 62de249b5656454a86fc8499cd2f7e9e
#: ../../../../1.8/docs/howto/custom-model-fields.txt:212
msgid ":attr:`~django.db.models.Field.unique_for_month`"
msgstr ""

# cd27da34c32545f797b7f5a0c09a2b9b
#: ../../../../1.8/docs/howto/custom-model-fields.txt:213
msgid ":attr:`~django.db.models.Field.unique_for_year`"
msgstr ""

# ea59a5ebd32f4cd7ba29989b50ddf59a
#: ../../../../1.8/docs/howto/custom-model-fields.txt:214
msgid ":attr:`~django.db.models.Field.choices`"
msgstr ""

# 92c032f179c54237bf538f4dfa263ec6
#: ../../../../1.8/docs/howto/custom-model-fields.txt:215
msgid ":attr:`~django.db.models.Field.help_text`"
msgstr ""

# 502e7d5cfab749808b828a7cb9c1fff8
#: ../../../../1.8/docs/howto/custom-model-fields.txt:216
msgid ":attr:`~django.db.models.Field.db_column`"
msgstr ""

# 2825cdef2e3346bbadbbec4af93ea223
#: ../../../../1.8/docs/howto/custom-model-fields.txt:217
msgid ""
":attr:`~django.db.models.Field.db_tablespace`: Only for index creation, if "
"the backend supports :doc:`tablespaces </topics/db/tablespaces>`. You can "
"usually ignore this option."
msgstr ""

# 475ec3c860c1425d9a7706b7fa3e2f57
#: ../../../../1.8/docs/howto/custom-model-fields.txt:220
msgid ""
":attr:`~django.db.models.Field.auto_created`: ``True`` if the field was "
"automatically created, as for the :class:`~django.db.models.OneToOneField` "
"used by model inheritance. For advanced use only."
msgstr ""

# e571e229d5a44362ae05615cae2bb825
#: ../../../../1.8/docs/howto/custom-model-fields.txt:224
msgid ""
"All of the options without an explanation in the above list have the same "
"meaning they do for normal Django fields. See the :doc:`field documentation "
"</ref/models/fields>` for examples and details."
msgstr ""

# f2c932ad619849928311f4dce80065e4
#: ../../../../1.8/docs/howto/custom-model-fields.txt:231
msgid "Field deconstruction"
msgstr ""

# 90cbbbb5ff7548aeabc73c70a13fb06e
#: ../../../../1.8/docs/howto/custom-model-fields.txt:235
msgid ""
"``deconstruct()`` is part of the migrations framework in Django 1.7 and "
"above. If you have custom fields from previous versions they will need this "
"method added before you can use them with migrations."
msgstr ""

# abeced2e016a49b1806cd1ad57fa2d01
#: ../../../../1.8/docs/howto/custom-model-fields.txt:239
msgid ""
"The counterpoint to writing your ``__init__()`` method is writing the "
"``deconstruct()`` method. This method tells Django how to take an instance "
"of your new field and reduce it to a serialized form - in particular, what "
"arguments to pass to ``__init__()`` to re-create it."
msgstr ""

# accc450275ee4acead44aad385108ab1
#: ../../../../1.8/docs/howto/custom-model-fields.txt:244
msgid ""
"If you haven't added any extra options on top of the field you inherited "
"from, then there's no need to write a new ``deconstruct()`` method. If, "
"however, you're, changing the arguments passed in ``__init__()`` (like we "
"are in ``HandField``), you'll need to supplement the values being passed."
msgstr ""

# 6a5e7145d06743b8ac2cc0ac6f3ce6d4
#: ../../../../1.8/docs/howto/custom-model-fields.txt:249
msgid ""
"The contract of ``deconstruct()`` is simple; it returns a tuple of four "
"items: the field's attribute name, the full import path of the field class, "
"the positional arguments (as a list), and the keyword arguments (as a dict)."
" Note this is different from the ``deconstruct()`` method :ref:`for custom "
"classes <custom-deconstruct-method>` which returns a tuple of three things."
msgstr ""

# 3fff489b497748f8822c8ac341355086
#: ../../../../1.8/docs/howto/custom-model-fields.txt:255
msgid ""
"As a custom field author, you don't need to care about the first two values;"
" the base ``Field`` class has all the code to work out the field's attribute"
" name and import path. You do, however, have to care about the positional "
"and keyword arguments, as these are likely the things you are changing."
msgstr ""

# d67492b14d5e4a48be8413749c9be5a1
#: ../../../../1.8/docs/howto/custom-model-fields.txt:260
msgid ""
"For example, in our ``HandField`` class we're always forcibly setting "
"max_length in ``__init__()``. The ``deconstruct()`` method on the base "
"``Field`` class will see this and try to return it in the keyword arguments;"
" thus, we can drop it from the keyword arguments for readability::"
msgstr ""

# 5b489df30da6429f8f9d8268cbb0db09
#: ../../../../1.8/docs/howto/custom-model-fields.txt:278
msgid ""
"If you add a new keyword argument, you need to write code to put its value "
"into ``kwargs`` yourself::"
msgstr ""

# 07e960f330dc40f99c4421a499565a59
#: ../../../../1.8/docs/howto/custom-model-fields.txt:297
msgid ""
"More complex examples are beyond the scope of this document, but remember - "
"for any configuration of your Field instance, ``deconstruct()`` must return "
"arguments that you can pass to ``__init__`` to reconstruct that state."
msgstr ""

# fc9a3d4fe7a34c9e9092b4e70ebddde6
#: ../../../../1.8/docs/howto/custom-model-fields.txt:301
msgid ""
"Pay extra attention if you set new default values for arguments in the "
"``Field`` superclass; you want to make sure they're always included, rather "
"than disappearing if they take on the old default value."
msgstr ""

# d9500beb0caa46ee9d506441564c9f9f
#: ../../../../1.8/docs/howto/custom-model-fields.txt:305
msgid ""
"In addition, try to avoid returning values as positional arguments; where "
"possible, return values as keyword arguments for maximum future "
"compatibility. Of course, if you change the names of things more often than "
"their position in the constructor's argument list, you might prefer "
"positional, but bear in mind that people will be reconstructing your field "
"from the serialized version for quite a while (possibly years), depending "
"how long your migrations live for."
msgstr ""

# 2400a3ce1bed434389db42d485b8ed70
#: ../../../../1.8/docs/howto/custom-model-fields.txt:312
msgid ""
"You can see the results of deconstruction by looking in migrations that "
"include the field, and you can test deconstruction in unit tests by just "
"deconstructing and reconstructing the field::"
msgstr ""

# 2020cf96bb254a95bbe7a2a5fa244b7d
#: ../../../../1.8/docs/howto/custom-model-fields.txt:321
msgid "Documenting your custom field"
msgstr ""

# c26437eff96b43c9825d4e1f83d1f2e3
#: ../../../../1.8/docs/howto/custom-model-fields.txt:323
msgid ""
"As always, you should document your field type, so users will know what it "
"is. In addition to providing a docstring for it, which is useful for "
"developers, you can also allow users of the admin app to see a short "
"description of the field type via the :doc:`django.contrib.admindocs "
"</ref/contrib/admin/admindocs>` application. To do this simply provide "
"descriptive text in a :attr:`~Field.description` class attribute of your "
"custom field. In the above example, the description displayed by the "
"``admindocs`` application for a ``HandField`` will be 'A hand of cards "
"(bridge style)'."
msgstr ""

# dfd7fd2757e74ef1bd1873771922d51b
#: ../../../../1.8/docs/howto/custom-model-fields.txt:332
msgid ""
"In the :mod:`django.contrib.admindocs` display, the field description is "
"interpolated with ``field.__dict__`` which allows the description to "
"incorporate arguments of the field. For example, the description for "
":class:`~django.db.models.CharField` is::"
msgstr ""

# d43d0e4942904b368a028e9bbbbff559
#: ../../../../1.8/docs/howto/custom-model-fields.txt:340
msgid "Useful methods"
msgstr ""

# 3b6c3661d6a74c44b92d0b9d799d7809
#: ../../../../1.8/docs/howto/custom-model-fields.txt:342
msgid ""
"Once you've created your :class:`~django.db.models.Field` subclass, you "
"might consider overriding a few standard methods, depending on your field's "
"behavior. The list of methods below is in approximately decreasing order of "
"importance, so start from the top."
msgstr ""

# fc2d188e830c41dc91c67ed7c8f69234
#: ../../../../1.8/docs/howto/custom-model-fields.txt:350
msgid "Custom database types"
msgstr ""

# 5732f42f4b7c4a47b88c3b67c5222f0c
#: ../../../../1.8/docs/howto/custom-model-fields.txt:352
msgid ""
"Say you've created a PostgreSQL custom type called ``mytype``. You can "
"subclass ``Field`` and implement the :meth:`~Field.db_type` method, like "
"so::"
msgstr ""

# 4ebad3bd629f42f8862f2c8f54fae0e3
#: ../../../../1.8/docs/howto/custom-model-fields.txt:361
msgid ""
"Once you have ``MytypeField``, you can use it in any model, just like any "
"other ``Field`` type::"
msgstr ""

# 77b00d796c844aa69598a1bc43f7fd00
#: ../../../../1.8/docs/howto/custom-model-fields.txt:368
msgid ""
"If you aim to build a database-agnostic application, you should account for "
"differences in database column types. For example, the date/time column type"
" in PostgreSQL is called ``timestamp``, while the same column in MySQL is "
"called ``datetime``. The simplest way to handle this in a "
":meth:`~Field.db_type` method is to check the "
"``connection.settings_dict['ENGINE']`` attribute."
msgstr ""

# 5a5973cbf9bf44b3a1bd98ea37305b27
# 4c22f577faf44a77bee1bd56697793c6
# 2d0be8a2ac0a409ea3e83ceebe6a78a1
#: ../../../../1.8/docs/howto/custom-model-fields.txt:374
#: ../../../../1.8/docs/howto/custom-model-fields.txt:515
#: ../../../../1.8/docs/howto/custom-model-fields.txt:690
msgid "For example::"
msgstr "Por ejemplo::"

# ea8934599124446190352deaa63497e8
#: ../../../../1.8/docs/howto/custom-model-fields.txt:383
msgid ""
"The :meth:`~Field.db_type` method is called by Django when the framework "
"constructs the ``CREATE TABLE`` statements for your application -- that is, "
"when you first create your tables. It is also called when constructing a "
"``WHERE`` clause that includes the model field -- that is, when you retrieve"
" data using QuerySet methods like ``get()``, ``filter()``, and ``exclude()``"
" and have the model field as an argument. It's not called at any other time,"
" so it can afford to execute slightly complex code, such as the "
"``connection.settings_dict`` check in the above example."
msgstr ""

# 0f0d5aa2a2a145f990909f3f30e8be12
#: ../../../../1.8/docs/howto/custom-model-fields.txt:392
msgid ""
"Some database column types accept parameters, such as ``CHAR(25)``, where "
"the parameter ``25`` represents the maximum column length. In cases like "
"these, it's more flexible if the parameter is specified in the model rather "
"than being hard-coded in the ``db_type()`` method. For example, it wouldn't "
"make much sense to have a ``CharMaxlength25Field``, shown here::"
msgstr ""

# 6ebd8a03d3e543b8932f73a7d5993c90
#: ../../../../1.8/docs/howto/custom-model-fields.txt:408
msgid ""
"The better way of doing this would be to make the parameter specifiable at "
"run time -- i.e., when the class is instantiated. To do that, just implement"
" ``Field.__init__()``, like so::"
msgstr ""

# acb29bb336c04ae6b1e7f537bbfe0dd5
#: ../../../../1.8/docs/howto/custom-model-fields.txt:426
msgid ""
"Finally, if your column requires truly complex SQL setup, return ``None`` "
"from :meth:`.db_type`. This will cause Django's SQL creation code to skip "
"over this field. You are then responsible for creating the column in the "
"right table in some other way, of course, but this gives you a way to tell "
"Django to get out of the way."
msgstr ""

# 695401e2372f4b929036e58ed6ec0764
#: ../../../../1.8/docs/howto/custom-model-fields.txt:435
msgid "Converting values to Python objects"
msgstr ""

# f99abbe9214841a4a9ed64f79c0e50e4
#: ../../../../1.8/docs/howto/custom-model-fields.txt:439
msgid ""
"Historically, Django provided a metaclass called ``SubfieldBase`` which "
"always called :meth:`~Field.to_python` on assignment. This did not play "
"nicely with custom database transformations, aggregation, or values queries,"
" so it has been replaced with :meth:`~Field.from_db_value`."
msgstr ""

# 1357ea70edef4ee4a5a7d7c37831f782
#: ../../../../1.8/docs/howto/custom-model-fields.txt:444
msgid ""
"If your custom :class:`~Field` class deals with data structures that are "
"more complex than strings, dates, integers, or floats, then you may need to "
"override :meth:`~Field.from_db_value` and :meth:`~Field.to_python`."
msgstr ""

# e66937485abf4f98993d5d0f8903f547
#: ../../../../1.8/docs/howto/custom-model-fields.txt:448
msgid ""
"If present for the field subclass, ``from_db_value()`` will be called in all"
" circumstances when the data is loaded from the database, including in "
"aggregates and :meth:`~django.db.models.query.QuerySet.values` calls."
msgstr ""

# aee3072029374fe5bfcbef7c1fa02931
#: ../../../../1.8/docs/howto/custom-model-fields.txt:452
msgid ""
"``to_python()`` is called by deserialization and during the "
":meth:`~django.db.models.Model.clean` method used from forms."
msgstr ""

# 14d7bc6941984084a4a250fed4921766
#: ../../../../1.8/docs/howto/custom-model-fields.txt:455
msgid ""
"As a general rule, ``to_python()`` should deal gracefully with any of the "
"following arguments:"
msgstr ""

# eb05101c58a84841a7bfca1376d8b334
#: ../../../../1.8/docs/howto/custom-model-fields.txt:458
msgid ""
"An instance of the correct type (e.g., ``Hand`` in our ongoing example)."
msgstr ""

# b0f018fdfab14089abb3740295dc9273
#: ../../../../1.8/docs/howto/custom-model-fields.txt:460
msgid "A string"
msgstr ""

# da2ab98b9d1c4647b0e12943f3042c63
#: ../../../../1.8/docs/howto/custom-model-fields.txt:462
msgid "``None`` (if the field allows ``null=True``)"
msgstr ""

# 1594d618b5c9462ca85722c08e3ae882
#: ../../../../1.8/docs/howto/custom-model-fields.txt:464
msgid ""
"In our ``HandField`` class, we're storing the data as a VARCHAR field in the"
" database, so we need to be able to process strings and ``None`` in the "
"``from_db_value()``. In ``to_python()``, we need to also handle ``Hand`` "
"instances::"
msgstr ""

# eb38e229755c416482975b44a14204a9
#: ../../../../1.8/docs/howto/custom-model-fields.txt:500
msgid ""
"Notice that we always return a ``Hand`` instance from these methods. That's "
"the Python object type we want to store in the model's attribute."
msgstr ""

# 43cb8b47ab7a424cad3ab833dc217638
#: ../../../../1.8/docs/howto/custom-model-fields.txt:503
msgid ""
"For ``to_python()``, if anything goes wrong during value conversion, you "
"should raise a :exc:`~django.core.exceptions.ValidationError` exception."
msgstr ""

# 16efaf5b8b274af2a61232b9a1ab345e
#: ../../../../1.8/docs/howto/custom-model-fields.txt:509
msgid "Converting Python objects to query values"
msgstr ""

# 6f7817cc111343c6aa3f9d25ed8d4095
#: ../../../../1.8/docs/howto/custom-model-fields.txt:511
msgid ""
"Since using a database requires conversion in both ways, if you override "
":meth:`~Field.to_python` you also have to override "
":meth:`~Field.get_prep_value` to convert Python objects back to query "
"values."
msgstr ""

# 6428e4e42fd94057b50faf2f5274604b
#: ../../../../1.8/docs/howto/custom-model-fields.txt:526
msgid ""
"If your custom field uses the ``CHAR``, ``VARCHAR`` or ``TEXT`` types for "
"MySQL, you must make sure that :meth:`.get_prep_value` always returns a "
"string type. MySQL performs flexible and unexpected matching when a query is"
" performed on these types and the provided value is an integer, which can "
"cause queries to include unexpected objects in their results. This problem "
"cannot occur if you always return a string type from "
":meth:`.get_prep_value`."
msgstr ""

# 0235ad6e111c45bb9edf223f0d786238
#: ../../../../1.8/docs/howto/custom-model-fields.txt:537
msgid "Converting query values to database values"
msgstr ""

# 33b7c85477b84076b1c2bda419dd235c
#: ../../../../1.8/docs/howto/custom-model-fields.txt:539
msgid ""
"Some data types (for example, dates) need to be in a specific format before "
"they can be used by a database backend. :meth:`~Field.get_db_prep_value` is "
"the method where those conversions should be made. The specific connection "
"that will be used for the query is passed as the ``connection`` parameter. "
"This allows you to use backend-specific conversion logic if it is required."
msgstr ""

# 8a61beb5e6aa4670ab96fd088afee956
#: ../../../../1.8/docs/howto/custom-model-fields.txt:546
msgid ""
"For example, Django uses the following method for its :class:`BinaryField`::"
msgstr ""

# 2bfc4bd9e02c4ba3919dc88687542f53
#: ../../../../1.8/docs/howto/custom-model-fields.txt:555
msgid ""
"In case your custom field needs a special conversion when being saved that "
"is not the same as the conversion used for normal query parameters, you can "
"override :meth:`~Field.get_db_prep_save`."
msgstr ""

# 84c320e1b7eb4f7ba997af86d39686e0
#: ../../../../1.8/docs/howto/custom-model-fields.txt:562
msgid "Preprocessing values before saving"
msgstr ""

# 3ffbbce2cbe34ab9975f81bd59d1f291
#: ../../../../1.8/docs/howto/custom-model-fields.txt:564
msgid ""
"If you want to preprocess the value just before saving, you can use "
":meth:`~Field.pre_save`. For example, Django's "
":class:`~django.db.models.DateTimeField` uses this method to set the "
"attribute correctly in the case of "
":attr:`~django.db.models.DateField.auto_now` or "
":attr:`~django.db.models.DateField.auto_now_add`."
msgstr ""

# 057a52aedbf04b5cbc77f5ee74f4ccb9
#: ../../../../1.8/docs/howto/custom-model-fields.txt:570
msgid ""
"If you do override this method, you must return the value of the attribute "
"at the end. You should also update the model's attribute if you make any "
"changes to the value so that code holding references to the model will "
"always see the correct value."
msgstr ""

# 7f52b1f7911d48e4a96f8f9e88d4b168
#: ../../../../1.8/docs/howto/custom-model-fields.txt:578
msgid "Preparing values for use in database lookups"
msgstr ""

# 5091be5ba73c4c8ab84ffedcac2c5ed0
#: ../../../../1.8/docs/howto/custom-model-fields.txt:580
msgid ""
"As with value conversions, preparing a value for database lookups is a two "
"phase process."
msgstr ""

# bea02547d11441b5b0866be1ee9069b6
#: ../../../../1.8/docs/howto/custom-model-fields.txt:583
msgid ""
":meth:`.get_prep_lookup` performs the first phase of lookup preparation: "
"type conversion and data validation."
msgstr ""

# 5bc7e20d0c694205af4332820c56664c
#: ../../../../1.8/docs/howto/custom-model-fields.txt:586
msgid ""
"Prepares the ``value`` for passing to the database when used in a lookup (a "
"``WHERE`` constraint in SQL). The ``lookup_type`` parameter will be one of "
"the valid Django filter lookups: ``exact``, ``iexact``, ``contains``, "
"``icontains``, ``gt``, ``gte``, ``lt``, ``lte``, ``in``, ``startswith``, "
"``istartswith``, ``endswith``, ``iendswith``, ``range``, ``year``, "
"``month``, ``day``, ``isnull``, ``search``, ``regex``, and ``iregex``."
msgstr ""

# 04a3ba0f84064aad94ec92adbcf49a23
#: ../../../../1.8/docs/howto/custom-model-fields.txt:595
msgid ""
"If you are using :doc:`Custom lookups </howto/custom-lookups>` the "
"``lookup_type`` can be any ``lookup_name`` used by the project's custom "
"lookups."
msgstr ""

# 3953be2236e749e1828482f7acee8e97
#: ../../../../1.8/docs/howto/custom-model-fields.txt:599
msgid ""
"Your method must be prepared to handle all of these ``lookup_type`` values "
"and should raise either a ``ValueError`` if the ``value`` is of the wrong "
"sort (a list when you were expecting an object, for example) or a "
"``TypeError`` if your field does not support that type of lookup. For many "
"fields, you can get by with handling the lookup types that need special "
"handling for your field and pass the rest to the "
":meth:`~Field.get_db_prep_lookup` method of the parent class."
msgstr ""

# ac2fd062fe39432da4032e36e689d6f3
#: ../../../../1.8/docs/howto/custom-model-fields.txt:607
msgid ""
"If you needed to implement :meth:`.get_db_prep_save`, you will usually need "
"to implement :meth:`.get_prep_lookup`. If you don't, :meth:`.get_prep_value`"
" will be called by the default implementation, to manage ``exact``, ``gt``, "
"``gte``, ``lt``, ``lte``, ``in`` and ``range`` lookups."
msgstr ""

# 9046e74939584eedaa160a3d77276228
#: ../../../../1.8/docs/howto/custom-model-fields.txt:612
msgid ""
"You may also want to implement this method to limit the lookup types that "
"could be used with your custom field type."
msgstr ""

# 2337f069a4714b2da9a042d6953e3924
#: ../../../../1.8/docs/howto/custom-model-fields.txt:615
msgid ""
"Note that, for ``\"range\"`` and ``\"in\"`` lookups, ``get_prep_lookup`` "
"will receive a list of objects (presumably of the right type) and will need "
"to convert them to a list of things of the right type for passing to the "
"database. Most of the time, you can reuse ``get_prep_value()``, or at least "
"factor out some common pieces."
msgstr ""

# d8c397b8b2d545e5b5d241c5e5e71ec1
#: ../../../../1.8/docs/howto/custom-model-fields.txt:621
msgid ""
"For example, the following code implements ``get_prep_lookup`` to limit the "
"accepted lookup types to ``exact`` and ``in``::"
msgstr ""

# dfbf7f0ff3d14df989e6d8f42ae4be79
#: ../../../../1.8/docs/howto/custom-model-fields.txt:636
msgid ""
"For performing database-specific data conversions required by a lookup, you "
"can override :meth:`~Field.get_db_prep_lookup`."
msgstr ""

# 117e2d4b65944246a6194392e287d55c
#: ../../../../1.8/docs/howto/custom-model-fields.txt:642
msgid "Specifying the form field for a model field"
msgstr ""

# 455227f009264c2490b7f82fe6b5b648
#: ../../../../1.8/docs/howto/custom-model-fields.txt:644
msgid ""
"To customize the form field used by :class:`~django.forms.ModelForm`, you "
"can override :meth:`~Field.formfield`."
msgstr ""

# e4065f706249439ebc60e3bb7d227db2
#: ../../../../1.8/docs/howto/custom-model-fields.txt:647
msgid ""
"The form field class can be specified via the ``form_class`` and "
"``choices_form_class`` arguments; the latter is used if the field has "
"choices specified, the former otherwise. If these arguments are not "
"provided, :class:`~django.forms.CharField` or "
":class:`~django.forms.TypedChoiceField` will be used."
msgstr ""

# 71db17aa3bac4d8db8559a66963fb4e0
#: ../../../../1.8/docs/howto/custom-model-fields.txt:653
msgid ""
"All of the ``kwargs`` dictionary is passed directly to the form field's "
"``__init__()`` method. Normally, all you need to do is set up a good default"
" for the ``form_class`` (and maybe ``choices_form_class``) argument and then"
" delegate further handling to the parent class. This might require you to "
"write a custom form field (and even a form widget). See the :doc:`forms "
"documentation </topics/forms/index>` for information about this."
msgstr ""

# e8af2a9ee32540459c24041014fa7422
#: ../../../../1.8/docs/howto/custom-model-fields.txt:660
msgid ""
"Continuing our ongoing example, we can write the :meth:`~Field.formfield` "
"method as::"
msgstr ""

# cb78b42e89b94fc4a2e348cb27867472
#: ../../../../1.8/docs/howto/custom-model-fields.txt:673
msgid ""
"This assumes we've imported a ``MyFormField`` field class (which has its own"
" default widget). This document doesn't cover the details of writing custom "
"form fields."
msgstr ""

# dec632750eb8450ea1bdf1923937d7ab
#: ../../../../1.8/docs/howto/custom-model-fields.txt:683
msgid "Emulating built-in field types"
msgstr ""

# afd65133a1734df798d38a72ac8ea20e
#: ../../../../1.8/docs/howto/custom-model-fields.txt:685
msgid ""
"If you have created a :meth:`.db_type` method, you don't need to worry about"
" :meth:`.get_internal_type` -- it won't be used much. Sometimes, though, "
"your database storage is similar in type to some other field, so you can use"
" that other field's logic to create the right column."
msgstr ""

# 0ef37f4ed55d4abb82b6b70896864889
#: ../../../../1.8/docs/howto/custom-model-fields.txt:698
msgid ""
"No matter which database backend we are using, this will mean that "
":djadmin:`migrate` and other SQL commands create the right column type for "
"storing a string."
msgstr ""

# 3116f5f6d5874bca8955d9e1cba84c80
#: ../../../../1.8/docs/howto/custom-model-fields.txt:702
msgid ""
"If :meth:`.get_internal_type` returns a string that is not known to Django "
"for the database backend you are using -- that is, it doesn't appear in "
"``django.db.backends.<db_name>.base.DatabaseWrapper.data_types`` -- the "
"string will still be used by the serializer, but the default "
":meth:`~Field.db_type` method will return ``None``. See the documentation of"
" :meth:`~Field.db_type` for reasons why this might be useful. Putting a "
"descriptive string in as the type of the field for the serializer is a "
"useful idea if you're ever going to be using the serializer output in some "
"other place, outside of Django."
msgstr ""

# 33b0f4aca44e47389ef34abb40d9b0ff
#: ../../../../1.8/docs/howto/custom-model-fields.txt:714
msgid "Converting field data for serialization"
msgstr ""

# 02a665270bc14e5682f8e51200d5097a
#: ../../../../1.8/docs/howto/custom-model-fields.txt:716
msgid ""
"To customize how the values are serialized by a serializer, you can override"
" :meth:`~Field.value_to_string`. Calling ``Field._get_val_from_obj(obj)`` is"
" the best way to get the value serialized. For example, since our "
"``HandField`` uses strings for its data storage anyway, we can reuse some "
"existing conversion code::"
msgstr ""

# c8428a18b0024ad3a03226c35f11287d
#: ../../../../1.8/docs/howto/custom-model-fields.txt:729
msgid "Some general advice"
msgstr ""

# 242c40df8fb34d0cb86b75bad33a0161
#: ../../../../1.8/docs/howto/custom-model-fields.txt:731
msgid ""
"Writing a custom field can be a tricky process, particularly if you're doing"
" complex conversions between your Python types and your database and "
"serialization formats. Here are a couple of tips to make things go more "
"smoothly:"
msgstr ""

# 1375e64def724defb551613b612fc6d5
#: ../../../../1.8/docs/howto/custom-model-fields.txt:736
msgid ""
"Look at the existing Django fields (in "
":file:`django/db/models/fields/__init__.py`) for inspiration. Try to find a "
"field that's similar to what you want and extend it a little bit, instead of"
" creating an entirely new field from scratch."
msgstr ""

# 3eff3a0043614614a383040d369e43b9
#: ../../../../1.8/docs/howto/custom-model-fields.txt:741
msgid ""
"Put a ``__str__()`` (``__unicode__()`` on Python 2) method on the class "
"you're wrapping up as a field. There are a lot of places where the default "
"behavior of the field code is to call "
":func:`~django.utils.encoding.force_text` on the value. (In our examples in "
"this document, ``value`` would be a ``Hand`` instance, not a ``HandField``)."
" So if your ``__str__()`` method (``__unicode__()`` on Python 2) "
"automatically converts to the string form of your Python object, you can "
"save yourself a lot of work."
msgstr ""

# 23d96b365c4046149be238907afe45cd
#: ../../../../1.8/docs/howto/custom-model-fields.txt:751
msgid "Writing a ``FileField`` subclass"
msgstr ""

# 72999e9e2689471c9aa17b4e3e8eb5b0
#: ../../../../1.8/docs/howto/custom-model-fields.txt:753
msgid ""
"In addition to the above methods, fields that deal with files have a few "
"other special requirements which must be taken into account. The majority of"
" the mechanics provided by ``FileField``, such as controlling database "
"storage and retrieval, can remain unchanged, leaving subclasses to deal with"
" the challenge of supporting a particular type of file."
msgstr ""

# 3814ee4e3ffa43f797ebbbac21349b85
#: ../../../../1.8/docs/howto/custom-model-fields.txt:759
msgid ""
"Django provides a ``File`` class, which is used as a proxy to the file's "
"contents and operations. This can be subclassed to customize how the file is"
" accessed, and what methods are available. It lives at "
"``django.db.models.fields.files``, and its default behavior is explained in "
"the :doc:`file documentation </ref/files/file>`."
msgstr ""

# c338a322627949b7adb4f13b53491131
#: ../../../../1.8/docs/howto/custom-model-fields.txt:765
msgid ""
"Once a subclass of ``File`` is created, the new ``FileField`` subclass must "
"be told to use it. To do so, simply assign the new ``File`` subclass to the "
"special ``attr_class`` attribute of the ``FileField`` subclass."
msgstr ""

# f4f6a5f4c17d4112bcefd82d892e2747
#: ../../../../1.8/docs/howto/custom-model-fields.txt:770
msgid "A few suggestions"
msgstr ""

# 057f2ea15f334464801149e7e19cdf42
#: ../../../../1.8/docs/howto/custom-model-fields.txt:772
msgid ""
"In addition to the above details, there are a few guidelines which can "
"greatly improve the efficiency and readability of the field's code."
msgstr ""

# 8ba3b30327ca4d1e9c0ecfa083aa8f2f
#: ../../../../1.8/docs/howto/custom-model-fields.txt:775
msgid ""
"The source for Django's own ``ImageField`` (in "
"``django/db/models/fields/files.py``) is a great example of how to subclass "
"``FileField`` to support a particular type of file, as it incorporates all "
"of the techniques described above."
msgstr ""

# 1a498904fac844e1ba32fa8ef0529584
#: ../../../../1.8/docs/howto/custom-model-fields.txt:780
msgid ""
"Cache file attributes wherever possible. Since files may be stored in remote"
" storage systems, retrieving them may cost extra time, or even money, that "
"isn't always necessary. Once a file is retrieved to obtain some data about "
"its content, cache as much of that data as possible to reduce the number of "
"times the file must be retrieved on subsequent calls for that information."
msgstr ""

# 2c09aad1966e48c4ab9e1ec40333b292
#: ../../../../1.8/docs/howto/custom-template-tags.txt:3
msgid "Custom template tags and filters"
msgstr ""

# 4141f4b2951c4c0cbc81de564c157536
#: ../../../../1.8/docs/howto/custom-template-tags.txt:5
msgid ""
"Django's template language comes with a wide variety of :doc:`built-in tags "
"and filters </ref/templates/builtins>` designed to address the presentation "
"logic needs of your application. Nevertheless, you may find yourself needing"
" functionality that is not covered by the core set of template primitives. "
"You can extend the template engine by defining custom tags and filters using"
" Python, and then make them available to your templates using the :ttag:`{% "
"load %}<load>` tag."
msgstr ""

# 9c7b95b2a51c4ee0aea689448a4bb377
#: ../../../../1.8/docs/howto/custom-template-tags.txt:14
msgid "Code layout"
msgstr ""

# 23a9b2bd8e3e4b74b060552aedf76aa3
#: ../../../../1.8/docs/howto/custom-template-tags.txt:16
msgid ""
"Custom template tags and filters must live inside a Django app. If they "
"relate to an existing app it makes sense to bundle them there; otherwise, "
"you should create a new app to hold them."
msgstr ""

# 3d09500867574813ae794677f69c5980
#: ../../../../1.8/docs/howto/custom-template-tags.txt:20
msgid ""
"The app should contain a ``templatetags`` directory, at the same level as "
"``models.py``, ``views.py``, etc. If this doesn't already exist, create it -"
" don't forget the ``__init__.py`` file to ensure the directory is treated as"
" a Python package. After adding this module, you will need to restart your "
"server before you can use the tags or filters in templates."
msgstr ""

# 4d1a68370dba46269fdf231b35ab056d
#: ../../../../1.8/docs/howto/custom-template-tags.txt:26
msgid ""
"Your custom tags and filters will live in a module inside the "
"``templatetags`` directory. The name of the module file is the name you'll "
"use to load the tags later, so be careful to pick a name that won't clash "
"with custom tags and filters in another app."
msgstr ""

# 4bfe9e1d5691469ea34284bc3eb24392
#: ../../../../1.8/docs/howto/custom-template-tags.txt:31
msgid ""
"For example, if your custom tags/filters are in a file called "
"``poll_extras.py``, your app layout might look like this::"
msgstr ""

# 7794393def5242c698d65e2257278014
#: ../../../../1.8/docs/howto/custom-template-tags.txt:42
msgid "And in your template you would use the following:"
msgstr ""

# 2749e06a31f64c9abc52753ff0131178
#: ../../../../1.8/docs/howto/custom-template-tags.txt:48
msgid ""
"The app that contains the custom tags must be in :setting:`INSTALLED_APPS` "
"in order for the :ttag:`{% load %}<load>` tag to work. This is a security "
"feature: It allows you to host Python code for many template libraries on a "
"single host machine without enabling access to all of them for every Django "
"installation."
msgstr ""

# 9c2a2666b7174163a1f67d960f48d3ff
#: ../../../../1.8/docs/howto/custom-template-tags.txt:53
msgid ""
"There's no limit on how many modules you put in the ``templatetags`` "
"package. Just keep in mind that a :ttag:`{% load %}<load>` statement will "
"load tags/filters for the given Python module name, not the name of the app."
msgstr ""

# ecb058f374794299b355e7a366a0f87f
#: ../../../../1.8/docs/howto/custom-template-tags.txt:57
msgid ""
"To be a valid tag library, the module must contain a module-level variable "
"named ``register`` that is a ``template.Library`` instance, in which all the"
" tags and filters are registered. So, near the top of your module, put the "
"following::"
msgstr ""

# e1834d76acef46d1a7eeef090306b38f
#: ../../../../1.8/docs/howto/custom-template-tags.txt:66
msgid "Behind the scenes"
msgstr ""

# 1de141af57914ce4898035744bc69a30
#: ../../../../1.8/docs/howto/custom-template-tags.txt:68
msgid ""
"For a ton of examples, read the source code for Django's default filters and"
" tags. They're in ``django/template/defaultfilters.py`` and "
"``django/template/defaulttags.py``, respectively."
msgstr ""

# d202d3e0b6cf43548370021f7072e62a
#: ../../../../1.8/docs/howto/custom-template-tags.txt:72
msgid "For more information on the :ttag:`load` tag, read its documentation."
msgstr ""

# e1934889fa7f4c6b88e15721273c49c1
#: ../../../../1.8/docs/howto/custom-template-tags.txt:77
msgid "Writing custom template filters"
msgstr ""

# ba65a805785448af90f816262a15cb03
#: ../../../../1.8/docs/howto/custom-template-tags.txt:79
msgid ""
"Custom filters are just Python functions that take one or two arguments:"
msgstr ""

# eb9de31da0dd409cbe926cdebe7d9f1b
#: ../../../../1.8/docs/howto/custom-template-tags.txt:81
msgid "The value of the variable (input) -- not necessarily a string."
msgstr ""

# 10350112ae8f406493482935f10c2616
#: ../../../../1.8/docs/howto/custom-template-tags.txt:82
msgid ""
"The value of the argument -- this can have a default value, or be left out "
"altogether."
msgstr ""

# 9aa1f828e2094cf29bedd1c373475453
#: ../../../../1.8/docs/howto/custom-template-tags.txt:85
msgid ""
"For example, in the filter ``{{ var|foo:\"bar\" }}``, the filter ``foo`` "
"would be passed the variable ``var`` and the argument ``\"bar\"``."
msgstr ""

# 66720f5dfab44d6a842115c047582f59
#: ../../../../1.8/docs/howto/custom-template-tags.txt:88
msgid ""
"Since the template language doesn't provide exception handling, any "
"exception raised from a template filter will be exposed as a server error. "
"Thus, filter functions should avoid raising exceptions if there is a "
"reasonable fallback value to return. In case of input that represents a "
"clear bug in a template, raising an exception may still be better than "
"silent failure which hides the bug."
msgstr ""

# 56fc405778634fd797d37f61370a77a5
#: ../../../../1.8/docs/howto/custom-template-tags.txt:95
msgid "Here's an example filter definition::"
msgstr ""

# 95216f5edfb54a5fb8c4d1139fedf6ea
#: ../../../../1.8/docs/howto/custom-template-tags.txt:101
msgid "And here's an example of how that filter would be used:"
msgstr ""

# 31477138996a41b7924396e292c74c5d
#: ../../../../1.8/docs/howto/custom-template-tags.txt:107
msgid ""
"Most filters don't take arguments. In this case, just leave the argument out"
" of your function. Example::"
msgstr ""

# caef2dde94804501b2192d5a82d15876
#: ../../../../1.8/docs/howto/custom-template-tags.txt:115
msgid "Registering custom filters"
msgstr ""

# 6077f5b40514428586dc149be4f1930b
#: ../../../../1.8/docs/howto/custom-template-tags.txt:119
msgid ""
"Once you've written your filter definition, you need to register it with "
"your ``Library`` instance, to make it available to Django's template "
"language::"
msgstr ""

# 9504fa5d9d6b48cca7a2d630a0b16548
#: ../../../../1.8/docs/howto/custom-template-tags.txt:125
msgid "The ``Library.filter()`` method takes two arguments:"
msgstr ""

# db86cb9868534ad8826859dcbe84c8d7
#: ../../../../1.8/docs/howto/custom-template-tags.txt:127
msgid "The name of the filter -- a string."
msgstr ""

# 9dc6ce09f8a84befa19119ea6f39aada
# 44ba96f8b64c4209ae4591fc11dc610d
#: ../../../../1.8/docs/howto/custom-template-tags.txt:128
#: ../../../../1.8/docs/howto/custom-template-tags.txt:945
msgid ""
"The compilation function -- a Python function (not the name of the function "
"as a string)."
msgstr ""

# 37901fd226b247829ca0702f1cf1076f
#: ../../../../1.8/docs/howto/custom-template-tags.txt:131
msgid "You can use ``register.filter()`` as a decorator instead::"
msgstr ""

# 73ef68dea8c148caa38694a00554b1e8
#: ../../../../1.8/docs/howto/custom-template-tags.txt:141
msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the filter name."
msgstr ""

# 0efe7eae42cb45728bc283e467b43825
#: ../../../../1.8/docs/howto/custom-template-tags.txt:144
msgid ""
"Finally, ``register.filter()`` also accepts three keyword arguments, "
"``is_safe``, ``needs_autoescape``, and ``expects_localtime``. These "
"arguments are described in :ref:`filters and auto-escaping <filters-auto-"
"escaping>` and :ref:`filters and time zones <filters-timezones>` below."
msgstr ""

# c4df7ebc200a444d88235c0d3f3a4e04
#: ../../../../1.8/docs/howto/custom-template-tags.txt:150
msgid "Template filters that expect strings"
msgstr ""

# a5d52130cc9e4659b9efcfefb25166a1
#: ../../../../1.8/docs/howto/custom-template-tags.txt:154
msgid ""
"If you're writing a template filter that only expects a string as the first "
"argument, you should use the decorator ``stringfilter``. This will convert "
"an object to its string value before being passed to your function::"
msgstr ""

# 243b698fc6444e6fa157779f11245abd
#: ../../../../1.8/docs/howto/custom-template-tags.txt:168
msgid ""
"This way, you'll be able to pass, say, an integer to this filter, and it "
"won't cause an ``AttributeError`` (because integers don't have ``lower()`` "
"methods)."
msgstr ""

# 836172b912c14b4f977ec904984c9dbf
#: ../../../../1.8/docs/howto/custom-template-tags.txt:175
msgid "Filters and auto-escaping"
msgstr ""

# ad7a47198e18460aa6307f0362787c49
#: ../../../../1.8/docs/howto/custom-template-tags.txt:177
msgid ""
"When writing a custom filter, give some thought to how the filter will "
"interact with Django's auto-escaping behavior. Note that three types of "
"strings can be passed around inside the template code:"
msgstr ""

# 2203660ee93946aeaa64c34d2823bac3
#: ../../../../1.8/docs/howto/custom-template-tags.txt:181
msgid ""
"**Raw strings** are the native Python ``str`` or ``unicode`` types. On "
"output, they're escaped if auto-escaping is in effect and presented "
"unchanged, otherwise."
msgstr ""

# b290e274c1c947db8d513a5699d7b360
#: ../../../../1.8/docs/howto/custom-template-tags.txt:185
msgid ""
"**Safe strings** are strings that have been marked safe from further "
"escaping at output time. Any necessary escaping has already been done. "
"They're commonly used for output that contains raw HTML that is intended to "
"be interpreted as-is on the client side."
msgstr ""

# 713bfd5147b54c08bc8d99f64af84f20
#: ../../../../1.8/docs/howto/custom-template-tags.txt:190
msgid ""
"Internally, these strings are of type ``SafeBytes`` or ``SafeText``. They "
"share a common base class of ``SafeData``, so you can test for them using "
"code like::"
msgstr ""

# 70ad002515df49db9cff05a179455ba8
#: ../../../../1.8/docs/howto/custom-template-tags.txt:198
msgid ""
"**Strings marked as \"needing escaping\"** are *always* escaped on output, "
"regardless of whether they are in an :ttag:`autoescape` block or not. These "
"strings are only escaped once, however, even if auto-escaping applies."
msgstr ""

# cd06d48f6e494deb946043392207e47c
#: ../../../../1.8/docs/howto/custom-template-tags.txt:203
msgid ""
"Internally, these strings are of type ``EscapeBytes`` or ``EscapeText``. "
"Generally you don't have to worry about these; they exist for the "
"implementation of the :tfilter:`escape` filter."
msgstr ""

# eae93590214d4f9c88a9780e4fd25f1e
#: ../../../../1.8/docs/howto/custom-template-tags.txt:207
msgid "Template filter code falls into one of two situations:"
msgstr ""

# a9eb996025f740c5b6cfa8981644b7a5
#: ../../../../1.8/docs/howto/custom-template-tags.txt:209
msgid ""
"Your filter does not introduce any HTML-unsafe characters (``<``, ``>``, "
"``'``, ``\"`` or ``&``) into the result that were not already present. In "
"this case, you can let Django take care of all the auto-escaping handling "
"for you. All you need to do is set the ``is_safe`` flag to ``True`` when you"
" register your filter function, like so::"
msgstr ""

# 73ec829b7ab042ebb7a439e66a0d1bd7
#: ../../../../1.8/docs/howto/custom-template-tags.txt:219
msgid ""
"This flag tells Django that if a \"safe\" string is passed into your filter,"
" the result will still be \"safe\" and if a non-safe string is passed in, "
"Django will automatically escape it, if necessary."
msgstr ""

# 6b40516f6d8546b3a050d3813f26bcb8
#: ../../../../1.8/docs/howto/custom-template-tags.txt:223
msgid ""
"You can think of this as meaning \"this filter is safe -- it doesn't "
"introduce any possibility of unsafe HTML.\""
msgstr ""

# 37e0fc7160f945fc803637404f7ec8d5
#: ../../../../1.8/docs/howto/custom-template-tags.txt:226
msgid ""
"The reason ``is_safe`` is necessary is because there are plenty of normal "
"string operations that will turn a ``SafeData`` object back into a normal "
"``str`` or ``unicode`` object and, rather than try to catch them all, which "
"would be very difficult, Django repairs the damage after the filter has "
"completed."
msgstr ""

# 80a6bc88abaf436e9ca9add8a6fd3dbb
#: ../../../../1.8/docs/howto/custom-template-tags.txt:232
msgid ""
"For example, suppose you have a filter that adds the string ``xx`` to the "
"end of any input. Since this introduces no dangerous HTML characters to the "
"result (aside from any that were already present), you should mark your "
"filter with ``is_safe``::"
msgstr ""

# 84aee7c7f9e04e129fae4b035833ae55
#: ../../../../1.8/docs/howto/custom-template-tags.txt:241
msgid ""
"When this filter is used in a template where auto-escaping is enabled, "
"Django will escape the output whenever the input is not already marked as "
"\"safe\"."
msgstr ""

# 4ce692fe092c4bad8dc99b1e8ecfac4b
#: ../../../../1.8/docs/howto/custom-template-tags.txt:245
msgid ""
"By default, ``is_safe`` is ``False``, and you can omit it from any filters "
"where it isn't required."
msgstr ""

# 2384e1c865c84890846497e224a2d1f9
#: ../../../../1.8/docs/howto/custom-template-tags.txt:248
msgid ""
"Be careful when deciding if your filter really does leave safe strings as "
"safe. If you're *removing* characters, you might inadvertently leave "
"unbalanced HTML tags or entities in the result. For example, removing a "
"``>`` from the input might turn ``<a>`` into ``<a``, which would need to be "
"escaped on output to avoid causing problems. Similarly, removing a semicolon"
" (``;``) can turn ``&amp;`` into ``&amp``, which is no longer a valid entity"
" and thus needs further escaping. Most cases won't be nearly this tricky, "
"but keep an eye out for any problems like that when reviewing your code."
msgstr ""

# 18a4e0bdccfd4274b0f3755b2eed5c54
#: ../../../../1.8/docs/howto/custom-template-tags.txt:258
msgid ""
"Marking a filter ``is_safe`` will coerce the filter's return value to a "
"string.  If your filter should return a boolean or other non-string value, "
"marking it ``is_safe`` will probably have unintended consequences (such as "
"converting a boolean False to the string 'False')."
msgstr ""

# f47f247029844076b46c608d65caaa4b
#: ../../../../1.8/docs/howto/custom-template-tags.txt:264
msgid ""
"Alternatively, your filter code can manually take care of any necessary "
"escaping. This is necessary when you're introducing new HTML markup into the"
" result. You want to mark the output as safe from further escaping so that "
"your HTML markup isn't escaped further, so you'll need to handle the input "
"yourself."
msgstr ""

# 1bde0982d32243179129ad17229cb280
#: ../../../../1.8/docs/howto/custom-template-tags.txt:270
msgid ""
"To mark the output as a safe string, use "
":func:`django.utils.safestring.mark_safe`."
msgstr ""

# b5d2e82278774d26a1e65a6da158ec4f
#: ../../../../1.8/docs/howto/custom-template-tags.txt:273
msgid ""
"Be careful, though. You need to do more than just mark the output as safe. "
"You need to ensure it really *is* safe, and what you do depends on whether "
"auto-escaping is in effect. The idea is to write filters that can operate in"
" templates where auto-escaping is either on or off in order to make things "
"easier for your template authors."
msgstr ""

# 781009cb81bb4b9fad461ada46c6f141
#: ../../../../1.8/docs/howto/custom-template-tags.txt:279
msgid ""
"In order for your filter to know the current auto-escaping state, set the "
"``needs_autoescape`` flag to ``True`` when you register your filter "
"function. (If you don't specify this flag, it defaults to ``False``). This "
"flag tells Django that your filter function wants to be passed an extra "
"keyword argument, called ``autoescape``, that is ``True`` if auto-escaping "
"is in effect and ``False`` otherwise. It is recommended to set the default "
"of the ``autoescape`` parameter to ``True``, so that if you call the "
"function from Python code it will have escaping enabled by default."
msgstr ""

# 7340630391a04b0cb3b60c21e5c8e1f9
#: ../../../../1.8/docs/howto/custom-template-tags.txt:288
msgid ""
"For example, let's write a filter that emphasizes the first character of a "
"string::"
msgstr ""

# c97ec4567a894c07bc94418c5daf5fd5
#: ../../../../1.8/docs/howto/custom-template-tags.txt:307
msgid ""
"The ``needs_autoescape`` flag and the ``autoescape`` keyword argument mean "
"that our function will know whether automatic escaping is in effect when the"
" filter is called. We use ``autoescape`` to decide whether the input data "
"needs to be passed through ``django.utils.html.conditional_escape`` or not. "
"(In the latter case, we just use the identity function as the \"escape\" "
"function.) The ``conditional_escape()`` function is like ``escape()`` except"
" it only escapes input that is **not** a ``SafeData`` instance. If a "
"``SafeData`` instance is passed to ``conditional_escape()``, the data is "
"returned unchanged."
msgstr ""

# 1adaa57ed95f4041a6751f84d8583af8
#: ../../../../1.8/docs/howto/custom-template-tags.txt:317
msgid ""
"Finally, in the above example, we remember to mark the result as safe so "
"that our HTML is inserted directly into the template without further "
"escaping."
msgstr ""

# c41796ef38bb47a68ad33a9204cbc31f
#: ../../../../1.8/docs/howto/custom-template-tags.txt:321
msgid ""
"There's no need to worry about the ``is_safe`` flag in this case (although "
"including it wouldn't hurt anything). Whenever you manually handle the auto-"
"escaping issues and return a safe string, the ``is_safe`` flag won't change "
"anything either way."
msgstr ""

# b3a769b51a6c49059e2c95d2cfe01b4b
#: ../../../../1.8/docs/howto/custom-template-tags.txt:326
msgid "Avoiding XSS vulnerabilities when reusing built-in filters"
msgstr ""

# 850f0f710c2f46349023836b1c46fac3
#: ../../../../1.8/docs/howto/custom-template-tags.txt:330
msgid ""
"Django's built-in filters have ``autoescape=True`` by default in order to "
"get the proper autoescaping behavior and avoid a cross-site script "
"vulnerability."
msgstr ""

# f256836d752a41768d02370c216383db
#: ../../../../1.8/docs/howto/custom-template-tags.txt:334
msgid ""
"In older versions of Django, be careful when reusing Django's built-in "
"filters as ``autoescape`` defaults to ``None``. You'll need to pass "
"``autoescape=True`` to get autoescaping."
msgstr ""

# 32a6fb812e244575a4fed20e8e2e074e
#: ../../../../1.8/docs/howto/custom-template-tags.txt:338
msgid ""
"For example, if you wanted to write a custom filter called "
"``urlize_and_linebreaks`` that combined the :tfilter:`urlize` and "
":tfilter:`linebreaksbr` filters, the filter would look like::"
msgstr ""

# e5ed2b1387844ec1a7e761a7ea124a19
#: ../../../../1.8/docs/howto/custom-template-tags.txt:351
msgid "Then:"
msgstr ""

# c843ad8c760742f488a080fb497bc0f8
#: ../../../../1.8/docs/howto/custom-template-tags.txt:357
msgid "would be equivalent to:"
msgstr ""

# 2bdd3b39f5b94fa6a9a6b64abc4564be
#: ../../../../1.8/docs/howto/custom-template-tags.txt:366
msgid "Filters and time zones"
msgstr ""

# ac02ab80fe474d9abea5ec36f26f657f
#: ../../../../1.8/docs/howto/custom-template-tags.txt:368
msgid ""
"If you write a custom filter that operates on :class:`~datetime.datetime` "
"objects, you'll usually register it with the ``expects_localtime`` flag set "
"to ``True``::"
msgstr ""

# cd3be74e38b940a89b06fe5d31d73c0c
#: ../../../../1.8/docs/howto/custom-template-tags.txt:379
msgid ""
"When this flag is set, if the first argument to your filter is a time zone "
"aware datetime, Django will convert it to the current time zone before "
"passing it to your filter when appropriate, according to :ref:`rules for "
"time zones conversions in templates <time-zones-in-templates>`."
msgstr ""

# 6eb0d7b1d72344f1a51c4d5798470701
#: ../../../../1.8/docs/howto/custom-template-tags.txt:387
msgid "Writing custom template tags"
msgstr ""

# 6a7b0407859b4b7398782ccde4c08c0d
#: ../../../../1.8/docs/howto/custom-template-tags.txt:389
msgid ""
"Tags are more complex than filters, because tags can do anything. Django "
"provides a number of shortcuts that make writing most types of tags easier. "
"First we'll explore those shortcuts, then explain how to write a tag from "
"scratch for those cases when the shortcuts aren't powerful enough."
msgstr ""

# 22f9171d57f747a7afdcc860536c2618
#: ../../../../1.8/docs/howto/custom-template-tags.txt:397
msgid "Simple tags"
msgstr ""

# a9a0df5c62df4678bd2c4ef4a8c6b58b
#: ../../../../1.8/docs/howto/custom-template-tags.txt:401
msgid ""
"Many template tags take a number of arguments -- strings or template "
"variables -- and return a string after doing some processing based solely on"
" the input arguments and some external information. For example, a "
"``current_time`` tag might accept a format string and return the time as a "
"string formatted accordingly."
msgstr ""

# 1cf6e46bb95e4ead93e5d80ec891d600
#: ../../../../1.8/docs/howto/custom-template-tags.txt:407
msgid ""
"To ease the creation of these types of tags, Django provides a helper "
"function, ``simple_tag``. This function, which is a method of "
"``django.template.Library``, takes a function that accepts any number of "
"arguments, wraps it in a ``render`` function and the other necessary bits "
"mentioned above and registers it with the template system."
msgstr ""

# 87572b61eea64c3aba00b73d403841d4
#: ../../../../1.8/docs/howto/custom-template-tags.txt:413
msgid "Our ``current_time`` function could thus be written like this::"
msgstr ""

# ce1ea12fc9b44a79b15c21c2ed2fb456
#: ../../../../1.8/docs/howto/custom-template-tags.txt:424
msgid "A few things to note about the ``simple_tag`` helper function:"
msgstr ""

# 1886a55c7aec46599fe3042e0b71bffa
#: ../../../../1.8/docs/howto/custom-template-tags.txt:426
msgid ""
"Checking for the required number of arguments, etc., has already been done "
"by the time our function is called, so we don't need to do that."
msgstr ""

# a63f00d353424bb19be8c990f24ca366
#: ../../../../1.8/docs/howto/custom-template-tags.txt:428
msgid ""
"The quotes around the argument (if any) have already been stripped away, so "
"we just receive a plain string."
msgstr ""

# ef9e070dd68c45d6a812ae5144daf936
#: ../../../../1.8/docs/howto/custom-template-tags.txt:430
msgid ""
"If the argument was a template variable, our function is passed the current "
"value of the variable, not the variable itself."
msgstr ""

# 8e4b6f3917ac40e5975c9af86f11c8b9
# 73a541b46f484d8e8ccba932eac4d24c
#: ../../../../1.8/docs/howto/custom-template-tags.txt:433
#: ../../../../1.8/docs/howto/custom-template-tags.txt:636
msgid ""
"If your template tag needs to access the current context, you can use the "
"``takes_context`` argument when registering your tag::"
msgstr ""

# dc024f5b26ed4487afe0ae02032c10e7
#: ../../../../1.8/docs/howto/custom-template-tags.txt:441
msgid "Note that the first argument *must* be called ``context``."
msgstr ""

# 430e3e10e0b8478c9bc36124e51162d9
# e26066351cdc4d0ebced0e39bdd6a30f
#: ../../../../1.8/docs/howto/custom-template-tags.txt:443
#: ../../../../1.8/docs/howto/custom-template-tags.txt:646
msgid ""
"For more information on how the ``takes_context`` option works, see the "
"section on :ref:`inclusion tags<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

# 942048af299d46d895557e3a2f53d682
#: ../../../../1.8/docs/howto/custom-template-tags.txt:446
msgid "If you need to rename your tag, you can provide a custom name for it::"
msgstr ""

# 94aa2696a19342879dccb46c7e48d7af
#: ../../../../1.8/docs/howto/custom-template-tags.txt:454
msgid ""
"``simple_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr ""

# f344cf6a05a84ef0ba2a1bf079bff963
# 9cc4f75d63514ed993674edaaa56e0c6
# 5899259408434cf1b774dbd5b7fca326
#: ../../../../1.8/docs/howto/custom-template-tags.txt:464
#: ../../../../1.8/docs/howto/custom-template-tags.txt:600
#: ../../../../1.8/docs/howto/custom-template-tags.txt:659
msgid ""
"Then in the template any number of arguments, separated by spaces, may be "
"passed to the template tag. Like in Python, the values for keyword arguments"
" are set using the equal sign (\"``=``\") and must be provided after the "
"positional arguments. For example:"
msgstr ""

# df84d33f59f34929b2181ac954ebb8b2
#: ../../../../1.8/docs/howto/custom-template-tags.txt:476
msgid "Inclusion tags"
msgstr ""

# 753168b091574fcc9780b881b2124aed
#: ../../../../1.8/docs/howto/custom-template-tags.txt:480
msgid ""
"Another common type of template tag is the type that displays some data by "
"rendering *another* template. For example, Django's admin interface uses "
"custom template tags to display the buttons along the bottom of the "
"\"add/change\" form pages. Those buttons always look the same, but the link "
"targets change depending on the object being edited -- so they're a perfect "
"case for using a small template that is filled with details from the current"
" object. (In the admin's case, this is the ``submit_row`` tag.)"
msgstr ""

# f08bc5b51552448092b5e93236f87a85
#: ../../../../1.8/docs/howto/custom-template-tags.txt:488
msgid "These sorts of tags are called \"inclusion tags\"."
msgstr ""

# f4fd140ddeb945709cc915c381bb8e11
#: ../../../../1.8/docs/howto/custom-template-tags.txt:490
msgid ""
"Writing inclusion tags is probably best demonstrated by example. Let's write"
" a tag that outputs a list of choices for a given ``Poll`` object, such as "
"was created in the :ref:`tutorials <creating-models>`. We'll use the tag "
"like this:"
msgstr ""

# 6fc17a36045c4284ba6b19909a80a8c3
#: ../../../../1.8/docs/howto/custom-template-tags.txt:498
msgid "...and the output will be something like this:"
msgstr ""

# 2d990abc143f4544873d8308b03233c4
#: ../../../../1.8/docs/howto/custom-template-tags.txt:508
msgid ""
"First, define the function that takes the argument and produces a dictionary"
" of data for the result. The important point here is we only need to return "
"a dictionary, not anything more complex. This will be used as a template "
"context for the template fragment. Example::"
msgstr ""

# e559b6e0421846e48ce4095c4ee36d75
#: ../../../../1.8/docs/howto/custom-template-tags.txt:517
msgid ""
"Next, create the template used to render the tag's output. This template is "
"a fixed feature of the tag: the tag writer specifies it, not the template "
"designer. Following our example, the template is very simple:"
msgstr ""

# 30fc1548c0ae4e6ab6162374fa673e93
#: ../../../../1.8/docs/howto/custom-template-tags.txt:529
msgid ""
"Now, create and register the inclusion tag by calling the "
"``inclusion_tag()`` method on a ``Library`` object. Following our example, "
"if the above template is in a file called ``results.html`` in a directory "
"that's searched by the template loader, we'd register the tag like this::"
msgstr ""

# 662937fe6b3c4543b46abad75884751e
#: ../../../../1.8/docs/howto/custom-template-tags.txt:539
msgid ""
"Alternatively it is possible to register the inclusion tag using a "
":class:`django.template.Template` instance::"
msgstr ""

# 522590ea72604a9dab7621407a113426
#: ../../../../1.8/docs/howto/custom-template-tags.txt:546
msgid "...when first creating the function."
msgstr ""

# e5b63b9988644b798038d135f84d7130
#: ../../../../1.8/docs/howto/custom-template-tags.txt:548
msgid ""
"Sometimes, your inclusion tags might require a large number of arguments, "
"making it a pain for template authors to pass in all the arguments and "
"remember their order. To solve this, Django provides a ``takes_context`` "
"option for inclusion tags. If you specify ``takes_context`` in creating a "
"template tag, the tag will have no required arguments, and the underlying "
"Python function will have one argument -- the template context as of when "
"the tag was called."
msgstr ""

# 468e3844a6524190991d6bb8c893d1f7
#: ../../../../1.8/docs/howto/custom-template-tags.txt:555
msgid ""
"For example, say you're writing an inclusion tag that will always be used in"
" a context that contains ``home_link`` and ``home_title`` variables that "
"point back to the main page. Here's what the Python function would look "
"like::"
msgstr ""

# f16a62aa4cdb4bf5a5a2db1354ca5ff5
# 35927eddc04e4fe79322c8a3752ea8e0
#: ../../../../1.8/docs/howto/custom-template-tags.txt:566
#: ../../../../1.8/docs/howto/custom-template-tags.txt:644
msgid ""
"Note that the first parameter to the function *must* be called ``context``."
msgstr ""

# 69233c15ad30496fa16dfe547963d9d8
#: ../../../../1.8/docs/howto/custom-template-tags.txt:568
msgid ""
"In that ``register.inclusion_tag()`` line, we specified "
"``takes_context=True`` and the name of the template. Here's what the "
"template ``link.html`` might look like:"
msgstr ""

# 9364f458f8e044159baea1b277805f1b
#: ../../../../1.8/docs/howto/custom-template-tags.txt:576
msgid ""
"Then, any time you want to use that custom tag, load its library and call it"
" without any arguments, like so:"
msgstr ""

# 1f0fb22ed8ea414e8810d4e2e4f6742b
#: ../../../../1.8/docs/howto/custom-template-tags.txt:583
msgid ""
"Note that when you're using ``takes_context=True``, there's no need to pass "
"arguments to the template tag. It automatically gets access to the context."
msgstr ""

# e43deebe39184f3abb528655ba4de82f
#: ../../../../1.8/docs/howto/custom-template-tags.txt:586
msgid ""
"The ``takes_context`` parameter defaults to ``False``. When it's set to "
"``True``, the tag is passed the context object, as in this example. That's "
"the only difference between this case and the previous ``inclusion_tag`` "
"example."
msgstr ""

# c7b2f8ef51ab43dfae5010f87999d0a0
#: ../../../../1.8/docs/howto/custom-template-tags.txt:590
msgid ""
"``inclusion_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr ""

# 7b5bc08b94f94350bb5131b48d47092a
#: ../../../../1.8/docs/howto/custom-template-tags.txt:612
msgid "Assignment tags"
msgstr ""

# ae844bbef61947feac1c9ac2de8a85a8
#: ../../../../1.8/docs/howto/custom-template-tags.txt:616
msgid ""
"To ease the creation of tags setting a variable in the context, Django "
"provides a helper function, ``assignment_tag``. This function works the same"
" way as :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, except "
"that it stores the tag's result in a specified context variable instead of "
"directly outputting it."
msgstr ""

# 2b52cc499218428ea774c1e0aec22999
#: ../../../../1.8/docs/howto/custom-template-tags.txt:622
msgid ""
"Our earlier ``current_time`` function could thus be written like this::"
msgstr ""

# f64dc4e36a3d468e8c44796a468ecef3
#: ../../../../1.8/docs/howto/custom-template-tags.txt:628
msgid ""
"You may then store the result in a template variable using the ``as`` "
"argument followed by the variable name, and output it yourself where you see"
" fit:"
msgstr ""

# 7ecf2a17018744d2975599b5f2ca33ab
#: ../../../../1.8/docs/howto/custom-template-tags.txt:649
msgid ""
"``assignment_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr ""

# dda12e9ba96f43fb8a20c591f42e65dd
#: ../../../../1.8/docs/howto/custom-template-tags.txt:669
msgid "Advanced custom template tags"
msgstr ""

# 8c8185ef73534050858ce29aa02c3158
#: ../../../../1.8/docs/howto/custom-template-tags.txt:671
msgid ""
"Sometimes the basic features for custom template tag creation aren't enough."
" Don't worry, Django gives you complete access to the internals required to "
"build a template tag from the ground up."
msgstr ""

# 28f55450086e4b44957fe36f49d4b09e
#: ../../../../1.8/docs/howto/custom-template-tags.txt:676
msgid "A quick overview"
msgstr ""

# 4546254e66824d988866de0ed3001c16
#: ../../../../1.8/docs/howto/custom-template-tags.txt:678
msgid ""
"The template system works in a two-step process: compiling and rendering. To"
" define a custom template tag, you specify how the compilation works and how"
" the rendering works."
msgstr ""

# 39dd02613fcb4ea5a0f70ce8440b11fd
#: ../../../../1.8/docs/howto/custom-template-tags.txt:682
msgid ""
"When Django compiles a template, it splits the raw template text into "
"''nodes''. Each node is an instance of ``django.template.Node`` and has a "
"``render()`` method. A compiled template is, simply, a list of ``Node`` "
"objects. When you call ``render()`` on a compiled template object, the "
"template calls ``render()`` on each ``Node`` in its node list, with the "
"given context. The results are all concatenated together to form the output "
"of the template."
msgstr ""

# 1c38b5da346d4100a836e02c9e32489a
#: ../../../../1.8/docs/howto/custom-template-tags.txt:689
msgid ""
"Thus, to define a custom template tag, you specify how the raw template tag "
"is converted into a ``Node`` (the compilation function), and what the node's"
" ``render()`` method does."
msgstr ""

# dc7af5a3d1a94664a826013e3284d67c
#: ../../../../1.8/docs/howto/custom-template-tags.txt:694
msgid "Writing the compilation function"
msgstr ""

# 8a550c270e8940c8814d13b0d77c379a
#: ../../../../1.8/docs/howto/custom-template-tags.txt:696
msgid ""
"For each template tag the template parser encounters, it calls a Python "
"function with the tag contents and the parser object itself. This function "
"is responsible for returning a ``Node`` instance based on the contents of "
"the tag."
msgstr ""

# cb12477132884d92b3eb6d7bb1e3aaf2
#: ../../../../1.8/docs/howto/custom-template-tags.txt:700
msgid ""
"For example, let's write a full implementation of our simple template tag, "
"``{% current_time %}``, that displays the current date/time, formatted "
"according to a parameter given in the tag, in :func:`~time.strftime` syntax."
" It's a good idea to decide the tag syntax before anything else. In our "
"case, let's say the tag should be used like this:"
msgstr ""

# 56d699883c6f4ffeab2ad1080767d27c
#: ../../../../1.8/docs/howto/custom-template-tags.txt:710
msgid ""
"The parser for this function should grab the parameter and create a ``Node``"
" object::"
msgstr ""

# 7381cc316a3947f6a2a9483decd4feb5
# 4a955c4de7e44f93b58dfef262c12cb8
#: ../../../../1.8/docs/howto/custom-template-tags.txt:729
#: ../../../../1.8/docs/howto/custom-template-tags.txt:781
msgid "Notes:"
msgstr ""

# 9b45aac21eb84b84a6e7441787dea38c
#: ../../../../1.8/docs/howto/custom-template-tags.txt:731
msgid ""
"``parser`` is the template parser object. We don't need it in this example."
msgstr ""

# c935c49cade04fdd86890ddcec581d9c
#: ../../../../1.8/docs/howto/custom-template-tags.txt:734
msgid ""
"``token.contents`` is a string of the raw contents of the tag. In our "
"example, it's ``'current_time \"%Y-%m-%d %I:%M %p\"'``."
msgstr ""

# e749946a15cd4092bb1c4fef1f7877c1
#: ../../../../1.8/docs/howto/custom-template-tags.txt:737
msgid ""
"The ``token.split_contents()`` method separates the arguments on spaces "
"while keeping quoted strings together. The more straightforward "
"``token.contents.split()`` wouldn't be as robust, as it would naively split "
"on *all* spaces, including those within quoted strings. It's a good idea to "
"always use ``token.split_contents()``."
msgstr ""

# 1c4557d3fa664cfabc4b90cdb7150c0a
#: ../../../../1.8/docs/howto/custom-template-tags.txt:743
msgid ""
"This function is responsible for raising "
"``django.template.TemplateSyntaxError``, with helpful messages, for any "
"syntax error."
msgstr ""

# 4f08bcb30e1e45529f7dd63abcaa2a02
#: ../../../../1.8/docs/howto/custom-template-tags.txt:747
msgid ""
"The ``TemplateSyntaxError`` exceptions use the ``tag_name`` variable. Don't "
"hard-code the tag's name in your error messages, because that couples the "
"tag's name to your function. ``token.contents.split()[0]`` will ''always'' "
"be the name of your tag -- even when the tag has no arguments."
msgstr ""

# 3920cbc311164a5683502c1f406c97ae
#: ../../../../1.8/docs/howto/custom-template-tags.txt:753
msgid ""
"The function returns a ``CurrentTimeNode`` with everything the node needs to"
" know about this tag. In this case, it just passes the argument -- "
"``\"%Y-%m-%d %I:%M %p\"``. The leading and trailing quotes from the template"
" tag are removed in ``format_string[1:-1]``."
msgstr ""

# da29fdbba68848c281bde02cd3695b48
#: ../../../../1.8/docs/howto/custom-template-tags.txt:758
msgid ""
"The parsing is very low-level. The Django developers have experimented with "
"writing small frameworks on top of this parsing system, using techniques "
"such as EBNF grammars, but those experiments made the template engine too "
"slow. It's low-level because that's fastest."
msgstr ""

# 04b8b904447c41d6b7ad25643e65ee64
#: ../../../../1.8/docs/howto/custom-template-tags.txt:764
msgid "Writing the renderer"
msgstr ""

# d8e0ca2d61da49cd8b73f8fd7ddee19d
#: ../../../../1.8/docs/howto/custom-template-tags.txt:766
msgid ""
"The second step in writing custom tags is to define a ``Node`` subclass that"
" has a ``render()`` method."
msgstr ""

# 8fc2a4084fbe4d2a8dd5329303aa1a30
#: ../../../../1.8/docs/howto/custom-template-tags.txt:769
msgid "Continuing the above example, we need to define ``CurrentTimeNode``::"
msgstr ""

# f079d317a9f849d8ab0c188d6a586769
#: ../../../../1.8/docs/howto/custom-template-tags.txt:783
msgid ""
"``__init__()`` gets the ``format_string`` from ``do_current_time()``. Always"
" pass any options/parameters/arguments to a ``Node`` via its ``__init__()``."
msgstr ""

# 725aa43e4d4146c5a4a72307037b41ba
#: ../../../../1.8/docs/howto/custom-template-tags.txt:787
msgid "The ``render()`` method is where the work actually happens."
msgstr ""

# e08febe19452471fa59e636501c1e862
#: ../../../../1.8/docs/howto/custom-template-tags.txt:789
msgid ""
"``render()`` should generally fail silently, particularly in a production "
"environment. In some cases however, particularly if "
"``context.template.engine.debug`` is ``True``, this method may raise an "
"exception to make debugging easier. For example, several core tags raise "
"``django.template.TemplateSyntaxError`` if they receive the wrong number or "
"type of arguments."
msgstr ""

# 7fbb392888ec45ec9090c24ff066b6bf
#: ../../../../1.8/docs/howto/custom-template-tags.txt:796
msgid ""
"Ultimately, this decoupling of compilation and rendering results in an "
"efficient template system, because a template can render multiple contexts "
"without having to be parsed multiple times."
msgstr ""

# dbf19513d2364df88687b525274480c5
#: ../../../../1.8/docs/howto/custom-template-tags.txt:801
msgid "Auto-escaping considerations"
msgstr ""

# b55238a74a5a480689e6a3598428609d
#: ../../../../1.8/docs/howto/custom-template-tags.txt:803
msgid ""
"The output from template tags is **not** automatically run through the auto-"
"escaping filters. However, there are still a couple of things you should "
"keep in mind when writing a template tag."
msgstr ""

# 54a394a8c8034bd882bc349e44dd0b41
#: ../../../../1.8/docs/howto/custom-template-tags.txt:807
msgid ""
"If the ``render()`` function of your template stores the result in a context"
" variable (rather than returning the result in a string), it should take "
"care to call ``mark_safe()`` if appropriate. When the variable is ultimately"
" rendered, it will be affected by the auto-escape setting in effect at the "
"time, so content that should be safe from further escaping needs to be "
"marked as such."
msgstr ""

# 581cbb4cfbfc4a57bc4a8115be22e0e7
#: ../../../../1.8/docs/howto/custom-template-tags.txt:814
msgid ""
"Also, if your template tag creates a new context for performing some sub-"
"rendering, set the auto-escape attribute to the current context's value. The"
" ``__init__`` method for the ``Context`` class takes a parameter called "
"``autoescape`` that you can use for this purpose. For example::"
msgstr ""

# e44bedb74f9e4fbbb3fe284a68efb089
#: ../../../../1.8/docs/howto/custom-template-tags.txt:826
msgid ""
"This is not a very common situation, but it's useful if you're rendering a "
"template yourself. For example::"
msgstr ""

# 9ca200a44d7f4e47bd13f1f465148f83
#: ../../../../1.8/docs/howto/custom-template-tags.txt:835
msgid ""
"The ``template`` attribute of ``Context`` objects was added in Django 1.8. "
":meth:`context.template.engine.get_template "
"<django.template.Engine.get_template>` must be used instead of "
":func:`django.template.loader.get_template` because the latter now returns a"
" wrapper whose ``render`` method doesn't accept a "
":class:`~django.template.Context`."
msgstr ""

# af82d355299b41f7a4ec08ec3cd39931
#: ../../../../1.8/docs/howto/custom-template-tags.txt:842
msgid ""
"If we had neglected to pass in the current ``context.autoescape`` value to "
"our new ``Context`` in this example, the results would have *always* been "
"automatically escaped, which may not be the desired behavior if the template"
" tag is used inside a :ttag:`{% autoescape off %}<autoescape>` block."
msgstr ""

# 8c22bf407a544ee9abe43ec82ad208f2
#: ../../../../1.8/docs/howto/custom-template-tags.txt:850
msgid "Thread-safety considerations"
msgstr ""

# c4c660fa448643589fffbf08e9c5a7d7
#: ../../../../1.8/docs/howto/custom-template-tags.txt:852
msgid ""
"Once a node is parsed, its ``render`` method may be called any number of "
"times. Since Django is sometimes run in multi-threaded environments, a "
"single node may be simultaneously rendering with different contexts in "
"response to two separate requests. Therefore, it's important to make sure "
"your template tags are thread safe."
msgstr ""

# 043ea16e5d894d2492acf8389dec735c
#: ../../../../1.8/docs/howto/custom-template-tags.txt:858
msgid ""
"To make sure your template tags are thread safe, you should never store "
"state information on the node itself. For example, Django provides a builtin"
" :ttag:`cycle` template tag that cycles among a list of given strings each "
"time it's rendered:"
msgstr ""

# e9d5b044022e4e57b5ead6449a578f04
#: ../../../../1.8/docs/howto/custom-template-tags.txt:871
msgid ""
"A naive implementation of ``CycleNode`` might look something like this::"
msgstr ""

# cf579a09f34649608c219e75d4b23c89
#: ../../../../1.8/docs/howto/custom-template-tags.txt:883
msgid ""
"But, suppose we have two templates rendering the template snippet from above"
" at the same time:"
msgstr ""

# aa753340d5484f8fb0028ea41454ade7
#: ../../../../1.8/docs/howto/custom-template-tags.txt:886
msgid ""
"Thread 1 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""

# c2ebc761bbe14fcf9a3f7b6383dc3205
#: ../../../../1.8/docs/howto/custom-template-tags.txt:888
msgid ""
"Thread 2 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""

# 3a4afeeb2f6041a69fa29e5bc0bbe503
#: ../../../../1.8/docs/howto/custom-template-tags.txt:890
msgid ""
"Thread 1 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""

# cffd2b13a45448128eb4212e29d9a4ed
#: ../../../../1.8/docs/howto/custom-template-tags.txt:892
msgid ""
"Thread 2 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""

# 962de97aff1d49d68a4b36dac863bded
#: ../../../../1.8/docs/howto/custom-template-tags.txt:895
msgid ""
"The CycleNode is iterating, but it's iterating globally. As far as Thread 1 "
"and Thread 2 are concerned, it's always returning the same value. This is "
"obviously not what we want!"
msgstr ""

# db36f3ca3f3e4650a51dc273f36b4d96
#: ../../../../1.8/docs/howto/custom-template-tags.txt:899
msgid ""
"To address this problem, Django provides a ``render_context`` that's "
"associated with the ``context`` of the template that is currently being "
"rendered. The ``render_context`` behaves like a Python dictionary, and "
"should be used to store ``Node`` state between invocations of the ``render``"
" method."
msgstr ""

# 00fd97c68d7c408d9623771a855ad08c
#: ../../../../1.8/docs/howto/custom-template-tags.txt:904
msgid ""
"Let's refactor our ``CycleNode`` implementation to use the "
"``render_context``::"
msgstr ""

# f24ca92af2e44be9a2763d63d6172778
#: ../../../../1.8/docs/howto/custom-template-tags.txt:916
msgid ""
"Note that it's perfectly safe to store global information that will not "
"change throughout the life of the ``Node`` as an attribute. In the case of "
"``CycleNode``, the ``cyclevars`` argument doesn't change after the ``Node`` "
"is instantiated, so we don't need to put it in the ``render_context``. But "
"state information that is specific to the template that is currently being "
"rendered, like the current iteration of the ``CycleNode``, should be stored "
"in the ``render_context``."
msgstr ""

# d7281999e0804fbe88c2f4e7fcafd158
#: ../../../../1.8/docs/howto/custom-template-tags.txt:925
msgid ""
"Notice how we used ``self`` to scope the ``CycleNode`` specific information "
"within the ``render_context``. There may be multiple ``CycleNodes`` in a "
"given template, so we need to be careful not to clobber another node's state"
" information. The easiest way to do this is to always use ``self`` as the "
"key into ``render_context``. If you're keeping track of several state "
"variables, make ``render_context[self]`` a dictionary."
msgstr ""

# 04a18de7967f40fe979e433ef81e68a5
#: ../../../../1.8/docs/howto/custom-template-tags.txt:933
msgid "Registering the tag"
msgstr ""

# cc485ae6f3324843ac044b3ea3e1bb98
#: ../../../../1.8/docs/howto/custom-template-tags.txt:935
msgid ""
"Finally, register the tag with your module's ``Library`` instance, as "
"explained in :ref:`writing custom template filters<howto-writing-custom-"
"template-tags>` above. Example::"
msgstr ""

# d27c248ffddc4adc9cb24c4a7fb7bf22
#: ../../../../1.8/docs/howto/custom-template-tags.txt:941
msgid "The ``tag()`` method takes two arguments:"
msgstr ""

# 0756863bea184f4c9a0eeee06bc825b9
#: ../../../../1.8/docs/howto/custom-template-tags.txt:943
msgid ""
"The name of the template tag -- a string. If this is left out, the name of "
"the compilation function will be used."
msgstr ""

# 78c167d13e8b4fc295bd3c3051b33bbc
#: ../../../../1.8/docs/howto/custom-template-tags.txt:948
msgid ""
"As with filter registration, it is also possible to use this as a "
"decorator::"
msgstr ""

# 83fc7c5f5d744c4a9d594f38cfcc6746
#: ../../../../1.8/docs/howto/custom-template-tags.txt:958
msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the tag name."
msgstr ""

# aa3c20403f844748b8c689165e721340
#: ../../../../1.8/docs/howto/custom-template-tags.txt:962
msgid "Passing template variables to the tag"
msgstr ""

# 31b1481d27cf41528e972b9abcc82f14
#: ../../../../1.8/docs/howto/custom-template-tags.txt:964
msgid ""
"Although you can pass any number of arguments to a template tag using "
"``token.split_contents()``, the arguments are all unpacked as string "
"literals. A little more work is required in order to pass dynamic content (a"
" template variable) to a template tag as an argument."
msgstr ""

# fef76202c2db4ecb938b188f02835ec4
#: ../../../../1.8/docs/howto/custom-template-tags.txt:969
msgid ""
"While the previous examples have formatted the current time into a string "
"and returned the string, suppose you wanted to pass in a "
":class:`~django.db.models.DateTimeField` from an object and have the "
"template tag format that date-time:"
msgstr ""

# 683c4a9889154ce585041b826612af19
#: ../../../../1.8/docs/howto/custom-template-tags.txt:978
msgid "Initially, ``token.split_contents()`` will return three values:"
msgstr ""

# c0f63eca2feb4ea188ec0d82a5862b12
#: ../../../../1.8/docs/howto/custom-template-tags.txt:980
msgid "The tag name ``format_time``."
msgstr ""

# b8c58ea8d44c4f5b88f272e17c2fc0d3
#: ../../../../1.8/docs/howto/custom-template-tags.txt:981
msgid ""
"The string ``'blog_entry.date_updated'`` (without the surrounding quotes)."
msgstr ""

# 0c612358588b41a58bac5b8b47d0c89a
#: ../../../../1.8/docs/howto/custom-template-tags.txt:983
msgid ""
"The formatting string ``'\"%Y-%m-%d %I:%M %p\"'``. The return value from "
"``split_contents()`` will include the leading and trailing quotes for string"
" literals like this."
msgstr ""

# 767f8e598fa74310a22b3afa48f3c1e8
#: ../../../../1.8/docs/howto/custom-template-tags.txt:987
msgid "Now your tag should begin to look like this::"
msgstr ""

# 5e8d6239a12f44f99d5a52e28dc8b154
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1005
msgid ""
"You also have to change the renderer to retrieve the actual contents of the "
"``date_updated`` property of the ``blog_entry`` object.  This can be "
"accomplished by using the ``Variable()`` class in ``django.template``."
msgstr ""

# 168ee13a4f8a4de893f7df8f5a9bc2e8
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1009
msgid ""
"To use the ``Variable`` class, simply instantiate it with the name of the "
"variable to be resolved, and then call ``variable.resolve(context)``. So, "
"for example::"
msgstr ""

# 19cfa1ca3cfe41ca9a7f5f1bf9361aaf
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1025
msgid ""
"Variable resolution will throw a ``VariableDoesNotExist`` exception if it "
"cannot resolve the string passed to it in the current context of the page."
msgstr ""

# df4454718480452c9fa09b9b8713d406
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1029
msgid "Setting a variable in the context"
msgstr ""

# dc9aa782a91841eabfa90d9b58148930
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1031
msgid ""
"The above examples simply output a value. Generally, it's more flexible if "
"your template tags set template variables instead of outputting values. That"
" way, template authors can reuse the values that your template tags create."
msgstr ""

# 8369175476fd4c96878c75e66900951d
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1035
msgid ""
"To set a variable in the context, just use dictionary assignment on the "
"context object in the ``render()`` method. Here's an updated version of "
"``CurrentTimeNode`` that sets a template variable ``current_time`` instead "
"of outputting it::"
msgstr ""

# 37f79797957c472eae1b23fe23a0d3b9
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1050
msgid ""
"Note that ``render()`` returns the empty string. ``render()`` should always "
"return string output. If all the template tag does is set a variable, "
"``render()`` should return the empty string."
msgstr ""

# 634aa855f5b14355899637d33327d71a
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1054
msgid "Here's how you'd use this new version of the tag:"
msgstr ""

# 6aac569a7c144bf0bbfd6bf98465d954
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1060
msgid "Variable scope in context"
msgstr ""

# 1fcfc1852dfd454392a3b7b46a2d6638
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1062
msgid ""
"Any variable set in the context will only be available in the same ``block``"
" of the template in which it was assigned. This behavior is intentional; it "
"provides a scope for variables so that they don't conflict with context in "
"other blocks."
msgstr ""

# 1f70825c50e5446e996fb09b28aab0f7
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1067
msgid ""
"But, there's a problem with ``CurrentTimeNode2``: The variable name "
"``current_time`` is hard-coded. This means you'll need to make sure your "
"template doesn't use ``{{ current_time }}`` anywhere else, because the ``{% "
"current_time %}`` will blindly overwrite that variable's value. A cleaner "
"solution is to make the template tag specify the name of the output "
"variable, like so:"
msgstr ""

# c54ba14535194d568d5361e305cae272
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1079
msgid ""
"To do that, you'll need to refactor both the compilation function and "
"``Node`` class, like so::"
msgstr ""

# 6136fd0b8ef848b18b0126756d351c0d
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1111
msgid ""
"The difference here is that ``do_current_time()`` grabs the format string "
"and the variable name, passing both to ``CurrentTimeNode3``."
msgstr ""

# c63e3d51d02e487db658900e3d44bb20
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1114
msgid ""
"Finally, if you only need to have a simple syntax for your custom context-"
"updating template tag, you might want to consider using the :ref:`assignment"
" tag <howto-custom-template-tags-assignment-tags>` shortcut we introduced "
"above."
msgstr ""

# 8762df60a21e409eaec13a1172f29ed8
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1121
msgid "Parsing until another block tag"
msgstr ""

# 949373c4846c468ba0021daf49cc2168
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1123
msgid ""
"Template tags can work in tandem. For instance, the standard :ttag:`{% "
"comment %}<comment>` tag hides everything until ``{% endcomment %}``. To "
"create a template tag such as this, use ``parser.parse()`` in your "
"compilation function."
msgstr ""

# 7c0d1aecaa914bcba718a2574f62b239
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1128
msgid "Here's how a simplified ``{% comment %}`` tag might be implemented::"
msgstr ""

# 9a41ef5e247149a4aef9d373f2a70c66
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1140
msgid ""
"The actual implementation of :ttag:`{% comment %}<comment>` is slightly "
"different in that it allows broken template tags to appear between ``{% "
"comment %}`` and ``{% endcomment %}``. It does so by calling "
"``parser.skip_past('endcomment')`` instead of "
"``parser.parse(('endcomment',))`` followed by "
"``parser.delete_first_token()``, thus avoiding the generation of a node "
"list."
msgstr ""

# 3007f6b4a773408c93447fae612983ba
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1147
msgid ""
"``parser.parse()`` takes a tuple of names of block tags ''to parse until''. "
"It returns an instance of ``django.template.NodeList``, which is a list of "
"all ``Node`` objects that the parser encountered ''before'' it encountered "
"any of the tags named in the tuple."
msgstr ""

# 8579ee5472bd41ef9135463bcce06cdd
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1152
msgid ""
"In ``\"nodelist = parser.parse(('endcomment',))\"`` in the above example, "
"``nodelist`` is a list of all nodes between the ``{% comment %}`` and ``{% "
"endcomment %}``, not counting ``{% comment %}`` and ``{% endcomment %}`` "
"themselves."
msgstr ""

# ade6e69db59f466f9fbf4ea87cb484c2
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1157
msgid ""
"After ``parser.parse()`` is called, the parser hasn't yet \"consumed\" the "
"``{% endcomment %}`` tag, so the code needs to explicitly call "
"``parser.delete_first_token()``."
msgstr ""

# e2c8f19e13a9473583663a6b631713dd
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1161
msgid ""
"``CommentNode.render()`` simply returns an empty string. Anything between "
"``{% comment %}`` and ``{% endcomment %}`` is ignored."
msgstr ""

# b33b93dc2e0345e1a565597f952a11ee
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1165
msgid "Parsing until another block tag, and saving contents"
msgstr ""

# de42f17559924782bb698dc2f086dab5
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1167
msgid ""
"In the previous example, ``do_comment()`` discarded everything between ``{% "
"comment %}`` and ``{% endcomment %}``. Instead of doing that, it's possible "
"to do something with the code between block tags."
msgstr ""

# 4855b16c63e04fe59ad3285827c83b66
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1171
msgid ""
"For example, here's a custom template tag, ``{% upper %}``, that capitalizes"
" everything between itself and ``{% endupper %}``."
msgstr ""

# b4918596fb12430688109774b715808f
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1174
msgid "Usage:"
msgstr ""

# ae6b0e2c5b23438c9fa55a47c712176e
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1180
msgid ""
"As in the previous example, we'll use ``parser.parse()``. But this time, we "
"pass the resulting ``nodelist`` to the ``Node``::"
msgstr ""

# 60e08ea39b014c99819ad402432f756a
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1195
msgid ""
"The only new concept here is the ``self.nodelist.render(context)`` in "
"``UpperNode.render()``."
msgstr ""

# 6e954afccb834aa9b6154a7e5026a543
#: ../../../../1.8/docs/howto/custom-template-tags.txt:1198
msgid ""
"For more examples of complex rendering, see the source code of :ttag:`{% for"
" %}<for>` in ``django/template/defaulttags.py`` and :ttag:`{% if %}<if>` in "
"``django/template/smartif.py``."
msgstr ""

# dedad2a5fc694961b2239af3366414a1
#: ../../../../1.8/docs/howto/deployment/checklist.txt:3
msgid "Deployment checklist"
msgstr ""

# 406c3a8899784b799bd29c892e9408e0
#: ../../../../1.8/docs/howto/deployment/checklist.txt:5
msgid ""
"The Internet is a hostile environment. Before deploying your Django project,"
" you should take some time to review your settings, with security, "
"performance, and operations in mind."
msgstr ""

# baba53ad1fa1474ab711c57e252e5b78
#: ../../../../1.8/docs/howto/deployment/checklist.txt:9
msgid ""
"Django includes many :doc:`security features </topics/security>`. Some are "
"built-in and always enabled. Others are optional because they aren't always "
"appropriate, or because they're inconvenient for development. For example, "
"forcing HTTPS may not be suitable for all websites, and it's impractical for"
" local development."
msgstr ""

# e164ae612ebb47fbaff237a4a8d1d2ab
#: ../../../../1.8/docs/howto/deployment/checklist.txt:15
msgid ""
"Performance optimizations are another category of trade-offs with "
"convenience. For instance, caching is useful in production, less so for "
"local development. Error reporting needs are also widely different."
msgstr ""

# 064acd679cc4476eb4109e46e1cf13da
#: ../../../../1.8/docs/howto/deployment/checklist.txt:19
msgid "The following checklist includes settings that:"
msgstr ""

# fd79a960047f4e269340a5ffd245ce8f
#: ../../../../1.8/docs/howto/deployment/checklist.txt:21
msgid ""
"must be set properly for Django to provide the expected level of security;"
msgstr ""

# 48ea883dc672432daa743d29e4fbe8ae
#: ../../../../1.8/docs/howto/deployment/checklist.txt:22
msgid "are expected to be different in each environment;"
msgstr ""

# c0bb5b3f4aa54af38523350944055227
#: ../../../../1.8/docs/howto/deployment/checklist.txt:23
msgid "enable optional security features;"
msgstr ""

# deb549d888a143a4bed9c84611bd1480
#: ../../../../1.8/docs/howto/deployment/checklist.txt:24
msgid "enable performance optimizations;"
msgstr ""

# 61a0018099c04a9396910e409d5ba62d
#: ../../../../1.8/docs/howto/deployment/checklist.txt:25
msgid "provide error reporting."
msgstr ""

# 237e675291af4c48a6a471643945b1bb
#: ../../../../1.8/docs/howto/deployment/checklist.txt:27
msgid ""
"Many of these settings are sensitive and should be treated as confidential. "
"If you're releasing the source code for your project, a common practice is "
"to publish suitable settings for development, and to use a private settings "
"module for production."
msgstr ""

# 5285e034d65847f3a92bdacf7156e331
#: ../../../../1.8/docs/howto/deployment/checklist.txt:33
msgid "Run ``manage.py check --deploy``"
msgstr ""

# 4e3d7f15b61a4190a9ac72708868c010
#: ../../../../1.8/docs/howto/deployment/checklist.txt:35
msgid ""
"Some of the checks described below can be automated using the "
":djadminopt:`--deploy` option of the :djadmin:`check` command. Be sure to "
"run it against your production settings file as described in the option's "
"documentation."
msgstr ""

# 89d2b12eb3d540008fa151325be89dcf
#: ../../../../1.8/docs/howto/deployment/checklist.txt:41
msgid "Critical settings"
msgstr ""

# 3577f00c9c8f4951ba1c9e7f29f3bd6b
#: ../../../../1.8/docs/howto/deployment/checklist.txt:44
msgid ":setting:`SECRET_KEY`"
msgstr ""

# b31073c040c046fc9ed93d2f961003e2
#: ../../../../1.8/docs/howto/deployment/checklist.txt:46
msgid ""
"**The secret key must be a large random value and it must be kept secret.**"
msgstr ""

# 80acfbb788834769a42c2ffb7cabd364
#: ../../../../1.8/docs/howto/deployment/checklist.txt:48
msgid ""
"Make sure that the key used in production isn't used anywhere else and avoid"
" committing it to source control. This reduces the number of vectors from "
"which an attacker may acquire the key."
msgstr ""

# 8e7ae7e49758405a99df320867c8d721
#: ../../../../1.8/docs/howto/deployment/checklist.txt:52
msgid ""
"Instead of hardcoding the secret key in your settings module, consider "
"loading it from an environment variable::"
msgstr ""

# 4cacfa59894c45c9b18f5f58d0ca2a2f
#: ../../../../1.8/docs/howto/deployment/checklist.txt:58
msgid "or from a file::"
msgstr ""

# 49086acfa3bb41ecb9b281f0e36a649e
#: ../../../../1.8/docs/howto/deployment/checklist.txt:64
msgid ":setting:`DEBUG`"
msgstr ""

# 84d76203208b4ea894f26519bb1d8719
#: ../../../../1.8/docs/howto/deployment/checklist.txt:66
msgid "**You must never enable debug in production.**"
msgstr ""

# 007331a65c3f44d1a6a5e350238ae719
#: ../../../../1.8/docs/howto/deployment/checklist.txt:68
msgid ""
"You're certainly developing your project with :setting:`DEBUG = True "
"<DEBUG>`, since this enables handy features like full tracebacks in your "
"browser."
msgstr ""

# c5a91c6423b34cd194f2018f12ff2328
#: ../../../../1.8/docs/howto/deployment/checklist.txt:71
msgid ""
"For a production environment, though, this is a really bad idea, because it "
"leaks lots of information about your project: excerpts of your source code, "
"local variables, settings, libraries used, etc."
msgstr ""

# 7135c90c716c46d5ac514361c4472f62
#: ../../../../1.8/docs/howto/deployment/checklist.txt:76
msgid "Environment-specific settings"
msgstr ""

# 317eea40135940529a6d4b0ec866f5d7
#: ../../../../1.8/docs/howto/deployment/checklist.txt:79
msgid ":setting:`ALLOWED_HOSTS`"
msgstr ""

# 8ca22a16338b42f9b402adee1895d5f0
#: ../../../../1.8/docs/howto/deployment/checklist.txt:81
msgid ""
"When :setting:`DEBUG = False <DEBUG>`, Django doesn't work at all without a "
"suitable value for :setting:`ALLOWED_HOSTS`."
msgstr ""

# 87fe5ef97ff2478db0abf21fdabb5b03
#: ../../../../1.8/docs/howto/deployment/checklist.txt:84
msgid ""
"This setting is required to protect your site against some CSRF attacks. If "
"you use a wildcard, you must perform your own validation of the ``Host`` "
"HTTP header, or otherwise ensure that you aren't vulnerable to this category"
" of attacks."
msgstr ""

# 226718dc075440d38d5117341f3fcb75
#: ../../../../1.8/docs/howto/deployment/checklist.txt:89
msgid ""
"You should also configure the Web server that sits in front of Django to "
"validate the host. It should respond with a static error page or ignore "
"requests for incorrect hosts instead of forwarding the request to Django. "
"This way you'll avoid spurious errors in your Django logs (or emails if you "
"have error reporting configured that way). For example, on nginx you might "
"setup a default server to return \"444 No Response\" on an unrecognized "
"host:"
msgstr ""

# 1f7cc3dacd4e4536aa358a648a167f66
#: ../../../../1.8/docs/howto/deployment/checklist.txt:104
msgid ":setting:`CACHES`"
msgstr ""

# f3f37c1279514c289679b27014376abf
#: ../../../../1.8/docs/howto/deployment/checklist.txt:106
msgid ""
"If you're using a cache, connection parameters may be different in "
"development and in production."
msgstr ""

# 4396bf65572d48099125a0971a2fd014
#: ../../../../1.8/docs/howto/deployment/checklist.txt:109
msgid ""
"Cache servers often have weak authentication. Make sure they only accept "
"connections from your application servers."
msgstr ""

# 0ef40c6e2ece47e5b9c10dbc56fdc7ac
#: ../../../../1.8/docs/howto/deployment/checklist.txt:112
msgid ""
"If you're using Memcached, consider using :ref:`cached sessions <cached-"
"sessions-backend>` to improve performance."
msgstr ""

# d5e0684488fc43b98918a0cd571179eb
#: ../../../../1.8/docs/howto/deployment/checklist.txt:116
msgid ":setting:`DATABASES`"
msgstr ""

# ea08493bb545443180448f2d94162608
#: ../../../../1.8/docs/howto/deployment/checklist.txt:118
msgid ""
"Database connection parameters are probably different in development and in "
"production."
msgstr ""

# d0d2ca6c9bcf4bfe98d1beb8175a8ed0
#: ../../../../1.8/docs/howto/deployment/checklist.txt:121
msgid ""
"Database passwords are very sensitive. You should protect them exactly like "
":setting:`SECRET_KEY`."
msgstr ""

# c76c9a25502d48cb9dfd4671f777948e
#: ../../../../1.8/docs/howto/deployment/checklist.txt:124
msgid ""
"For maximum security, make sure database servers only accept connections "
"from your application servers."
msgstr ""

# 263d36413d254731b9426388407c9256
#: ../../../../1.8/docs/howto/deployment/checklist.txt:127
msgid "If you haven't set up backups for your database, do it right now!"
msgstr ""

# 0b3df697510c41d6a8de8aa7f6ce6a2a
#: ../../../../1.8/docs/howto/deployment/checklist.txt:130
msgid ":setting:`EMAIL_BACKEND` and related settings"
msgstr ""

# e199b8625f524df59a66eb64b46b22e9
#: ../../../../1.8/docs/howto/deployment/checklist.txt:132
msgid "If your site sends emails, these values need to be set correctly."
msgstr ""

# cd9c9fe728614cd98b5936d44ac9d817
# 89548056dfe54a6e9e275994f498054b
#: ../../../../1.8/docs/howto/deployment/checklist.txt:134
#: ../../../../1.8/docs/howto/error-reporting.txt:38
msgid ""
"By default, Django will send email from root@localhost. However, some mail "
"providers reject all email from this address. To use a different sender "
"address, modify the :setting:`SERVER_EMAIL` setting."
msgstr ""

# b32b8342c80d4ba9aaf71644f60a32fd
#: ../../../../1.8/docs/howto/deployment/checklist.txt:139
msgid ":setting:`STATIC_ROOT` and :setting:`STATIC_URL`"
msgstr ""

# 096f6c7aae1d4805a6ac5c451b4114b4
#: ../../../../1.8/docs/howto/deployment/checklist.txt:141
msgid ""
"Static files are automatically served by the development server. In "
"production, you must define a :setting:`STATIC_ROOT` directory where "
":djadmin:`collectstatic` will copy them."
msgstr ""

# 9ce10e43e58d42bea706a36b0a7e0c04
#: ../../../../1.8/docs/howto/deployment/checklist.txt:145
msgid "See :doc:`/howto/static-files/index` for more information."
msgstr ""

# 1492d0d1902e4a478a96de4365c63dc9
#: ../../../../1.8/docs/howto/deployment/checklist.txt:148
msgid ":setting:`MEDIA_ROOT` and :setting:`MEDIA_URL`"
msgstr ""

# e087790303a9469d9b5d602d999a9869
#: ../../../../1.8/docs/howto/deployment/checklist.txt:150
msgid ""
"Media files are uploaded by your users. They're untrusted! Make sure your "
"web server never attempt to interpret them. For instance, if a user uploads "
"a ``.php`` file , the web server shouldn't execute it."
msgstr ""

# 9b1bf303585f4967bad3d1226aea1d90
#: ../../../../1.8/docs/howto/deployment/checklist.txt:154
msgid "Now is a good time to check your backup strategy for these files."
msgstr ""

# fc5f128a6255400ab912bc69314ef4cb
#: ../../../../1.8/docs/howto/deployment/checklist.txt:157
msgid "HTTPS"
msgstr "HTTPS"

# 010b37951a9f439c8718246f21b8d08d
#: ../../../../1.8/docs/howto/deployment/checklist.txt:159
msgid ""
"Any website which allows users to log in should enforce site-wide HTTPS to "
"avoid transmitting access tokens in clear. In Django, access tokens include "
"the login/password, the session cookie, and password reset tokens. (You "
"can't do much to protect password reset tokens if you're sending them by "
"email.)"
msgstr ""

# 23713a8bedb441318dc91cb7adf6331f
#: ../../../../1.8/docs/howto/deployment/checklist.txt:164
msgid ""
"Protecting sensitive areas such as the user account or the admin isn't "
"sufficient, because the same session cookie is used for HTTP and HTTPS. Your"
" web server must redirect all HTTP traffic to HTTPS, and only transmit HTTPS"
" requests to Django."
msgstr ""

# 01e3686a5d664fd383589e5f2ce420d0
#: ../../../../1.8/docs/howto/deployment/checklist.txt:169
msgid "Once you've set up HTTPS, enable the following settings."
msgstr ""

# ee32d985eace42a9bf311d215cfeae0a
#: ../../../../1.8/docs/howto/deployment/checklist.txt:172
msgid ":setting:`CSRF_COOKIE_SECURE`"
msgstr ""

# c9ba6967f07c4a78876eb676f8add631
#: ../../../../1.8/docs/howto/deployment/checklist.txt:174
msgid ""
"Set this to ``True`` to avoid transmitting the CSRF cookie over HTTP "
"accidentally."
msgstr ""

# 4c0e71b603cd44a79830b6983b754200
#: ../../../../1.8/docs/howto/deployment/checklist.txt:178
msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ""

# 66645589dc834fe7af8dd50cedcd4147
#: ../../../../1.8/docs/howto/deployment/checklist.txt:180
msgid ""
"Set this to ``True`` to avoid transmitting the session cookie over HTTP "
"accidentally."
msgstr ""

# 1788183d03614578a6873a60fdb2d204
#: ../../../../1.8/docs/howto/deployment/checklist.txt:184
msgid "Performance optimizations"
msgstr ""

# 19f779e3bd5441538b4b32a3bc7ff0ba
#: ../../../../1.8/docs/howto/deployment/checklist.txt:186
msgid ""
"Setting :setting:`DEBUG = False <DEBUG>` disables several features that are "
"only useful in development. In addition, you can tune the following "
"settings."
msgstr ""

# 6e33c07945884ec8bb5c93d4c3636b89
#: ../../../../1.8/docs/howto/deployment/checklist.txt:190
msgid ":setting:`CONN_MAX_AGE`"
msgstr ""

# 29e240913f4641c3b99eb1a2d7b1788d
#: ../../../../1.8/docs/howto/deployment/checklist.txt:192
msgid ""
"Enabling :ref:`persistent database connections <persistent-database-"
"connections>` can result in a nice speed-up when connecting to the database "
"accounts for a significant part of the request processing time."
msgstr ""

# 408f4dbf00df4dd8aa7b6184b5455b82
#: ../../../../1.8/docs/howto/deployment/checklist.txt:197
msgid ""
"This helps a lot on virtualized hosts with limited network performance."
msgstr ""

# 0221c3deb2cf47f3b276b335ce20ee95
#: ../../../../1.8/docs/howto/deployment/checklist.txt:200
msgid ":setting:`TEMPLATES`"
msgstr ""

# 3a47f382c0d9463a98cee788ff640fef
#: ../../../../1.8/docs/howto/deployment/checklist.txt:202
msgid ""
"Enabling the cached template loader often improves performance drastically, "
"as it avoids compiling each template every time it needs to be rendered. See"
" the :ref:`template loaders docs <template-loaders>` for more information."
msgstr ""

# 3a77c26e9f6c4fa8914dc42c4b9936ad
# 48e47975bfe748478c87e77e7b11f5c9
#: ../../../../1.8/docs/howto/deployment/checklist.txt:207
#: ../../../../1.8/docs/howto/error-reporting.txt:2
msgid "Error reporting"
msgstr ""

# 953aaa187a1845d18f9c83708446c87f
#: ../../../../1.8/docs/howto/deployment/checklist.txt:209
msgid ""
"By the time you push your code to production, it's hopefully robust, but you"
" can't rule out unexpected errors. Thankfully, Django can capture errors and"
" notify you accordingly."
msgstr ""

# 2449ff12778e4bbb8f69b0412d476a73
#: ../../../../1.8/docs/howto/deployment/checklist.txt:214
msgid ":setting:`LOGGING`"
msgstr ""

# d66668a7ed8c44d9aaec48703ab97fef
#: ../../../../1.8/docs/howto/deployment/checklist.txt:216
msgid ""
"Review your logging configuration before putting your website in production,"
" and check that it works as expected as soon as you have received some "
"traffic."
msgstr ""

# fe687a060ecd49b9b3c04155fbb8eb1d
#: ../../../../1.8/docs/howto/deployment/checklist.txt:219
msgid "See :doc:`/topics/logging` for details on logging."
msgstr ""

# 61b160e9acd945209cc4b00015198e35
#: ../../../../1.8/docs/howto/deployment/checklist.txt:222
msgid ":setting:`ADMINS` and :setting:`MANAGERS`"
msgstr ""

# eb6063b916664b6fa7a3af07ce03e034
#: ../../../../1.8/docs/howto/deployment/checklist.txt:224
msgid ":setting:`ADMINS` will be notified of 500 errors by email."
msgstr ""

# 2457ad9ed9c24b928c8ddce10d9645f7
#: ../../../../1.8/docs/howto/deployment/checklist.txt:226
msgid ""
":setting:`MANAGERS` will be notified of 404 errors. "
":setting:`IGNORABLE_404_URLS` can help filter out spurious reports."
msgstr ""

# 05270fe879ba4a8a9838c451b8cce555
#: ../../../../1.8/docs/howto/deployment/checklist.txt:229
msgid ""
"See :doc:`/howto/error-reporting` for details on error reporting by email."
msgstr ""

# d52679add6bf4d29a533be865e391e29
#: ../../../../1.8/docs/howto/deployment/checklist.txt:239
msgid "Customize the default error views"
msgstr ""

# e54baa08b0fb41beb6980059c7570117
#: ../../../../1.8/docs/howto/deployment/checklist.txt:241
msgid ""
"Django includes default views and templates for several HTTP error codes. "
"You may want to override the default templates by creating the following "
"templates in your root template directory: ``404.html``, ``500.html``, "
"``403.html``, and ``400.html``. The default views should suffice for 99% of "
"Web applications, but if you desire to customize them, see these "
"instructions which also contain details about the default templates:"
msgstr ""

# 3b63a46cc9594c6cb48c2a5728bc6a9f
#: ../../../../1.8/docs/howto/deployment/checklist.txt:248
msgid ":ref:`http_not_found_view`"
msgstr ""

# 814e7133244e4a9587ca6e06d14d247b
#: ../../../../1.8/docs/howto/deployment/checklist.txt:249
msgid ":ref:`http_internal_server_error_view`"
msgstr ""

# 5d89b0a8f04347d6b885accd4b00868f
#: ../../../../1.8/docs/howto/deployment/checklist.txt:250
msgid ":ref:`http_forbidden_view`"
msgstr ""

# 9d76c930e68241a68d67a0281f7dae86
#: ../../../../1.8/docs/howto/deployment/checklist.txt:251
msgid ":ref:`http_bad_request_view`"
msgstr ""

# b8c44616f348409ba59c7b7f334f4e11
#: ../../../../1.8/docs/howto/deployment/checklist.txt:254
msgid "Python Options"
msgstr ""

# 914e9954745f491faa8856a0bfecc1ab
#: ../../../../1.8/docs/howto/deployment/checklist.txt:256
msgid ""
"It's strongly recommended that you invoke the Python process running your "
"Django application using the `-R`_ option or with the "
":envvar:`PYTHONHASHSEED` environment variable set to ``random``."
msgstr ""

# dddda4e749b24adbaf9db0ec72166ad2
#: ../../../../1.8/docs/howto/deployment/checklist.txt:260
msgid ""
"These options help protect your site from denial-of-service (DoS) attacks "
"triggered by carefully crafted inputs. Such an attack can drastically "
"increase CPU usage by causing worst-case performance when creating ``dict`` "
"instances. See `oCERT advisory #2011-003 "
"<http://www.ocert.org/advisories/ocert-2011-003.html>`_ for more "
"information."
msgstr ""

# dd5ce0ee52b047ae966689bfa30213f5
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:3
msgid "How to use Django with FastCGI, SCGI, or AJP"
msgstr ""

# a378fcf83772483db0fa21cf8cc0d643
# f37b8bfcd20c46ca88936ff9d8c2def6
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:5
#: ../../../../1.8/docs/howto/deployment/index.txt:15
msgid "FastCGI support is deprecated and will be removed in Django 1.9."
msgstr ""

# a8a11bab03824c16842c98e59faaf28c
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:10
msgid ""
"Although :doc:`WSGI</howto/deployment/wsgi/index>` is the preferred "
"deployment platform for Django, many people use shared hosting, on which "
"protocols such as FastCGI, SCGI or AJP are the only viable options."
msgstr ""

# 656cebd0346b45539fe047ac12bad4ce
# 78b9a06905d042a59c1ed40100173cf0
# 299a1ee54c0c4c6190807b8549c9de72
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:14
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:64
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:338
msgid "Note"
msgstr ""

# 1bfec6d0d60f4f62aa8e0261c2da9f58
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:16
msgid ""
"This document primarily focuses on FastCGI. Other protocols, such as SCGI "
"and AJP, are also supported, through the ``flup`` Python package. See the "
"Protocols_ section below for specifics about SCGI and AJP."
msgstr ""

# 69c5e591166a4aafb2fb89f696a6c91d
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:20
msgid ""
"Essentially, FastCGI is an efficient way of letting an external application "
"serve pages to a Web server. The Web server delegates the incoming Web "
"requests (via a socket) to FastCGI, which executes the code and passes the "
"response back to the Web server, which, in turn, passes it back to the "
"client's Web browser."
msgstr ""

# 32e46ab35734443a89fa55c1c6b4d98f
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:25
msgid ""
"Like WSGI, FastCGI allows code to stay in memory, allowing requests to be "
"served with no startup time. While e.g. "
":doc:`mod_wsgi</howto/deployment/wsgi/modwsgi>` can either be configured "
"embedded in the Apache Web server process or as a separate daemon process, a"
" FastCGI process never runs inside the Web server process, always in a "
"separate, persistent process."
msgstr ""

# 61f49d7fff5f46b6802ebe4640f7398f
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:34
msgid "Why run code in a separate process?"
msgstr ""

# a542d7e9200f4916a09a42cafd6de49d
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:36
msgid ""
"The traditional ``mod_*`` arrangements in Apache embed various scripting "
"languages (most notably PHP, Python and Perl) inside the process space of "
"your Web server. Although this lowers startup time -- because code doesn't "
"have to be read off disk for every request -- it comes at the cost of memory"
" use."
msgstr ""

# dbaf00f2cdf544f99da325b3abb9fb48
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:42
msgid ""
"Due to the nature of FastCGI, it's even possible to have processes that run "
"under a different user account than the Web server process. That's a nice "
"security benefit on shared systems, because it means you can secure your "
"code from other users."
msgstr ""

# a9578ce723eb4eb9b36cccb9848b3893
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:48
msgid "Prerequisite: flup"
msgstr ""

# 496c70c9a127447c948dd15f907b255c
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:50
msgid ""
"Before you can start using FastCGI with Django, you'll need to install "
"flup_, a Python library for dealing with FastCGI. Version 0.5 or newer "
"should work fine."
msgstr ""

# 93e4e729b4d44f148b2df018c48a61f1
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:56
msgid "Starting your FastCGI server"
msgstr ""

# a3cf807df3724e11a1235b8d43fbcaa7
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:58
msgid ""
"FastCGI operates on a client-server model, and in most cases you'll be "
"starting the FastCGI process on your own. Your Web server (be it Apache, "
"lighttpd, or otherwise) only contacts your Django-FastCGI process when the "
"server needs a dynamic page to be loaded. Because the daemon is already "
"running with the code in memory, it's able to serve the response very "
"quickly."
msgstr ""

# e3d4ae8716be4077bc31a048e4f7af29
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:66
msgid ""
"If you're on a shared hosting system, you'll probably be forced to use Web "
"server-managed FastCGI processes. See the section below on running Django "
"with Web server-managed processes for more information."
msgstr ""

# fe5d897d4114413683d9ffb51f8d4938
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:70
msgid ""
"A Web server can connect to a FastCGI server in one of two ways: It can use "
"either a Unix domain socket (a \"named pipe\" on Win32 systems), or it can "
"use a TCP socket. What you choose is a manner of preference; a TCP socket is"
" usually easier due to permissions issues."
msgstr ""

# c5e5f81c33c14b2ebdeba1ceb89864ba
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:75
msgid ""
"To start your server, first change into the directory of your project "
"(wherever your :doc:`manage.py </ref/django-admin>` is), and then run the "
":djadmin:`runfcgi` command::"
msgstr ""

# 4df9db31f99446ccbb9caee883f4147e
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:81
msgid ""
"If you specify ``help`` as the only option after :djadmin:`runfcgi`, it'll "
"display a list of all the available options."
msgstr ""

# 32622e2baeb24c299170c9dca1f13dd1
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:84
msgid ""
"You'll need to specify either a :djadminopt:`socket`, a "
":djadminopt:`protocol` or both :djadminopt:`host` and :djadminopt:`port`. "
"Then, when you set up your Web server, you'll just need to point it at the "
"host/port or socket you specified when starting the FastCGI server. See the "
"examples_, below."
msgstr ""

# f519f4726fec46fca219d030fab23b95
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:90
msgid "Protocols"
msgstr "Protocolos"

# 4e7cac2b7f8142bebb1f74a6657723c8
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:92
msgid ""
"Django supports all the protocols that flup_ does, namely fastcgi_, `SCGI`_ "
"and `AJP1.3`_ (the Apache JServ Protocol, version 1.3). Select your "
"preferred protocol by using the :djadminopt:`protocol=\\<protocol_name\\> "
"<protocol>` option with ``./manage.py runfcgi`` -- where ``<protocol_name>``"
" may be one of: ``fcgi`` (the default), ``scgi`` or ``ajp``. For example::"
msgstr ""

# 470e4629a2bd423eac85c2aee82656c4
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:106
msgid "Examples"
msgstr "Ejemplos"

# 1628ced104c343249d3b228b6fa8b513
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:108
msgid "Running a threaded server on a TCP port::"
msgstr ""

# faab757b30e241d6b9584a1ea6484d2d
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:112
msgid "Running a preforked server on a Unix domain socket::"
msgstr ""

# 0a0505f9e9d74b5aa9040d84e780dde3
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:116
msgid "Socket security"
msgstr ""

# 858ecbec806242298270c24187b71c4b
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:118
msgid ""
"Django's default umask requires that the web server and the Django fastcgi "
"process be run with the same group **and** user. For increased security, you"
" can run them under the same group but as different users. If you do this, "
"you will need to set the umask to 0002 using the ``umask`` argument to "
"``runfcgi``."
msgstr ""

# 9483789409fc47b1be5fe94cdd14c160
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:124
msgid ""
"Run without daemonizing (backgrounding) the process (good for debugging)::"
msgstr ""

# 359e416799db453cb2a9e212320789b4
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:129
msgid "Stopping the FastCGI daemon"
msgstr ""

# 5a9fe43ab5cc48b392c78f17b51cbba6
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:131
msgid ""
"If you have the process running in the foreground, it's easy enough to stop "
"it: Simply hitting ``Ctrl-C`` will stop and quit the FastCGI server. "
"However, when you're dealing with background processes, you'll need to "
"resort to the Unix ``kill`` command."
msgstr ""

# abfb4bfe70a34a8aa25e5462ad1a88dc
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:136
msgid ""
"If you specify the :djadminopt:`pidfile` option to :djadmin:`runfcgi`, you "
"can kill the running FastCGI daemon like this::"
msgstr ""

# aefbeac0f17d44709d4f5efc4adc8f15
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:141
msgid "...where ``$PIDFILE`` is the ``pidfile`` you specified."
msgstr ""

# a68a08b1e4a74cfaa0f0d2087f47dbbf
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:143
msgid ""
"To easily restart your FastCGI daemon on Unix, try this small shell script::"
msgstr ""

# 8eca63e4ab5647e68f55f3f6d13de1a0
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:163
msgid "Apache setup"
msgstr ""

# 83a4a27205d04c50a205546f89173fd5
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:165
msgid ""
"To use Django with Apache and FastCGI, you'll need Apache installed and "
"configured, with `mod_fastcgi`_ installed and enabled. Consult the Apache "
"documentation for instructions."
msgstr ""

# 1c6d5abce3124b30acbfc8cf24cd13d7
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:169
msgid ""
"Once you've got that set up, point Apache at your Django FastCGI instance by"
" editing the ``httpd.conf`` (Apache configuration) file. You'll need to do "
"two things:"
msgstr ""

# 154a3a7259824f2eaedd80dd451f0766
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:173
msgid ""
"Use the ``FastCGIExternalServer`` directive to specify the location of your "
"FastCGI server."
msgstr ""

# a04336b605f64b19b59ef54027338931
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:175
msgid "Use ``mod_rewrite`` to point URLs at FastCGI as appropriate."
msgstr ""

# 331a3211381e4d4fa6c429c5154cca87
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:180
msgid "Specifying the location of the FastCGI server"
msgstr ""

# 76804d8e357146ecaad173706e264cc9
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:182
msgid ""
"The ``FastCGIExternalServer`` directive tells Apache how to find your "
"FastCGI server. As the `FastCGIExternalServer docs`_ explain, you can "
"specify either a ``socket`` or a ``host``. Here are examples of both:"
msgstr ""

# 4efa13adc1164501bce1d195d5b66a0d
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:194
msgid ""
"In either case, the file ``/home/user/public_html/mysite.fcgi`` doesn't "
"actually have to exist. It's just a URL used by the Web server internally --"
" a hook for signifying which requests at a URL should be handled by FastCGI."
" (More on this in the next section.)"
msgstr ""

# 8cf3362d8f5f4310924baf58d9d44dcc
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:202
msgid "Using mod_rewrite to point URLs at FastCGI"
msgstr ""

# 3a5df341d73240a1a8d4e2e369294051
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:204
msgid ""
"The second step is telling Apache to use FastCGI for URLs that match a "
"certain pattern. To do this, use the `mod_rewrite`_ module and rewrite URLs "
"to ``mysite.fcgi`` (or whatever you specified in the "
"``FastCGIExternalServer`` directive, as explained in the previous section)."
msgstr ""

# 34ee5ff7d0bb42e0982cbe8180dcbbc9
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:209
msgid ""
"In this example, we tell Apache to use FastCGI to handle any request that "
"doesn't represent a file on the filesystem and doesn't start with "
"``/media/``. This is probably the most common case, if you're using Django's"
" admin site:"
msgstr ""

# 91b76d171f564044bbbc4142fd756b57
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:227
msgid ""
"Django will automatically use the pre-rewrite version of the URL when "
"constructing URLs with the :ttag:`{% url %}<url>` template tag (and similar "
"methods)."
msgstr ""

# 56f0bebd5e084712afd184e53348f491
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:232
msgid "Using mod_fcgid as alternative to mod_fastcgi"
msgstr ""

# 0a323192780a4c88a1a2c38313f1d062
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:234
msgid ""
"Another way to serve applications through FastCGI is by using Apache's "
"`mod_fcgid`_ module. Compared to mod_fastcgi mod_fcgid handles FastCGI "
"applications differently in that it manages the spawning of worker processes"
" by itself and doesn't offer something like ``FastCGIExternalServer``. This "
"means that the configuration looks slightly different."
msgstr ""

# 8a538da4fd834c0e92b62de7ece7a6da
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:240
msgid ""
"In effect, you have to go the way of adding a script handler similar to what"
" is described later on regarding running Django in a :ref:`shared-hosting "
"environment <apache_shared_hosting>`. For further details please refer to "
"the `mod_fcgid reference`_"
msgstr ""

# 9d0b038242ef4b9fb42bdf11a281b770
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:249
msgid "lighttpd setup"
msgstr ""

# 8e7cc67865cc4f82b4cddcdd97fd1c34
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:251
msgid ""
"lighttpd_ is a lightweight Web server commonly used for serving static "
"files. It supports FastCGI natively and, thus, is a good choice for serving "
"both static and dynamic pages, if your site doesn't have any Apache-specific"
" needs."
msgstr ""

# 4b183c98809449b6a151f7173a666103
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:257
msgid ""
"Make sure ``mod_fastcgi`` is in your modules list, somewhere after "
"``mod_rewrite`` and ``mod_access``, but not after ``mod_accesslog``. You'll "
"probably want ``mod_alias`` as well, for serving admin media."
msgstr ""

# e2e54c73c99947a698b13c3275181c65
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:261
msgid "Add the following to your lighttpd config file:"
msgstr ""

# 378464e57cb54deb92de1e59628869f8
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:288
msgid "Running multiple Django sites on one lighttpd"
msgstr ""

# bc993ae5d8094274937413da8bb4bda0
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:290
msgid ""
"lighttpd lets you use \"conditional configuration\" to allow configuration "
"to be customized per host. To specify multiple FastCGI sites, just add a "
"conditional block around your FastCGI config for each site::"
msgstr ""

# a7ea0fe83ee0460cabcbf3aca77bb787
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:312
msgid ""
"You can also run multiple Django installations on the same site simply by "
"specifying multiple entries in the ``fastcgi.server`` directive. Add one "
"FastCGI host for each."
msgstr ""

# 7fb78bb5e2334f95a1b176a16627575d
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:317
msgid "Cherokee setup"
msgstr ""

# 9be10ae9451c46318d34706ad74ca2f3
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:319
msgid ""
"Cherokee is a very fast, flexible and easy to configure Web Server. It "
"supports the widespread technologies nowadays: FastCGI, SCGI, PHP, CGI, SSI,"
" TLS and SSL encrypted connections, Virtual hosts, Authentication, on the "
"fly encoding, Load Balancing, Apache compatible log files, Data Base "
"Balancer, Reverse HTTP Proxy and much more."
msgstr ""

# ae99958694d04e68a307d7044ac98e23
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:325
msgid ""
"The Cherokee project provides a documentation to `setting up Django`_ with "
"Cherokee."
msgstr ""

# 0ba7938414044d4eaa32bc0b87755cea
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:332
msgid "Running Django on a shared-hosting provider with Apache"
msgstr ""

# 37c5294bb5c04e01bf5bf78b8fb2fcb0
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:334
msgid ""
"Many shared-hosting providers don't allow you to run your own server daemons"
" or edit the ``httpd.conf`` file. In these cases, it's still possible to run"
" Django using Web server-spawned processes."
msgstr ""

# f985bd7c05934b9c833fbc0f6920cfec
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:340
msgid ""
"If you're using Web server-spawned processes, as explained in this section, "
"there's no need for you to start the FastCGI server on your own. Apache will"
" spawn a number of processes, scaling as it needs to."
msgstr ""

# bc8eccc9750e442996ba5ead4b08b2a4
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:344
msgid "In your Web root directory, add this to a file named ``.htaccess``:"
msgstr ""

# 971816d3869d4fab84c479fb18393ca8
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:353
msgid ""
"Then, create a small script that tells Apache how to spawn your FastCGI "
"program. Create a file ``mysite.fcgi`` and place it in your Web directory, "
"and be sure to make it executable::"
msgstr ""

# e5312b379034472494741fe1b8747ba6
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:372
msgid ""
"This works if your server uses mod_fastcgi. If, on the other hand, you are "
"using mod_fcgid the setup is mostly the same except for a slight change in "
"the ``.htaccess`` file. Instead of adding a fastcgi-script handler, you have"
" to add a fcgid-handler:"
msgstr ""

# 61b6c29bc07749aa86f3b5b81aa0ee3f
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:385
msgid "Restarting the spawned server"
msgstr ""

# 39cb0d4d564e4b21a50fd76e5b8f21de
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:387
msgid ""
"If you change any Python code on your site, you'll need to tell FastCGI the "
"code has changed. But there's no need to restart Apache in this case. "
"Rather, just reupload ``mysite.fcgi``, or edit the file, so that the "
"timestamp on the file will change. When Apache sees the file has been "
"updated, it will restart your Django application for you."
msgstr ""

# 1a4da6a94cdc46d2b08f7318f5076040
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:393
msgid ""
"If you have access to a command shell on a Unix system, you can accomplish "
"this easily by using the ``touch`` command::"
msgstr ""

# f8ac5c58f82a42ddb217a78ad1fa52d7
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:399
msgid "Serving admin media files"
msgstr ""

# 3276ee5616d34dbda8e1e0dcdec79000
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:401
msgid ""
"Regardless of the server and configuration you eventually decide to use, you"
" will also need to give some thought to how to serve the admin media files. "
"The advice given in the :ref:`mod_wsgi <serving-the-admin-files>` "
"documentation is also applicable in the setups detailed above."
msgstr ""

# 3fac678cbb6f4a97b4139a4f279388f3
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:407
msgid "Forcing the URL prefix to a particular value"
msgstr ""

# 015a0f0d2d274bf588b8f78cceb6f1f7
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:409
msgid ""
"Because many of these fastcgi-based solutions require rewriting the URL at "
"some point inside the Web server, the path information that Django sees may "
"not resemble the original URL that was passed in. This is a problem if the "
"Django application is being served from under a particular prefix and you "
"want your URLs from the :ttag:`{% url %}<url>` tag to look like the prefix, "
"rather than the rewritten version, which might contain, for example, "
"``mysite.fcgi``."
msgstr ""

# db0fe4536701481887c533b21faac19b
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:416
msgid ""
"Django makes a good attempt to work out what the real script name prefix "
"should be. In particular, if the Web server sets the ``SCRIPT_URL`` "
"(specific to Apache's mod_rewrite), or ``REDIRECT_URL`` (set by a few "
"servers, including Apache + mod_rewrite in some situations), Django will "
"work out the original prefix automatically."
msgstr ""

# 87aef8b6c73d408abcdff256cb6959ff
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:422
msgid ""
"In the cases where Django cannot work out the prefix correctly and where you"
" want the original value to be used in URLs, you can set the "
":setting:`FORCE_SCRIPT_NAME` setting in your main ``settings`` file. This "
"sets the script name uniformly for every URL served via that settings file. "
"Thus you'll need to use different settings files if you want different sets "
"of URLs to have different script names in this case, but that is a rare "
"situation."
msgstr ""

# db979bc60a134d0594e892a907a3c044
#: ../../../../1.8/docs/howto/deployment/fastcgi.txt:429
msgid ""
"As an example of how to use it, if your Django configuration is serving all "
"of the URLs under ``'/'`` and you wanted to use this setting, you would set "
"``FORCE_SCRIPT_NAME = ''`` in your settings file."
msgstr ""

# 08bee224b1354996b1b13908146df627
#: ../../../../1.8/docs/howto/deployment/index.txt:2
msgid "Deploying Django"
msgstr ""

# 5c603b9c575e4795a81afa80650db34d
#: ../../../../1.8/docs/howto/deployment/index.txt:4
msgid ""
"Django's chock-full of shortcuts to make Web developer's lives easier, but "
"all those tools are of no use if you can't easily deploy your sites. Since "
"Django's inception, ease of deployment has been a major goal. There's a "
"number of good ways to easily deploy Django:"
msgstr ""

# 7bed0bab6e0b4d2a88163e94f7f00a50
#: ../../../../1.8/docs/howto/deployment/index.txt:22
msgid ""
"If you're new to deploying Django and/or Python, we'd recommend you try "
":doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` first. In most cases it'll "
"be the easiest, fastest, and most stable deployment choice."
msgstr ""

# 2cf32e6cc54245849ae43ee237be5bc5
#: ../../../../1.8/docs/howto/deployment/index.txt:28
msgid ""
"`Chapter 12 of the Django Book (second edition)`_ discusses deployment and "
"especially scaling in more detail. However, note that this edition was "
"written against Django version 1.1 and has not been updated since "
"``mod_python`` was first deprecated, then completely removed in Django 1.5."
msgstr ""

# 20faf36683c647598dda1f0e4ba44c0d
# f2b8330011064c208827e0d23cd656dd
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:3
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:220
msgid "Authenticating against Django's user database from Apache"
msgstr ""

# 1230a789cfac4be383c7823969b18fe8
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:5
msgid ""
"Since keeping multiple authentication databases in sync is a common problem "
"when dealing with Apache, you can configure Apache to authenticate against "
"Django's :doc:`authentication system </topics/auth/index>` directly. This "
"requires Apache version >= 2.2 and mod_wsgi >= 2.0. For example, you could:"
msgstr ""

# c8ad7a6827954fa9a3897e1e02103f4f
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:10
msgid ""
"Serve static/media files directly from Apache only to authenticated users."
msgstr ""

# 7b171fb3337c4baf8263c3efb0c0a042
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:12
msgid ""
"Authenticate access to a Subversion_ repository against Django users with a "
"certain permission."
msgstr ""

# 36f3a2fb23bc4ef1b4d9f91d993269d3
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:15
msgid ""
"Allow certain users to connect to a WebDAV share created with mod_dav_."
msgstr ""

# 75912d2e9856461e9bdd094b4e4a5ec4
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:18
msgid ""
"If you have installed a :ref:`custom User model <auth-custom-user>` and want"
" to use this default auth handler, it must support an ``is_active`` "
"attribute. If you want to use group based authorization, your custom user "
"must have a relation named 'groups', referring to a related object that has "
"a 'name' field. You can also specify your own custom mod_wsgi auth handler "
"if your custom cannot conform to these requirements."
msgstr ""

# 1471f584d6894162801201aad312033a
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:29
msgid "Authentication with mod_wsgi"
msgstr ""

# ce9c682b6b474f4182b1ac6b972e7f50
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:33
msgid ""
"The use of ``WSGIApplicationGroup %{GLOBAL}`` in the configurations below "
"presumes that your Apache instance is running only one Django application. "
"If you are running more than one Django application, please refer to the "
"`Defining Application Groups`_ section of the mod_wsgi docs for more "
"information about this setting."
msgstr ""

# a620d2469eca4b339f8312b02fd02741
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:39
msgid ""
"Make sure that mod_wsgi is installed and activated and that you have "
"followed the steps to setup :doc:`Apache with mod_wsgi "
"</howto/deployment/wsgi/modwsgi>`."
msgstr ""

# d6ba0d13886540948c3c7b1c267f59d5
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:43
msgid ""
"Next, edit your Apache configuration to add a location that you want only "
"authenticated users to be able to view:"
msgstr ""

# 972f702760f94f4ca1e47df58e3d95a5
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:62
msgid ""
"The ``WSGIAuthUserScript`` directive tells mod_wsgi to execute the "
"``check_password`` function in specified wsgi script, passing the user name "
"and password that it receives from the prompt. In this example, the "
"``WSGIAuthUserScript`` is the same as the ``WSGIScriptAlias`` that defines "
"your application :doc:`that is created by django-admin startproject "
"</howto/deployment/wsgi/index>`."
msgstr ""

# a7f885efd10a492484128ab9450db18d
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:69
msgid "Using Apache 2.2 with authentication"
msgstr ""

# 63678d09bd6143cb9cc341f42f748bf8
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:71
msgid "Make sure that ``mod_auth_basic`` and ``mod_authz_user`` are loaded."
msgstr ""

# ea1956586ef344eda0501cf1d3eaa4be
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:73
msgid ""
"These might be compiled statically into Apache, or you might need to use "
"LoadModule to load them dynamically in your ``httpd.conf``:"
msgstr ""

# 63285ea76ded4f028b6512172fa81894
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:81
msgid ""
"Finally, edit your WSGI script ``mysite.wsgi`` to tie Apache's "
"authentication to your site's authentication mechanisms by importing the "
"``check_password`` function::"
msgstr ""

# e8ae969591e8445681c908e40741e07d
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:95
msgid ""
"Requests beginning with ``/secret/`` will now require a user to "
"authenticate."
msgstr ""

# 2c14332b9a5c44b8ae91f485107c09b3
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:97
msgid ""
"The mod_wsgi `access control mechanisms documentation`_ provides additional "
"details and information about alternative methods of authentication."
msgstr ""

# 181f4c7a29f7449f93ac94db87e46710
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:104
msgid "Authorization with mod_wsgi and Django groups"
msgstr ""

# ec116f9d01964580afc1a64d2a4b7316
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:106
msgid ""
"mod_wsgi also provides functionality to restrict a particular location to "
"members of a group."
msgstr ""

# f45e228bfc8c4362a8d90db4dfc65b27
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:109
msgid "In this case, the Apache configuration should look like this:"
msgstr ""

# a60a2741ee4047a7a27c7d39642a0d0a
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:128
msgid ""
"To support the ``WSGIAuthGroupScript`` directive, the same WSGI script "
"``mysite.wsgi`` must also import the ``groups_for_user`` function which "
"returns a list groups the given user belongs to."
msgstr ""

# 57657af5b4b6405abfed9dee023a2b33
#: ../../../../1.8/docs/howto/deployment/wsgi/apache-auth.txt:136
msgid ""
"Requests for ``/secret/`` will now also require user to be a member of the "
"\"secret-agents\" group."
msgstr ""

# f6eea453a70b4ccc94e1ee5fdfcfccf6
#: ../../../../1.8/docs/howto/deployment/wsgi/gunicorn.txt:3
msgid "How to use Django with Gunicorn"
msgstr ""

# d0785a392bb44359950946abe0d897fa
#: ../../../../1.8/docs/howto/deployment/wsgi/gunicorn.txt:7
msgid ""
"Gunicorn_ ('Green Unicorn') is a pure-Python WSGI server for UNIX. It has no"
" dependencies and is easy to install and use."
msgstr ""

# 8aa074d9a6014d3dbe31e41bae4e8a0b
#: ../../../../1.8/docs/howto/deployment/wsgi/gunicorn.txt:13
msgid "Installing Gunicorn"
msgstr ""

# 59bc6844f3ef413b895633f879a3cc0f
#: ../../../../1.8/docs/howto/deployment/wsgi/gunicorn.txt:15
msgid ""
"Installing gunicorn is as easy as ``pip install gunicorn``. For more "
"details, see the `gunicorn documentation`_."
msgstr ""

# 7a38e653f1b840a4bf2a56ab6e8c218d
#: ../../../../1.8/docs/howto/deployment/wsgi/gunicorn.txt:21
msgid "Running Django in Gunicorn as a generic WSGI application"
msgstr ""

# 2e18dfb79858492fae119917f5d53a5f
#: ../../../../1.8/docs/howto/deployment/wsgi/gunicorn.txt:23
msgid ""
"When Gunicorn is installed, a ``gunicorn`` command is available which starts"
" the Gunicorn server process. At its simplest, gunicorn just needs to be "
"called with the location of a module containing a WSGI application object "
"named `application`. So for a typical Django project, invoking gunicorn "
"would look like::"
msgstr ""

# c376416d92a741f4abde36780c994949
#: ../../../../1.8/docs/howto/deployment/wsgi/gunicorn.txt:31
msgid ""
"This will start one process running one thread listening on "
"``127.0.0.1:8000``. It requires that your project be on the Python path; the"
" simplest way to ensure that is to run this command from the same directory "
"as your ``manage.py`` file."
msgstr ""

# 6a4e7b26a1e847d2bd26d1765245f3b7
#: ../../../../1.8/docs/howto/deployment/wsgi/gunicorn.txt:35
msgid "See Gunicorn's `deployment documentation`_ for additional tips."
msgstr ""

# f0516f232f2f4e9ba6b3ebd11274ad0e
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:3
msgid "How to deploy with WSGI"
msgstr ""

# 7a0d8f2eaaeb49dcb068283d9b2cb6e3
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:5
msgid ""
"Django's primary deployment platform is WSGI_, the Python standard for web "
"servers and applications."
msgstr ""

# ce7f9ea73bcb40889ca5920e892f7acc
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:10
msgid ""
"Django's :djadmin:`startproject` management command sets up a simple default"
" WSGI configuration for you, which you can tweak as needed for your project,"
" and direct any WSGI-compliant application server to use."
msgstr ""

# 5ba5aa5b404a433ebec4286da2505db6
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:14
msgid ""
"Django includes getting-started documentation for the following WSGI "
"servers:"
msgstr ""

# 32f1f62fe1ff44dd97e65804be115090
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:25
msgid "The ``application`` object"
msgstr ""

# e88bff28438e40908d90eaf2a435e7e5
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:27
msgid ""
"The key concept of deploying with WSGI is the ``application`` callable which"
" the application server uses to communicate with your code. It's commonly "
"provided as an object named ``application`` in a Python module accessible to"
" the server."
msgstr ""

# 31bc1e8f8f6c4a8bb76b0fb4756f9451
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:32
msgid ""
"The :djadmin:`startproject` command creates a file "
":file:`<project_name>/wsgi.py` that contains such an ``application`` "
"callable."
msgstr ""

# dfd6e7593d614433b4d73eee213beae5
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:35
msgid ""
"It's used both by Django's development server and in production WSGI "
"deployments."
msgstr ""

# e9b5b329295c40448cb1fd05daddcec3
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:38
msgid ""
"WSGI servers obtain the path to the ``application`` callable from their "
"configuration. Django's built-in servers, namely the :djadmin:`runserver` "
"and :djadmin:`runfcgi` commands, read it from the "
":setting:`WSGI_APPLICATION` setting. By default, it's set to "
"``<project_name>.wsgi.application``, which points to the ``application`` "
"callable in :file:`<project_name>/wsgi.py`."
msgstr ""

# 83e9d7ca6b4b4bd595f5405ba898514b
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:45
msgid "Configuring the settings module"
msgstr ""

# 2d40fa1910d845f985693edd9a49aefc
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:47
msgid ""
"When the WSGI server loads your application, Django needs to import the "
"settings module — that's where your entire application is defined."
msgstr ""

# 21a19be760a0444aaa7a1676277bbd23
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:50
msgid ""
"Django uses the :envvar:`DJANGO_SETTINGS_MODULE` environment variable to "
"locate the appropriate settings module. It must contain the dotted path to "
"the settings module. You can use a different value for development and "
"production; it all depends on how you organize your settings."
msgstr ""

# eb1c215a690c422284cd988299e55f79
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:55
msgid ""
"If this variable isn't set, the default :file:`wsgi.py` sets it to "
"``mysite.settings``, where ``mysite`` is the name of your project. That's "
"how :djadmin:`runserver` discovers the default settings file by default."
msgstr ""

# 2cc72dbe607f43ba84c04e5f2eee381c
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:61
msgid ""
"Since environment variables are process-wide, this doesn't work when you run"
" multiple Django sites in the same process. This happens with mod_wsgi."
msgstr ""

# 2d29ed5a7cf14e548908b38e48b39aed
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:64
msgid ""
"To avoid this problem, use mod_wsgi's daemon mode with each site in its own "
"daemon process, or override the value from the environment by enforcing "
"``os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"`` in your "
":file:`wsgi.py`."
msgstr ""

# 8c04d7d381b8460db4cdd4d3d649882c
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:71
msgid "Applying WSGI middleware"
msgstr ""

# 1c9d733aa4c644a39220b0c6d7907ab1
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:73
msgid ""
"To apply `WSGI middleware`_ you can simply wrap the application object. For "
"instance you could add these lines at the bottom of :file:`wsgi.py`::"
msgstr ""

# d730ef5a4c2d4ab39297983effdc4c2a
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:79
msgid ""
"You could also replace the Django WSGI application with a custom WSGI "
"application that later delegates to the Django WSGI application, if you want"
" to combine a Django application with a WSGI application of another "
"framework."
msgstr ""

# ff9894a2c92341f7908d8a24c3d3a692
#: ../../../../1.8/docs/howto/deployment/wsgi/index.txt:87
msgid ""
"Some third-party WSGI middleware do not call ``close`` on the response "
"object after handling a request — most notably Sentry's error reporting "
"middleware up to version 2.0.7. In those cases the "
":data:`~django.core.signals.request_finished` signal isn't sent. This can "
"result in idle connections to database and memcache servers."
msgstr ""

# f576fa20d56e4df4acb354fe644d82fd
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:3
msgid "How to use Django with Apache and mod_wsgi"
msgstr ""

# 0effa948970c4712a2a6cf1b46b25298
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:5
msgid ""
"Deploying Django with Apache_ and `mod_wsgi`_ is a tried and tested way to "
"get Django into production."
msgstr ""

# 6f5b772d4edc4fddb1bf2f1da6dc532f
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:11
msgid ""
"mod_wsgi is an Apache module which can host any Python WSGI_ application, "
"including Django. Django will work with any version of Apache which supports"
" mod_wsgi."
msgstr ""

# fb1c0c7e75d5420b83411cf6df83fbae
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:17
msgid ""
"The `official mod_wsgi documentation`_ is fantastic; it's your source for "
"all the details about how to use mod_wsgi. You'll probably want to start "
"with the `installation and configuration documentation`_."
msgstr ""

# e81d462eb094485382d86576085c37b0
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:25
msgid "Basic configuration"
msgstr ""

# ad0bf09e392a458a9ad6f54fab62ccc5
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:27
msgid ""
"Once you've got mod_wsgi installed and activated, edit your Apache server's "
"``httpd.conf`` file and add the following. If you are using a version of "
"Apache older than 2.4, replace ``Require all granted`` with ``Allow from "
"all`` and also add the line ``Order deny,allow`` above it."
msgstr ""

# c8080512e21a4b2d9a43a50d667e34da
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:43
msgid ""
"The first bit in the ``WSGIScriptAlias`` line is the base URL path you want "
"to serve your application at (``/`` indicates the root url), and the second "
"is the location of a \"WSGI file\" -- see below -- on your system, usually "
"inside of your project package (``mysite`` in this example). This tells "
"Apache to serve any request below the given URL using the WSGI application "
"defined in that file."
msgstr ""

# 1c7d9b8c681a4d32ab67eedfb581f8ce
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:50
msgid ""
"The ``WSGIPythonPath`` line ensures that your project package is available "
"for import on the Python path; in other words, that ``import mysite`` works."
msgstr ""

# 3646c0cc5da44126b17c49477d77fd6e
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:53
msgid ""
"The ``<Directory>`` piece just ensures that Apache can access your "
":file:`wsgi.py` file."
msgstr ""

# 108b177a636e456d8a14d601b657413c
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:56
msgid ""
"Next we'll need to ensure this :file:`wsgi.py` with a WSGI application "
"object exists. As of Django version 1.4, :djadmin:`startproject` will have "
"created one for you; otherwise, you'll need to create it. See the :doc:`WSGI"
" overview documentation</howto/deployment/wsgi/index>` for the default "
"contents you should put in this file, and what else you can add to it."
msgstr ""

# d254f43c91ec4a85b604cb8ef4a520f1
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:64
msgid ""
"If multiple Django sites are run in a single mod_wsgi process, all of them "
"will use the settings of whichever one happens to run first. This can be "
"solved by changing::"
msgstr ""

# 83b26eb6c38f48d6869605f3d86edc92
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:70
msgid "in ``wsgi.py``, to::"
msgstr ""

# 217f9ebffdfc4796a1592af2ba17c287
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:74
msgid ""
"or by :ref:`using mod_wsgi daemon mode<daemon-mode>` and ensuring that each "
"site runs in its own daemon process."
msgstr ""

# 5ebe011b5d98468b99c70329008827d0
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:78
msgid "Using a virtualenv"
msgstr ""

# 4397ed6325f84fbeb0a99a6e8a40420b
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:80
msgid ""
"If you install your project's Python dependencies inside a `virtualenv`_, "
"you'll need to add the path to this virtualenv's ``site-packages`` directory"
" to your Python path as well. To do this, add an additional path to your "
"``WSGIPythonPath`` directive, with multiple paths separated by a colon "
"(``:``) if using a UNIX-like system, or a semicolon (``;``) if using "
"Windows. If any part of a directory path contains a space character, the "
"complete argument string to ``WSGIPythonPath`` must be quoted:"
msgstr ""

# 88697819ca1c4b97b890f997d395cb98
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:92
msgid ""
"Make sure you give the correct path to your virtualenv, and replace "
"``python3.X`` with the correct Python version (e.g. ``python3.4``)."
msgstr ""

# a4dc40d7a15d4332bf601983e4e8c990
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:100
msgid "Using mod_wsgi daemon mode"
msgstr ""

# 632a6645721546a081bbeb11c1fdd043
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:102
msgid ""
"\"Daemon mode\" is the recommended mode for running mod_wsgi (on non-Windows"
" platforms). To create the required daemon process group and delegate the "
"Django instance to run in it, you will need to add appropriate "
"``WSGIDaemonProcess`` and ``WSGIProcessGroup`` directives. A further change "
"required to the above configuration if you use daemon mode is that you can't"
" use ``WSGIPythonPath``; instead you should use the ``python-path`` option "
"to ``WSGIDaemonProcess``, for example:"
msgstr ""

# 0f85f1b035254a68bacdbf5c43d6d355
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:115
msgid ""
"If you want to serve your project in a subdirectory "
"(``http://example.com/mysite`` in this example), you can add "
"``WSGIScriptAlias`` to the configuration above:"
msgstr ""

# 145e1d8d601146a1929462c32f53a284
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:123
msgid ""
"See the official mod_wsgi documentation for `details on setting up daemon "
"mode`_."
msgstr ""

# 1f9be8f87cbc44048c4e25a08c20eae5
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:131
msgid "Serving files"
msgstr ""

# f4c54c343d784721a2cff28d56234220
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:133
msgid ""
"Django doesn't serve files itself; it leaves that job to whichever Web "
"server you choose."
msgstr ""

# 53bcc4c70b2e4a6c9007919f49242816
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:136
msgid ""
"We recommend using a separate Web server -- i.e., one that's not also "
"running Django -- for serving media. Here are some good choices:"
msgstr ""

# d61a188c6ed74f94964e3e922bff60c0
# 64aa9f3fe11f476e8a8cd0d4414aceef
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:139
#: ../../../../1.8/docs/howto/static-files/deployment.txt:73
msgid "Nginx_"
msgstr ""

# 602dad8f0a224e77a149f5a2b5b39332
# f589228404a947909535bd2749a61087
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:140
#: ../../../../1.8/docs/howto/static-files/deployment.txt:74
msgid "A stripped-down version of Apache_"
msgstr ""

# 4201d63015d244369b673ebbd1c9c692
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:142
msgid ""
"If, however, you have no option but to serve media files on the same Apache "
"``VirtualHost`` as Django, you can set up Apache to serve some URLs as "
"static media, and others using the mod_wsgi interface to Django."
msgstr ""

# cdad6459ae1d441492b6ab71063d79c1
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:146
msgid ""
"This example sets up Django at the site root, but explicitly serves "
"``robots.txt``, ``favicon.ico``, any CSS file, and anything in the "
"``/static/`` and ``/media/`` URL space as a static file. All other URLs will"
" be served using mod_wsgi:"
msgstr ""

# cf365ea0b8fe49e291143411f1c50153
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:175
msgid ""
"If you are using a version of Apache older than 2.4, replace ``Require all "
"granted`` with ``Allow from all`` and also add the line ``Order deny,allow``"
" above it."
msgstr ""

# 50130f0bae15437b8cc7f7b5745c9b9f
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:190
msgid "Serving the admin files"
msgstr ""

# 6e4cfbdb90e94dc284d5006705bca1be
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:192
msgid ""
"When :mod:`django.contrib.staticfiles` is in :setting:`INSTALLED_APPS`, the "
"Django development server automatically serves the static files of the admin"
" app (and any other installed apps). This is however not the case when you "
"use any other server arrangement. You're responsible for setting up Apache, "
"or whichever Web server you're using, to serve the admin files."
msgstr ""

# b9edc09433c845fabf2aa5abbc878e71
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:198
msgid ""
"The admin files live in (:file:`django/contrib/admin/static/admin`) of the "
"Django distribution."
msgstr ""

# 0a801b49b07145fbae80f61f7f7197ff
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:201
msgid ""
"We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle "
"the admin files (along with a Web server as outlined in the previous "
"section; this means using the :djadmin:`collectstatic` management command to"
" collect the static files in :setting:`STATIC_ROOT`, and then configuring "
"your Web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), "
"but here are three other approaches:"
msgstr ""

# ae0285009115474fa7012d914ee4ca86
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:208
msgid ""
"Create a symbolic link to the admin static files from within your document "
"root (this may require ``+FollowSymLinks`` in your Apache configuration)."
msgstr ""

# 86831dab3b034ac2af6a8d7548daa7c2
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:212
msgid ""
"Use an ``Alias`` directive, as demonstrated above, to alias the appropriate "
"URL (probably :setting:`STATIC_URL` + ``admin/``) to the actual location of "
"the admin files."
msgstr ""

# 5db4e12a998145399d03e65d1a56ffed
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:216
msgid ""
"Copy the admin static files so that they live within your Apache document "
"root."
msgstr ""

# c518d3ee01794a4980c9c9bcd57901de
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:222
msgid ""
"Django provides a handler to allow Apache to authenticate users directly "
"against Django's authentication backends. See the :doc:`mod_wsgi "
"authentication documentation </howto/deployment/wsgi/apache-auth>`."
msgstr ""

# 77fbb826cae943fa9fdc78e867916e8d
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:227
msgid "If you get a UnicodeEncodeError"
msgstr ""

# fba0c1cf34d049be89e5aa202d55ca7f
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:229
msgid ""
"If you're taking advantage of the internationalization features of Django "
"(see :doc:`/topics/i18n/index`) and you intend to allow users to upload "
"files, you must ensure that the environment used to start Apache is "
"configured to accept non-ASCII file names. If your environment is not "
"correctly configured, you will trigger ``UnicodeEncodeError`` exceptions "
"when calling functions like the ones in :mod:`os.path` on filenames that "
"contain non-ASCII characters."
msgstr ""

# f64c70fd93ae439cb81c58e7ff75eb52
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:236
msgid ""
"To avoid these problems, the environment used to start Apache should contain"
" settings analogous to the following::"
msgstr ""

# 1b0957f642fb4df5abfb7c5553d48bf2
#: ../../../../1.8/docs/howto/deployment/wsgi/modwsgi.txt:242
msgid ""
"Consult the documentation for your operating system for the appropriate "
"syntax and location to put these configuration items; "
"``/etc/apache2/envvars`` is a common location on Unix platforms. Once you "
"have added these statements to your environment, restart Apache."
msgstr ""

# 05b3deb418f54021972b1572672fbb05
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:3
msgid "How to use Django with uWSGI"
msgstr ""

# 812a0296010b4fe085906cd5116b2f81
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:7
msgid ""
"uWSGI_ is a fast, self-healing and developer/sysadmin-friendly application "
"container server coded in pure C."
msgstr ""

# 9cc8a5f6a81442258d5be42e6b3ec7bb
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:14
msgid ""
"The uWSGI docs offer a `tutorial`_ covering Django, nginx, and uWSGI (one "
"possible deployment setup of many). The docs below are focused on how to "
"integrate Django with uWSGI."
msgstr ""

# 9a2e30a59eb04ddb90d2cb2d3ce06282
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:21
msgid "Prerequisite: uWSGI"
msgstr ""

# 5a0672a4ab554a8796a950c8e752dd1f
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:23
msgid ""
"The uWSGI wiki describes several `installation procedures`_. Using pip, the "
"Python package manager, you can install any uWSGI version with a single "
"command. For example:"
msgstr ""

# 07c6f96e371a4308b8156e0521c968f3
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:39
msgid ""
"Some distributions, including Debian and Ubuntu, ship an outdated version of"
" uWSGI that does not conform to the WSGI specification. Versions prior to "
"1.2.6 do not call ``close`` on the response object after handling a request."
" In those cases the :data:`~django.core.signals.request_finished` signal "
"isn't sent. This can result in idle connections to database and memcache "
"servers."
msgstr ""

# 16d1f4180dd040e58ab7255c65a52311
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:47
msgid "uWSGI model"
msgstr ""

# 72eea2f9574d478ab4d407f4f0cd5322
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:49
msgid ""
"uWSGI operates on a client-server model. Your Web server (e.g., nginx, "
"Apache) communicates with a django-uwsgi \"worker\" process to serve dynamic"
" content. See uWSGI's `background documentation`_ for more detail."
msgstr ""

# d14506883f6b4eac97e0b51ba81deb78
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:56
msgid "Configuring and starting the uWSGI server for Django"
msgstr ""

# 23de30ae0bfc4b7b90414ce0662d13b5
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:58
msgid ""
"uWSGI supports multiple ways to configure the process. See uWSGI's "
"`configuration documentation`_ and `examples`_."
msgstr ""

# 3f8804e8394046daa70d1977ac833a68
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:64
msgid "Here's an example command to start a uWSGI server::"
msgstr ""

# faf1d747beee4fc8acabbf464616ad1a
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:79
msgid ""
"This assumes you have a top-level project package named ``mysite``, and "
"within it a module :file:`mysite/wsgi.py` that contains a WSGI "
"``application`` object. This is the layout you'll have if you ran ``django-"
"admin startproject mysite`` (using your own project name in place of "
"``mysite``) with a recent version of Django. If this file doesn't exist, "
"you'll need to create it. See the :doc:`/howto/deployment/wsgi/index` "
"documentation for the default contents you should put in this file and what "
"else you can add to it."
msgstr ""

# cb3b2fa5ff8f49638c417f6aacf8657f
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:87
msgid "The Django-specific options here are:"
msgstr ""

# dc7c6096bf7041d6bf0384bcd809a59a
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:89
msgid ""
"``chdir``: The path to the directory that needs to be on Python's import "
"path -- i.e., the directory containing the ``mysite`` package."
msgstr ""

# 73727924d2ac4190a6239ad712711a84
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:91
msgid ""
"``module``: The WSGI module to use -- probably the ``mysite.wsgi`` module "
"that :djadmin:`startproject` creates."
msgstr ""

# aef3d283a6494b879cb3cc4f10ff0cec
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:93
msgid "``env``: Should probably contain at least ``DJANGO_SETTINGS_MODULE``."
msgstr ""

# 566ac9026a5d4bae8fe32566fc3ad998
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:94
msgid "``home``: Optional path to your project virtualenv."
msgstr ""

# 97744eaf6a004e75a63651038de231c0
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:96
msgid "Example ini configuration file::"
msgstr ""

# eb35899bce0741df9054e1399bca5843
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:107
msgid "Example ini configuration file usage::"
msgstr ""

# a51a439c44f546718cdabf3303860bf8
#: ../../../../1.8/docs/howto/deployment/wsgi/uwsgi.txt:111
msgid ""
"See the uWSGI docs on `managing the uWSGI process`_ for information on "
"starting, stopping and reloading the uWSGI workers."
msgstr ""

# 8cb4f420393f4943a0ae886b33a89fc8
#: ../../../../1.8/docs/howto/error-reporting.txt:4
msgid ""
"When you're running a public site you should always turn off the "
":setting:`DEBUG` setting. That will make your server run much faster, and "
"will also prevent malicious users from seeing details of your application "
"that can be revealed by the error pages."
msgstr ""

# 8d91e48809254ba9abc3daf796b62746
#: ../../../../1.8/docs/howto/error-reporting.txt:9
msgid ""
"However, running with :setting:`DEBUG` set to ``False`` means you'll never "
"see errors generated by your site -- everyone will just see your public "
"error pages. You need to keep track of errors that occur in deployed sites, "
"so Django can be configured to create reports with details about those "
"errors."
msgstr ""

# b837ba5a480b401e86e551492756d066
#: ../../../../1.8/docs/howto/error-reporting.txt:15
msgid "Email reports"
msgstr ""

# b21f16c45c1c4bac97a967f01bd1aae0
#: ../../../../1.8/docs/howto/error-reporting.txt:18
msgid "Server errors"
msgstr ""

# 707f9799ccd44ac79efc7e0736f41fc6
#: ../../../../1.8/docs/howto/error-reporting.txt:20
msgid ""
"When :setting:`DEBUG` is ``False``, Django will email the users listed in "
"the :setting:`ADMINS` setting whenever your code raises an unhandled "
"exception and results in an internal server error (HTTP status code 500). "
"This gives the administrators immediate notification of any errors. The "
":setting:`ADMINS` will get a description of the error, a complete Python "
"traceback, and details about the HTTP request that caused the error."
msgstr ""

# b30cbbbbfde74d758399e7a946002d1e
#: ../../../../1.8/docs/howto/error-reporting.txt:29
msgid ""
"In order to send email, Django requires a few settings telling it how to "
"connect to your mail server. At the very least, you'll need to specify "
":setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and "
":setting:`EMAIL_HOST_PASSWORD`, though other settings may be also required "
"depending on your mail server's configuration. Consult :doc:`the Django "
"settings documentation </ref/settings>` for a full list of email-related "
"settings."
msgstr ""

# a79f1b0c4d4a4e16848d22b35fc3eda3
#: ../../../../1.8/docs/howto/error-reporting.txt:42
msgid ""
"To activate this behavior, put the email addresses of the recipients in the "
":setting:`ADMINS` setting."
msgstr ""

# 9a3085d154774a3b9af77daf664f0463
#: ../../../../1.8/docs/howto/error-reporting.txt:47
msgid ""
"Server error emails are sent using the logging framework, so you can "
"customize this behavior by :doc:`customizing your logging configuration "
"</topics/logging>`."
msgstr ""

# 57d39fe7ea834038915d1e5395c54fff
#: ../../../../1.8/docs/howto/error-reporting.txt:52
msgid "404 errors"
msgstr ""

# 4846354c4d3f4c1f9e7b85fac56ab1e6
#: ../../../../1.8/docs/howto/error-reporting.txt:54
msgid ""
"Django can also be configured to email errors about broken links (404 \"page"
" not found\" errors). Django sends emails about 404 errors when:"
msgstr ""

# 9bd8131f03984a08b2bb6719cc70040e
#: ../../../../1.8/docs/howto/error-reporting.txt:57
msgid ":setting:`DEBUG` is ``False``;"
msgstr ""

# 778193d701614fa59a9d9f34a5e455be
#: ../../../../1.8/docs/howto/error-reporting.txt:59
msgid ""
"Your :setting:`MIDDLEWARE_CLASSES` setting includes "
":class:`django.middleware.common.BrokenLinkEmailsMiddleware`."
msgstr ""

# 16fc180cba5842789bb1054abdad10a8
#: ../../../../1.8/docs/howto/error-reporting.txt:62
msgid ""
"If those conditions are met, Django will email the users listed in the "
":setting:`MANAGERS` setting whenever your code raises a 404 and the request "
"has a referer. (It doesn't bother to email for 404s that don't have a "
"referer -- those are usually just people typing in broken URLs or broken Web"
" 'bots)."
msgstr ""

# 5acbaba83b1d4b2284737b5051debbd9
#: ../../../../1.8/docs/howto/error-reporting.txt:69
msgid ""
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` must appear "
"before other middleware that intercepts 404 errors, such as "
":class:`~django.middleware.locale.LocaleMiddleware` or "
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`. "
"Put it towards the top of your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

# bcf94b08d34640278d9bbe56d887dce3
#: ../../../../1.8/docs/howto/error-reporting.txt:75
msgid ""
"You can tell Django to stop reporting particular 404s by tweaking the "
":setting:`IGNORABLE_404_URLS` setting. It should be a tuple of compiled "
"regular expression objects. For example::"
msgstr ""

# a1ddd03af9644b4289a23d5a8706b39b
#: ../../../../1.8/docs/howto/error-reporting.txt:85
msgid ""
"In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will "
"*not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr ""

# df7bb6a962224034a532a90130e97c93
#: ../../../../1.8/docs/howto/error-reporting.txt:88
msgid ""
"The following example shows how to exclude some conventional URLs that "
"browsers and crawlers often request::"
msgstr ""

# e90c1043c2b4419aaeed7587b4efe555
#: ../../../../1.8/docs/howto/error-reporting.txt:98
msgid ""
"(Note that these are regular expressions, so we put a backslash in front of "
"periods to escape them.)"
msgstr ""

# d6a486d9183b44808a7d9c2faa5a65d6
#: ../../../../1.8/docs/howto/error-reporting.txt:101
msgid ""
"If you'd like to customize the behavior of "
":class:`django.middleware.common.BrokenLinkEmailsMiddleware` further (for "
"example to ignore requests coming from web crawlers), you should subclass it"
" and override its methods."
msgstr ""

# e609df7972fd41d7a059ac7ceb103602
#: ../../../../1.8/docs/howto/error-reporting.txt:108
msgid ""
"404 errors are logged using the logging framework. By default, these log "
"records are ignored, but you can use them for error reporting by writing a "
"handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr ""

# cc0245276fe443ca862445655ae84285
#: ../../../../1.8/docs/howto/error-reporting.txt:115
msgid "Filtering error reports"
msgstr ""

# dc1f18526bca4f0b893b479200d3a4e3
#: ../../../../1.8/docs/howto/error-reporting.txt:118
msgid "Filtering sensitive information"
msgstr ""

# 1fe144ca8b0a4868916be9e21a5fda58
#: ../../../../1.8/docs/howto/error-reporting.txt:122
msgid ""
"Error reports are really helpful for debugging errors, so it is generally "
"useful to record as much relevant information about those errors as "
"possible. For example, by default Django records the `full traceback`_ for "
"the exception raised, each `traceback frame`_’s local variables, and the "
":class:`~django.http.HttpRequest`’s :ref:`attributes<httprequest-"
"attributes>`."
msgstr ""

# 9872a235042745318659b397b8b2a585
#: ../../../../1.8/docs/howto/error-reporting.txt:128
msgid ""
"However, sometimes certain types of information may be too sensitive and "
"thus may not be appropriate to be kept track of, for example a user's "
"password or credit card number. So Django offers a set of function "
"decorators to help you control which information should be filtered out of "
"error reports in a production environment (that is, where :setting:`DEBUG` "
"is set to ``False``): :func:`sensitive_variables` and "
":func:`sensitive_post_parameters`."
msgstr ""

# 561a0292ec2444e8a7b3558b6e2d7070
#: ../../../../1.8/docs/howto/error-reporting.txt:140
msgid ""
"If a function (either a view or any regular callback) in your code uses "
"local variables susceptible to contain sensitive information, you may "
"prevent the values of those variables from being included in error reports "
"using the ``sensitive_variables`` decorator::"
msgstr ""

# 8ff4b91b43dc4a4f81176e002ca641db
#: ../../../../1.8/docs/howto/error-reporting.txt:154
msgid ""
"In the above example, the values for the ``user``, ``pw`` and ``cc`` "
"variables will be hidden and replaced with stars (`**********`) in the error"
" reports, whereas the value of the ``name`` variable will be disclosed."
msgstr ""

# b3c584d721ea45b1ae1b440c5e007d90
#: ../../../../1.8/docs/howto/error-reporting.txt:159
msgid ""
"To systematically hide all local variables of a function from error logs, do"
" not provide any argument to the ``sensitive_variables`` decorator::"
msgstr ""

# cf4477d8b80c477da1d1a770551d6f3a
#: ../../../../1.8/docs/howto/error-reporting.txt:166
msgid "When using multiple decorators"
msgstr ""

# bac9d1e264054670857a8e9be531a1c5
#: ../../../../1.8/docs/howto/error-reporting.txt:168
msgid ""
"If the variable you want to hide is also a function argument (e.g. "
"'``user``’ in the following example), and if the decorated function has "
"multiple decorators, then make sure to place ``@sensitive_variables`` at the"
" top of the decorator chain. This way it will also hide the function "
"argument as it gets passed through the other decorators::"
msgstr ""

# d4a55170d2fd43779913e6c06fd709fa
#: ../../../../1.8/docs/howto/error-reporting.txt:182
msgid ""
"If one of your views receives an :class:`~django.http.HttpRequest` object "
"with :attr:`POST parameters<django.http.HttpRequest.POST>` susceptible to "
"contain sensitive information, you may prevent the values of those "
"parameters from being included in the error reports using the "
"``sensitive_post_parameters`` decorator::"
msgstr ""

# eff50f11fd94424589234cbd0c299e1e
#: ../../../../1.8/docs/howto/error-reporting.txt:198
msgid ""
"In the above example, the values for the ``pass_word`` and "
"``credit_card_number`` POST parameters will be hidden and replaced with "
"stars (`**********`) in the request's representation inside the error "
"reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr ""

# efb8a316800e41339ab0e559f70dd845
#: ../../../../1.8/docs/howto/error-reporting.txt:203
msgid ""
"To systematically hide all POST parameters of a request in error reports, do"
" not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr ""

# c8f0fe3194c7452b906b01a4379042f8
#: ../../../../1.8/docs/howto/error-reporting.txt:210
msgid ""
"All POST parameters are systematically filtered out of error reports for "
"certain :mod:`django.contrib.auth.views` views (``login``, "
"``password_reset_confirm``, ``password_change``, and ``add_view`` and "
"``user_change_password`` in the ``auth`` admin) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""

# abb466a472724f9eaf6958c6c3d5eeda
#: ../../../../1.8/docs/howto/error-reporting.txt:219
msgid "Custom error reports"
msgstr ""

# 7b9d46fa42ed4ce2a40c0c932db754bb
#: ../../../../1.8/docs/howto/error-reporting.txt:221
msgid ""
"All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is,"
" respectively, annotate the decorated function with the names of sensitive "
"variables and annotate the ``HttpRequest`` object with the names of "
"sensitive POST parameters, so that this sensitive information can later be "
"filtered out of reports when an error occurs. The actual filtering is done "
"by Django's default error reporter filter: "
":class:`django.views.debug.SafeExceptionReporterFilter`. This filter uses "
"the decorators' annotations to replace the corresponding values with stars "
"(`**********`) when the error reports are produced. If you wish to override "
"or customize this default behavior for your entire site, you need to define "
"your own filter class and tell Django to use it via the "
":setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` setting::"
msgstr ""

# a598a9524bbd49fda402bdb90fa6ba63
#: ../../../../1.8/docs/howto/error-reporting.txt:236
msgid ""
"You may also control in a more granular way which filter to use within any "
"given view by setting the ``HttpRequest``’s ``exception_reporter_filter`` "
"attribute::"
msgstr ""

# fdac839750cd46608705a40ecc7344e3
#: ../../../../1.8/docs/howto/error-reporting.txt:247
msgid ""
"Your custom filter class needs to inherit from "
":class:`django.views.debug.SafeExceptionReporterFilter` and may override the"
" following methods:"
msgstr ""

# e62ed418726c4775a527c88d33e4cdea
#: ../../../../1.8/docs/howto/error-reporting.txt:255
msgid ""
"Returns ``True`` to activate the filtering operated in the other methods. By"
" default the filter is active if :setting:`DEBUG` is ``False``."
msgstr ""

# 357fa359b4fb43aea5ee048558b6179d
#: ../../../../1.8/docs/howto/error-reporting.txt:260
msgid ""
"Returns the representation string of the request object, that is, the value "
"that would be returned by ``repr(request)``, except it uses the filtered "
"dictionary of POST parameters as determined by "
":meth:`SafeExceptionReporterFilter.get_post_parameters`."
msgstr ""

# 52d8175f5b9d4cccb485202f9137c7f9
#: ../../../../1.8/docs/howto/error-reporting.txt:267
msgid ""
"Returns the filtered dictionary of POST parameters. By default it replaces "
"the values of sensitive parameters with stars (`**********`)."
msgstr ""

# 2c416ac93af841a49188d986d696ddb2
#: ../../../../1.8/docs/howto/error-reporting.txt:272
msgid ""
"Returns the filtered dictionary of local variables for the given traceback "
"frame. By default it replaces the values of sensitive variables with stars "
"(`**********`)."
msgstr ""

# 2259a262211c43ae976ca977778c8049
#: ../../../../1.8/docs/howto/error-reporting.txt:278
msgid ""
"You can also set up custom error reporting by writing a custom piece of "
":ref:`exception middleware <exception-middleware>`. If you do write custom "
"error handling, it's a good idea to emulate Django's built-in error handling"
" and only report/log errors if :setting:`DEBUG` is ``False``."
msgstr ""

# 10450c067e394c9b87cded5183c4e4c2
#: ../../../../1.8/docs/howto/index.txt:2
msgid "\"How-to\" guides"
msgstr ""

# c7878956f9ed4793bbbf1d408dbcfe7a
#: ../../../../1.8/docs/howto/index.txt:4
msgid ""
"Here you'll find short answers to \"How do I....?\" types of questions. "
"These how-to guides don't cover topics in depth -- you'll find that material"
" in the :doc:`/topics/index` and the :doc:`/ref/index`. However, these "
"guides will help you quickly accomplish common tasks."
msgstr ""

# 22079871331e4723abf45fee194c5f1c
#: ../../../../1.8/docs/howto/index.txt:33
msgid ""
"The `Django community aggregator`_, where we aggregate content from the "
"global Django community. Many writers in the aggregator write this sort of "
"how-to material."
msgstr ""

# c64e40a19ab74171b09f9cb8202e72a0
#: ../../../../1.8/docs/howto/initial-data.txt:3
msgid "Providing initial data for models"
msgstr ""

# c7df80348e834099a7f2b39541f615d4
#: ../../../../1.8/docs/howto/initial-data.txt:5
msgid ""
"It's sometimes useful to pre-populate your database with hard-coded data "
"when you're first setting up an app. There's a couple of ways you can have "
"Django automatically create this data: you can provide `initial data via "
"fixtures`_, or you can provide `initial data as SQL`_."
msgstr ""

# 0fc3103d124d4a1e93af39a915832548
#: ../../../../1.8/docs/howto/initial-data.txt:10
msgid ""
"In general, using a fixture is a cleaner method since it's database-"
"agnostic, but initial SQL is also quite a bit more flexible."
msgstr ""

# a929fd7ae21f43c09918d3a6290466ea
#: ../../../../1.8/docs/howto/initial-data.txt:19
msgid "Providing initial data with fixtures"
msgstr ""

# d72e027e036040b8895e65b3620dee6c
#: ../../../../1.8/docs/howto/initial-data.txt:21
msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. The most straightforward way of creating a fixture if you've "
"already got some data is to use the :djadmin:`manage.py dumpdata <dumpdata>`"
" command. Or, you can write fixtures by hand; fixtures can be written as "
"JSON, XML or YAML (with PyYAML_ installed) documents. The "
":doc:`serialization documentation </topics/serialization>` has more details "
"about each of these supported :ref:`serialization formats <serialization-"
"formats>`."
msgstr ""

# dfc62414634d46c191b9b9b7b40db1b0
#: ../../../../1.8/docs/howto/initial-data.txt:31
msgid ""
"As an example, though, here's what a fixture for a simple ``Person`` model "
"might look like in JSON:"
msgstr ""

# c767aa06fc2645bf87f83cc966abfe56
#: ../../../../1.8/docs/howto/initial-data.txt:55
msgid "And here's that same fixture as YAML:"
msgstr ""

# 75044463a6d84c1b939f96c82938e60e
#: ../../../../1.8/docs/howto/initial-data.txt:70
msgid "You'll store this data in a ``fixtures`` directory inside your app."
msgstr ""

# 5014d784cd904ac8a13398baf9d22f66
#: ../../../../1.8/docs/howto/initial-data.txt:72
msgid ""
"Loading data is easy: just call :djadmin:`manage.py loaddata <loaddata>` "
"``<fixturename>``, where ``<fixturename>`` is the name of the fixture file "
"you've created. Each time you run :djadmin:`loaddata`, the data will be read"
" from the fixture and re-loaded into the database. Note this means that if "
"you change one of the rows created by a fixture and then run "
":djadmin:`loaddata` again, you'll wipe out any changes you've made."
msgstr ""

# f9dddc353ca14dfdb35e98d7ec3dcbae
#: ../../../../1.8/docs/howto/initial-data.txt:80
msgid "Automatically loading initial data fixtures"
msgstr ""

# b48615d43fc5425883d6720b906dadd3
#: ../../../../1.8/docs/howto/initial-data.txt:84
msgid ""
"If an application uses migrations, there is no automatic loading of "
"fixtures. Since migrations will be required for applications in Django 1.9, "
"this behavior is considered deprecated. If you want to load initial data for"
" an app, consider doing it in a :ref:`data migration <data-migrations>`."
msgstr ""

# d2c29be278674393b3c2c4208c8643e0
#: ../../../../1.8/docs/howto/initial-data.txt:89
msgid ""
"If you create a fixture named ``initial_data.[xml/yaml/json]``, that fixture"
" will be loaded every time you run :djadmin:`migrate`. This is extremely "
"convenient, but be careful: remember that the data will be refreshed *every "
"time* you run :djadmin:`migrate`. So don't use ``initial_data`` for data "
"you'll want to edit."
msgstr ""

# 73f6f0ec15f14d2e9ebe264571829a8e
#: ../../../../1.8/docs/howto/initial-data.txt:95
msgid "Where Django finds fixture files"
msgstr ""

# 4f68bb40f66a4efab628fa4391900294
#: ../../../../1.8/docs/howto/initial-data.txt:97
msgid ""
"By default, Django looks in the ``fixtures`` directory inside each app for "
"fixtures. You can set the :setting:`FIXTURE_DIRS` setting to a list of "
"additional directories where Django should look."
msgstr ""

# fb0bbc301a94414e951cd452400e888d
#: ../../../../1.8/docs/howto/initial-data.txt:101
msgid ""
"When running :djadmin:`manage.py loaddata <loaddata>`, you can also specify "
"a path to a fixture file, which overrides searching the usual directories."
msgstr ""

# 62dfcfb45ed7424da5fae3dbccfc9fc5
#: ../../../../1.8/docs/howto/initial-data.txt:107
msgid ""
"Fixtures are also used by the :ref:`testing framework <topics-testing-"
"fixtures>` to help set up a consistent test environment."
msgstr ""

# c4dff7432e8246d8960c776b835e6392
#: ../../../../1.8/docs/howto/initial-data.txt:113
msgid "Providing initial SQL data"
msgstr ""

# d9b6dd7891914f41b12f8c478be97acb
#: ../../../../1.8/docs/howto/initial-data.txt:117
msgid ""
"If an application uses migrations, there is no loading of initial SQL data "
"(including backend-specific SQL data). Since migrations will be required for"
" applications in Django 1.9, this behavior is considered deprecated. If you "
"want to use initial SQL for an app, consider doing it in a :ref:`data "
"migration <data-migrations>`."
msgstr ""

# 4fd45d7f5d6f4f4f86248617352e3061
#: ../../../../1.8/docs/howto/initial-data.txt:123
msgid ""
"Django provides a hook for passing the database arbitrary SQL that's "
"executed just after the CREATE TABLE statements when you run "
":djadmin:`migrate`. You can use this hook to populate default records, or "
"you could also create SQL functions, views, triggers, etc."
msgstr ""

# ed55111a587c411eb9b47f2bd8aa8b08
#: ../../../../1.8/docs/howto/initial-data.txt:128
msgid ""
"The hook is simple: Django just looks for a file called "
"``sql/<modelname>.sql``, in your app directory, where ``<modelname>`` is the"
" model's name in lowercase."
msgstr ""

# 72653afc170546db8408e169fe1642db
#: ../../../../1.8/docs/howto/initial-data.txt:131
msgid ""
"So, if you had a ``Person`` model in an app called ``myapp``, you could add "
"arbitrary SQL to the file ``sql/person.sql`` inside your ``myapp`` "
"directory. Here's an example of what the file might contain:"
msgstr ""

# dd3470f3e2774e86b614efc4f86601d6
#: ../../../../1.8/docs/howto/initial-data.txt:140
msgid ""
"Each SQL file, if given, is expected to contain valid SQL statements which "
"will insert the desired data (e.g., properly-formatted ``INSERT`` statements"
" separated by semicolons)."
msgstr ""

# 2313e19a4dcf4a0e86a0810e904802cb
#: ../../../../1.8/docs/howto/initial-data.txt:144
msgid ""
"The SQL files are read by the :djadmin:`sqlcustom` and :djadmin:`sqlall` "
"commands in :doc:`manage.py </ref/django-admin>`. Refer to the "
":doc:`manage.py documentation </ref/django-admin>` for more information."
msgstr ""

# 11354c0e401d4154a9d9ce4395fff235
#: ../../../../1.8/docs/howto/initial-data.txt:148
msgid ""
"Note that if you have multiple SQL data files, there's no guarantee of the "
"order in which they're executed. The only thing you can assume is that, by "
"the time your custom data files are executed, all the database tables "
"already will have been created."
msgstr ""

# 315352fc36514cf5b6cc3db9c2b4ced1
#: ../../../../1.8/docs/howto/initial-data.txt:153
msgid "Initial SQL data and testing"
msgstr ""

# e8aeae3d0c344bb3a6e258e6364f38ca
#: ../../../../1.8/docs/howto/initial-data.txt:155
msgid ""
"This technique *cannot* be used to provide initial data for testing "
"purposes. Django's test framework flushes the contents of the test database "
"after each test; as a result, any data added using the custom SQL hook will "
"be lost."
msgstr ""

# 0b4ab76ce7e44b2596ac29337cb16ef4
#: ../../../../1.8/docs/howto/initial-data.txt:160
msgid ""
"If you require data for a test case, you should add it using either a "
":ref:`test fixture <topics-testing-fixtures>`, or programmatically add it "
"during the ``setUp()`` of your test case."
msgstr ""

# 9a628da4248f4900bf97e3d2f3e51746
#: ../../../../1.8/docs/howto/initial-data.txt:165
msgid "Database-backend-specific SQL data"
msgstr ""

# 0c1b6302b81947c3940974f466418dd8
#: ../../../../1.8/docs/howto/initial-data.txt:167
msgid ""
"There's also a hook for backend-specific SQL data. For example, you can have"
" separate initial-data files for PostgreSQL and SQLite. For each app, Django"
" looks for a file called ``<app_label>/sql/<modelname>.<backend>.sql``, "
"where ``<app_label>`` is your app directory, ``<modelname>`` is the model's "
"name in lowercase and ``<backend>`` is the last part of the module name "
"provided for the :setting:`ENGINE <DATABASE-ENGINE>` in your settings file "
"(e.g., if you have defined a database with an :setting:`ENGINE <DATABASE-"
"ENGINE>` value of ``django.db.backends.sqlite3``, Django will look for "
"``<app_label>/sql/<modelname>.sqlite3.sql``)."
msgstr ""

# d00f23410e644f2fa2d82a4dec312a62
#: ../../../../1.8/docs/howto/initial-data.txt:178
msgid ""
"Backend-specific SQL data is executed before non-backend-specific SQL data. "
"For example, if your app contains the files ``sql/person.sql`` and "
"``sql/person.sqlite3.sql`` and you're installing the app on SQLite, Django "
"will execute the contents of ``sql/person.sqlite3.sql`` first, then "
"``sql/person.sql``."
msgstr ""

# 8564cc0831dc414892d420712c3d01b5
#: ../../../../1.8/docs/howto/jython.txt:3
msgid "Running Django on Jython"
msgstr ""

# 8bdf9e753d98456cb134fc3619b52e9c
#: ../../../../1.8/docs/howto/jython.txt:7
msgid ""
"Jython_ is an implementation of Python that runs on the Java platform (JVM)."
" This document will get you up and running with Django on top of Jython."
msgstr ""

# 7223abcedb7d4e22b5c8408209149908
#: ../../../../1.8/docs/howto/jython.txt:11
msgid "Installing Jython"
msgstr ""

# 2e064f1a442d49e2bab2cf8dc732747e
#: ../../../../1.8/docs/howto/jython.txt:13
msgid ""
"Django works with Jython versions 2.7b2 and higher. See the Jython_ Web site"
" for download and installation instructions."
msgstr ""

# 7291f63109634ad7bd2f58ea903e457b
#: ../../../../1.8/docs/howto/jython.txt:19
msgid "Creating a servlet container"
msgstr ""

# 6d4d07d1d5e446d9be5372830b428306
#: ../../../../1.8/docs/howto/jython.txt:21
msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight Web server you can use for testing, so you "
"won't need to set up anything else until you're ready to deploy Django in "
"production."
msgstr ""

# 0df0ab40d95c4f55a93e85bed584769a
#: ../../../../1.8/docs/howto/jython.txt:25
msgid ""
"If you want to use Django on a production site, use a Java servlet "
"container, such as `Apache Tomcat`_. Full JavaEE applications servers such "
"as `GlassFish`_ or `JBoss`_ are also OK, if you need the extra features they"
" include."
msgstr ""

# 6e69fe32fbf34714ae627b07bcaf19f9
#: ../../../../1.8/docs/howto/jython.txt:34
msgid "Installing Django"
msgstr ""

# d36e996f87634fd2b59c1cfaac38a3ee
#: ../../../../1.8/docs/howto/jython.txt:36
msgid ""
"The next step is to install Django itself. This is exactly the same as "
"installing Django on standard Python, so see :ref:`removing-old-versions-of-"
"django` and :ref:`install-django-code` for instructions."
msgstr ""

# 0b79db7c66d8458296d00e66d035eec9
#: ../../../../1.8/docs/howto/jython.txt:42
msgid "Installing Jython platform support libraries"
msgstr ""

# d4962d319aba4610836c790387db6a1d
#: ../../../../1.8/docs/howto/jython.txt:44
msgid ""
"The `django-jython`_ project contains database backends and management "
"commands for Django/Jython development. Note that the builtin Django "
"backends won't work on top of Jython."
msgstr ""

# ec7cc29392004c788cbf30a3e27047f7
#: ../../../../1.8/docs/howto/jython.txt:50
msgid ""
"To install it, follow the `installation instructions`_ detailed on the "
"project Web site. Also, read the `database backends`_ documentation there."
msgstr ""

# a8a39e9d4d9549c3a4e3d97a403bc9e3
#: ../../../../1.8/docs/howto/jython.txt:57
msgid "Differences with Django on Jython"
msgstr ""

# 30e09189d1914965b90fd9600507de91
#: ../../../../1.8/docs/howto/jython.txt:61
msgid ""
"At this point, Django on Jython should behave nearly identically to Django "
"running on standard Python. However, are a few differences to keep in mind:"
msgstr ""

# 60644922c554468ebc03f62af9ff3e6b
#: ../../../../1.8/docs/howto/jython.txt:64
msgid ""
"Remember to use the ``jython`` command instead of ``python``. The "
"documentation uses ``python`` for consistency, but if you're using Jython "
"you'll want to mentally replace ``python`` with ``jython`` every time it "
"occurs."
msgstr ""

# 2e2a60ff700148cea221b4bd63261d35
#: ../../../../1.8/docs/howto/jython.txt:69
msgid ""
"Similarly, you'll need to use the ``JYTHONPATH`` environment variable "
"instead of ``PYTHONPATH``."
msgstr ""

# 4e203310347149749474593d5b6d29b6
#: ../../../../1.8/docs/howto/jython.txt:72
msgid "Any part of Django that requires `Pillow`_ will not work."
msgstr ""

# 489f9d9f44164a7d90a2c36f06a34f00
#: ../../../../1.8/docs/howto/jython.txt:5
msgid "Jython"
msgstr ""

# 489f9d9f44164a7d90a2c36f06a34f00
#: ../../../../1.8/docs/howto/jython.txt:5
msgid "Java"
msgstr ""

# 489f9d9f44164a7d90a2c36f06a34f00
#: ../../../../1.8/docs/howto/jython.txt:5
msgid "JVM"
msgstr ""

# 1865f8180720400e8aa8e0fe42c5fcfb
#: ../../../../1.8/docs/howto/jython.txt:59
msgid "JYTHONPATH"
msgstr ""

# 775b93d9b0eb4a94a6d90d7e8474a97c
#: ../../../../1.8/docs/howto/legacy-databases.txt:3
msgid "Integrating Django with a legacy database"
msgstr ""

# 3a5c8bcd250e48108b8b672b7b609882
#: ../../../../1.8/docs/howto/legacy-databases.txt:5
msgid ""
"While Django is best suited for developing new applications, it's quite "
"possible to integrate it into legacy databases. Django includes a couple of "
"utilities to automate as much of this process as possible."
msgstr ""

# b0987f8690684d86b5c2ebc6620fd4d1
#: ../../../../1.8/docs/howto/legacy-databases.txt:9
msgid ""
"This document assumes you know the Django basics, as covered in the "
":doc:`tutorial </intro/tutorial01>`."
msgstr ""

# 90f4250197834f3c8e45b90be7950ef8
#: ../../../../1.8/docs/howto/legacy-databases.txt:12
msgid ""
"Once you've got Django set up, you'll follow this general process to "
"integrate with an existing database."
msgstr ""

# 95c6e4cc9bde41af966f6647ef1adddd
#: ../../../../1.8/docs/howto/legacy-databases.txt:16
msgid "Give Django your database parameters"
msgstr ""

# 63f8ce432ef549e1ba82ea81cb2cdbb8
#: ../../../../1.8/docs/howto/legacy-databases.txt:18
msgid ""
"You'll need to tell Django what your database connection parameters are, and"
" what the name of the database is. Do that by editing the "
":setting:`DATABASES` setting and assigning values to the following keys for "
"the ``'default'`` connection:"
msgstr ""

# af2db2b98d1a4a9c856c0b89095e0817
#: ../../../../1.8/docs/howto/legacy-databases.txt:23
msgid ":setting:`NAME`"
msgstr ""

# 4e76bd6e651943119fedc0ea42f525f8
#: ../../../../1.8/docs/howto/legacy-databases.txt:24
msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ""

# 355c85143b6649a0a77157b06cbe0ef9
#: ../../../../1.8/docs/howto/legacy-databases.txt:25
msgid ":setting:`USER`"
msgstr ""

# 591428852b2d49bd88aaf38769c425a9
#: ../../../../1.8/docs/howto/legacy-databases.txt:26
msgid ":setting:`PASSWORD`"
msgstr ""

# 2b575d5d4c034bb091afe3d917131768
#: ../../../../1.8/docs/howto/legacy-databases.txt:27
msgid ":setting:`HOST`"
msgstr ""

# a4aeba2128d24f85b139debbf9221c1f
#: ../../../../1.8/docs/howto/legacy-databases.txt:28
msgid ":setting:`PORT`"
msgstr ""

# 82d0096768b840a7a80457f08636f132
#: ../../../../1.8/docs/howto/legacy-databases.txt:31
msgid "Auto-generate the models"
msgstr ""

# b5edbf8e1a144e659ec010c64b1fe586
#: ../../../../1.8/docs/howto/legacy-databases.txt:35
msgid ""
"Django comes with a utility called :djadmin:`inspectdb` that can create "
"models by introspecting an existing database. You can view the output by "
"running this command::"
msgstr ""

# e9240e1be7d94c699d3661b33da71e3f
#: ../../../../1.8/docs/howto/legacy-databases.txt:41
msgid "Save this as a file by using standard Unix output redirection::"
msgstr ""

# 53cc445bfa3048eb9650556fc02e3f95
#: ../../../../1.8/docs/howto/legacy-databases.txt:45
msgid ""
"This feature is meant as a shortcut, not as definitive model generation. See"
" the :djadmin:`documentation of inspectdb <inspectdb>` for more information."
msgstr ""

# 11aea33a7cf3438a83dc7e38e5c33954
#: ../../../../1.8/docs/howto/legacy-databases.txt:48
msgid ""
"Once you've cleaned up your models, name the file ``models.py`` and put it "
"in the Python package that holds your app. Then add the app to your "
":setting:`INSTALLED_APPS` setting."
msgstr ""

# 88f42faa1c104049a6d1910095bdf4bd
#: ../../../../1.8/docs/howto/legacy-databases.txt:52
msgid ""
"By default, :djadmin:`inspectdb` creates unmanaged models. That is, "
"``managed = False`` in the model's ``Meta`` class tells Django not to manage"
" each table's creation, modification, and deletion::"
msgstr ""

# 7e04192ded0743dd86eb9c004bd475be
#: ../../../../1.8/docs/howto/legacy-databases.txt:63
msgid ""
"If you do want to allow Django to manage the table's lifecycle, you'll need "
"to change the :attr:`~django.db.models.Options.managed` option above to "
"``True`` (or simply remove it because ``True`` is its default value)."
msgstr ""

# 20b628b130374dfe9298786ee6c25bf9
#: ../../../../1.8/docs/howto/legacy-databases.txt:68
msgid "Install the core Django tables"
msgstr ""

# 084b50cf25b747c2bbd4fe63caf5f858
#: ../../../../1.8/docs/howto/legacy-databases.txt:70
msgid ""
"Next, run the :djadmin:`migrate` command to install any extra needed "
"database records such as admin permissions and content types::"
msgstr ""

# c0794851d13043f780dd0b626b05a0de
#: ../../../../1.8/docs/howto/legacy-databases.txt:76
msgid "Test and tweak"
msgstr ""

# 1000e7efa9d845e4896df9b127cfdd1d
#: ../../../../1.8/docs/howto/legacy-databases.txt:78
msgid ""
"Those are the basic steps -- from here you'll want to tweak the models "
"Django generated until they work the way you'd like. Try accessing your data"
" via the Django database API, and try editing objects via Django's admin "
"site, and edit the models file accordingly."
msgstr ""

# f0326bbcdb714aaa90c0ae55ecb9c102
#: ../../../../1.8/docs/howto/outputting-csv.txt:3
msgid "Outputting CSV with Django"
msgstr ""

# 4620d8ed89a84558be71f1f0247b0f53
#: ../../../../1.8/docs/howto/outputting-csv.txt:5
msgid ""
"This document explains how to output CSV (Comma Separated Values) "
"dynamically using Django views. To do this, you can either use the Python "
"CSV library or the Django template system."
msgstr ""

# d3d766f7dd384f66bf9e25445de8a89c
#: ../../../../1.8/docs/howto/outputting-csv.txt:10
msgid "Using the Python CSV library"
msgstr ""

# 8466a932bf5d4b9481ec784d9222ec2f
#: ../../../../1.8/docs/howto/outputting-csv.txt:12
msgid ""
"Python comes with a CSV library, :mod:`csv`. The key to using it with Django"
" is that the :mod:`csv` module's CSV-creation capability acts on file-like "
"objects, and Django's :class:`~django.http.HttpResponse` objects are file-"
"like objects."
msgstr ""

# c8393a111d064e538a376b7847ff2862
#: ../../../../1.8/docs/howto/outputting-csv.txt:16
msgid "Here's an example::"
msgstr ""

# 61e8c2839f29443aa14fbdc3fecc0544
# 9133c224bb8d4bf7b00ce32e900e15e6
#: ../../../../1.8/docs/howto/outputting-csv.txt:32
#: ../../../../1.8/docs/howto/outputting-pdf.txt:69
msgid ""
"The code and comments should be self-explanatory, but a few things deserve a"
" mention:"
msgstr ""

# bb619eb5c13943d3bb2114d9a73f23ab
#: ../../../../1.8/docs/howto/outputting-csv.txt:35
msgid ""
"The response gets a special MIME type, :mimetype:`text/csv`. This tells "
"browsers that the document is a CSV file, rather than an HTML file. If you "
"leave this off, browsers will probably interpret the output as HTML, which "
"will result in ugly, scary gobbledygook in the browser window."
msgstr ""

# da206ffd98f44c4f89979b5867e602f7
#: ../../../../1.8/docs/howto/outputting-csv.txt:40
msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the CSV file. This filename is arbitrary; call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialogue,"
" etc."
msgstr ""

# 00af909ffbe24e488f8eeda73f71c4f6
#: ../../../../1.8/docs/howto/outputting-csv.txt:45
msgid ""
"Hooking into the CSV-generation API is easy: Just pass ``response`` as the "
"first argument to ``csv.writer``. The ``csv.writer`` function expects a "
"file-like object, and :class:`~django.http.HttpResponse` objects fit the "
"bill."
msgstr ""

# 47c4bb84e1604b16bb79197a987e7c04
#: ../../../../1.8/docs/howto/outputting-csv.txt:50
msgid ""
"For each row in your CSV file, call ``writer.writerow``, passing it an "
"iterable object such as a list or tuple."
msgstr ""

# 7be04f42704c44ddb1253cb966352584
#: ../../../../1.8/docs/howto/outputting-csv.txt:53
msgid ""
"The CSV module takes care of quoting for you, so you don't have to worry "
"about escaping strings with quotes or commas in them. Just pass "
"``writerow()`` your raw strings, and it'll do the right thing."
msgstr ""

# 410d9a637c0942d8b41b77e8e464e6b2
#: ../../../../1.8/docs/howto/outputting-csv.txt:57
msgid "Handling Unicode on Python 2"
msgstr ""

# 69b1ff5a976440f2898118706814ba3f
#: ../../../../1.8/docs/howto/outputting-csv.txt:59
msgid ""
"Python 2's :mod:`csv` module does not support Unicode input. Since Django "
"uses Unicode internally this means strings read from sources such as "
":class:`~django.http.HttpRequest` are potentially problematic. There are a "
"few options for handling this:"
msgstr ""

# 185322d9570d43c58cc0782d37d8cdc5
#: ../../../../1.8/docs/howto/outputting-csv.txt:64
msgid "Manually encode all Unicode objects to a compatible encoding."
msgstr ""

# 97a13ee04eda4e1199a1333fac322fa3
#: ../../../../1.8/docs/howto/outputting-csv.txt:66
msgid ""
"Use the ``UnicodeWriter`` class provided in the `csv module's examples "
"section`_."
msgstr ""

# 1321d96d49e048e9817c3ceacc8eaa02
#: ../../../../1.8/docs/howto/outputting-csv.txt:69
msgid ""
"Use the `python-unicodecsv module`_, which aims to be a drop-in replacement "
"for :mod:`csv` that gracefully handles Unicode."
msgstr ""

# bd9963a9554046758658f06f0025c5cc
#: ../../../../1.8/docs/howto/outputting-csv.txt:72
msgid ""
"For more information, see the Python documentation of the :mod:`csv` module."
msgstr ""

# d52cc91f786a4514ac28e87c6c96aae8
#: ../../../../1.8/docs/howto/outputting-csv.txt:80
msgid "Streaming large CSV files"
msgstr ""

# 2e8dd782350d46b2b91a1571b8c70159
#: ../../../../1.8/docs/howto/outputting-csv.txt:82
msgid ""
"When dealing with views that generate very large responses, you might want "
"to consider using Django's :class:`~django.http.StreamingHttpResponse` "
"instead. For example, by streaming a file that takes a long time to generate"
" you can avoid a load balancer dropping a connection that might have "
"otherwise timed out while the server was generating the response."
msgstr ""

# f47fc7afab96449f82a8b579cb17accd
#: ../../../../1.8/docs/howto/outputting-csv.txt:88
msgid ""
"In this example, we make full use of Python generators to efficiently handle"
" the assembly and transmission of a large CSV file::"
msgstr ""

# ec7d556e79d64313b9e58202531251e7
#: ../../../../1.8/docs/howto/outputting-csv.txt:118
msgid "Using the template system"
msgstr ""

# c52f9e7a54e340f1bfff81eb125e8ce5
#: ../../../../1.8/docs/howto/outputting-csv.txt:120
msgid ""
"Alternatively, you can use the :doc:`Django template system "
"</topics/templates>` to generate CSV. This is lower-level than using the "
"convenient Python :mod:`csv` module, but the solution is presented here for "
"completeness."
msgstr ""

# 2ddca3b9ea6e4df3af3b322935470f45
#: ../../../../1.8/docs/howto/outputting-csv.txt:124
msgid ""
"The idea here is to pass a list of items to your template, and have the "
"template output the commas in a :ttag:`for` loop."
msgstr ""

# 9f3a64d91adb454eb83f8cf4eff4a256
#: ../../../../1.8/docs/howto/outputting-csv.txt:127
msgid "Here's an example, which generates the same CSV file as above::"
msgstr ""

# d0ac3939e1e846bdb857fbbe0599b5e9
#: ../../../../1.8/docs/howto/outputting-csv.txt:151
msgid ""
"The only difference between this example and the previous example is that "
"this one uses template loading instead of the CSV module. The rest of the "
"code -- such as the ``content_type='text/csv'`` -- is the same."
msgstr ""

# b68e2036c2144efe927bb62ad454e031
#: ../../../../1.8/docs/howto/outputting-csv.txt:155
msgid ""
"Then, create the template ``my_template_name.txt``, with this template code:"
msgstr ""

# 38825af6b90b4212aa998e617794e356
#: ../../../../1.8/docs/howto/outputting-csv.txt:162
msgid ""
"This template is quite basic. It just iterates over the given data and "
"displays a line of CSV for each row. It uses the :tfilter:`addslashes` "
"template filter to ensure there aren't any problems with quotes."
msgstr ""

# dbfb66a8c13d4ada8ac5fcc0324c3e1e
#: ../../../../1.8/docs/howto/outputting-csv.txt:167
msgid "Other text-based formats"
msgstr ""

# db1e2bb9f06a4d7daebd8c936f1dead2
#: ../../../../1.8/docs/howto/outputting-csv.txt:169
msgid ""
"Notice that there isn't very much specific to CSV here -- just the specific "
"output format. You can use either of these techniques to output any text-"
"based format you can dream of. You can also use a similar technique to "
"generate arbitrary binary data; see :doc:`/howto/outputting-pdf` for an "
"example."
msgstr ""

# 593cf17458234ad7ac8d4a6f06191516
#: ../../../../1.8/docs/howto/outputting-pdf.txt:3
msgid "Outputting PDFs with Django"
msgstr ""

# e35393bf7b9b439f979dcb368983c53c
#: ../../../../1.8/docs/howto/outputting-pdf.txt:5
msgid ""
"This document explains how to output PDF files dynamically using Django "
"views. This is made possible by the excellent, open-source ReportLab_ Python"
" PDF library."
msgstr ""

# 9adadbf584c04b61a4ea87deded4d0fa
#: ../../../../1.8/docs/howto/outputting-pdf.txt:9
msgid ""
"The advantage of generating PDF files dynamically is that you can create "
"customized PDFs for different purposes -- say, for different users or "
"different pieces of content."
msgstr ""

# 6489b918fc834b799f9ea30ac9d476c0
#: ../../../../1.8/docs/howto/outputting-pdf.txt:13
msgid ""
"For example, Django was used at kusports.com_ to generate customized, "
"printer-friendly NCAA tournament brackets, as PDF files, for people "
"participating in a March Madness contest."
msgstr ""

# ae73968542314685a471fef322e3d306
#: ../../../../1.8/docs/howto/outputting-pdf.txt:21
msgid "Install ReportLab"
msgstr ""

# 6d0bdfafae0c4f43881b83eed756c2ac
#: ../../../../1.8/docs/howto/outputting-pdf.txt:23
msgid ""
"The ReportLab library is `available on PyPI`_. A `user guide`_ (not "
"coincidentally, a PDF file) is also available for download. You can install "
"ReportLab with ``pip``:"
msgstr ""

# 3d52b47627d34ead86aff1b220324611
#: ../../../../1.8/docs/howto/outputting-pdf.txt:31
msgid ""
"Test your installation by importing it in the Python interactive "
"interpreter::"
msgstr ""

# fa68ca14e92845abbc9dfea4aee15e46
#: ../../../../1.8/docs/howto/outputting-pdf.txt:35
msgid "If that command doesn't raise any errors, the installation worked."
msgstr ""

# 61701d13c7fe47f7b05978173635d7d2
#: ../../../../1.8/docs/howto/outputting-pdf.txt:41
msgid "Write your view"
msgstr ""

# c6a65a967413476fbaeec720abac7bfd
#: ../../../../1.8/docs/howto/outputting-pdf.txt:43
msgid ""
"The key to generating PDFs dynamically with Django is that the ReportLab API"
" acts on file-like objects, and Django's :class:`~django.http.HttpResponse` "
"objects are file-like objects."
msgstr ""

# 921568b1ed2f467d8984ee03e4748be8
#: ../../../../1.8/docs/howto/outputting-pdf.txt:47
msgid "Here's a \"Hello World\" example::"
msgstr ""

# f46b0543091149bd90180756b09c985f
#: ../../../../1.8/docs/howto/outputting-pdf.txt:72
msgid ""
"The response gets a special MIME type, :mimetype:`application/pdf`. This "
"tells browsers that the document is a PDF file, rather than an HTML file. If"
" you leave this off, browsers will probably interpret the output as HTML, "
"which would result in ugly, scary gobbledygook in the browser window."
msgstr ""

# 49b62a9e7f13410c873b4ce48dc1db65
#: ../../../../1.8/docs/howto/outputting-pdf.txt:78
msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the PDF file. This filename is arbitrary: Call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialogue,"
" etc."
msgstr ""

# 6aafe2c209f94a588503dec6341fdf86
#: ../../../../1.8/docs/howto/outputting-pdf.txt:83
msgid ""
"The ``Content-Disposition`` header starts with ``'attachment; '`` in this "
"example. This forces Web browsers to pop-up a dialog box "
"prompting/confirming how to handle the document even if a default is set on "
"the machine. If you leave off ``'attachment;'``, browsers will handle the "
"PDF using whatever program/plugin they've been configured to use for PDFs. "
"Here's what that code would look like::"
msgstr ""

# f215eff6fd85452e9fe1a089986529fb
#: ../../../../1.8/docs/howto/outputting-pdf.txt:92
msgid ""
"Hooking into the ReportLab API is easy: Just pass ``response`` as the first "
"argument to ``canvas.Canvas``. The ``Canvas`` class expects a file-like "
"object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

# 80e50b081755442a991326b0b657eacd
#: ../../../../1.8/docs/howto/outputting-pdf.txt:97
msgid ""
"Note that all subsequent PDF-generation methods are called on the PDF object"
" (in this case, ``p``) -- not on ``response``."
msgstr ""

# f130aaf9120c443591cd5ce1c05ba6a9
#: ../../../../1.8/docs/howto/outputting-pdf.txt:100
msgid ""
"Finally, it's important to call ``showPage()`` and ``save()`` on the PDF "
"file."
msgstr ""

# 2867b5399d574ef984760083f2cd3d0e
#: ../../../../1.8/docs/howto/outputting-pdf.txt:105
msgid ""
"ReportLab is not thread-safe. Some of our users have reported odd issues "
"with building PDF-generating Django views that are accessed by many people "
"at the same time."
msgstr ""

# 1c255e8c5446449e9716073e88865eea
#: ../../../../1.8/docs/howto/outputting-pdf.txt:110
msgid "Complex PDFs"
msgstr ""

# 92a7c76728e24564829ca82e6874d256
#: ../../../../1.8/docs/howto/outputting-pdf.txt:112
msgid ""
"If you're creating a complex PDF document with ReportLab, consider using the"
" :mod:`io` library as a temporary holding place for your PDF file. This "
"library provides a file-like object interface that is particularly "
"efficient. Here's the above \"Hello World\" example rewritten to use "
":mod:`io`::"
msgstr ""

# edb9a057c43c4a8590fe9f643fade2ae
#: ../../../../1.8/docs/howto/outputting-pdf.txt:146
msgid "Further resources"
msgstr ""

# 0bcb1f9c5d7f44a9be1481eb9a91e543
#: ../../../../1.8/docs/howto/outputting-pdf.txt:148
msgid ""
"PDFlib_ is another PDF-generation library that has Python bindings. To use "
"it with Django, just use the same concepts explained in this article."
msgstr ""

# d5244d20a3f14583ba2906c7b17323e2
#: ../../../../1.8/docs/howto/outputting-pdf.txt:150
msgid ""
"`Pisa XHTML2PDF`_ is yet another PDF-generation library. Pisa ships with an "
"example of how to integrate Pisa with Django."
msgstr ""

# f1bcd4835f4a4a17abb1ae17d3c7fada
#: ../../../../1.8/docs/howto/outputting-pdf.txt:152
msgid ""
"HTMLdoc_ is a command-line script that can convert HTML to PDF. It doesn't "
"have a Python interface, but you can escape out to the shell using "
"``system`` or ``popen`` and retrieve the output in Python."
msgstr ""

# 3a5898c046be45bb815e21b6d0fb8c46
#: ../../../../1.8/docs/howto/outputting-pdf.txt:161
msgid "Other formats"
msgstr ""

# 182e4e01f0f241df9e9ee4b7fcdfe03b
#: ../../../../1.8/docs/howto/outputting-pdf.txt:163
msgid ""
"Notice that there isn't a lot in these examples that's PDF-specific -- just "
"the bits using ``reportlab``. You can use a similar technique to generate "
"any arbitrary format that you can find a Python library for. Also see "
":doc:`/howto/outputting-csv` for another example and some techniques you can"
" use when generated text-based formats."
msgstr ""

# dda1a6a46bd041529abee0078a6cc24f
#: ../../../../1.8/docs/howto/static-files/deployment.txt:3
msgid "Deploying static files"
msgstr ""

# 0c363701b6394a6ea77521fb607d53f4
#: ../../../../1.8/docs/howto/static-files/deployment.txt:7
msgid ""
"For an introduction to the use of :mod:`django.contrib.staticfiles`, see "
":doc:`/howto/static-files/index`."
msgstr ""

# 16cb87be2294404ab9751a19703f6b2f
#: ../../../../1.8/docs/howto/static-files/deployment.txt:13
msgid "Serving static files in production"
msgstr ""

# 7386fa7d19d64bc3b408153f2b95cefa
#: ../../../../1.8/docs/howto/static-files/deployment.txt:15
msgid ""
"The basic outline of putting static files into production is simple: run the"
" :djadmin:`collectstatic` command when static files change, then arrange for"
" the collected static files directory (:setting:`STATIC_ROOT`) to be moved "
"to the static file server and served. Depending on "
":setting:`STATICFILES_STORAGE`, files may need to be moved to a new location"
" manually or the :func:`post_process "
"<django.contrib.staticfiles.storage.StaticFilesStorage.post_process>` method"
" of the ``Storage`` class might take care of that."
msgstr ""

# 6910fe79b5074c40a66ec0328bbb9ced
#: ../../../../1.8/docs/howto/static-files/deployment.txt:23
msgid ""
"Of course, as with all deployment tasks, the devil's in the details. Every "
"production setup will be a bit different, so you'll need to adapt the basic "
"outline to fit your needs. Below are a few common patterns that might help."
msgstr ""

# b7d51c8de7314d0780f88f6460a0356e
#: ../../../../1.8/docs/howto/static-files/deployment.txt:28
msgid "Serving the site and your static files from the same server"
msgstr ""

# 61472c6640bb43c1845cd6033fe4a6b5
#: ../../../../1.8/docs/howto/static-files/deployment.txt:30
msgid ""
"If you want to serve your static files from the same server that's already "
"serving your site, the process may look something like:"
msgstr ""

# e4f7a543166b48808c85a74359ed4a1f
#: ../../../../1.8/docs/howto/static-files/deployment.txt:33
msgid "Push your code up to the deployment server."
msgstr ""

# d5a3f93595b24d138036c8774a533896
#: ../../../../1.8/docs/howto/static-files/deployment.txt:34
msgid ""
"On the server, run :djadmin:`collectstatic` to copy all the static files "
"into :setting:`STATIC_ROOT`."
msgstr ""

# fbc7779b597c4bd797dbfa2c641f3e5b
#: ../../../../1.8/docs/howto/static-files/deployment.txt:36
msgid ""
"Configure your web server to serve the files in :setting:`STATIC_ROOT` under"
" the URL :setting:`STATIC_URL`. For example, here's :ref:`how to do this "
"with Apache and mod_wsgi <serving-files>`."
msgstr ""

# 1ebc2ea3d95f4872937b35437c3dc544
#: ../../../../1.8/docs/howto/static-files/deployment.txt:40
msgid ""
"You'll probably want to automate this process, especially if you've got "
"multiple web servers. There's any number of ways to do this automation, but "
"one option that many Django developers enjoy is `Fabric "
"<http://fabfile.org/>`_."
msgstr ""

# e3029e2477b54861a160bbb71dafb5d1
#: ../../../../1.8/docs/howto/static-files/deployment.txt:45
msgid ""
"Below, and in the following sections, we'll show off a few example fabfiles "
"(i.e. Fabric scripts) that automate these file deployment options. The "
"syntax of a fabfile is fairly straightforward but won't be covered here; "
"consult `Fabric's documentation <http://docs.fabfile.org/>`_, for a complete"
" explanation of the syntax."
msgstr ""

# 0ff395d6b5dd49f1b8e921d0982d0eb7
#: ../../../../1.8/docs/howto/static-files/deployment.txt:51
msgid ""
"So, a fabfile to deploy static files to a couple of web servers might look "
"something like::"
msgstr ""

# e9f5ae72c3ca4d698f1c3cfd1a014c52
#: ../../../../1.8/docs/howto/static-files/deployment.txt:67
msgid "Serving static files from a dedicated server"
msgstr ""

# d4602789e72e4cb794e09b84800f23ea
#: ../../../../1.8/docs/howto/static-files/deployment.txt:69
msgid ""
"Most larger Django sites use a separate Web server -- i.e., one that's not "
"also running Django -- for serving static files. This server often runs a "
"different type of web server -- faster but less full-featured. Some common "
"choices are:"
msgstr ""

# a61442a8370548559a007154ae880b11
#: ../../../../1.8/docs/howto/static-files/deployment.txt:79
msgid ""
"Configuring these servers is out of scope of this document; check each "
"server's respective documentation for instructions."
msgstr ""

# 5b06d0cffb7b40039dc185e0081fca54
#: ../../../../1.8/docs/howto/static-files/deployment.txt:82
msgid ""
"Since your static file server won't be running Django, you'll need to modify"
" the deployment strategy to look something like:"
msgstr ""

# 59f6b1b1dc664b0993ca5b5961556d3b
#: ../../../../1.8/docs/howto/static-files/deployment.txt:85
msgid "When your static files change, run :djadmin:`collectstatic` locally."
msgstr ""

# ca40560dde734aca922f6898d5e9af1c
#: ../../../../1.8/docs/howto/static-files/deployment.txt:87
msgid ""
"Push your local :setting:`STATIC_ROOT` up to the static file server into the"
" directory that's being served. `rsync <https://rsync.samba.org/>`_ is a "
"common choice for this step since it only needs to transfer the bits of "
"static files that have changed."
msgstr ""

# 80fd82005eb043a6827a878c69b6d592
#: ../../../../1.8/docs/howto/static-files/deployment.txt:92
msgid "Here's how this might look in a fabfile::"
msgstr ""

# fa010a9270bd48ffbf3f31a533a38860
#: ../../../../1.8/docs/howto/static-files/deployment.txt:115
msgid "Serving static files from a cloud service or CDN"
msgstr ""

# df9f3d2ebd7a4dc2815d5ac15825039d
#: ../../../../1.8/docs/howto/static-files/deployment.txt:117
msgid ""
"Another common tactic is to serve static files from a cloud storage provider"
" like Amazon's S3 and/or a CDN (content delivery network). This lets you "
"ignore the problems of serving static files and can often make for faster-"
"loading webpages (especially when using a CDN)."
msgstr ""

# 2765eb5b0c3241ebb2510414142c05b4
#: ../../../../1.8/docs/howto/static-files/deployment.txt:122
msgid ""
"When using these services, the basic workflow would look a bit like the "
"above, except that instead of using ``rsync`` to transfer your static files "
"to the server you'd need to transfer the static files to the storage "
"provider or CDN."
msgstr ""

# dfd3a6d81c2243f0a57b32e9f2544c8c
#: ../../../../1.8/docs/howto/static-files/deployment.txt:126
msgid ""
"There's any number of ways you might do this, but if the provider has an API"
" a :doc:`custom file storage backend </howto/custom-file-storage>` will make"
" the process incredibly simple. If you've written or are using a 3rd party "
"custom storage backend, you can tell :djadmin:`collectstatic` to use it by "
"setting :setting:`STATICFILES_STORAGE` to the storage engine."
msgstr ""

# d51e14a2c58c4ff4bb4c0cf1a3c720f8
#: ../../../../1.8/docs/howto/static-files/deployment.txt:132
msgid ""
"For example, if you've written an S3 storage backend in "
"``myproject.storage.S3Storage`` you could use it with::"
msgstr ""

# 7147819193d4417e88f9bdb510556d52
#: ../../../../1.8/docs/howto/static-files/deployment.txt:137
msgid ""
"Once that's done, all you have to do is run :djadmin:`collectstatic` and "
"your static files would be pushed through your storage package up to S3. If "
"you later needed to switch to a different storage provider, it could be as "
"simple as changing your :setting:`STATICFILES_STORAGE` setting."
msgstr ""

# e70d91333cc84c55b98cdc3768c018f5
#: ../../../../1.8/docs/howto/static-files/deployment.txt:142
msgid ""
"For details on how you'd write one of these backends, see :doc:`/howto"
"/custom-file-storage`. There are 3rd party apps available that provide "
"storage backends for many common file storage APIs. A good starting point is"
" the `overview at djangopackages.com <https://www.djangopackages.com/grids/g"
"/storage-backends/>`_."
msgstr ""

# bf438ca6eab24455b730b1b59284218e
# 9ddad955bc1a4379a37dbcb8ce0ffc26
#: ../../../../1.8/docs/howto/static-files/deployment.txt:149
#: ../../../../1.8/docs/howto/static-files/index.txt:190
msgid "Learn more"
msgstr ""

# a65a35d9da30427f8b2f41cb5d4e680b
#: ../../../../1.8/docs/howto/static-files/deployment.txt:151
msgid ""
"For complete details on all the settings, commands, template tags, and other"
" pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

# 7412f0f9b76f4b2b8455ccd490834232
#: ../../../../1.8/docs/howto/static-files/index.txt:3
msgid "Managing static files (CSS, images)"
msgstr ""

# 3d4510fe6a994728ba4b96b8be455ea9
#: ../../../../1.8/docs/howto/static-files/index.txt:5
msgid ""
"Websites generally need to serve additional files such as images, "
"JavaScript, or CSS. In Django, we refer to these files as \"static files\"."
"  Django provides :mod:`django.contrib.staticfiles` to help you manage them."
msgstr ""

# faa4b24a9682453da5ff9128ecfe145f
#: ../../../../1.8/docs/howto/static-files/index.txt:9
msgid "This page describes how you can serve these static files."
msgstr ""

# 0f35e5bd361747278ad54f9015e3e425
#: ../../../../1.8/docs/howto/static-files/index.txt:12
msgid "Configuring static files"
msgstr ""

# 48b2befd1a2f4ff886ad70012f0ff3e8
#: ../../../../1.8/docs/howto/static-files/index.txt:14
msgid ""
"Make sure that ``django.contrib.staticfiles`` is included in your "
":setting:`INSTALLED_APPS`."
msgstr ""

# cd87ca7594c847b2a0c0fd2eeaf1cb18
#: ../../../../1.8/docs/howto/static-files/index.txt:17
msgid "In your settings file, define :setting:`STATIC_URL`, for example::"
msgstr ""

# 57f4d133e1cd4fa191649cf16d6306d8
#: ../../../../1.8/docs/howto/static-files/index.txt:21
msgid ""
"In your templates, either hardcode the url like "
"``/static/my_app/myexample.jpg`` or, preferably, use the :ttag:`static"
"<staticfiles-static>` template tag to build the URL for the given relative "
"path by using the configured :setting:`STATICFILES_STORAGE` storage (this "
"makes it much easier when you want to switch to a content delivery network "
"(CDN) for serving static files)."
msgstr ""

# 93e88f2dbc0048f183aa90ebb53f17ed
#: ../../../../1.8/docs/howto/static-files/index.txt:35
msgid ""
"Store your static files in a folder called ``static`` in your app. For "
"example ``my_app/static/my_app/myimage.jpg``."
msgstr ""

# a4f9bd54c3394bfa9ab4368ba84ed467
#: ../../../../1.8/docs/howto/static-files/index.txt:38
msgid "Serving the files"
msgstr ""

# 279c6e29a80945f4bf4588eb253acced
#: ../../../../1.8/docs/howto/static-files/index.txt:40
msgid ""
"In addition to these configuration steps, you'll also need to actually serve"
" the static files."
msgstr ""

# ff0541c8ac3a4286a6bea566e43b4760
#: ../../../../1.8/docs/howto/static-files/index.txt:43
msgid ""
"During development, if you use :mod:`django.contrib.staticfiles`, this will "
"be done automatically by :djadmin:`runserver` when :setting:`DEBUG` is set "
"to ``True`` (see :func:`django.contrib.staticfiles.views.serve`)."
msgstr ""

# fbebd86d3d294c8fbfaaa2ff25ba1a73
#: ../../../../1.8/docs/howto/static-files/index.txt:47
msgid ""
"This method is **grossly inefficient** and probably **insecure**, so it is "
"**unsuitable for production**."
msgstr ""

# 2e5a96ee329941c59f7e43af420281ad
#: ../../../../1.8/docs/howto/static-files/index.txt:50
msgid ""
"See :doc:`/howto/static-files/deployment` for proper strategies to serve "
"static files in production environments."
msgstr ""

# f0a1227110694ca1a0e76f2c46ced57c
#: ../../../../1.8/docs/howto/static-files/index.txt:53
msgid ""
"Your project will probably also have static assets that aren't tied to a "
"particular app. In addition to using a ``static/`` directory inside your "
"apps, you can define a list of directories (:setting:`STATICFILES_DIRS`) in "
"your settings file where Django will also look for static files. For "
"example::"
msgstr ""

# 626fd31a95014693ac49668edece050f
#: ../../../../1.8/docs/howto/static-files/index.txt:63
msgid ""
"See the documentation for the :setting:`STATICFILES_FINDERS` setting for "
"details on how ``staticfiles`` finds your files."
msgstr ""

# 7ca9cc2d86e04f0c862091a0647773ea
#: ../../../../1.8/docs/howto/static-files/index.txt:66
msgid "Static file namespacing"
msgstr ""

# 8a2f67d6076642419690f1f46acbacb1
#: ../../../../1.8/docs/howto/static-files/index.txt:68
msgid ""
"Now we *might* be able to get away with putting our static files directly in"
" ``my_app/static/`` (rather than creating another ``my_app`` subdirectory), "
"but it would actually be a bad idea. Django will use the first static file "
"it finds whose name matches, and if you had a static file with the same name"
" in a *different* application, Django would be unable to distinguish between"
" them. We need to be able to point Django at the right one, and the easiest "
"way to ensure this is by *namespacing* them. That is, by putting those "
"static files inside *another* directory named for the application itself."
msgstr ""

# bbeb4d48600b4c47a191a3267a267d21
#: ../../../../1.8/docs/howto/static-files/index.txt:81
msgid "Serving static files during development."
msgstr ""

# 40a2a1f42d1742978d9dd9802336baaa
#: ../../../../1.8/docs/howto/static-files/index.txt:83
msgid ""
"If you use :mod:`django.contrib.staticfiles` as explained above, "
":djadmin:`runserver` will do this automatically when :setting:`DEBUG` is set"
" to ``True``. If you don't have ``django.contrib.staticfiles`` in "
":setting:`INSTALLED_APPS`, you can still manually serve static files using "
"the :func:`django.contrib.staticfiles.views.serve` view."
msgstr ""

# 72afed8465544d8fac0e15b64cfcb20d
# 498c8157647c445fa594046d1a8780b9
#: ../../../../1.8/docs/howto/static-files/index.txt:89
#: ../../../../1.8/docs/howto/static-files/index.txt:121
msgid ""
"This is not suitable for production use! For some common deployment "
"strategies, see :doc:`/howto/static-files/deployment`."
msgstr ""

# 2a77866a79f04d3d9e5ad13423345c66
#: ../../../../1.8/docs/howto/static-files/index.txt:92
msgid ""
"For example, if your :setting:`STATIC_URL` is defined as ``/static/``, you "
"can do this by adding the following snippet to your urls.py::"
msgstr ""

# 916642705b934fff9195fd4b02d9980f
#: ../../../../1.8/docs/howto/static-files/index.txt:104
msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``/static/``) and not a URL (e.g. "
"``http://static.example.com/``)."
msgstr ""

# dbd85c54c3fd44089a9b6ecc7886464b
#: ../../../../1.8/docs/howto/static-files/index.txt:108
msgid ""
"Also this helper function only serves the actual :setting:`STATIC_ROOT` "
"folder; it doesn't perform static files discovery like "
":mod:`django.contrib.staticfiles`."
msgstr ""

# c138da1fbc7943189a96d4678a827f6c
#: ../../../../1.8/docs/howto/static-files/index.txt:115
msgid "Serving files uploaded by a user during development."
msgstr ""

# 2dd2373263f64a0b954aa64c3e932bf4
#: ../../../../1.8/docs/howto/static-files/index.txt:117
msgid ""
"During development, you can serve user-uploaded media files from "
":setting:`MEDIA_ROOT` using the "
":func:`django.contrib.staticfiles.views.serve` view."
msgstr ""

# fc2ede17b64f404da273bd79299fba85
#: ../../../../1.8/docs/howto/static-files/index.txt:124
msgid ""
"For example, if your :setting:`MEDIA_URL` is defined as ``/media/``, you can"
" do this by adding the following snippet to your urls.py::"
msgstr ""

# 9d53806efac84c929239110c81b0f7a5
#: ../../../../1.8/docs/howto/static-files/index.txt:136
msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``/media/``) and not a URL (e.g. "
"``http://media.example.com/``)."
msgstr ""

# 527c9fa77d684a378d7a02bea938568d
#: ../../../../1.8/docs/howto/static-files/index.txt:145
msgid ""
"When running tests that use actual HTTP requests instead of the built-in "
"testing client (i.e. when using the built-in :class:`LiveServerTestCase "
"<django.test.LiveServerTestCase>`) the static assets need to be served along"
" the rest of the content so the test environment reproduces the real one as "
"faithfully as possible, but ``LiveServerTestCase`` has only very basic "
"static file-serving functionality: It doesn't know about the finders feature"
" of the ``staticfiles`` application and assumes the static content has "
"already been collected under :setting:`STATIC_ROOT`."
msgstr ""

# ae4c7662767c4fd38eb79b7d8812f786
#: ../../../../1.8/docs/howto/static-files/index.txt:154
msgid ""
"Because of this, ``staticfiles`` ships its own "
":class:`django.contrib.staticfiles.testing.StaticLiveServerTestCase`, a "
"subclass of the built-in one that has the ability to transparently serve all"
" the assets during execution of these tests in a way very similar to what we"
" get at development time with ``DEBUG = True``, i.e. without having to "
"collect them using :djadmin:`collectstatic` first."
msgstr ""

# 92e03c92bdd14943ab7874d82a6d0dec
#: ../../../../1.8/docs/howto/static-files/index.txt:163
msgid ""
":class:`django.contrib.staticfiles.testing.StaticLiveServerTestCase` is new "
"in Django 1.7. Previously its functionality was provided by "
":class:`django.test.LiveServerTestCase`."
msgstr ""

# e1ba5a74c18649f4886f86e644f86418
# 5ddeeed4e66b4d638954971f25dcd351
#: ../../../../1.8/docs/howto/static-files/index.txt:168
#: ../../../../1.8/docs/howto/upgrade-version.txt:87
msgid "Deployment"
msgstr ""

# 892936c949be4c9394d50887cfef0909
#: ../../../../1.8/docs/howto/static-files/index.txt:170
msgid ""
":mod:`django.contrib.staticfiles` provides a convenience management command "
"for gathering static files in a single directory so you can serve them "
"easily."
msgstr ""

# 25808d19851c4989b4a3d1edd06e7df2
#: ../../../../1.8/docs/howto/static-files/index.txt:173
msgid ""
"Set the :setting:`STATIC_ROOT` setting to the directory from which you'd "
"like to serve these files, for example::"
msgstr ""

# 822da4a8a2544ac8847174fa007f966a
#: ../../../../1.8/docs/howto/static-files/index.txt:178
msgid "Run the :djadmin:`collectstatic` management command::"
msgstr ""

# 6e1962fb28c44da19a7dcb4504a08982
#: ../../../../1.8/docs/howto/static-files/index.txt:182
msgid ""
"This will copy all files from your static folders into the "
":setting:`STATIC_ROOT` directory."
msgstr ""

# fc2bfd9bbd8d48c8abe49d10c63b045a
#: ../../../../1.8/docs/howto/static-files/index.txt:185
msgid ""
"Use a web server of your choice to serve the files. :doc:`/howto/static-"
"files/deployment` covers some common deployment strategies for static files."
msgstr ""

# 7a84bf83fd464dc0a39bbd907786a5b3
#: ../../../../1.8/docs/howto/static-files/index.txt:192
msgid ""
"This document has covered the basics and some common usage patterns. For "
"complete details on all the settings, commands, template tags, and other "
"pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

# 49ac88fb141644bdb2fa368fd0d9250e
#: ../../../../1.8/docs/howto/upgrade-version.txt:3
msgid "Upgrading Django to a newer version"
msgstr ""

# 06382f189e2f48b0a96471af65f61535
#: ../../../../1.8/docs/howto/upgrade-version.txt:5
msgid ""
"While it can be a complex process at times, upgrading to the latest Django "
"version has several benefits:"
msgstr ""

# 161a8e22efa242baa8e13c9dda389e09
#: ../../../../1.8/docs/howto/upgrade-version.txt:8
msgid "New features and improvements are added."
msgstr ""

# b0cf6187aa5d450cb6609504d9ec3462
#: ../../../../1.8/docs/howto/upgrade-version.txt:9
msgid "Bugs are fixed."
msgstr ""

# 3b30f025c2454bd195324df365675d83
#: ../../../../1.8/docs/howto/upgrade-version.txt:10
msgid ""
"Older version of Django will eventually no longer receive security updates. "
"(see :ref:`backwards-compatibility-policy`)."
msgstr ""

# 9f16a081b72b4c96b8a3275f2b32a762
#: ../../../../1.8/docs/howto/upgrade-version.txt:12
msgid ""
"Upgrading as each new Django release is available makes future upgrades less"
" painful by keeping your code base up to date."
msgstr ""

# 50eed79a610448efb827b6ec5af6bdc6
#: ../../../../1.8/docs/howto/upgrade-version.txt:15
msgid ""
"Here are some things to consider to help make your upgrade process as smooth"
" as possible."
msgstr ""

# da1db9ddd56a46a88a38f0a1719a74a3
#: ../../../../1.8/docs/howto/upgrade-version.txt:19
msgid "Required Reading"
msgstr ""

# 57c5d5c728c34b99a62413d732412005
#: ../../../../1.8/docs/howto/upgrade-version.txt:21
msgid ""
"If it's your first time doing an upgrade, it is useful to read the "
":doc:`guide on the different release processes </internals/release-"
"process>`."
msgstr ""

# 3107ffa2ecd743c687e0ff1fca7bfacb
#: ../../../../1.8/docs/howto/upgrade-version.txt:24
msgid ""
"Afterwards, you should familiarize yourself with the changes that were made "
"in the new Django version(s):"
msgstr ""

# 9b889b0e5cca486ba50d9e720a5c386e
#: ../../../../1.8/docs/howto/upgrade-version.txt:27
msgid ""
"Read the :doc:`release notes </releases/index>` for each 'final' release "
"from the one after your current Django version, up to and including the "
"version to which you plan to upgrade."
msgstr ""

# 4f230e6c75c74268ab704d834e247bad
#: ../../../../1.8/docs/howto/upgrade-version.txt:30
msgid ""
"Look at the :doc:`deprecation timeline</internals/deprecation>` for the "
"relevant versions."
msgstr ""

# 3120314254784b30938cd715620f1974
#: ../../../../1.8/docs/howto/upgrade-version.txt:33
msgid ""
"Pay particular attention to backwards incompatible changes to get a clear "
"idea of what will be needed for a successful upgrade."
msgstr ""

# 389d717497724700affcb98e9f9cea55
#: ../../../../1.8/docs/howto/upgrade-version.txt:37
msgid "Dependencies"
msgstr ""

# 334f6f7d7a514393ac9eb94f7affe788
#: ../../../../1.8/docs/howto/upgrade-version.txt:39
msgid ""
"In most cases it will be necessary to upgrade to the latest version of your "
"Django-related dependencies as well. If the Django version was recently "
"released or if some of your dependencies are not well-maintained, some of "
"your dependencies may not yet support the new Django version. In these cases"
" you may have to wait until new versions of your dependencies are released."
msgstr ""

# de3646802d5a4106a0939a2f2678c17d
#: ../../../../1.8/docs/howto/upgrade-version.txt:46
msgid "Installation"
msgstr ""

# 589f20910b1841148841b0bd0d32618e
#: ../../../../1.8/docs/howto/upgrade-version.txt:48
msgid ""
"Once you're ready, it is time to :doc:`install the new Django version "
"</topics/install>`. If you are using virtualenv_ and it is a major upgrade, "
"you might want to set up a new environment with all the dependencies first."
msgstr ""

# c29d1dd311fc4a57a12eed24287617ca
#: ../../../../1.8/docs/howto/upgrade-version.txt:52
msgid ""
"Exactly which steps you will need to take depends on your installation "
"process. The most convenient way is to use pip_ with the ``--upgrade`` or "
"``-U`` flag:"
msgstr ""

# 8e816994805148649a367e23f5a966ed
#: ../../../../1.8/docs/howto/upgrade-version.txt:59
msgid "pip_ also automatically uninstalls the previous version of Django."
msgstr ""

# 37d9b350b3004ac7bbd6e12cdb1efe34
#: ../../../../1.8/docs/howto/upgrade-version.txt:61
msgid ""
"If you use some other installation process, you might have to manually "
":ref:`uninstall the old Django version <removing-old-versions-of-django>` "
"and should look at the complete installation instructions."
msgstr ""

# b722cc5898474f639980fd040d424ddb
#: ../../../../1.8/docs/howto/upgrade-version.txt:71
msgid ""
"When the new environment is set up, :doc:`run the full test suite "
"</topics/testing/overview>` for your application. In Python 2.7+, "
"deprecation warnings are silenced by default. It is useful to turn the "
"warnings on so they are shown in the test output (you can also use the flag "
"if you test your app manually using ``manage.py runserver``):"
msgstr ""

# 402279e562b64b3e9d9de8789ddedde0
#: ../../../../1.8/docs/howto/upgrade-version.txt:81
msgid ""
"After you have run the tests, fix any failures. While you have the release "
"notes fresh in your mind, it may also be a good time to take advantage of "
"new features in Django by refactoring your code to eliminate any deprecation"
" warnings."
msgstr ""

# acf4880d526b41c3a8d0a5a627c07318
#: ../../../../1.8/docs/howto/upgrade-version.txt:89
msgid ""
"When you are sufficiently confident your app works with the new version of "
"Django, you're ready to go ahead and :doc:`deploy </howto/deployment/index>`"
" your upgraded Django project."
msgstr ""

# d86b7e8d72db4bf9aee71182ad32bd53
#: ../../../../1.8/docs/howto/upgrade-version.txt:93
msgid ""
"If you are using caching provided by Django, you should consider clearing "
"your cache after upgrading. Otherwise you may run into problems, for "
"example, if you are caching pickled objects as these objects are not "
"guaranteed to be pickle-compatible across Django versions. A past instance "
"of incompatibility was caching pickled :class:`~django.http.HttpResponse` "
"objects, either directly or indirectly via the "
":func:`~django.views.decorators.cache.cache_page` decorator."
msgstr ""

# 7a7592eaadc74a52845c20128b1c1e85
#: ../../../../1.8/docs/howto/windows.txt:3
msgid "How to install Django on Windows"
msgstr ""

# 5b99016be903462188722fb522fcafb9
#: ../../../../1.8/docs/howto/windows.txt:5
msgid ""
"This document will guide you through installing Python and Django for basic "
"usage on Windows. This is meant as a beginner's guide for users working on "
"Django projects and does not reflect how Django should be installed when "
"developing patches for Django itself."
msgstr ""

# 40a3d56394554eee9e929ba94c56d008
#: ../../../../1.8/docs/howto/windows.txt:10
msgid ""
"The steps in this guide have been tested with Windows 7 and 8. In other "
"versions, the steps would be similar."
msgstr ""

# 72b377e88480499692b44c0a3117329c
#: ../../../../1.8/docs/howto/windows.txt:14
msgid "Install Python"
msgstr ""

# 7a8971c04ad440fa903b5c25b6bedae7
#: ../../../../1.8/docs/howto/windows.txt:16
msgid ""
"Django is a Python web framework, thus requiring Python to be installed on "
"your machine."
msgstr ""

# ee83e82ef86949eeaae7727ae7fcec3f
#: ../../../../1.8/docs/howto/windows.txt:19
msgid ""
"To install Python on your machine go to https://python.org/download/, and "
"download a Windows MSI installer for Python. Once downloaded, run the MSI "
"installer and follow the on-screen instructions."
msgstr ""

# d02563c510e349948be304f3743ed265
#: ../../../../1.8/docs/howto/windows.txt:23
msgid ""
"After installation, open the command prompt and check the Python version by "
"executing ``python --version``. If you encounter a problem, make sure you "
"have set the ``PATH`` variable correctly. You might need to adjust your "
"``PATH`` environment variable to include paths to the Python executable and "
"additional scripts. For example, if your Python is installed in "
"``C:\\Python34\\``, the following paths need to be added to ``PATH``::"
msgstr ""

# 39a9bc15d8f84c5db28cfe0c817bbf78
#: ../../../../1.8/docs/howto/windows.txt:33
msgid "Install Setuptools"
msgstr ""

# 8625d011a62e41218af487933a0232d4
#: ../../../../1.8/docs/howto/windows.txt:35
msgid ""
"To install Python packages on your computer, Setuptools is needed. Download "
"the latest version of `Setuptools "
"<https://pypi.python.org/pypi/setuptools>`_ for your Python version and "
"follow the installation instructions given there."
msgstr ""

# 05030c3e46b64d6da1a27cad0bd4c734
#: ../../../../1.8/docs/howto/windows.txt:40
msgid "Install PIP"
msgstr ""

# 012f58aa7e39427f96d037db9a8f738c
#: ../../../../1.8/docs/howto/windows.txt:42
msgid ""
"`PIP <http://www.pip-installer.org/>`_ is a package manager for Python that "
"uses the `Python Package Index <https://pypi.python.org>`_ to install Python"
" packages. PIP will later be used to install Django from PyPI. If you've "
"installed Python 3.4, ``pip`` is included so you may skip this section."
msgstr ""

# 9e261f4b017641f89ab8c1568f105c63
#: ../../../../1.8/docs/howto/windows.txt:47
msgid ""
"Open a command prompt and execute ``easy_install pip``. This will install "
"``pip`` on your system. This command will work if you have successfully "
"installed Setuptools."
msgstr ""

# 2fb4b3d5653544d48558037a57c50068
#: ../../../../1.8/docs/howto/windows.txt:51
msgid ""
"Alternatively, go to `<http://www.pip-"
"installer.org/en/latest/installing.html>`_ for installing/upgrading "
"instructions."
msgstr ""

# a6e40ecc2f614afda80105ec0f6779e8
#: ../../../../1.8/docs/howto/windows.txt:55
msgid "Install Django"
msgstr ""

# d267acbc03264449b4053f05d3f7efe5
#: ../../../../1.8/docs/howto/windows.txt:57
msgid "Django can be installed easily using ``pip``."
msgstr ""

# 0cd1a1a6d63240138fb53c26cd5e032c
#: ../../../../1.8/docs/howto/windows.txt:59
msgid ""
"In the command prompt, execute the following command: ``pip install "
"django``. This will download and install Django."
msgstr ""

# dbbe40cf81f847dba917c9f25d6df317
#: ../../../../1.8/docs/howto/windows.txt:62
msgid ""
"After the installation has completed, you can verify your Django "
"installation by executing ``django-admin --version`` in the command prompt."
msgstr ""

# 7822ceb804954eeb86022de81b066d28
#: ../../../../1.8/docs/howto/windows.txt:67
msgid ""
"In Django 1.7, a ``.exe`` has been introduced, so just use ``django-admin`` "
"in place of ``django-admin.py`` in the command prompt."
msgstr ""

# 45791235f1294679a683f4d9f9c1ccf0
#: ../../../../1.8/docs/howto/windows.txt:70
msgid ""
"See :ref:`database-installation` for information on database installation "
"with Django."
msgstr ""

# 4bb3b5343b734ec29ab2af62203d2d3c
#: ../../../../1.8/docs/howto/windows.txt:74
msgid "Common pitfalls"
msgstr ""

# 4d3457ce0593451cb03ac40423b32787
#: ../../../../1.8/docs/howto/windows.txt:76
msgid ""
"If ``django-admin`` only displays the help text no matter what arguments it "
"is given, there is probably a problem with the file association in Windows. "
"Check if there is more than one environment variable set for running Python "
"scripts in ``PATH``. This usually occurs when there is more than one Python "
"version installed."
msgstr ""

# 7c510558a1394f94a510ac29fa7823c2
#: ../../../../1.8/docs/howto/windows.txt:82
msgid ""
"If you are connecting to the internet behind a proxy, there might be problem"
" in running the commands ``easy_install pip`` and ``pip install django``. "
"Set the environment variables for proxy configuration in the command prompt "
"as follows::"
msgstr ""

# dc8fbfbcbb6f4a5d9a4491941e178bcc
#: ../../../../1.8/docs/howto/writing-migrations.txt:3
msgid "Writing database migrations"
msgstr ""

# 579369b341d24127bd695ade82728b85
#: ../../../../1.8/docs/howto/writing-migrations.txt:5
msgid ""
"This document explains how to structure and write database migrations for "
"different scenarios you might encounter. For introductory material on "
"migrations, see :doc:`the topic guide </topics/migrations>`."
msgstr ""

# aacf3c1f44e74ac28e6bd464092ba036
#: ../../../../1.8/docs/howto/writing-migrations.txt:12
msgid "Data migrations and multiple databases"
msgstr ""

# 81c585d39b164c2fa534bc1b5cb0b850
#: ../../../../1.8/docs/howto/writing-migrations.txt:14
msgid ""
"When using multiple databases, you may need to figure out whether or not to "
"run a migration against a particular database. For example, you may want to "
"**only** run a migration on a particular database."
msgstr ""

# f33cced32f0e465a91f3a62510687030
#: ../../../../1.8/docs/howto/writing-migrations.txt:18
msgid ""
"In order to do that you can check the database connection's alias inside a "
"``RunPython`` operation by looking at the ``schema_editor.connection.alias``"
" attribute::"
msgstr ""

# 3d8794e4ac9f47b4b6d2f3d88ed09151
#: ../../../../1.8/docs/howto/writing-migrations.txt:41
msgid ""
"You can also provide hints that will be passed to the "
":meth:`allow_migrate()` method of database routers as ``**hints``:"
msgstr ""

# c27ea3e2d9c14eb499a8cf210eaf5279
#: ../../../../1.8/docs/howto/writing-migrations.txt:54
msgid "Then, to leverage this in your migrations, do the following::"
msgstr ""

# e04b9538d0284ec5878fdd522c9cb3b5
#: ../../../../1.8/docs/howto/writing-migrations.txt:72
msgid ""
"If your ``RunPython`` or ``RunSQL`` operation only affects one model, it's "
"good practice to pass ``model_name`` as a hint to make it as transparent as "
"possible to the router. This is especially important for reusable and third-"
"party apps."
msgstr ""

# 65baa647f58741eb869c0b116e59be7e
#: ../../../../1.8/docs/howto/writing-migrations.txt:77
msgid "Migrations that add unique fields"
msgstr ""

# b7b8793f852d4e1ab4a576665bb89ae6
#: ../../../../1.8/docs/howto/writing-migrations.txt:79
msgid ""
"Applying a \"plain\" migration that adds a unique non-nullable field to a "
"table with existing rows will raise an error because the value used to "
"populate existing rows is generated only once, thus breaking the unique "
"constraint."
msgstr ""

# dca3db5bbe4d4b9a9f98221a4e30e092
#: ../../../../1.8/docs/howto/writing-migrations.txt:83
msgid ""
"Therefore, the following steps should be taken. In this example, we'll add a"
" non-nullable :class:`~django.db.models.UUIDField` with a default value. "
"Modify the respective field according to your needs."
msgstr ""

# be6b5e09138d41529b36235c27a2d601
#: ../../../../1.8/docs/howto/writing-migrations.txt:87
msgid ""
"Add the field on your model with ``default=uuid.uuid4`` and ``unique=True`` "
"arguments (choose an appropriate default for the type of the field you're "
"adding)."
msgstr ""

# b09073bba5924ab8b1b1fca4daeab8cc
#: ../../../../1.8/docs/howto/writing-migrations.txt:91
msgid ""
"Run the :djadmin:`makemigrations` command. This should generate a migration "
"with an ``AddField`` operation."
msgstr ""

# 715f12568bbd40ffaa75928482a488c3
#: ../../../../1.8/docs/howto/writing-migrations.txt:94
msgid ""
"Generate two empty migration files for the same app by running "
"``makemigrations myapp --empty`` twice. We've renamed the migration files to"
" give them meaningful names in the examples below."
msgstr ""

# 0433269a679343fb8bcc73b3e59cef2d
#: ../../../../1.8/docs/howto/writing-migrations.txt:98
msgid ""
"Copy the ``AddField`` operation from the auto-generated migration (the first"
" of the three new files) to the last migration and change ``AddField`` to "
"``AlterField``. For example:"
msgstr ""

# e3f82d2eb75149abb666ebb3e2d9dd03
#: ../../../../1.8/docs/howto/writing-migrations.txt:126
msgid ""
"Edit the first migration file. The generated migration class should look "
"similar to this:"
msgstr ""

# 244eb3afaa6048bea4194916f8ea3b87
#: ../../../../1.8/docs/howto/writing-migrations.txt:146
msgid ""
"Change ``unique=True`` to ``null=True`` -- this will create the intermediary"
" null field and defer creating the unique constraint until we've populated "
"unique values on all the rows."
msgstr ""

# cc8b98b9a18040c991eb0ddf8e3d4f2c
#: ../../../../1.8/docs/howto/writing-migrations.txt:150
msgid ""
"In the first empty migration file, add a "
":class:`~django.db.migrations.operations.RunPython` or "
":class:`~django.db.migrations.operations.RunSQL` operation to generate a "
"unique value (UUID in the example) for each existing row. For example:"
msgstr ""

# dc7ccb04a0e74452a2542c98d88a2301
#: ../../../../1.8/docs/howto/writing-migrations.txt:181
msgid ""
"Now you can apply the migrations as usual with the :djadmin:`migrate` "
"command."
msgstr ""

# 33e30b7e71ef4ad3be84a3e85d98f9f5
#: ../../../../1.8/docs/howto/writing-migrations.txt:183
msgid ""
"Note there is a race condition if you allow objects to be created while this"
" migration is running. Objects created after the ``AddField`` and before "
"``RunPython`` will have their original ``uuid``’s overwritten."
msgstr ""

# bd1cc97f99c2491b910d099a3c7c4e0c
#: ../../../../1.8/docs/howto/writing-migrations.txt:188
msgid "Controlling the order of migrations"
msgstr ""

# dccbbf9d9b884161b137f31a2edc6bb8
#: ../../../../1.8/docs/howto/writing-migrations.txt:190
msgid ""
"Django determines the order in which migrations should be applied not by the"
" filename of each migration, but by building a graph using two properties on"
" the ``Migration`` class: ``dependencies`` and ``run_before``."
msgstr ""

# 718c4933ff7448999e0cf2ead3eb1c2e
#: ../../../../1.8/docs/howto/writing-migrations.txt:194
msgid ""
"If you've used the :djadmin:`makemigrations` command you've probably already"
" seen ``dependencies`` in action because auto-created migrations have this "
"defined as part of their creation process."
msgstr ""

# c7ff5c221b774fc38e766466cdd7fe90
#: ../../../../1.8/docs/howto/writing-migrations.txt:198
msgid "The ``dependecies`` property is declared like this::"
msgstr ""

# 18cc295bf8524698842031429259cfe3
#: ../../../../1.8/docs/howto/writing-migrations.txt:208
msgid ""
"Usually this will be enough, but from time to time you may need to ensure "
"that your migration runs *before* other migrations. This is useful, for "
"example, to make third-party apps' migrations run *after* your "
":setting:`AUTH_USER_MODEL` replacement."
msgstr ""

# 5ec8b3f493b74dc18d7c8e157dd9ca9e
#: ../../../../1.8/docs/howto/writing-migrations.txt:213
msgid ""
"To achieve this, place all migrations that should depend on yours in the "
"``run_before`` attribute on your ``Migration`` class::"
msgstr ""

# 8376c0cdf47844b9ae867a105bf98349
#: ../../../../1.8/docs/howto/writing-migrations.txt:223
msgid ""
"Prefer using ``dependencies`` over ``run_before`` when possible. You should "
"only use ``run_before`` if it is undesirable or impractical to specify "
"``dependencies`` in the migration which you want to run after the one you "
"are writing."
msgstr ""

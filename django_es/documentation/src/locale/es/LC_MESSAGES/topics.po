# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# 
# Translators:
# Antonio Melé <antonio.mele@gmail.com>, 2015
# Ernesto Avilés Vázquez <whippiii@gmail.com>, 2015
# Ernesto Avilés Vázquez <whippiii@gmail.com>, 2014
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-06-25 04:09-0500\n"
"PO-Revision-Date: 2015-06-25 09:15+0000\n"
"Last-Translator: Jannis Leidel <jannis@leidel.info>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/django-docs/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# f909fd07153d42b0a59a613825a024f9
#: ../../../../1.8/docs/topics/auth/customizing.txt:3
msgid "Customizing authentication in Django"
msgstr "Personalizando la autenticación en Django"

# 4abca98baa274ded9dcfb95e21bbb5c9
#: ../../../../1.8/docs/topics/auth/customizing.txt:5
msgid ""
"The authentication that comes with Django is good enough for most common "
"cases, but you may have needs not met by the out-of-the-box defaults. To "
"customize authentication to your projects needs involves understanding what "
"points of the provided system are extensible or replaceable. This document "
"provides details about how the auth system can be customized."
msgstr "La autenticación que viene con Django es lo suficientemente buena para la mayoría de los casos, pero puede que tus necesidades se salgan de este ámbito. Para personalizar la autenticación a las necesidades de tus proyectos, requiere entender qué puntos del sistema provisto son extensibles o reemplazables. Este documento proporciona detalles sobre cómo personalizar el sistema de autenticación."

# aeb593742f094a2eb8fb4559c423a08d
#: ../../../../1.8/docs/topics/auth/customizing.txt:11
msgid ""
":ref:`Authentication backends <authentication-backends>` provide an "
"extensible system for when a username and password stored with the User "
"model need to be authenticated against a different service than Django's "
"default."
msgstr ":ref:`Los backends de autenticación <authentication-backends>` proporcionan un sistema extensible para cuando un usuario y contraseña almacenados en el model User necesitan ser autenticados contra un servicio diferente al que posee Django por omisión."

# 78a9c27055504c40900fdaba992402be
#: ../../../../1.8/docs/topics/auth/customizing.txt:15
msgid ""
"You can give your models :ref:`custom permissions <custom-permissions>` that"
" can be checked through Django's authorization system."
msgstr "Puedes asignarle a tus modelos :ref:`permisos personalizados <custom-permissions>` que pueden ser comprobados mediante el sistema de autorización de Django."

# a69ecb36c8fa441da596e7cbc9e13d14
#: ../../../../1.8/docs/topics/auth/customizing.txt:18
msgid ""
"You can :ref:`extend <extending-user>` the default User model, or "
":ref:`substitute <auth-custom-user>` a completely customized model."
msgstr "Puedes :ref:`extender <extending-user>` el modelo Usuario por omisión o :ref:`substituirlo <auth-custom-user>` por un modelo completamente personalizado."

# d3608757020948c980e011c98ed28f88
#: ../../../../1.8/docs/topics/auth/customizing.txt:24
msgid "Other authentication sources"
msgstr "Otras fuentes de autenticación"

# 2bc01ae101e54df8b7c91b32947ee3de
#: ../../../../1.8/docs/topics/auth/customizing.txt:26
msgid ""
"There may be times you have the need to hook into another authentication "
"source -- that is, another source of usernames and passwords or "
"authentication methods."
msgstr "A veces necesitas trabajar en el código de otro sistema de autenticación, esto es, otra fuente de usuarios y contraseñas o métodos de autenticación."

# 0e7b9b6afcdf4dacbb8ed6f0d0c2d4fe
#: ../../../../1.8/docs/topics/auth/customizing.txt:30
msgid ""
"For example, your company may already have an LDAP setup that stores a "
"username and password for every employee. It'd be a hassle for both the "
"network administrator and the users themselves if users had separate "
"accounts in LDAP and the Django-based applications."
msgstr "Por ejemplo, tu compañía ya posee configurado un LDAP que almacena usuario y contraseña para cada empleado. Sería una molestia para los administradores y usuarios si los usuarios tuvieran cuentas separadas en LDAP y en las aplicaciones de Django."

# eb3431e78ace480186c326eadf14b055
#: ../../../../1.8/docs/topics/auth/customizing.txt:35
msgid ""
"So, to handle situations like this, the Django authentication system lets "
"you plug in other authentication sources. You can override Django's default "
"database-based scheme, or you can use the default system in tandem with "
"other systems."
msgstr ""

# 83315f43d053499e8766b0bbb5197fa0
#: ../../../../1.8/docs/topics/auth/customizing.txt:40
msgid ""
"See the :ref:`authentication backend reference <authentication-backends-"
"reference>` for information on the authentication backends included with "
"Django."
msgstr "Ver la :ref:`guía de backends de autenticación <authentication-backends-reference>` para ver información sobre los backends de autenticación que trae Django."

# e1f8fab1a69e45e8917de52b41a2ed95
#: ../../../../1.8/docs/topics/auth/customizing.txt:45
msgid "Specifying authentication backends"
msgstr "Especificación de backends de autenticación"

# 13c5ebab0f6f41008ff19ed0bb75c1c0
#: ../../../../1.8/docs/topics/auth/customizing.txt:47
msgid ""
"Behind the scenes, Django maintains a list of \"authentication backends\" "
"that it checks for authentication. When somebody calls "
":func:`django.contrib.auth.authenticate()` -- as described in :ref:`How to "
"log a user in <how-to-log-a-user-in>` -- Django tries authenticating across "
"all of its authentication backends. If the first authentication method "
"fails, Django tries the second one, and so on, until all backends have been "
"attempted."
msgstr "Detrás de las escenas, Django mantiene una lista de \"backends de autenticación\" a la que chequea para autenticar. Cuando alguien invoca :func:`django.contrib.auth.authenticate()` -como se describe en :ref:`Cómo autenticar un usuario <how-to-log-a-user-in>`- Django prueba la autenticación a través de todos sus backends de autenticación. Si el primer método de autenticación falla, intenta con el segundo, y así hasta que se ha probado con todos los backends."

# e7311847b15c47cfb63ddbecb0aaaf41
#: ../../../../1.8/docs/topics/auth/customizing.txt:54
msgid ""
"The list of authentication backends to use is specified in the "
":setting:`AUTHENTICATION_BACKENDS` setting. This should be a tuple of Python"
" path names that point to Python classes that know how to authenticate. "
"These classes can be anywhere on your Python path."
msgstr "La lista de backends de autenticación a usar se especifica en la configuración :setting:`AUTHENTICATION_BACKENDS`. Debe ser una tupla de nombres de rutas de Python que apunten a clases que implementan un modo de autenticación. Estas clases pueden encontrarse en cualquier lugar de la ruta de Python."

# 6b0eeec51d90455694c81cd7caecf49d
#: ../../../../1.8/docs/topics/auth/customizing.txt:59
msgid "By default, :setting:`AUTHENTICATION_BACKENDS` is set to::"
msgstr "Por omisión, :setting:`AUTHENTICATION_BACKENDS` tiene como valor::"

# cf986c9d47d040ac9b1ef0238d819961
#: ../../../../1.8/docs/topics/auth/customizing.txt:63
msgid ""
"That's the basic authentication backend that checks the Django users "
"database and queries the built-in permissions. It does not provide "
"protection against brute force attacks via any rate limiting mechanism. You "
"may either implement your own rate limiting mechanism in a custom auth "
"backend, or use the mechanisms provided by most Web servers."
msgstr ""

# 96f2f0c7783044669d4016638b522ad6
#: ../../../../1.8/docs/topics/auth/customizing.txt:69
msgid ""
"The order of :setting:`AUTHENTICATION_BACKENDS` matters, so if the same "
"username and password is valid in multiple backends, Django will stop "
"processing at the first positive match."
msgstr "El orden en :setting:`AUTHENTICATION_BACKENDS` importa, así que si el usuario y la contraseña son válidos en múltiples backends, la comprobación se detendrá en el primero que haya coincidencia."

# adfdae230a444a9890eddbb733abdcfc
#: ../../../../1.8/docs/topics/auth/customizing.txt:73
msgid ""
"If a backend raises a :class:`~django.core.exceptions.PermissionDenied` "
"exception, authentication will immediately fail. Django won't check the "
"backends that follow."
msgstr "Si un backend lanza una excepción :class:`~django.core.exceptions.PermissionDenied`, la autenticación fallará inmediatamente. Django no comprobará el backend que sigue."

# 8dafef90a04e46c3ac8fd4e4963c9965
#: ../../../../1.8/docs/topics/auth/customizing.txt:79
msgid ""
"Once a user has authenticated, Django stores which backend was used to "
"authenticate the user in the user's session, and re-uses the same backend "
"for the duration of that session whenever access to the currently "
"authenticated user is needed. This effectively means that authentication "
"sources are cached on a per-session basis, so if you change "
":setting:`AUTHENTICATION_BACKENDS`, you'll need to clear out session data if"
" you need to force users to re-authenticate using different methods. A "
"simple way to do that is simply to execute "
"``Session.objects.all().delete()``."
msgstr "Una vez que un usuario se ha autenticado, Django guarda en la sesión del usuario el backend que se usó para su autenticación, y luego lo reutiliza en la duración de la sesión dondequiera que se necesite acceso al usuario autenticado. Esto significa que las fuentes de autenticación son acumuladas por sesión, por lo que si cambias :setting:`AUTHENTICATION_BACKENDS`, deberás limpiar todos los datos de sesión si necesitas que los usuarios se vuelvan a autenticar usando un método diferente. Una manera sencilla de hacerlo es ejecutando ``Session.objects.all().delete()``."

# f9466f3b578d49d7a4762d2ebf3d607c
#: ../../../../1.8/docs/topics/auth/customizing.txt:89
msgid "Writing an authentication backend"
msgstr "Programando un backend de autenticación"

# 12176c3f0ae84e15861c7415485f1814
#: ../../../../1.8/docs/topics/auth/customizing.txt:91
msgid ""
"An authentication backend is a class that implements two required methods: "
"``get_user(user_id)`` and ``authenticate(**credentials)``, as well as a set "
"of optional permission related :ref:`authorization methods "
"<authorization_methods>`."
msgstr "Un backend de autenticación es una clase que implementa dos métodos obligatorios: `` get_user (user_id) `` y `` authenticate (** credenciales) ``, así como un conjunto de :ref: `métodos de autorización <authorization_methods> ` opcionales relacionados con permisos."

# f38d357af3e540d784cba853c4dece4c
#: ../../../../1.8/docs/topics/auth/customizing.txt:95
msgid ""
"The ``get_user`` method takes a ``user_id`` -- which could be a username, "
"database ID or whatever, but has to be the primary key of your ``User`` "
"object -- and returns a ``User`` object."
msgstr "El método `` get_user`` recibe un `` user_id`` - que puede ser un nombre de usuario, un ID de base de datos o cualquier cosa, pero que debe ser la clave principal de tu objeto ``User`` - y devolver un objeto ``User``."

# 24d9b918247e45898c2f3a2dcc2e1f5a
#: ../../../../1.8/docs/topics/auth/customizing.txt:99
msgid ""
"The ``authenticate`` method takes credentials as keyword arguments. Most of "
"the time, it'll just look like this::"
msgstr ""

# 70c4fb45505a4ee980c60a752deaefeb
#: ../../../../1.8/docs/topics/auth/customizing.txt:107
msgid "But it could also authenticate a token, like so::"
msgstr ""

# 9a92e4c4f1f2472bab65bd591a662286
#: ../../../../1.8/docs/topics/auth/customizing.txt:114
msgid ""
"Either way, ``authenticate`` should check the credentials it gets, and it "
"should return a ``User`` object that matches those credentials, if the "
"credentials are valid. If they're not valid, it should return ``None``."
msgstr ""

# bf430a425a814a709902c0ce8676ed81
#: ../../../../1.8/docs/topics/auth/customizing.txt:118
msgid ""
"The Django admin system is tightly coupled to the Django ``User`` object "
"described at the beginning of this document. For now, the best way to deal "
"with this is to create a Django ``User`` object for each user that exists "
"for your backend (e.g., in your LDAP directory, your external SQL database, "
"etc.) You can either write a script to do this in advance, or your "
"``authenticate`` method can do it the first time a user logs in."
msgstr ""

# c8649c9f4d4b4238a408d00bc26e9304
#: ../../../../1.8/docs/topics/auth/customizing.txt:125
msgid ""
"Here's an example backend that authenticates against a username and password"
" variable defined in your ``settings.py`` file and creates a Django ``User``"
" object the first time a user authenticates::"
msgstr ""

# 149e9fd7658b4d27954d5e8cf2c024aa
#: ../../../../1.8/docs/topics/auth/customizing.txt:168
msgid "Handling authorization in custom backends"
msgstr "Gestionando autorización en backends personalizados"

# 4368a993af6443e3bb317d76b449aeb4
#: ../../../../1.8/docs/topics/auth/customizing.txt:170
msgid "Custom auth backends can provide their own permissions."
msgstr ""

# 35ea83fc48524a76874efc53b19abf2f
#: ../../../../1.8/docs/topics/auth/customizing.txt:172
msgid ""
"The user model will delegate permission lookup functions "
"(:meth:`~django.contrib.auth.models.User.get_group_permissions()`, "
":meth:`~django.contrib.auth.models.User.get_all_permissions()`, "
":meth:`~django.contrib.auth.models.User.has_perm()`, and "
":meth:`~django.contrib.auth.models.User.has_module_perms()`) to any "
"authentication backend that implements these functions."
msgstr ""

# 749289738ab042ab8cf1c3140884ac2e
#: ../../../../1.8/docs/topics/auth/customizing.txt:179
msgid ""
"The permissions given to the user will be the superset of all permissions "
"returned by all backends. That is, Django grants a permission to a user that"
" any one backend grants."
msgstr ""

# 70c926e03862457491964a88af1b3fcf
#: ../../../../1.8/docs/topics/auth/customizing.txt:185
msgid ""
"If a backend raises a :class:`~django.core.exceptions.PermissionDenied` "
"exception in :meth:`~django.contrib.auth.models.User.has_perm()` or "
":meth:`~django.contrib.auth.models.User.has_module_perms()`, the "
"authorization will immediately fail and Django won't check the backends that"
" follow."
msgstr ""

# 2fae437618b5469f9052ab951415deee
#: ../../../../1.8/docs/topics/auth/customizing.txt:191
msgid ""
"The simple backend above could implement permissions for the magic admin "
"fairly simply::"
msgstr ""

# 408aa3e34ca6496986fd2b25ed0b70c0
#: ../../../../1.8/docs/topics/auth/customizing.txt:202
msgid ""
"This gives full permissions to the user granted access in the above example."
" Notice that in addition to the same arguments given to the associated "
":class:`django.contrib.auth.models.User` functions, the backend auth "
"functions all take the user object, which may be an anonymous user, as an "
"argument."
msgstr ""

# e59877991444440d9199e122606fca93
#: ../../../../1.8/docs/topics/auth/customizing.txt:207
msgid ""
"A full authorization implementation can be found in the ``ModelBackend`` "
"class in `django/contrib/auth/backends.py`_, which is the default backend "
"and queries the ``auth_permission`` table most of the time. If you wish to "
"provide custom behavior for only part of the backend API, you can take "
"advantage of Python inheritance and subclass ``ModelBackend`` instead of "
"implementing the complete API in a custom backend."
msgstr ""

# 8df3cddc83fb4463acddc4524c298023
#: ../../../../1.8/docs/topics/auth/customizing.txt:219
msgid "Authorization for anonymous users"
msgstr "Autorización para usuarios anónimos"

# 1038709d6bbe46709757561bc6618da3
#: ../../../../1.8/docs/topics/auth/customizing.txt:221
msgid ""
"An anonymous user is one that is not authenticated i.e. they have provided "
"no valid authentication details. However, that does not necessarily mean "
"they are not authorized to do anything. At the most basic level, most Web "
"sites authorize anonymous users to browse most of the site, and many allow "
"anonymous posting of comments etc."
msgstr ""

# f3c83ff3f64d4b628670fb08297e3f4b
#: ../../../../1.8/docs/topics/auth/customizing.txt:227
msgid ""
"Django's permission framework does not have a place to store permissions for"
" anonymous users. However, the user object passed to an authentication "
"backend may be an :class:`django.contrib.auth.models.AnonymousUser` object, "
"allowing the backend to specify custom authorization behavior for anonymous "
"users. This is especially useful for the authors of re-usable apps, who can "
"delegate all questions of authorization to the auth backend, rather than "
"needing settings, for example, to control anonymous access."
msgstr ""

# 7318973cb046482f9f696820d11b4597
#: ../../../../1.8/docs/topics/auth/customizing.txt:238
msgid "Authorization for inactive users"
msgstr "Autorización para usuarios inactivos"

# befc9fed5cc54d0995e9e1ad729ebede
#: ../../../../1.8/docs/topics/auth/customizing.txt:240
msgid ""
"An inactive user is a one that is authenticated but has its attribute "
"``is_active`` set to ``False``. However this does not mean they are not "
"authorized to do anything. For example they are allowed to activate their "
"account."
msgstr ""

# 6867844126554b3fb6ac45a6a9c63a88
#: ../../../../1.8/docs/topics/auth/customizing.txt:245
msgid ""
"The support for anonymous users in the permission system allows for a "
"scenario where anonymous users have permissions to do something while "
"inactive authenticated users do not."
msgstr ""

# dbe14df877a145348bd2b546befbf11a
#: ../../../../1.8/docs/topics/auth/customizing.txt:249
msgid ""
"Do not forget to test for the ``is_active`` attribute of the user in your "
"own backend permission methods."
msgstr ""

# f0ae4c5a735d47aa87006e2fb67ef631
#: ../../../../1.8/docs/topics/auth/customizing.txt:254
msgid "Handling object permissions"
msgstr "Gestionando permisos de objetos"

# d13f94fc657748efa22dba30cb27ae82
#: ../../../../1.8/docs/topics/auth/customizing.txt:256
msgid ""
"Django's permission framework has a foundation for object permissions, "
"though there is no implementation for it in the core. That means that "
"checking for object permissions will always return ``False`` or an empty "
"list (depending on the check performed). An authentication backend will "
"receive the keyword parameters ``obj`` and ``user_obj`` for each object "
"related authorization method and can return the object level permission as "
"appropriate."
msgstr ""

# e29890daad8240ebbe91fd0471e298ae
#: ../../../../1.8/docs/topics/auth/customizing.txt:266
msgid "Custom permissions"
msgstr "Permisos personalizados"

# ebe26d7878ba4ee5b648b150d677cdac
#: ../../../../1.8/docs/topics/auth/customizing.txt:268
msgid ""
"To create custom permissions for a given model object, use the "
"``permissions`` :ref:`model Meta attribute <meta-options>`."
msgstr ""

# 2497c8a8ac454e959a2c1c567ff1985b
#: ../../../../1.8/docs/topics/auth/customizing.txt:271
msgid ""
"This example Task model creates three custom permissions, i.e., actions "
"users can or cannot do with Task instances, specific to your application::"
msgstr ""

# 07e84adc392e4ff1b0d3ba8bf5b2d7a5
#: ../../../../1.8/docs/topics/auth/customizing.txt:283
msgid ""
"The only thing this does is create those extra permissions when you run "
":djadmin:`manage.py migrate <migrate>`. Your code is in charge of checking "
"the value of these permissions when a user is trying to access the "
"functionality provided by the application (viewing tasks, changing the "
"status of tasks, closing tasks.) Continuing the above example, the following"
" checks if a user may view tasks::"
msgstr ""

# 314118ea4555485eb1f315628be1c10f
#: ../../../../1.8/docs/topics/auth/customizing.txt:295
msgid "Extending the existing User model"
msgstr "Extendiendo el modelo de usuario existente"

# d722273a67204e008359504dd7c3e77c
#: ../../../../1.8/docs/topics/auth/customizing.txt:297
msgid ""
"There are two ways to extend the default "
":class:`~django.contrib.auth.models.User` model without substituting your "
"own model. If the changes you need are purely behavioral, and don't require "
"any change to what is stored in the database, you can create a :ref:`proxy "
"model <proxy-models>` based on :class:`~django.contrib.auth.models.User`. "
"This allows for any of the features offered by proxy models including "
"default ordering, custom managers, or custom model methods."
msgstr ""

# 8c604677a15e4796900f9414226be242
#: ../../../../1.8/docs/topics/auth/customizing.txt:305
msgid ""
"If you wish to store information related to ``User``, you can use a :ref"
":`one-to-one relationship <ref-onetoone>` to a model containing the fields "
"for additional information. This one-to-one model is often called a profile "
"model, as it might store non-auth related information about a site user. For"
" example you might create an Employee model::"
msgstr ""

# 6f4e5459a13b4e9888a87152cc875c6d
#: ../../../../1.8/docs/topics/auth/customizing.txt:317
msgid ""
"Assuming an existing Employee Fred Smith who has both a User and Employee "
"model, you can access the related information using Django's standard "
"related model conventions::"
msgstr ""

# 91854fc3446b40aeadf5c95eb3a65d31
#: ../../../../1.8/docs/topics/auth/customizing.txt:324
msgid ""
"To add a profile model's fields to the user page in the admin, define an "
":class:`~django.contrib.admin.InlineModelAdmin` (for this example, we'll use"
" a :class:`~django.contrib.admin.StackedInline`) in your app's ``admin.py`` "
"and add it to a ``UserAdmin`` class which is registered with the "
":class:`~django.contrib.auth.models.User` class::"
msgstr ""

# 79a2e28c6c5243c79c04626a860d7ef9
#: ../../../../1.8/docs/topics/auth/customizing.txt:351
msgid ""
"These profile models are not special in any way - they are just Django "
"models that happen to have a one-to-one link with a User model. As such, "
"they do not get auto created when a user is created, but a "
":attr:`django.db.models.signals.post_save` could be used to create or update"
" related models as appropriate."
msgstr ""

# 484df868c72e468daae9e761218335f2
#: ../../../../1.8/docs/topics/auth/customizing.txt:357
msgid ""
"Note that using related models results in additional queries or joins to "
"retrieve the related data, and depending on your needs substituting the User"
" model and adding the related fields may be your better option.  However "
"existing links to the default User model within your project's apps may "
"justify the extra database load."
msgstr ""

# 1439e2aa63634a09adfe395c8bbbaece
#: ../../../../1.8/docs/topics/auth/customizing.txt:366
msgid "Substituting a custom User model"
msgstr ""

# 976c7921dd47499599c2309f300adb0c
#: ../../../../1.8/docs/topics/auth/customizing.txt:368
msgid ""
"Some kinds of projects may have authentication requirements for which "
"Django's built-in :class:`~django.contrib.auth.models.User` model is not "
"always appropriate. For instance, on some sites it makes more sense to use "
"an email address as your identification token instead of a username."
msgstr ""

# b33b9784dd3c446c870b96c6d7882d52
#: ../../../../1.8/docs/topics/auth/customizing.txt:373
msgid ""
"Django allows you to override the default User model by providing a value "
"for the :setting:`AUTH_USER_MODEL` setting that references a custom model::"
msgstr ""

# 2aad4f0a8ab746b2b5f359e8a2448f2b
#: ../../../../1.8/docs/topics/auth/customizing.txt:378
msgid ""
"This dotted pair describes the name of the Django app (which must be in your"
" :setting:`INSTALLED_APPS`), and the name of the Django model that you wish "
"to use as your User model."
msgstr ""

# 2db78509af874ce5b0f70e4a80c3b998
#: ../../../../1.8/docs/topics/auth/customizing.txt:384
msgid ""
"Changing :setting:`AUTH_USER_MODEL` has a big effect on your database "
"structure. It changes the tables that are available, and it will affect the "
"construction of foreign keys and many-to-many relationships. If you intend "
"to set :setting:`AUTH_USER_MODEL`, you should set it before creating any "
"migrations or running ``manage.py migrate`` for the first time."
msgstr ""

# 5284371b7592445da5ad655cdff74414
#: ../../../../1.8/docs/topics/auth/customizing.txt:390
msgid ""
"Changing this setting after you have tables created is not supported by "
":djadmin:`makemigrations` and will result in you having to manually fix your"
" schema, port your data from the old user table, and possibly manually "
"reapply some migrations."
msgstr ""

# 6f58a99019284014bcb0dd677ce40cec
#: ../../../../1.8/docs/topics/auth/customizing.txt:397
msgid ""
"Due to limitations of Django's dynamic dependency feature for swappable "
"models, you must ensure that the model referenced by "
":setting:`AUTH_USER_MODEL` is created in the first migration of its app "
"(usually called ``0001_initial``); otherwise, you will have dependency "
"issues."
msgstr ""

# f3b743aab5f64547af5fa5fc5bd33623
#: ../../../../1.8/docs/topics/auth/customizing.txt:402
msgid ""
"In addition, you may run into a CircularDependencyError when running your "
"migrations as Django won't be able to automatically break the dependency "
"loop due to the dynamic dependency. If you see this error, you should break "
"the loop by moving the models depended on by your User model into a second "
"migration (you can try making two normal models that have a ForeignKey to "
"each other and seeing how ``makemigrations`` resolves that circular "
"dependency if you want to see how it's usually done)"
msgstr ""

# d93105eb840a4722a44ffdb859285f7b
#: ../../../../1.8/docs/topics/auth/customizing.txt:410
msgid "Reusable apps and ``AUTH_USER_MODEL``"
msgstr "Aplicaciones reutilizables y `` AUTH_USER_MODEL``"

# e28bfca580434678a6080671dd34ee88
#: ../../../../1.8/docs/topics/auth/customizing.txt:412
msgid ""
"Reusable apps shouldn't implement a custom user model. A project may use "
"many apps, and two reusable apps that implemented a custom user model "
"couldn't be used together. If you need to store per user information in your"
" app, use a :class:`~django.db.models.ForeignKey` or "
":class:`~django.db.models.OneToOneField` to ``settings.AUTH_USER_MODEL`` as "
"described below."
msgstr ""

# fc5b66704f6c4e83a5e596158c79f187
#: ../../../../1.8/docs/topics/auth/customizing.txt:420
msgid "Referencing the User model"
msgstr "Referenciando al modelo de usuario"

# 869f272ff3b24e19829b926b1d149417
#: ../../../../1.8/docs/topics/auth/customizing.txt:424
msgid ""
"If you reference :class:`~django.contrib.auth.models.User` directly (for "
"example, by referring to it in a foreign key), your code will not work in "
"projects where the :setting:`AUTH_USER_MODEL` setting has been changed to a "
"different User model."
msgstr ""

# f5a48341c7824b4abf31cc711433d9e5
#: ../../../../1.8/docs/topics/auth/customizing.txt:431
msgid ""
"Instead of referring to :class:`~django.contrib.auth.models.User` directly, "
"you should reference the user model using "
"``django.contrib.auth.get_user_model()``. This method will return the "
"currently active User model -- the custom User model if one is specified, or"
" :class:`~django.contrib.auth.models.User` otherwise."
msgstr ""

# b00f8140563d4e87ba3bebc3e90b5851
#: ../../../../1.8/docs/topics/auth/customizing.txt:437
msgid ""
"When you define a foreign key or many-to-many relations to the User model, "
"you should specify the custom model using the :setting:`AUTH_USER_MODEL` "
"setting. For example::"
msgstr ""

# bd031f4636f84b85b15d76a88a346a8c
#: ../../../../1.8/docs/topics/auth/customizing.txt:449
msgid ""
"When connecting to signals sent by the User model, you should specify the "
"custom model using the :setting:`AUTH_USER_MODEL` setting. For example::"
msgstr ""

# 7286acf3edda43f5ba9a50c921afff40
#: ../../../../1.8/docs/topics/auth/customizing.txt:460
msgid ""
"Generally speaking, you should reference the User model with the "
":setting:`AUTH_USER_MODEL` setting in code that is executed at import time. "
"``get_user_model()`` only works once Django has imported all models."
msgstr ""

# 3427c91f9a1a4327be97880254062bef
#: ../../../../1.8/docs/topics/auth/customizing.txt:467
msgid "Specifying a custom User model"
msgstr ""

# 72eebeb35497486fb937be76067ff9f5
#: ../../../../1.8/docs/topics/auth/customizing.txt:469
msgid "Model design considerations"
msgstr "Consideraciones de diseño de modelos"

# 05dacc8f2fe345d29d39ec539ce5bea9
#: ../../../../1.8/docs/topics/auth/customizing.txt:471
msgid ""
"Think carefully before handling information not directly related to "
"authentication in your custom User Model."
msgstr ""

# d93725027a6e415cbe7e197333e2d01b
#: ../../../../1.8/docs/topics/auth/customizing.txt:474
msgid ""
"It may be better to store app-specific user information in a model that has "
"a relation with the User model. That allows each app to specify its own user"
" data requirements without risking conflicts with other apps. On the other "
"hand, queries to retrieve this related information will involve a database "
"join, which may have an effect on performance."
msgstr ""

# cd3458f67b7249c0bf169a9c15e93ebf
#: ../../../../1.8/docs/topics/auth/customizing.txt:480
msgid ""
"Django expects your custom User model to meet some minimum requirements."
msgstr ""

# c3487bbcaecc43fda94e3f22afdc6ff5
#: ../../../../1.8/docs/topics/auth/customizing.txt:482
msgid ""
"Your model must have a single unique field that can be used for "
"identification purposes. This can be a username, an email address, or any "
"other unique attribute."
msgstr ""

# 5eb55bd3bf404c099e755d7af2ca3df2
#: ../../../../1.8/docs/topics/auth/customizing.txt:486
msgid ""
"Your model must provide a way to address the user in a \"short\" and "
"\"long\" form. The most common interpretation of this would be to use the "
"user's given name as the \"short\" identifier, and the user's full name as "
"the \"long\" identifier. However, there are no constraints on what these two"
" methods return - if you want, they can return exactly the same value."
msgstr ""

# 8223c28133644eb9bd8cb0122462088a
#: ../../../../1.8/docs/topics/auth/customizing.txt:495
msgid ""
"Older versions of Django required your model to have an integer primary key "
"as well."
msgstr ""

# e088195bad2c47f18b99f91107fedd7e
#: ../../../../1.8/docs/topics/auth/customizing.txt:498
msgid ""
"The easiest way to construct a compliant custom User model is to inherit "
"from :class:`~django.contrib.auth.models.AbstractBaseUser`. "
":class:`~django.contrib.auth.models.AbstractBaseUser` provides the core "
"implementation of a ``User`` model, including hashed passwords and tokenized"
" password resets. You must then provide some key implementation details:"
msgstr ""

# 3bbe9000dca842f9becfbcc815ca846b
#: ../../../../1.8/docs/topics/auth/customizing.txt:510
msgid ""
"A string describing the name of the field on the User model that is used as "
"the unique identifier. This will usually be a username of some kind, but it "
"can also be an email address, or any other unique identifier. The field "
"*must* be unique (i.e., have ``unique=True`` set in its definition)."
msgstr ""

# 849f198f3cea4009ab0e4e62bb55624a
#: ../../../../1.8/docs/topics/auth/customizing.txt:516
msgid ""
"In the following example, the field ``identifier`` is used as the "
"identifying field::"
msgstr ""

# ed4b573ddc354a5298defae14f8c0d6b
#: ../../../../1.8/docs/topics/auth/customizing.txt:526
msgid ""
":attr:`USERNAME_FIELD` now supports "
":class:`~django.db.models.ForeignKey`\\s. Since there is no way to pass "
"model instances during the :djadmin:`createsuperuser` prompt, expect the "
"user to enter the value of :attr:`~django.db.models.ForeignKey.to_field` "
"value (the :attr:`~django.db.models.Field.primary_key` by default) of an "
"existing instance."
msgstr ""

# d805836b44194535bebf28b93905edc4
#: ../../../../1.8/docs/topics/auth/customizing.txt:535
msgid ""
"A list of the field names that will be prompted for when creating a user via"
" the :djadmin:`createsuperuser` management command. The user will be "
"prompted to supply a value for each of these fields. It must include any "
"field for which :attr:`~django.db.models.Field.blank` is ``False`` or "
"undefined and may include additional fields you want prompted for when a "
"user is created interactively. ``REQUIRED_FIELDS`` has no effect in other "
"parts of Django, like creating a user in the admin."
msgstr ""

# f42410a1762d45a095a12fd476f47780
#: ../../../../1.8/docs/topics/auth/customizing.txt:544
msgid ""
"For example, here is the partial definition for a ``User`` model that "
"defines two required fields - a date of birth and height::"
msgstr ""

# 65dd5250a92f4091a62121afdbea1d37
#: ../../../../1.8/docs/topics/auth/customizing.txt:556
msgid ""
"``REQUIRED_FIELDS`` must contain all required fields on your ``User`` model,"
" but should *not* contain the ``USERNAME_FIELD`` or ``password`` as these "
"fields will always be prompted for."
msgstr ""

# c255d4c61bf34b48ab5a79b63a25a2e4
#: ../../../../1.8/docs/topics/auth/customizing.txt:562
msgid ""
":attr:`REQUIRED_FIELDS` now supports "
":class:`~django.db.models.ForeignKey`\\s. Since there is no way to pass "
"model instances during the :djadmin:`createsuperuser` prompt, expect the "
"user to enter the value of :attr:`~django.db.models.ForeignKey.to_field` "
"value (the :attr:`~django.db.models.Field.primary_key` by default) of an "
"existing instance."
msgstr ""

# 8862a6b1dbd344289c994403501a538d
#: ../../../../1.8/docs/topics/auth/customizing.txt:571
msgid ""
"A boolean attribute that indicates whether the user is considered "
"\"active\".  This attribute is provided as an attribute on "
"``AbstractBaseUser`` defaulting to ``True``. How you choose to implement it "
"will depend on the details of your chosen auth backends. See the "
"documentation of the :attr:`is_active attribute on the built-in user model "
"<django.contrib.auth.models.User.is_active>` for details."
msgstr ""

# d321a053278548268abf8d8027b04c3e
#: ../../../../1.8/docs/topics/auth/customizing.txt:580
msgid ""
"A longer formal identifier for the user. A common interpretation would be "
"the full name of the user, but it can be any string that identifies the "
"user."
msgstr ""

# 5fd99fba19d74ea5a5cb365afd2bbb6a
#: ../../../../1.8/docs/topics/auth/customizing.txt:586
msgid ""
"A short, informal identifier for the user. A common interpretation would be "
"the first name of the user, but it can be any string that identifies the "
"user in an informal way. It may also return the same value as "
":meth:`django.contrib.auth.models.User.get_full_name()`."
msgstr ""

# a813f14cc00f4bb287d8869745e029e0
#: ../../../../1.8/docs/topics/auth/customizing.txt:591
msgid ""
"The following methods are available on any subclass of "
":class:`~django.contrib.auth.models.AbstractBaseUser`:"
msgstr ""

# d3a5cb349d1a46fe9396224993213d66
#: ../../../../1.8/docs/topics/auth/customizing.txt:598
msgid "Returns the value of the field nominated by ``USERNAME_FIELD``."
msgstr ""

# dc095725cc564e2398faf21c64a0b589
#: ../../../../1.8/docs/topics/auth/customizing.txt:602
msgid ""
"Always returns ``False``. This is a way of differentiating from  "
":class:`~django.contrib.auth.models.AnonymousUser` objects. Generally, you "
"should prefer using "
":meth:`~django.contrib.auth.models.AbstractBaseUser.is_authenticated()` to "
"this method."
msgstr ""

# 41b755b4c999488b9ce2a3965e76f9b3
#: ../../../../1.8/docs/topics/auth/customizing.txt:610
msgid ""
"Always returns ``True``. This is a way to tell if the user has been "
"authenticated. This does not imply any permissions, and doesn't check if the"
" user is active - it only indicates that the user has provided a valid "
"username and password."
msgstr ""

# 6f91ba6801674fe7b7e05c7dbab2d071
#: ../../../../1.8/docs/topics/auth/customizing.txt:617
msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the "
":class:`~django.contrib.auth.models.AbstractBaseUser` object."
msgstr ""

# 9a38bb47d7c44c9c91523bc6fc9227c4
#: ../../../../1.8/docs/topics/auth/customizing.txt:621
msgid ""
"When the raw_password is ``None``, the password will be set to an unusable "
"password, as if "
":meth:`~django.contrib.auth.models.AbstractBaseUser.set_unusable_password()`"
" were used."
msgstr ""

# 2a2dccd1c5544013bb6859de7198fc94
#: ../../../../1.8/docs/topics/auth/customizing.txt:628
msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr ""

# 2175ea85dc074687968b63a547f3d13c
#: ../../../../1.8/docs/topics/auth/customizing.txt:634
msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. "
":meth:`~django.contrib.auth.models.AbstractBaseUser.check_password()` for "
"this user will never return ``True``. Doesn't save the "
":class:`~django.contrib.auth.models.AbstractBaseUser` object."
msgstr ""

# 3056af76aaa447f4a7e8d382bc6babb4
#: ../../../../1.8/docs/topics/auth/customizing.txt:640
msgid ""
"You may need this if authentication for your application takes place against"
" an existing external source such as an LDAP directory."
msgstr ""

# 6f6758e2349841a9b3827fa6664e60ed
#: ../../../../1.8/docs/topics/auth/customizing.txt:645
msgid ""
"Returns ``False`` if "
":meth:`~django.contrib.auth.models.AbstractBaseUser.set_unusable_password()`"
" has been called for this user."
msgstr ""

# 8832efbb86bc400794a6c81c496c7329
#: ../../../../1.8/docs/topics/auth/customizing.txt:653
msgid ""
"Returns an HMAC of the password field. Used for :ref:`session-invalidation-"
"on-password-change`."
msgstr ""

# 82dd69097b334f538d9e737d5f40d327
#: ../../../../1.8/docs/topics/auth/customizing.txt:656
msgid ""
"You should also define a custom manager for your ``User`` model. If your "
"``User`` model defines ``username``, ``email``, ``is_staff``, ``is_active``,"
" ``is_superuser``, ``last_login``, and ``date_joined`` fields the same as "
"Django's default ``User``, you can just install Django's "
":class:`~django.contrib.auth.models.UserManager`; however, if your ``User`` "
"model defines different fields, you will need to define a custom manager "
"that extends :class:`~django.contrib.auth.models.BaseUserManager` providing "
"two additional methods:"
msgstr ""

# bb6380f5abe448dea139204692864814
#: ../../../../1.8/docs/topics/auth/customizing.txt:669
msgid ""
"The prototype of ``create_user()`` should accept the username field, plus "
"all required fields as arguments. For example, if your user model uses "
"``email`` as the username field, and has ``date_of_birth`` as a required "
"field, then ``create_user`` should be defined as::"
msgstr ""

# ed9bed14097e40bdbc3ca9e1c9068c35
#: ../../../../1.8/docs/topics/auth/customizing.txt:680
msgid ""
"The prototype of ``create_superuser()`` should accept the username field, "
"plus all required fields as arguments. For example, if your user model uses "
"``email`` as the username field, and has ``date_of_birth`` as a required "
"field, then ``create_superuser`` should be defined as::"
msgstr ""

# 32739857fe144d5196d9a2fa1b924eb9
#: ../../../../1.8/docs/topics/auth/customizing.txt:689
msgid ""
"Unlike ``create_user()``, ``create_superuser()`` *must* require the caller "
"to provide a password."
msgstr ""

# 2c14a22dd72e47adbe96c04df16ac392
#: ../../../../1.8/docs/topics/auth/customizing.txt:692
msgid ""
":class:`~django.contrib.auth.models.BaseUserManager` provides the following "
"utility methods:"
msgstr ""

# 3063201ecb35451c81640010cdc31000
#: ../../../../1.8/docs/topics/auth/customizing.txt:699
msgid ""
"A ``classmethod`` that normalizes email addresses by lowercasing the domain "
"portion of the email address."
msgstr ""

# 78b8f3810c2a402cb08c00d2e8896e1b
#: ../../../../1.8/docs/topics/auth/customizing.txt:704
msgid ""
"Retrieves a user instance using the contents of the field nominated by "
"``USERNAME_FIELD``."
msgstr ""

# 7d86306e5c554639926470943622b038
#: ../../../../1.8/docs/topics/auth/customizing.txt:709
msgid ""
"Returns a random password with the given length and given string of allowed "
"characters. Note that the default value of ``allowed_chars`` doesn't contain"
" letters that can cause user confusion, including:"
msgstr ""

# f84ce508f12641caaba5e73b3b1f380c
#: ../../../../1.8/docs/topics/auth/customizing.txt:713
msgid ""
"``i``, ``l``, ``I``, and ``1`` (lowercase letter i, lowercase letter L, "
"uppercase letter i, and the number one)"
msgstr ""

# 3abb7fea88e84c109703bf23af9f1e7d
#: ../../../../1.8/docs/topics/auth/customizing.txt:715
msgid ""
"``o``, ``O``, and ``0`` (lowercase letter o, uppercase letter o, and zero)"
msgstr ""

# e0b96a1fb1d74a2c8faade4050d54b78
#: ../../../../1.8/docs/topics/auth/customizing.txt:719
msgid "Extending Django's default User"
msgstr ""

# ce9a1724ba0c4c2c97829a37255ae655
#: ../../../../1.8/docs/topics/auth/customizing.txt:721
msgid ""
"If you're entirely happy with Django's "
":class:`~django.contrib.auth.models.User` model and you just want to add "
"some additional profile information, you could simply subclass "
"``django.contrib.auth.models.AbstractUser`` and add your custom profile "
"fields, although we'd recommend a separate model as described in the \"Model"
" design considerations\" note of :ref:`specifying-custom-user-model`. "
"``AbstractUser`` provides the full implementation of the default "
":class:`~django.contrib.auth.models.User` as an :ref:`abstract model "
"<abstract-base-classes>`."
msgstr ""

# eefe0d81eee042cda4530f36c734e6a7
#: ../../../../1.8/docs/topics/auth/customizing.txt:733
msgid "Custom users and the built-in auth forms"
msgstr ""

# 945b88068e194672911d9dcf93084645
#: ../../../../1.8/docs/topics/auth/customizing.txt:735
msgid ""
"As you may expect, built-in Django's :ref:`forms <built-in-auth-forms>` and "
":ref:`views <built-in-auth-views>` make certain assumptions about the user "
"model that they are working with."
msgstr ""

# d316258f572b42a088a45688ae7e4abe
#: ../../../../1.8/docs/topics/auth/customizing.txt:739
msgid ""
"If your user model doesn't follow the same assumptions, it may be necessary "
"to define a replacement form, and pass that form in as part of the "
"configuration of the auth views."
msgstr ""

# 0044274bf79e48fc8b03c6e93ea838d0
#: ../../../../1.8/docs/topics/auth/customizing.txt:743
msgid ":class:`~django.contrib.auth.forms.UserCreationForm`"
msgstr ""

# ad0db33680b1444191dc12bb1c6e3bb5
# 977f8ab611584f21b399469ea0650874
#: ../../../../1.8/docs/topics/auth/customizing.txt:745
#: ../../../../1.8/docs/topics/auth/customizing.txt:750
msgid ""
"Depends on the :class:`~django.contrib.auth.models.User` model. Must be re-"
"written for any custom user model."
msgstr ""

# 951963ab1606451ea26cbf73178ee128
#: ../../../../1.8/docs/topics/auth/customizing.txt:748
msgid ":class:`~django.contrib.auth.forms.UserChangeForm`"
msgstr ""

# 6672fbbbe7f148698b01449894756bc2
#: ../../../../1.8/docs/topics/auth/customizing.txt:753
msgid ":class:`~django.contrib.auth.forms.AuthenticationForm`"
msgstr ""

# 19a86fddee8545a39a66129951dab4fa
#: ../../../../1.8/docs/topics/auth/customizing.txt:755
msgid ""
"Works with any subclass of "
":class:`~django.contrib.auth.models.AbstractBaseUser`, and will adapt to use"
" the field defined in ``USERNAME_FIELD``."
msgstr ""

# eae605ebcc9d4ce4bd2bbecc161a3ea9
#: ../../../../1.8/docs/topics/auth/customizing.txt:758
msgid ":class:`~django.contrib.auth.forms.PasswordResetForm`"
msgstr ""

# ad42dcbfb4e3497585551910659e83e0
#: ../../../../1.8/docs/topics/auth/customizing.txt:760
msgid ""
"Assumes that the user model has a field named ``email`` that can be used to "
"identify the user and a boolean field named ``is_active`` to prevent "
"password resets for inactive users."
msgstr ""

# 66dd9e77c68743668b8fac9860a84929
#: ../../../../1.8/docs/topics/auth/customizing.txt:764
msgid ":class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ""

# 14f8af1415254ee994d4fbdb8d0e9381
# 3205259db3384c198b0f132fa9a0f611
# 8fe9202b813849e8bc7f26e1503e2221
#: ../../../../1.8/docs/topics/auth/customizing.txt:766
#: ../../../../1.8/docs/topics/auth/customizing.txt:770
#: ../../../../1.8/docs/topics/auth/customizing.txt:774
msgid ""
"Works with any subclass of "
":class:`~django.contrib.auth.models.AbstractBaseUser`"
msgstr ""

# 3f886bc9dcef43159ee8ac708fed4852
#: ../../../../1.8/docs/topics/auth/customizing.txt:768
msgid ":class:`~django.contrib.auth.forms.PasswordChangeForm`"
msgstr ""

# 249999f970324b4fb3565c504cb25241
#: ../../../../1.8/docs/topics/auth/customizing.txt:772
msgid ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"
msgstr ""

# 2fc9b77971ea4db88edc63aa7faf37eb
#: ../../../../1.8/docs/topics/auth/customizing.txt:778
msgid "Custom users and :mod:`django.contrib.admin`"
msgstr ""

# a460cd315f68441f8fbefa3a48e5459c
#: ../../../../1.8/docs/topics/auth/customizing.txt:780
msgid ""
"If you want your custom User model to also work with Admin, your User model "
"must define some additional attributes and methods. These methods allow the "
"admin to control access of the User to admin content:"
msgstr ""

# 2f61d0545ad249f2bfc4c4412422371d
#: ../../../../1.8/docs/topics/auth/customizing.txt:788
msgid ""
"Returns ``True`` if the user is allowed to have access to the admin site."
msgstr ""

# 7a60bf089ff24abc83eae70d05581db6
#: ../../../../1.8/docs/topics/auth/customizing.txt:792
msgid "Returns ``True`` if the user account is currently active."
msgstr ""

# ef1b4020a2f54f87872ba58a02cf1839
#: ../../../../1.8/docs/topics/auth/customizing.txt:796
msgid ""
"Returns ``True`` if the user has the named permission. If ``obj`` is "
"provided, the permission needs to be checked against a specific object "
"instance."
msgstr ""

# 86080e45ca5c4541a5976d38ad4545a7
#: ../../../../1.8/docs/topics/auth/customizing.txt:802
msgid ""
"Returns ``True`` if the user has permission to access models in the given "
"app."
msgstr ""

# 3a8ea838cdd24c0fabbab32de3d40288
#: ../../../../1.8/docs/topics/auth/customizing.txt:805
msgid ""
"You will also need to register your custom User model with the admin. If "
"your custom User model extends ``django.contrib.auth.models.AbstractUser``, "
"you can use Django's existing ``django.contrib.auth.admin.UserAdmin`` class."
" However, if your User model extends "
":class:`~django.contrib.auth.models.AbstractBaseUser`, you'll need to define"
" a custom ``ModelAdmin`` class. It may be possible to subclass the default "
"``django.contrib.auth.admin.UserAdmin``; however, you'll need to override "
"any of the definitions that refer to fields on "
"``django.contrib.auth.models.AbstractUser`` that aren't on your custom User "
"class."
msgstr ""

# 02cb0301f5404450a79f8f93c0db094b
#: ../../../../1.8/docs/topics/auth/customizing.txt:817
msgid "Custom users and permissions"
msgstr ""

# 3fd5fb227f454976bd9c5b15dc26c5f5
#: ../../../../1.8/docs/topics/auth/customizing.txt:819
msgid ""
"To make it easy to include Django's permission framework into your own User "
"class, Django provides "
":class:`~django.contrib.auth.models.PermissionsMixin`. This is an abstract "
"model you can include in the class hierarchy for your User model, giving you"
" all the methods and database fields necessary to support Django's "
"permission model."
msgstr ""

# 180fba86507849b3af52027e77831088
#: ../../../../1.8/docs/topics/auth/customizing.txt:825
msgid ""
":class:`~django.contrib.auth.models.PermissionsMixin` provides the following"
" methods and attributes:"
msgstr ""

# f92dd625e1444c6da03b3e99bc2e7eb8
#: ../../../../1.8/docs/topics/auth/customizing.txt:832
msgid ""
"Boolean. Designates that this user has all permissions without explicitly "
"assigning them."
msgstr ""

# 72211b1c6cda4ef287680bcd8155c1fd
#: ../../../../1.8/docs/topics/auth/customizing.txt:837
msgid ""
"Returns a set of permission strings that the user has, through their groups."
msgstr ""

# 36eb686b0c8646928d4377a9717d28e2
#: ../../../../1.8/docs/topics/auth/customizing.txt:840
msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr ""

# 134c6cb9be0d467f808e6b0ccc5ba1bc
#: ../../../../1.8/docs/topics/auth/customizing.txt:845
msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr ""

# e6d1d88527524c81b45ce9e1434508e6
#: ../../../../1.8/docs/topics/auth/customizing.txt:848
msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr ""

# 4d7dcd039f7f4ce4a5b7367ced9eef3e
#: ../../../../1.8/docs/topics/auth/customizing.txt:853
msgid ""
"Returns ``True`` if the user has the specified permission, where ``perm`` is"
" in the format ``\"<app label>.<permission codename>\"`` (see "
":ref:`permissions <topic-authorization>`). If the user is inactive, this "
"method will always return ``False``."
msgstr ""

# 71f25c24f73e4013b6ee00d5c15badad
#: ../../../../1.8/docs/topics/auth/customizing.txt:858
msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr ""

# c2915ee66f0c436597201263adf7e156
#: ../../../../1.8/docs/topics/auth/customizing.txt:863
msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If the"
" user is inactive, this method will always return ``False``."
msgstr ""

# 1fdc5dc731ac476098b858ad64cc899a
#: ../../../../1.8/docs/topics/auth/customizing.txt:868
msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr ""

# c6f188fed67d4460a13f172223d9985b
#: ../../../../1.8/docs/topics/auth/customizing.txt:873
msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If the user is inactive, this method will always return "
"``False``."
msgstr ""

# 51ac01de935e468fbf19a3a4b7966d2d
#: ../../../../1.8/docs/topics/auth/customizing.txt:877
msgid "ModelBackend"
msgstr ""

# 7737d136090248ad9e792689bbf55d17
#: ../../../../1.8/docs/topics/auth/customizing.txt:879
msgid ""
"If you don't include the "
":class:`~django.contrib.auth.models.PermissionsMixin`, you must ensure you "
"don't invoke the permissions methods on ``ModelBackend``. ``ModelBackend`` "
"assumes that certain fields are available on your user model. If your User "
"model doesn't provide  those fields, you will receive database errors when "
"you check permissions."
msgstr ""

# 9b5f8efe8ef74528951fbea2c52f8f00
#: ../../../../1.8/docs/topics/auth/customizing.txt:887
msgid "Custom users and Proxy models"
msgstr ""

# 6be57fd0128e4f4fa72e74d651e40d2e
#: ../../../../1.8/docs/topics/auth/customizing.txt:889
msgid ""
"One limitation of custom User models is that installing a custom User model "
"will break any proxy model extending "
":class:`~django.contrib.auth.models.User`. Proxy models must be based on a "
"concrete base class; by defining a custom User model, you remove the ability"
" of Django to reliably identify the base class."
msgstr ""

# a90a2e3fa30f40b6a66303bf1cc3560a
#: ../../../../1.8/docs/topics/auth/customizing.txt:894
msgid ""
"If your project uses proxy models, you must either modify the proxy to "
"extend the User model that is currently in use in your project, or merge "
"your proxy's behavior into your User subclass."
msgstr ""

# f0b640ab489e4535a08d9d95a52bbc66
#: ../../../../1.8/docs/topics/auth/customizing.txt:899
msgid "Custom users and testing/fixtures"
msgstr ""

# d43ab036dc4a4f9bbfcfd7cc7bb6c18e
#: ../../../../1.8/docs/topics/auth/customizing.txt:901
msgid ""
"If you are writing an application that interacts with the User model, you "
"must take some precautions to ensure that your test suite will run "
"regardless of the User model that is being used by a project. Any test that "
"instantiates an instance of User will fail if the User model has been "
"swapped out. This includes any attempt to create an instance of User with a "
"fixture."
msgstr ""

# 519fb3197a794691a5a01994c4f1eac1
#: ../../../../1.8/docs/topics/auth/customizing.txt:907
msgid ""
"To ensure that your test suite will pass in any project configuration, "
"``django.contrib.auth.tests.utils`` defines a ``@skipIfCustomUser`` "
"decorator. This decorator will cause a test case to be skipped if any User "
"model other than the default Django user is in use. This decorator can be "
"applied to a single test, or to an entire test class."
msgstr ""

# 445af48ab83b47009a8474e8cad58817
#: ../../../../1.8/docs/topics/auth/customizing.txt:913
msgid ""
"Depending on your application, tests may also be needed to be added to "
"ensure that the application works with *any* user model, not just the "
"default User model. To assist with this, Django provides two substitute user"
" models that can be used in test suites:"
msgstr ""

# d9503604a1124c39891dfcba7672f80a
#: ../../../../1.8/docs/topics/auth/customizing.txt:920
msgid ""
"A custom user model that uses an ``email`` field as the username, and has a "
"basic admin-compliant permissions setup"
msgstr ""

# c6f08d91008b401fbf65f6bbfd5ad60e
#: ../../../../1.8/docs/topics/auth/customizing.txt:925
msgid ""
"A custom user model that extends "
"``django.contrib.auth.models.AbstractUser``, adding a ``date_of_birth`` "
"field."
msgstr ""

# fc180ae4c73f42c0bb449d07f59bee66
#: ../../../../1.8/docs/topics/auth/customizing.txt:928
msgid ""
"You can then use the ``@override_settings`` decorator to make that test run "
"with the custom User model. For example, here is a skeleton for a test that "
"would test three possible User models -- the default, plus the two User "
"models provided by ``auth`` app::"
msgstr ""

# b38ff406ea2549b2bc3b7cdc71f5155c
# 27520b0681774dc8afa79deb484e935d
#: ../../../../1.8/docs/topics/auth/customizing.txt:955
#: ../../../../1.8/docs/topics/forms/modelforms.txt:152
msgid "A full example"
msgstr "Un ejemplo completo"

# 7ff9860656b04d9d93bac529974812bf
#: ../../../../1.8/docs/topics/auth/customizing.txt:957
msgid ""
"Here is an example of an admin-compliant custom user app. This user model "
"uses an email address as the username, and has a required date of birth; it "
"provides no permission checking, beyond a simple ``admin`` flag on the user "
"account. This model would be compatible with all the built-in auth forms and"
" views, except for the User creation forms. This example illustrates how "
"most of the components work together, but is not intended to be copied "
"directly into projects for production use."
msgstr ""

# 99e8bc71350e41a59fea466307d314b2
#: ../../../../1.8/docs/topics/auth/customizing.txt:965
msgid ""
"This code would all live in a ``models.py`` file for a custom authentication"
" app::"
msgstr ""

# ed6670c3dbbd4aaab453d58a14a9ca09
#: ../../../../1.8/docs/topics/auth/customizing.txt:1048
msgid ""
"Then, to register this custom User model with Django's admin, the following "
"code would be required in the app's ``admin.py`` file::"
msgstr ""

# f0475861bf964e4b9acefd0fc56c59b6
#: ../../../../1.8/docs/topics/auth/customizing.txt:1138
msgid ""
"Finally, specify the custom model as the default user model for your project"
" using the :setting:`AUTH_USER_MODEL` setting in your ``settings.py``::"
msgstr ""

# 4772729a25bf495d8371fbc326245f10
#: ../../../../1.8/docs/topics/auth/default.txt:3
msgid "Using the Django authentication system"
msgstr "Utilizando el sistema de autenticación de Django"

# 1703c1ea405e42eaaf77de17df7e03e9
#: ../../../../1.8/docs/topics/auth/default.txt:7
msgid ""
"This document explains the usage of Django's authentication system in its "
"default configuration. This configuration has evolved to serve the most "
"common project needs, handling a reasonably wide range of tasks, and has a "
"careful implementation of passwords and permissions. For projects where "
"authentication needs differ from the default, Django supports extensive "
":doc:`extension and customization </topics/auth/customizing>` of "
"authentication."
msgstr ""

# 9fa1e9d650904ff1a29d214240e72652
#: ../../../../1.8/docs/topics/auth/default.txt:14
msgid ""
"Django authentication provides both authentication and authorization "
"together and is generally referred to as the authentication system, as these"
" features are somewhat coupled."
msgstr ""

# f7b3cbb36d6145768575ab50151c970f
#: ../../../../1.8/docs/topics/auth/default.txt:21
msgid "User objects"
msgstr "Objetos User"

# bb9ae17cedab444c981aac992378379f
#: ../../../../1.8/docs/topics/auth/default.txt:23
msgid ""
":class:`~django.contrib.auth.models.User` objects are the core of the "
"authentication system. They typically represent the people interacting with "
"your site and are used to enable things like restricting access, registering"
" user profiles, associating content with creators etc. Only one class of "
"user exists in Django's authentication framework, i.e., :attr:`'superusers' "
"<django.contrib.auth.models.User.is_superuser>` or admin :attr:`'staff' "
"<django.contrib.auth.models.User.is_staff>` users are just user objects with"
" special attributes set, not different classes of user objects."
msgstr ""

# fdf4e74a5b6f4d009e3bd73ca703116c
#: ../../../../1.8/docs/topics/auth/default.txt:32
msgid "The primary attributes of the default user are:"
msgstr "Los atributos principales del modelo de usuario por defecto son:"

# 5a6b377db84c426d8bb6051c0f21f060
#: ../../../../1.8/docs/topics/auth/default.txt:34
msgid ":attr:`~django.contrib.auth.models.User.username`"
msgstr ":attr:`~django.contrib.auth.models.User.username`"

# ff4f5f6abcad4a0f813526fd2bec7681
#: ../../../../1.8/docs/topics/auth/default.txt:35
msgid ":attr:`~django.contrib.auth.models.User.password`"
msgstr ":attr:`~django.contrib.auth.models.User.password`"

# 862ecbb643d84948b63b19d456059166
#: ../../../../1.8/docs/topics/auth/default.txt:36
msgid ":attr:`~django.contrib.auth.models.User.email`"
msgstr ":attr:`~django.contrib.auth.models.User.email`"

# 0c0799ea92f24311947554b7176c6aee
#: ../../../../1.8/docs/topics/auth/default.txt:37
msgid ":attr:`~django.contrib.auth.models.User.first_name`"
msgstr ":attr:`~django.contrib.auth.models.User.first_name`"

# 012e388a1d5e462085effc19c6ed95f5
#: ../../../../1.8/docs/topics/auth/default.txt:38
msgid ":attr:`~django.contrib.auth.models.User.last_name`"
msgstr ":attr:`~django.contrib.auth.models.User.last_name`"

# 18cdf12b325e4b3baec5392a493db73a
#: ../../../../1.8/docs/topics/auth/default.txt:40
msgid ""
"See the :class:`full API documentation <django.contrib.auth.models.User>` "
"for full reference, the documentation that follows is more task oriented."
msgstr ""

# 3a01e9dff57340629b60c42cc4d7afe2
#: ../../../../1.8/docs/topics/auth/default.txt:46
msgid "Creating users"
msgstr ""

# c66f9afc0e3248f89d5cffc276cb8b48
#: ../../../../1.8/docs/topics/auth/default.txt:48
msgid ""
"The most direct way to create users is to use the included "
":meth:`~django.contrib.auth.models.UserManager.create_user` helper "
"function::"
msgstr ""

# 64c52cdc8e55453dadd72ef03804205d
#: ../../../../1.8/docs/topics/auth/default.txt:60
msgid ""
"If you have the Django admin installed, you can also :ref:`create users "
"interactively <auth-admin>`."
msgstr ""

# df6a96d7f0c142d1af123f273e73e279
#: ../../../../1.8/docs/topics/auth/default.txt:66
msgid "Creating superusers"
msgstr "Creando super-usuarios"

# 314a5fd62b7a4e4c96689de42dc3d3d1
#: ../../../../1.8/docs/topics/auth/default.txt:68
msgid "Create superusers using the :djadmin:`createsuperuser` command::"
msgstr "Crear superusuarios utilizando el comando: djadmin:`createsuperuser`::"

# 5823fab0ea174557b2faf6fa3b4b2212
#: ../../../../1.8/docs/topics/auth/default.txt:72
msgid ""
"You will be prompted for a password. After you enter one, the user will be "
"created immediately. If you leave off the :djadminopt:`--username` or the "
":djadminopt:`--email` options, it will prompt you for those values."
msgstr ""

# 94560e6ab60e4d8eae8592612a6b5b37
#: ../../../../1.8/docs/topics/auth/default.txt:77
msgid "Changing passwords"
msgstr "Modificando contraseñas"

# d84d78b09f8d46929f52436c48f1844d
#: ../../../../1.8/docs/topics/auth/default.txt:79
msgid ""
"Django does not store raw (clear text) passwords on the user model, but only"
" a hash (see :doc:`documentation of how passwords are managed "
"</topics/auth/passwords>` for full details). Because of this, do not attempt"
" to manipulate the password attribute of the user directly. This is why a "
"helper function is used when creating a user."
msgstr ""

# 109013e2265e48148dda825d1a3ddec5
#: ../../../../1.8/docs/topics/auth/default.txt:85
msgid "To change a user's password, you have several options:"
msgstr ""

# 5f4145ba66d74ef6bb079c1556fe9b3d
#: ../../../../1.8/docs/topics/auth/default.txt:87
msgid ""
":djadmin:`manage.py changepassword *username* <changepassword>` offers a "
"method of changing a User's password from the command line. It prompts you "
"to change the password of a given user which you must enter twice. If they "
"both match, the new password will be changed immediately. If you do not "
"supply a user, the command will attempt to change the password whose "
"username matches the current system user."
msgstr ""

# 5e7feccf9dbc4b07ae9e98449da52038
#: ../../../../1.8/docs/topics/auth/default.txt:94
msgid ""
"You can also change a password programmatically, using "
":meth:`~django.contrib.auth.models.User.set_password()`:"
msgstr ""

# 7162a837a8644bdbbb0d7c744e85c2b7
#: ../../../../1.8/docs/topics/auth/default.txt:104
msgid ""
"If you have the Django admin installed, you can also change user's passwords"
" on the :ref:`authentication system's admin pages <auth-admin>`."
msgstr ""

# ce5e5dbd52264b9eac2516391cd10265
#: ../../../../1.8/docs/topics/auth/default.txt:107
msgid ""
"Django also provides :ref:`views <built-in-auth-views>` and :ref:`forms "
"<built-in-auth-forms>` that may be used to allow users to change their own "
"passwords."
msgstr ""

# 0ecdc4e29dbb48da9d3fe980d324c2b1
#: ../../../../1.8/docs/topics/auth/default.txt:113
msgid ""
"Changing a user's password will log out all their sessions if the "
":class:`~django.contrib.auth.middleware.SessionAuthenticationMiddleware` is "
"enabled. See :ref:`session-invalidation-on-password-change` for details."
msgstr ""

# c7b1e58c11e7469c8f0a141e610082e5
#: ../../../../1.8/docs/topics/auth/default.txt:118
msgid "Authenticating Users"
msgstr "Autenticando usuarios"

# 8670dcd5e7c64002a9e8210699c3ddc4
#: ../../../../1.8/docs/topics/auth/default.txt:122
msgid ""
"To authenticate a given username and password, use "
":func:`~django.contrib.auth.authenticate()`. It takes credentials in the "
"form of keyword arguments, for the default configuration this is "
"``username`` and ``password``, and it returns a "
":class:`~django.contrib.auth.models.User` object if the password is valid "
"for the given username. If the password is invalid, "
":func:`~django.contrib.auth.authenticate()` returns ``None``. Example::"
msgstr ""

# af731becbfbd4a758eba1ed70baac366
#: ../../../../1.8/docs/topics/auth/default.txt:144
msgid ""
"This is a low level way to authenticate a set of credentials; for example, "
"it's used by the "
":class:`~django.contrib.auth.middleware.RemoteUserMiddleware`. Unless you "
"are writing your own authentication system, you probably won't use this. "
"Rather if you are looking for a way to limit access to logged in users, see "
"the :func:`~django.contrib.auth.decorators.login_required` decorator."
msgstr ""

# e338fdda830b4cc988a47e6a8366b640
#: ../../../../1.8/docs/topics/auth/default.txt:155
msgid "Permissions and Authorization"
msgstr ""

# ce52ac60b6774602a343aee898653115
#: ../../../../1.8/docs/topics/auth/default.txt:157
msgid ""
"Django comes with a simple permissions system. It provides a way to assign "
"permissions to specific users and groups of users."
msgstr ""

# 68d1c7146fab4275baa681f332d1454f
#: ../../../../1.8/docs/topics/auth/default.txt:160
msgid ""
"It's used by the Django admin site, but you're welcome to use it in your own"
" code."
msgstr ""

# 1c6144663b634f6ab693be0060eaf9b1
#: ../../../../1.8/docs/topics/auth/default.txt:163
msgid "The Django admin site uses permissions as follows:"
msgstr ""

# 8854842d874847a5b5abe4126bad66b1
#: ../../../../1.8/docs/topics/auth/default.txt:165
msgid ""
"Access to view the \"add\" form and add an object is limited to users with "
"the \"add\" permission for that type of object."
msgstr ""

# 9ee4afd3b2ee49688134f1795d0f3016
#: ../../../../1.8/docs/topics/auth/default.txt:167
msgid ""
"Access to view the change list, view the \"change\" form and change an "
"object is limited to users with the \"change\" permission for that type of "
"object."
msgstr ""

# 79be324ce67c4426a31fdbe71738619e
#: ../../../../1.8/docs/topics/auth/default.txt:170
msgid ""
"Access to delete an object is limited to users with the \"delete\" "
"permission for that type of object."
msgstr ""

# 0b52284cd11a4c10b96b12d8920bab5f
#: ../../../../1.8/docs/topics/auth/default.txt:173
msgid ""
"Permissions can be set not only per type of object, but also per specific "
"object instance. By using the "
":meth:`~django.contrib.admin.ModelAdmin.has_add_permission`, "
":meth:`~django.contrib.admin.ModelAdmin.has_change_permission` and "
":meth:`~django.contrib.admin.ModelAdmin.has_delete_permission` methods "
"provided by the :class:`~django.contrib.admin.ModelAdmin` class, it is "
"possible to customize permissions for different object instances of the same"
" type."
msgstr ""

# 8ee21eeed0954b50b07f2f2276001af6
#: ../../../../1.8/docs/topics/auth/default.txt:181
msgid ""
":class:`~django.contrib.auth.models.User` objects have two many-to-many "
"fields: ``groups`` and ``user_permissions``. "
":class:`~django.contrib.auth.models.User` objects can access their related "
"objects in the same way as any other :doc:`Django model "
"</topics/db/models>`::"
msgstr ""

# 0e2bf758512d4faa8a5e81a2106458ac
#: ../../../../1.8/docs/topics/auth/default.txt:197
msgid "Default permissions"
msgstr ""

# 7c957e76300041adbbdee7876aec910f
#: ../../../../1.8/docs/topics/auth/default.txt:199
msgid ""
"When ``django.contrib.auth`` is listed in your :setting:`INSTALLED_APPS` "
"setting, it will ensure that three default permissions -- add, change and "
"delete -- are created for each Django model defined in one of your installed"
" applications."
msgstr ""

# a14a60552c404e6ca630ad9c91bcc50f
#: ../../../../1.8/docs/topics/auth/default.txt:204
msgid ""
"These permissions will be created when you run :djadmin:`manage.py migrate "
"<migrate>`; the first time you run ``migrate`` after adding "
"``django.contrib.auth`` to :setting:`INSTALLED_APPS`, the default "
"permissions will be created for all previously-installed models, as well as "
"for any new models being installed at that time. Afterward, it will create "
"default permissions for new models each time you run :djadmin:`manage.py "
"migrate <migrate>`."
msgstr ""

# 7daf98d07bf64300856056db9eac881c
#: ../../../../1.8/docs/topics/auth/default.txt:212
msgid ""
"Assuming you have an application with an "
":attr:`~django.db.models.Options.app_label` ``foo`` and a model named "
"``Bar``, to test for basic permissions you should use:"
msgstr ""

# 71b55b781d0743c4abc66d8e1461ba31
#: ../../../../1.8/docs/topics/auth/default.txt:216
msgid "add: ``user.has_perm('foo.add_bar')``"
msgstr ""

# b742386fde7a4397be59de69ea6fa357
#: ../../../../1.8/docs/topics/auth/default.txt:217
msgid "change: ``user.has_perm('foo.change_bar')``"
msgstr ""

# 31cd196e145b4ca5aa3220fb7f46c588
#: ../../../../1.8/docs/topics/auth/default.txt:218
msgid "delete: ``user.has_perm('foo.delete_bar')``"
msgstr ""

# b9c0a2f81ee6440da751a83f46c9d047
#: ../../../../1.8/docs/topics/auth/default.txt:220
msgid ""
"The :class:`~django.contrib.auth.models.Permission` model is rarely accessed"
" directly."
msgstr ""

# 082043f8de2140e58295080efa67946d
#: ../../../../1.8/docs/topics/auth/default.txt:224
msgid "Groups"
msgstr "Grupos"

# 9c8c439327454b06a943644e69b9086c
#: ../../../../1.8/docs/topics/auth/default.txt:226
msgid ""
":class:`django.contrib.auth.models.Group` models are a generic way of "
"categorizing users so you can apply permissions, or some other label, to "
"those users. A user can belong to any number of groups."
msgstr ""

# 1e0f2c907f4944af8056bfdcd5326f58
#: ../../../../1.8/docs/topics/auth/default.txt:230
msgid ""
"A user in a group automatically has the permissions granted to that group. "
"For example, if the group ``Site editors`` has the permission "
"``can_edit_home_page``, any user in that group will have that permission."
msgstr ""

# 626aaf15ea7246918f089d665bb5fbd9
#: ../../../../1.8/docs/topics/auth/default.txt:234
msgid ""
"Beyond permissions, groups are a convenient way to categorize users to give "
"them some label, or extended functionality. For example, you could create a "
"group ``'Special users'``, and you could write code that could, say, give "
"them access to a members-only portion of your site, or send them members-"
"only email messages."
msgstr ""

# bdf116330564404495b6e5e4879a08f4
#: ../../../../1.8/docs/topics/auth/default.txt:241
msgid "Programmatically creating permissions"
msgstr ""

# 9d31e0dd937245d48e1b30fcd38e9aba
#: ../../../../1.8/docs/topics/auth/default.txt:243
msgid ""
"While :ref:`custom permissions <custom-permissions>` can be defined within a"
" model's ``Meta`` class, you can also create permissions directly. For "
"example, you can create the ``can_publish`` permission for a ``BlogPost`` "
"model in ``myapp``::"
msgstr ""

# 4658f608138945b7bb2b1e1f783be58f
#: ../../../../1.8/docs/topics/auth/default.txt:257
msgid ""
"The permission can then be assigned to a "
":class:`~django.contrib.auth.models.User` via its ``user_permissions`` "
"attribute or to a :class:`~django.contrib.auth.models.Group` via its "
"``permissions`` attribute."
msgstr ""

# 946e2814231a49bf9b6a5efccf49dbc1
#: ../../../../1.8/docs/topics/auth/default.txt:263
msgid "Permission caching"
msgstr ""

# d9d1489db3234b10a237ce64398060dd
#: ../../../../1.8/docs/topics/auth/default.txt:265
msgid ""
"The :class:`~django.contrib.auth.backends.ModelBackend` caches permissions "
"on the ``User`` object after the first time they need to be fetched for a "
"permissions check. This is typically fine for the request-response cycle "
"since permissions are not typically checked immediately after they are added"
" (in the admin, for example). If you are adding permissions and checking "
"them immediately afterward, in a test or view for example, the easiest "
"solution is to re-fetch the ``User`` from the database. For example::"
msgstr ""

# ff2e2c4b874f4b208ceec5a4faf9a75f
#: ../../../../1.8/docs/topics/auth/default.txt:298
msgid "Authentication in Web requests"
msgstr "Autenticación en peticiones web"

# 8c9fca89bf5e4502a46f9a3568276bb2
#: ../../../../1.8/docs/topics/auth/default.txt:300
msgid ""
"Django uses :doc:`sessions </topics/http/sessions>` and middleware to hook "
"the authentication system into :class:`request objects "
"<django.http.HttpRequest>`."
msgstr ""

# 813a3ec3e0b94a4290d02c3ce8c4df55
#: ../../../../1.8/docs/topics/auth/default.txt:303
msgid ""
"These provide a :attr:`request.user <django.http.HttpRequest.user>`  "
"attribute on every request which represents the current user. If the current"
" user has not logged in, this attribute will be set to an instance of "
":class:`~django.contrib.auth.models.AnonymousUser`, otherwise it will be an "
"instance of :class:`~django.contrib.auth.models.User`."
msgstr ""

# 365b35e9051443ae8ce1b275d1f5af2d
#: ../../../../1.8/docs/topics/auth/default.txt:309
msgid ""
"You can tell them apart with "
":meth:`~django.contrib.auth.models.User.is_authenticated()`, like so::"
msgstr ""

# a71c7baeee484d7b9634f38880f80b31
#: ../../../../1.8/docs/topics/auth/default.txt:322
msgid "How to log a user in"
msgstr ""

# 3261fd0713534417a1a8d9dfcfd34e1c
#: ../../../../1.8/docs/topics/auth/default.txt:324
msgid ""
"If you have an authenticated user you want to attach to the current session "
"- this is done with a :func:`~django.contrib.auth.login` function."
msgstr ""

# ffac899f0e9245088ea47cb1707c8015
#: ../../../../1.8/docs/topics/auth/default.txt:329
msgid ""
"To log a user in, from a view, use :func:`~django.contrib.auth.login()`. It "
"takes an :class:`~django.http.HttpRequest` object and a "
":class:`~django.contrib.auth.models.User` object. "
":func:`~django.contrib.auth.login()` saves the user's ID in the session, "
"using Django's session framework."
msgstr ""

# 2464ff9471be4c6ca8c258151fb9000a
#: ../../../../1.8/docs/topics/auth/default.txt:335
msgid ""
"Note that any data set during the anonymous session is retained in the "
"session after a user logs in."
msgstr ""

# bf57f32aef7a41b9be74e093e6f27091
#: ../../../../1.8/docs/topics/auth/default.txt:338
msgid ""
"This example shows how you might use both "
":func:`~django.contrib.auth.authenticate()` and "
":func:`~django.contrib.auth.login()`::"
msgstr ""

# a6ba5ee92640405c9fa7417d4c28c545
#: ../../../../1.8/docs/topics/auth/default.txt:359
msgid "Calling ``authenticate()`` first"
msgstr ""

# b84dbdcda7724ae397d1a7db19039844
#: ../../../../1.8/docs/topics/auth/default.txt:361
msgid ""
"When you're manually logging a user in, you *must* successfully authenticate"
" the user with :func:`~django.contrib.auth.authenticate()` before you call "
":func:`~django.contrib.auth.login()`. "
":func:`~django.contrib.auth.authenticate()` sets an attribute on the "
":class:`~django.contrib.auth.models.User` noting which authentication "
"backend successfully authenticated that user (see the :ref:`backends "
"documentation <authentication-backends>` for details), and this information "
"is needed later during the login process. An error will be raised if you try"
" to login a user object retrieved from the database directly."
msgstr ""

# fd84c552e49b4f9eaa060c503e89b69a
#: ../../../../1.8/docs/topics/auth/default.txt:373
msgid "How to log a user out"
msgstr ""

# d109826525e0404186de44ee4b95eec5
#: ../../../../1.8/docs/topics/auth/default.txt:377
msgid ""
"To log out a user who has been logged in via "
":func:`django.contrib.auth.login()`, use "
":func:`django.contrib.auth.logout()` within your view. It takes an "
":class:`~django.http.HttpRequest` object and has no return value. Example::"
msgstr ""

# 2d77a3ab0603423c96dc59780dac9ab3
#: ../../../../1.8/docs/topics/auth/default.txt:389
msgid ""
"Note that :func:`~django.contrib.auth.logout()` doesn't throw any errors if "
"the user wasn't logged in."
msgstr ""

# 1482b33d1fd148b588122a7cc9e7b911
#: ../../../../1.8/docs/topics/auth/default.txt:392
msgid ""
"When you call :func:`~django.contrib.auth.logout()`, the session data for "
"the current request is completely cleaned out. All existing data is removed."
" This is to prevent another person from using the same Web browser to log in"
" and have access to the previous user's session data. If you want to put "
"anything into the session that will be available to the user immediately "
"after logging out, do that *after* calling "
":func:`django.contrib.auth.logout()`."
msgstr ""

# e54e29714cfa4755b7823f3f71d4afa9
#: ../../../../1.8/docs/topics/auth/default.txt:401
msgid "Limiting access to logged-in users"
msgstr ""

# 7f959461894e4e51b169141963ce8662
#: ../../../../1.8/docs/topics/auth/default.txt:404
msgid "The raw way"
msgstr ""

# ea195e575446468aba673767828e7f0c
#: ../../../../1.8/docs/topics/auth/default.txt:406
msgid ""
"The simple, raw way to limit access to pages is to check "
":meth:`request.user.is_authenticated() "
"<django.contrib.auth.models.User.is_authenticated()>` and either redirect to"
" a login page::"
msgstr ""

# 43fe1023ea7e43df97b97d712c192693
#: ../../../../1.8/docs/topics/auth/default.txt:419
msgid "...or display an error message::"
msgstr ""

# 8e0fc29492de465a8538eb6b7c298362
#: ../../../../1.8/docs/topics/auth/default.txt:431
msgid "The login_required decorator"
msgstr "El decorador login_required"

# 4c0d61936247421ab3fc112571268b66
#: ../../../../1.8/docs/topics/auth/default.txt:435
msgid ""
"As a shortcut, you can use the convenient "
":func:`~django.contrib.auth.decorators.login_required` decorator::"
msgstr ""

# d62730000d8240ea8c89358e69db97f0
#: ../../../../1.8/docs/topics/auth/default.txt:444
msgid ""
":func:`~django.contrib.auth.decorators.login_required` does the following:"
msgstr ""

# d4a9fe3b3c7b4090948a8f9008d4a0f2
#: ../../../../1.8/docs/topics/auth/default.txt:446
msgid ""
"If the user isn't logged in, redirect to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`, passing the current absolute path in the query string. "
"Example: ``/accounts/login/?next=/polls/3/``."
msgstr ""

# 1da20c65a0c147cdba00087e4185bd55
#: ../../../../1.8/docs/topics/auth/default.txt:450
msgid ""
"If the user is logged in, execute the view normally. The view code is free "
"to assume the user is logged in."
msgstr ""

# 73a23e2e896b4218afd8b1b1ba80c642
#: ../../../../1.8/docs/topics/auth/default.txt:453
msgid ""
"By default, the path that the user should be redirected to upon successful "
"authentication is stored in a query string parameter called ``\"next\"``. If"
" you would prefer to use a different name for this parameter, "
":func:`~django.contrib.auth.decorators.login_required` takes an optional "
"``redirect_field_name`` parameter::"
msgstr ""

# df49a12c0f08420fb18c7d529702d005
#: ../../../../1.8/docs/topics/auth/default.txt:465
msgid ""
"Note that if you provide a value to ``redirect_field_name``, you will most "
"likely need to customize your login template as well, since the template "
"context variable which stores the redirect path will use the value of "
"``redirect_field_name`` as its key rather than ``\"next\"`` (the default)."
msgstr ""

# 10c744809faf4c0f8cff9267c92983fa
#: ../../../../1.8/docs/topics/auth/default.txt:470
msgid ""
":func:`~django.contrib.auth.decorators.login_required` also takes an "
"optional ``login_url`` parameter. Example::"
msgstr ""

# d26b6ce2e01f4e1a875b8cf9ea78a997
#: ../../../../1.8/docs/topics/auth/default.txt:479
msgid ""
"Note that if you don't specify the ``login_url`` parameter, you'll need to "
"ensure that the :setting:`settings.LOGIN_URL <LOGIN_URL>` and your login "
"view are properly associated. For example, using the defaults, add the "
"following lines to your URLconf::"
msgstr ""

# 8e7f261d77ac49edbb4f266d1553c212
#: ../../../../1.8/docs/topics/auth/default.txt:488
msgid ""
"The :setting:`settings.LOGIN_URL <LOGIN_URL>` also accepts view function "
"names and :ref:`named URL patterns <naming-url-patterns>`. This allows you "
"to freely remap your login view within your URLconf without having to update"
" the setting."
msgstr ""

# e86ca1b503ca4c24a65f18a56023530b
#: ../../../../1.8/docs/topics/auth/default.txt:495
msgid ""
"The login_required decorator does NOT check the is_active flag on a user."
msgstr ""

# 0c37bcd6f4444edfbe5654167a60fbf5
#: ../../../../1.8/docs/topics/auth/default.txt:498
msgid "Limiting access to logged-in users that pass a test"
msgstr ""

# 2182249dad2e4107a18ca18727045791
#: ../../../../1.8/docs/topics/auth/default.txt:500
msgid ""
"To limit access based on certain permissions or some other test, you'd do "
"essentially the same thing as described in the previous section."
msgstr ""

# eef0a52b9d8a4ba49910dee3fb2f5658
#: ../../../../1.8/docs/topics/auth/default.txt:503
msgid ""
"The simple way is to run your test on :attr:`request.user "
"<django.http.HttpRequest.user>` in the view directly. For example, this view"
" checks to make sure the user has an email in the desired domain and if not,"
" redirects to the login page::"
msgstr ""

# 4af59ed4c86149cc91653d548d49a870
#: ../../../../1.8/docs/topics/auth/default.txt:517
msgid ""
"As a shortcut, you can use the convenient ``user_passes_test`` decorator "
"which performs a redirect when the callable returns ``False``::"
msgstr ""

# 4c7d639d3a8c4309b823846aa6a1db4e
#: ../../../../1.8/docs/topics/auth/default.txt:529
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes a required "
"argument: a callable that takes a :class:`~django.contrib.auth.models.User` "
"object and returns ``True`` if the user is allowed to view the page. Note "
"that :func:`~django.contrib.auth.decorators.user_passes_test` does not "
"automatically check that the :class:`~django.contrib.auth.models.User` is "
"not anonymous."
msgstr ""

# 452c9f5b67e146819cf4fd4e9e45883e
#: ../../../../1.8/docs/topics/auth/default.txt:537
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes two optional "
"arguments:"
msgstr ""

# da6a66374f104ca0a16996a7dece79b3
#: ../../../../1.8/docs/topics/auth/default.txt:543
msgid "``login_url``"
msgstr ""

# 5b5cc02a97bc49f392d2430c05f96b0e
#: ../../../../1.8/docs/topics/auth/default.txt:541
msgid ""
"Lets you specify the URL that users who don't pass the test will be "
"redirected to. It may be a login page and defaults to "
":setting:`settings.LOGIN_URL <LOGIN_URL>` if you don't specify one."
msgstr ""

# 95f0e41b0b504573b3f0efd8918e2c1c
#: ../../../../1.8/docs/topics/auth/default.txt:549
msgid "``redirect_field_name``"
msgstr ""

# f91ad74da9aa4aaba92acf28344bd3b2
#: ../../../../1.8/docs/topics/auth/default.txt:546
msgid ""
"Same as for :func:`~django.contrib.auth.decorators.login_required`. Setting "
"it to ``None`` removes it from the URL, which you may want to do if you are "
"redirecting users that don't pass the test to a non-login page where there's"
" no \"next page\"."
msgstr ""

# affab0acaef24f8e849338858b9ac982
# f41d9fda328e4181b57d642e16d3fff7
# e81d147c499042b9920e280fc6894730
# ec334cc4b3b24db0ad4f01bed674d426
# 962a6610b310497ca9219d340ff9af91
# f27c692e91724b428faeef9fa3f6e7f7
# a7f2b7a763754f34bfd74ff19cb4d485
# 118b29396b904543b53856251fba23a2
# 30b8fc8ffb7e43adbfe19fb06ae7288d
# c646a535a4ff44f99fbc91125e2815be
# f5076dcd411840adb4c88afb22ecb50b
# b5b4f5be8235452f980709551ab4a707
# 2338ccf775284390aed9859d28cd24f9
# e030ba69c13a4db5aa9236c1c56e4120
# cfc18849259549318e7278e03d7712d0
# 5dc07253d0b44c69899ddd284514b5d1
# 19215b8033c545cfb1f14dba96b0a6c0
# 80f2b9f22c7f45ab8a106ccb9949e47f
# a1cae555895744e1a2a40d7c53df542c
# 9f33f49035a64521a59b6b801df20714
# 7eef7030a6734d4e8b875a09e33ee335
# fa0caeb2cf2a426aa9ffb10df45ac6b8
# 838d0bfc680648b4a6b50af549d8e405
# d3fe339b4f86460187dde966acea6e39
#: ../../../../1.8/docs/topics/auth/default.txt:551
#: ../../../../1.8/docs/topics/db/managers.txt:151
#: ../../../../1.8/docs/topics/db/managers.txt:272
#: ../../../../1.8/docs/topics/db/queries.txt:1276
#: ../../../../1.8/docs/topics/db/sql.txt:248
#: ../../../../1.8/docs/topics/email.txt:288
#: ../../../../1.8/docs/topics/email.txt:332
#: ../../../../1.8/docs/topics/forms/modelforms.txt:23
#: ../../../../1.8/docs/topics/forms/modelforms.txt:422
#: ../../../../1.8/docs/topics/http/urls.txt:421
#: ../../../../1.8/docs/topics/http/urls.txt:801
#: ../../../../1.8/docs/topics/i18n/formatting.txt:120
#: ../../../../1.8/docs/topics/i18n/formatting.txt:138
#: ../../../../1.8/docs/topics/i18n/timezones.txt:338
#: ../../../../1.8/docs/topics/i18n/timezones.txt:351
#: ../../../../1.8/docs/topics/i18n/timezones.txt:367
#: ../../../../1.8/docs/topics/i18n/translation.txt:190
#: ../../../../1.8/docs/topics/i18n/translation.txt:292
#: ../../../../1.8/docs/topics/i18n/translation.txt:1771
#: ../../../../1.8/docs/topics/settings.txt:256
#: ../../../../1.8/docs/topics/signals.txt:224
#: ../../../../1.8/docs/topics/testing/tools.txt:724
#: ../../../../1.8/docs/topics/testing/tools.txt:1068
#: ../../../../1.8/docs/topics/testing/tools.txt:1104
msgid "For example::"
msgstr "Por ejemplo::"

# e465c9d3daae4592bac08ee00cd532eb
#: ../../../../1.8/docs/topics/auth/default.txt:558
msgid "The permission_required decorator"
msgstr ""

# 3ecd7f16e8d44f548bd4601ab973eecd
#: ../../../../1.8/docs/topics/auth/default.txt:562
msgid ""
"It's a relatively common task to check whether a user has a particular "
"permission. For that reason, Django provides a shortcut for that case: the "
":func:`~django.contrib.auth.decorators.permission_required()` decorator.::"
msgstr ""

# 370dfd5034564282a197d1e18395a4dc
#: ../../../../1.8/docs/topics/auth/default.txt:572
msgid ""
"As for the :meth:`~django.contrib.auth.models.User.has_perm` method, "
"permission names take the form ``\"<app label>.<permission codename>\"`` "
"(i.e. ``polls.can_vote`` for a permission on a model in the ``polls`` "
"application)."
msgstr ""

# 8514239e3ebe43c68e81244336400b3b
#: ../../../../1.8/docs/topics/auth/default.txt:577
msgid ""
"Note that :func:`~django.contrib.auth.decorators.permission_required()` also"
" takes an optional ``login_url`` parameter. Example::"
msgstr ""

# e7037587f8da45a7a73f26865e3880b9
#: ../../../../1.8/docs/topics/auth/default.txt:586
msgid ""
"As in the :func:`~django.contrib.auth.decorators.login_required` decorator, "
"``login_url`` defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

# 3f6a9f6517d14cbebfe0bd907d50083e
#: ../../../../1.8/docs/topics/auth/default.txt:589
msgid ""
"If the ``raise_exception`` parameter is given, the decorator will raise "
":exc:`~django.core.exceptions.PermissionDenied`, prompting :ref:`the 403 "
"(HTTP Forbidden) view<http_forbidden_view>` instead of redirecting to the "
"login page."
msgstr ""

# d0b232891eaa4a1a92786d004213b3b0
#: ../../../../1.8/docs/topics/auth/default.txt:596
msgid ""
"The :func:`~django.contrib.auth.decorators.permission_required` decorator "
"can take a list of permissions as well as a single permission."
msgstr ""

# d2507f744f7d4d0cb4dffb12244022fc
#: ../../../../1.8/docs/topics/auth/default.txt:602
msgid "Applying permissions to generic views"
msgstr ""

# 1e82210c0d0e4d1b969ad4d40baaf719
#: ../../../../1.8/docs/topics/auth/default.txt:604
msgid ""
"To apply a permission to a :doc:`class-based generic view </ref/class-based-"
"views/index>`, decorate the :meth:`View.dispatch "
"<django.views.generic.base.View.dispatch>` method on the class. See :ref"
":`decorating-class-based-views` for details. Another approach is to "
":ref:`write a mixin that wraps as_view() <mixins_that_wrap_as_view>`."
msgstr ""

# 2325a030cc15458bbf33cf7263fd8388
#: ../../../../1.8/docs/topics/auth/default.txt:613
msgid "Session invalidation on password change"
msgstr ""

# f9f285df824e4b14ba9be187f8947074
#: ../../../../1.8/docs/topics/auth/default.txt:619
msgid ""
"This protection only applies if "
":class:`~django.contrib.auth.middleware.SessionAuthenticationMiddleware` is "
"enabled in :setting:`MIDDLEWARE_CLASSES`. It's included if ``settings.py`` "
"was generated by :djadmin:`startproject` on Django ≥ 1.7."
msgstr ""

# dad39bb1a3ed4ef9a2ddfe14905ea5c4
#: ../../../../1.8/docs/topics/auth/default.txt:624
msgid ""
"Session verification will become mandatory in Django 1.10 regardless of "
"whether or not ``SessionAuthenticationMiddleware`` is enabled. If you have a"
" pre-1.7 project or one generated using a template that doesn't include "
"``SessionAuthenticationMiddleware``, consider enabling it before then after "
"reading the upgrade considerations below."
msgstr ""

# 3b55f58471bf42cdacb2c96906d38302
#: ../../../../1.8/docs/topics/auth/default.txt:630
msgid ""
"If your :setting:`AUTH_USER_MODEL` inherits from "
":class:`~django.contrib.auth.models.AbstractBaseUser` or implements its own "
":meth:`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash()`"
" method, authenticated sessions will include the hash returned by this "
"function. In the :class:`~django.contrib.auth.models.AbstractBaseUser` case,"
" this is an HMAC of the password field. If the "
":class:`~django.contrib.auth.middleware.SessionAuthenticationMiddleware` is "
"enabled, Django verifies that the hash sent along with each request matches "
"the one that's computed server-side. This allows a user to log out all of "
"their sessions by changing their password."
msgstr ""

# 3328168ce6c5446f8724316cdce536fd
#: ../../../../1.8/docs/topics/auth/default.txt:641
msgid ""
"The default password change views included with Django, "
":func:`django.contrib.auth.views.password_change` and the "
"``user_change_password`` view in the :mod:`django.contrib.auth` admin, "
"update the session with the new password hash so that a user changing their "
"own password won't log themselves out. If you have a custom password change "
"view and wish to have similar behavior, use this function:"
msgstr ""

# 3434abbae88140dca1e7c0ee34b39d7d
#: ../../../../1.8/docs/topics/auth/default.txt:650
msgid ""
"This function takes the current request and the updated user object from "
"which the new session hash will be derived and updates the session hash "
"appropriately. Example usage::"
msgstr ""

# 3504f7ecd5fe42b3aac829cca587c3c3
#: ../../../../1.8/docs/topics/auth/default.txt:665
msgid ""
"If you are upgrading an existing site and wish to enable this middleware "
"without requiring all your users to re-login afterward, you should first "
"upgrade to Django 1.7 and run it for a while so that as sessions are "
"naturally recreated as users login, they include the session hash as "
"described above. Once you start running your site with "
":class:`~django.contrib.auth.middleware.SessionAuthenticationMiddleware`, "
"any users who have not logged in and had their session updated with the "
"verification hash will have their existing session invalidated and be "
"required to login."
msgstr ""

# 54846636b4694bd5b92fb118e70da56f
#: ../../../../1.8/docs/topics/auth/default.txt:676
msgid ""
"Since "
":meth:`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash()`"
" is based on :setting:`SECRET_KEY`, updating your site to use a new secret "
"will invalidate all existing sessions."
msgstr ""

# f212dcb309224b5c8931f027f8ab6cd0
#: ../../../../1.8/docs/topics/auth/default.txt:684
msgid "Authentication Views"
msgstr "Vistas de autenticación"

# 4bfe26a0bad1474495deddd4b53ab2e8
#: ../../../../1.8/docs/topics/auth/default.txt:688
msgid ""
"Django provides several views that you can use for handling login, logout, "
"and password management. These make use of the :ref:`stock auth forms "
"<built-in-auth-forms>` but you can pass in your own forms as well."
msgstr ""

# 9f660d5c4e2f43e6b5ebf1794094967d
#: ../../../../1.8/docs/topics/auth/default.txt:692
msgid ""
"Django provides no default template for the authentication views. You should"
" create your own templates for the views you want to use. The template "
"context is documented in each view, see :ref:`all-authentication-views`."
msgstr ""

# cce72090185d44f58de66332a6527908
#: ../../../../1.8/docs/topics/auth/default.txt:699
msgid "Using the views"
msgstr "Utilizando las vistas"

# 85867d3eef0b404f87dbb23be0e6b7d1
#: ../../../../1.8/docs/topics/auth/default.txt:701
msgid ""
"There are different methods to implement these views in your project. The "
"easiest way is to include the provided URLconf in "
"``django.contrib.auth.urls`` in your own URLconf, for example::"
msgstr ""

# 0837c9d7f14b4fab946066ca8c925132
#: ../../../../1.8/docs/topics/auth/default.txt:709
msgid "This will include the following URL patterns::"
msgstr ""

# 762c60f1896f4945bbcd354b601dabc0
#: ../../../../1.8/docs/topics/auth/default.txt:720
msgid ""
"The views provide a URL name for easier reference. See :doc:`the URL "
"documentation </topics/http/urls>` for details on using named URL patterns."
msgstr ""

# b1811b637c4f4c589d182ec55cccd92b
#: ../../../../1.8/docs/topics/auth/default.txt:723
msgid ""
"If you want more control over your URLs, you can reference a specific view "
"in your URLconf::"
msgstr ""

# 2cff5f7786ea4bf7826cbbb83fec6a68
#: ../../../../1.8/docs/topics/auth/default.txt:732
msgid ""
"The views have optional arguments you can use to alter the behavior of the "
"view. For example, if you want to change the template name a view uses, you "
"can provide the ``template_name`` argument. A way to do this is to provide "
"keyword arguments in the URLconf, these will be passed on to the view. For "
"example::"
msgstr ""

# 5baacba8bea542f180293430d9db6a3d
#: ../../../../1.8/docs/topics/auth/default.txt:745
msgid ""
"All views return a :class:`~django.template.response.TemplateResponse` "
"instance, which allows you to easily customize the response data before "
"rendering. A way to do this is to wrap a view in your own view::"
msgstr ""

# a7949e57a7b044eabf38cc5dff673b51
#: ../../../../1.8/docs/topics/auth/default.txt:756
msgid ""
"For more details, see the :doc:`TemplateResponse documentation </ref"
"/template-response>`."
msgstr ""

# 018ecf4e01454251a0e3da9a4a2c129f
#: ../../../../1.8/docs/topics/auth/default.txt:762
msgid "All authentication views"
msgstr "Todas las vistas de autenticación"

# b119313f5612436fb26bceb837843de0
#: ../../../../1.8/docs/topics/auth/default.txt:764
msgid ""
"This is a list with all the views ``django.contrib.auth`` provides. For "
"implementation details see :ref:`using-the-views`."
msgstr ""

# 931fb492f8644344bdbbacee854e7ed7
#: ../../../../1.8/docs/topics/auth/default.txt:769
msgid "**URL name:** ``login``"
msgstr ""

# 6d723ec3b49c49448dddb19446725426
#: ../../../../1.8/docs/topics/auth/default.txt:771
msgid ""
"See :doc:`the URL documentation </topics/http/urls>` for details on using "
"named URL patterns."
msgstr ""

# c53b1dd6531e4167ae1828dc74724d13
# 73c8d2b1157f4bd2805dce336cb5174a
# 2e0cd507495d4293ada7fc0d7e908b68
# a58e76f3dfc149b88b47aed4f8304101
# 1a69f63974c44c938be3cb3281395286
# 551d2633e66c4bd28f657eabbd91cc43
# aa4a03a27bfa47e19bbb9de9b75b3a90
# b8bd9d9bbaf84e818ac36334455ad7ea
# 3556ec03d32e4c1c85b1a5a18423b080
# 1fea663ca4ca45c6b91d758c598ba483
#: ../../../../1.8/docs/topics/auth/default.txt:774
#: ../../../../1.8/docs/topics/auth/default.txt:900
#: ../../../../1.8/docs/topics/auth/default.txt:948
#: ../../../../1.8/docs/topics/auth/default.txt:966
#: ../../../../1.8/docs/topics/auth/default.txt:997
#: ../../../../1.8/docs/topics/auth/default.txt:1033
#: ../../../../1.8/docs/topics/auth/default.txt:1132
#: ../../../../1.8/docs/topics/auth/default.txt:1151
#: ../../../../1.8/docs/topics/auth/default.txt:1193
#: ../../../../1.8/docs/topics/auth/default.txt:1219
msgid "**Optional arguments:**"
msgstr ""

# 9c871d0f4c8742eb89faedb003a78150
#: ../../../../1.8/docs/topics/auth/default.txt:776
msgid ""
"``template_name``: The name of a template to display for the view used to "
"log the user in. Defaults to :file:`registration/login.html`."
msgstr ""

# ee56aeb8bb204eb3b2e8db47a5e91a02
#: ../../../../1.8/docs/topics/auth/default.txt:779
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after login. Defaults to ``next``."
msgstr ""

# 2e547205430242f589cede697fc27fdc
#: ../../../../1.8/docs/topics/auth/default.txt:782
msgid ""
"``authentication_form``: A callable (typically just a form class) to use for"
" authentication. Defaults to "
":class:`~django.contrib.auth.forms.AuthenticationForm`."
msgstr ""

# 4820417376f248dc8195eaa2f9d9ffdd
# bffe86d4cf2947029b1f45659d99a376
# f18a03b087b84d11aca72a60d99b4b47
# a3fd66ebaeb449c2a00aabacb749c953
# 80fdfa1943c744289a49ac9ed610990e
# 56a2a706ffc44300bde8db5369101395
# b8365db5cc8b4fc69db399814f9a5e80
# 207271b37206463f85c4c88440e3a03d
# 4bd59f2cf5954696a6325af249fe3e4e
# 5d07140a03644ce0a4eb358ec65d9748
#: ../../../../1.8/docs/topics/auth/default.txt:786
#: ../../../../1.8/docs/topics/auth/default.txt:912
#: ../../../../1.8/docs/topics/auth/default.txt:935
#: ../../../../1.8/docs/topics/auth/default.txt:953
#: ../../../../1.8/docs/topics/auth/default.txt:980
#: ../../../../1.8/docs/topics/auth/default.txt:1003
#: ../../../../1.8/docs/topics/auth/default.txt:1061
#: ../../../../1.8/docs/topics/auth/default.txt:1138
#: ../../../../1.8/docs/topics/auth/default.txt:1171
#: ../../../../1.8/docs/topics/auth/default.txt:1198
msgid ""
"``current_app``: A hint indicating which application contains the current "
"view. See the :ref:`namespaced URL resolution strategy <topics-http-"
"reversing-url-namespaces>` for more information."
msgstr ""

# edab429596a74aa6aeb02008a33d5f58
# 15c171cd6f53470f8f95a330d31794fb
# 2e5c8d56dcd3487ca6cb7125f7e01c53
# b3e09cda71184b7aabc7ade87230dc0a
# 4ce933d0c8334540887c573945de9ec9
# 62e5a1bd741746e1b807b498aa1d9452
# 9dde07bba85a406994817a12a0bacbb5
# c4b13368404f40f0ae51651d5059e7c2
# a9dfd6a8741b46a0ac068c60509a4d2c
# 74f3c101bf5c4b539269642a446f27f5
#: ../../../../1.8/docs/topics/auth/default.txt:790
#: ../../../../1.8/docs/topics/auth/default.txt:916
#: ../../../../1.8/docs/topics/auth/default.txt:939
#: ../../../../1.8/docs/topics/auth/default.txt:957
#: ../../../../1.8/docs/topics/auth/default.txt:984
#: ../../../../1.8/docs/topics/auth/default.txt:1007
#: ../../../../1.8/docs/topics/auth/default.txt:1065
#: ../../../../1.8/docs/topics/auth/default.txt:1142
#: ../../../../1.8/docs/topics/auth/default.txt:1175
#: ../../../../1.8/docs/topics/auth/default.txt:1202
msgid ""
"``extra_context``: A dictionary of context data that will be added to the "
"default context data passed to the template."
msgstr ""

# f05325e10542449d8201164301dff8d1
#: ../../../../1.8/docs/topics/auth/default.txt:793
msgid "Here's what ``django.contrib.auth.views.login`` does:"
msgstr ""

# 91170c19ad4d4114aca318f3f64f7b09
#: ../../../../1.8/docs/topics/auth/default.txt:795
msgid ""
"If called via ``GET``, it displays a login form that POSTs to the same URL. "
"More on this in a bit."
msgstr ""

# da8b4e4c04e24c3eadaba669cc1b9241
#: ../../../../1.8/docs/topics/auth/default.txt:798
msgid ""
"If called via ``POST`` with user submitted credentials, it tries to log the "
"user in. If login is successful, the view redirects to the URL specified in "
"``next``. If ``next`` isn't provided, it redirects to "
":setting:`settings.LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` (which defaults "
"to ``/accounts/profile/``). If login isn't successful, it redisplays the "
"login form."
msgstr ""

# 58e88000f7ea45b7ac4f9c6a63ff4754
#: ../../../../1.8/docs/topics/auth/default.txt:805
msgid ""
"It's your responsibility to provide the html for the login template , called"
" ``registration/login.html`` by default. This template gets passed four "
"template context variables:"
msgstr ""

# 84bc4f34f9914b12b34e5cd481003489
#: ../../../../1.8/docs/topics/auth/default.txt:809
msgid ""
"``form``: A :class:`~django.forms.Form` object representing the "
":class:`~django.contrib.auth.forms.AuthenticationForm`."
msgstr ""

# 3726e7a9ea8d438ba47b4bab04c01b4b
#: ../../../../1.8/docs/topics/auth/default.txt:812
msgid ""
"``next``: The URL to redirect to after successful login. This may contain a "
"query string, too."
msgstr ""

# 2cf9ac1410ac4eba906a820f310f787e
# 5967921080824451850fe6ae534441e9
#: ../../../../1.8/docs/topics/auth/default.txt:815
#: ../../../../1.8/docs/topics/auth/default.txt:923
msgid ""
"``site``: The current :class:`~django.contrib.sites.models.Site`, according "
"to the :setting:`SITE_ID` setting. If you don't have the site framework "
"installed, this will be set to an instance of "
":class:`~django.contrib.sites.requests.RequestSite`, which derives the site "
"name and domain from the current :class:`~django.http.HttpRequest`."
msgstr ""

# 080692255eae4212be451d1aa0a33a65
# d7de7f93dc9e4172adaa592c110e512a
# cdfc3d5cf3b446f88f4e1d76cc486bc5
#: ../../../../1.8/docs/topics/auth/default.txt:822
#: ../../../../1.8/docs/topics/auth/default.txt:930
#: ../../../../1.8/docs/topics/auth/default.txt:1094
msgid ""
"``site_name``: An alias for ``site.name``. If you don't have the site "
"framework installed, this will be set to the value of "
":attr:`request.META['SERVER_NAME'] <django.http.HttpRequest.META>`. For more"
" on sites, see :doc:`/ref/contrib/sites`."
msgstr ""

# e69905f857ba416aa77f17f386ac1ff5
#: ../../../../1.8/docs/topics/auth/default.txt:827
msgid ""
"If you'd prefer not to call the template :file:`registration/login.html`, "
"you can pass the ``template_name`` parameter via the extra arguments to the "
"view in your URLconf. For example, this URLconf line would use "
":file:`myapp/login.html` instead::"
msgstr ""

# 24529825a999469a9d2bda9497396509
#: ../../../../1.8/docs/topics/auth/default.txt:834
msgid ""
"You can also specify the name of the ``GET`` field which contains the URL to"
" redirect to after login by passing ``redirect_field_name`` to the view. By "
"default, the field is called ``next``."
msgstr ""

# 6483ca8acd3a450789fabf4341a62240
#: ../../../../1.8/docs/topics/auth/default.txt:838
msgid ""
"Here's a sample :file:`registration/login.html` template you can use as a "
"starting point. It assumes you have a :file:`base.html` template that "
"defines a ``content`` block:"
msgstr ""

# 8e1f841aefe042a6ab6e4ac65af7ae19
#: ../../../../1.8/docs/topics/auth/default.txt:883
msgid ""
"If you have customized authentication (see :doc:`Customizing Authentication "
"</topics/auth/customizing>`) you can pass a custom authentication form to "
"the login view via the ``authentication_form`` parameter. This form must "
"accept a ``request`` keyword argument in its ``__init__`` method, and "
"provide a ``get_user`` method which returns the authenticated user object "
"(this method is only ever called after successful form validation)."
msgstr ""

# 217c353703464421b46a1d746852273e
#: ../../../../1.8/docs/topics/auth/default.txt:896
msgid "Logs a user out."
msgstr ""

# a83e9d75faf642048cbcd7dc3a046742
#: ../../../../1.8/docs/topics/auth/default.txt:898
msgid "**URL name:** ``logout``"
msgstr ""

# a982a18ce6a145d4b72fc61fa52950fa
#: ../../../../1.8/docs/topics/auth/default.txt:902
msgid "``next_page``: The URL to redirect to after logout."
msgstr ""

# 2d6380f618664ebb985d9035c1430181
#: ../../../../1.8/docs/topics/auth/default.txt:904
msgid ""
"``template_name``: The full name of a template to display after logging the "
"user out. Defaults to :file:`registration/logged_out.html` if no argument is"
" supplied."
msgstr ""

# 515c01daf128475f9022e8b09430b097
#: ../../../../1.8/docs/topics/auth/default.txt:908
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Defaults to ``next``. Overrides the ``next_page``"
" URL if the given ``GET`` parameter is passed."
msgstr ""

# 1091a7a86e39411482f7ac38e2005d31
# b60ebceb7d4c4ef18efd142b1ae35645
# 4fcbb7c96e074df0ad71a0d5a4f55b73
# 54faf9ad00934f17a4dc2205a5a38cee
#: ../../../../1.8/docs/topics/auth/default.txt:919
#: ../../../../1.8/docs/topics/auth/default.txt:987
#: ../../../../1.8/docs/topics/auth/default.txt:1081
#: ../../../../1.8/docs/topics/auth/default.txt:1178
msgid "**Template context:**"
msgstr ""

# b2022fca18ce4c9a84a5e9f37de32e8f
#: ../../../../1.8/docs/topics/auth/default.txt:921
msgid "``title``: The string \"Logged out\", localized."
msgstr ""

# 4372fe6fea0e4a0ca2bccd8c245d1e54
#: ../../../../1.8/docs/topics/auth/default.txt:944
msgid "Logs a user out, then redirects to the login page."
msgstr ""

# 52ddb6aa9b404751915013e2787166a4
#: ../../../../1.8/docs/topics/auth/default.txt:946
msgid "**URL name:** No default URL provided"
msgstr ""

# c695a7dd6e8c42e08bcaab8b033d38d5
# aa3d21dff82b40f7b2b992ebaf43ffad
#: ../../../../1.8/docs/topics/auth/default.txt:950
#: ../../../../1.8/docs/topics/auth/default.txt:1221
msgid ""
"``login_url``: The URL of the login page to redirect to. Defaults to "
":setting:`settings.LOGIN_URL <LOGIN_URL>` if not supplied."
msgstr ""

# df7a82eb9cde4dac9737b43b54d75d4c
#: ../../../../1.8/docs/topics/auth/default.txt:962
msgid "Allows a user to change their password."
msgstr ""

# 64f693a67e174cac8f5b395630abdfa8
#: ../../../../1.8/docs/topics/auth/default.txt:964
msgid "**URL name:** ``password_change``"
msgstr ""

# a28a74646916439a947185b60a09d804
#: ../../../../1.8/docs/topics/auth/default.txt:968
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password change form. Defaults to "
":file:`registration/password_change_form.html` if not supplied."
msgstr ""

# d71a077dca0c4103ad7ad35fc0ca6891
#: ../../../../1.8/docs/topics/auth/default.txt:972
msgid ""
"``post_change_redirect``: The URL to redirect to after a successful password"
" change."
msgstr ""

# a9cdc4a105ee42dc92f5c81eab8c406b
#: ../../../../1.8/docs/topics/auth/default.txt:975
msgid ""
"``password_change_form``: A custom \"change password\" form which must "
"accept a ``user`` keyword argument. The form is responsible for actually "
"changing the user's password. Defaults to "
":class:`~django.contrib.auth.forms.PasswordChangeForm`."
msgstr ""

# 7ff9a84aba174e10863076d25fb001a6
#: ../../../../1.8/docs/topics/auth/default.txt:989
msgid ""
"``form``: The password change form (see ``password_change_form`` above)."
msgstr ""

# e031a29a3bc6402fa16e6aec94df4c03
#: ../../../../1.8/docs/topics/auth/default.txt:993
msgid "The page shown after a user has changed their password."
msgstr ""

# 51a082a08fd74a8d81f00ab4cc797ddd
#: ../../../../1.8/docs/topics/auth/default.txt:995
msgid "**URL name:** ``password_change_done``"
msgstr ""

# 3dcaf7668c304bb3a700c5c242a6f6be
#: ../../../../1.8/docs/topics/auth/default.txt:999
msgid ""
"``template_name``: The full name of a template to use. Defaults to "
":file:`registration/password_change_done.html` if not supplied."
msgstr ""

# 6de6a6972c824f249ce9e8fb1efb3b20
#: ../../../../1.8/docs/topics/auth/default.txt:1012
msgid ""
"Allows a user to reset their password by generating a one-time use link that"
" can be used to reset the password, and sending that link to the user's "
"registered email address."
msgstr ""

# 3bf8da5905444c31aa4f0af7fb25850c
#: ../../../../1.8/docs/topics/auth/default.txt:1016
msgid ""
"If the email address provided does not exist in the system, this view won't "
"send an email, but the user won't receive any error message either. This "
"prevents information leaking to potential attackers. If you want to provide "
"an error message in this case, you can subclass "
":class:`~django.contrib.auth.forms.PasswordResetForm` and use the "
"``password_reset_form`` argument."
msgstr ""

# c75653eac54e4337a31f656e08a382f2
#: ../../../../1.8/docs/topics/auth/default.txt:1024
msgid ""
"Users flagged with an unusable password (see "
":meth:`~django.contrib.auth.models.User.set_unusable_password()` aren't "
"allowed to request a password reset to prevent misuse when using an external"
" authentication source like LDAP. Note that they won't receive any error "
"message since this would expose their account's existence but no mail will "
"be sent either."
msgstr ""

# 3ea93dd2022b4a8b84cb843083f0e9a5
#: ../../../../1.8/docs/topics/auth/default.txt:1031
msgid "**URL name:** ``password_reset``"
msgstr ""

# 7f84de9d453941fda8bb2a1072f5be54
#: ../../../../1.8/docs/topics/auth/default.txt:1035
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password reset form. Defaults to "
":file:`registration/password_reset_form.html` if not supplied."
msgstr ""

# 4eb8927efc974539b3ed913763ffdcc7
#: ../../../../1.8/docs/topics/auth/default.txt:1039
msgid ""
"``email_template_name``: The full name of a template to use for generating "
"the email with the reset password link. Defaults to "
":file:`registration/password_reset_email.html` if not supplied."
msgstr ""

# 1a481fd0babd4e0cbd01d0339e72dd33
#: ../../../../1.8/docs/topics/auth/default.txt:1043
msgid ""
"``subject_template_name``: The full name of a template to use for the "
"subject of the email with the reset password link. Defaults to "
":file:`registration/password_reset_subject.txt` if not supplied."
msgstr ""

# 8387003c06584b10b1426d23ab110744
#: ../../../../1.8/docs/topics/auth/default.txt:1047
msgid ""
"``password_reset_form``: Form that will be used to get the email of the user"
" to reset the password for. Defaults to "
":class:`~django.contrib.auth.forms.PasswordResetForm`."
msgstr ""

# fd4079546cfc4169882fdbc623e40375
#: ../../../../1.8/docs/topics/auth/default.txt:1051
msgid ""
"``token_generator``: Instance of the class to check the one time link. This "
"will default to ``default_token_generator``, it's an instance of "
"``django.contrib.auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

# a8ffc619b9e9474b85b52017cf0a6a61
#: ../../../../1.8/docs/topics/auth/default.txt:1055
msgid ""
"``post_reset_redirect``: The URL to redirect to after a successful password "
"reset request."
msgstr ""

# 0f1aabf97ec244ae965ad9cd034b1af4
#: ../../../../1.8/docs/topics/auth/default.txt:1058
msgid ""
"``from_email``: A valid email address. By default Django uses the "
":setting:`DEFAULT_FROM_EMAIL`."
msgstr ""

# 1735480d4f7543df97f3814384ee4142
#: ../../../../1.8/docs/topics/auth/default.txt:1068
msgid ""
"``html_email_template_name``: The full name of a template to use for "
"generating a ``text/html`` multipart email with the password reset link. By "
"default, HTML email is not sent."
msgstr ""

# 800d971c92964dd5b0c404d127fe5f9c
#: ../../../../1.8/docs/topics/auth/default.txt:1074
msgid "``html_email_template_name`` was added."
msgstr ""

# f730d67cbafe429686776b82a33161de
#: ../../../../1.8/docs/topics/auth/default.txt:1078
msgid ""
"The ``is_admin_site`` argument is deprecated and will be removed in Django "
"1.10."
msgstr ""

# f3feeeaa52884eeda6107420aca99b2b
#: ../../../../1.8/docs/topics/auth/default.txt:1083
msgid ""
"``form``: The form (see ``password_reset_form`` above) for resetting the "
"user's password."
msgstr ""

# 972be10cff6f494e8dbe5a54ac0a82d2
#: ../../../../1.8/docs/topics/auth/default.txt:1086
msgid "**Email template context:**"
msgstr ""

# 1216b8d0624c4e7c9898a0340d70fa53
#: ../../../../1.8/docs/topics/auth/default.txt:1088
msgid "``email``: An alias for ``user.email``"
msgstr ""

# b31e213530a44062bee6a0b780ad5d91
#: ../../../../1.8/docs/topics/auth/default.txt:1090
msgid ""
"``user``: The current :class:`~django.contrib.auth.models.User`, according "
"to the ``email`` form field. Only active users are able to reset their "
"passwords (``User.is_active is True``)."
msgstr ""

# 79c959e9ba9c40378bf6e7257455c814
#: ../../../../1.8/docs/topics/auth/default.txt:1099
msgid ""
"``domain``: An alias for ``site.domain``. If you don't have the site "
"framework installed, this will be set to the value of "
"``request.get_host()``."
msgstr ""

# b2eb85647e9743faaae15f3ccd4880bd
#: ../../../../1.8/docs/topics/auth/default.txt:1103
msgid "``protocol``: http or https"
msgstr ""

# fb44483d4cbe4c2c87c739518e1a6b5f
#: ../../../../1.8/docs/topics/auth/default.txt:1105
msgid "``uid``: The user's primary key encoded in base 64."
msgstr ""

# b7ab0ac87fde4c369d4bfcf14de5ff7c
#: ../../../../1.8/docs/topics/auth/default.txt:1107
msgid "``token``: Token to check that the reset link is valid."
msgstr ""

# 427d3eb65cc44254bf782b621b51eb3b
#: ../../../../1.8/docs/topics/auth/default.txt:1109
msgid ""
"Sample ``registration/password_reset_email.html`` (email body template):"
msgstr ""

# 649ae4320db84b9699e1ca148bc800c1
#: ../../../../1.8/docs/topics/auth/default.txt:1116
msgid ""
"The same template context is used for subject template. Subject must be "
"single line plain text string."
msgstr ""

# c01e6b549ffd4f6ca22400f46f08077e
#: ../../../../1.8/docs/topics/auth/default.txt:1121
msgid ""
"The page shown after a user has been emailed a link to reset their password."
" This view is called by default if the :func:`password_reset` view doesn't "
"have an explicit ``post_reset_redirect`` URL set."
msgstr ""

# b93c578c97cf4e4f85b4db74678d0df3
#: ../../../../1.8/docs/topics/auth/default.txt:1125
msgid "**URL name:** ``password_reset_done``"
msgstr ""

# 085b5afab8a94a24849fafcd665a8c66
#: ../../../../1.8/docs/topics/auth/default.txt:1129
msgid ""
"If the email address provided does not exist in the system, the user is "
"inactive, or has an unusable password, the user will still be redirected to "
"this view but no email will be sent."
msgstr ""

# d2c1116e3c8c41d3853d81d807248f49
#: ../../../../1.8/docs/topics/auth/default.txt:1134
msgid ""
"``template_name``: The full name of a template to use. Defaults to "
":file:`registration/password_reset_done.html` if not supplied."
msgstr ""

# ea06a2e2ba5b4d198847f520786b8fb0
#: ../../../../1.8/docs/topics/auth/default.txt:1147
msgid "Presents a form for entering a new password."
msgstr ""

# e96671107a0142b2aa48931961739d39
#: ../../../../1.8/docs/topics/auth/default.txt:1149
msgid "**URL name:** ``password_reset_confirm``"
msgstr ""

# 752c714e32994421920bca7c9ebdf5a4
#: ../../../../1.8/docs/topics/auth/default.txt:1153
msgid "``uidb64``: The user's id encoded in base 64. Defaults to ``None``."
msgstr ""

# 62020c7ad8b94346b07eec9895c554ac
#: ../../../../1.8/docs/topics/auth/default.txt:1155
msgid ""
"``token``: Token to check that the password is valid. Defaults to ``None``."
msgstr ""

# 48f1c251835c478eaf93cddd81578733
#: ../../../../1.8/docs/topics/auth/default.txt:1158
msgid ""
"``template_name``: The full name of a template to display the confirm "
"password view. Default value is "
":file:`registration/password_reset_confirm.html`."
msgstr ""

# 3ef95304b74844698cd92b389d83f9f8
#: ../../../../1.8/docs/topics/auth/default.txt:1161
msgid ""
"``token_generator``: Instance of the class to check the password. This will "
"default to ``default_token_generator``, it's an instance of "
"``django.contrib.auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

# e841a6340b5b449f89833ee75ee3dcab
#: ../../../../1.8/docs/topics/auth/default.txt:1165
msgid ""
"``set_password_form``: Form that will be used to set the password. Defaults "
"to :class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ""

# fb6bd01ced6c41058c8f1ba95f402a76
#: ../../../../1.8/docs/topics/auth/default.txt:1168
msgid ""
"``post_reset_redirect``: URL to redirect after the password reset done. "
"Defaults to ``None``."
msgstr ""

# d69df864173e4ad198c55c44e92db2ac
#: ../../../../1.8/docs/topics/auth/default.txt:1180
msgid ""
"``form``: The form (see ``set_password_form`` above) for setting the new "
"user's password."
msgstr ""

# 1740e757da284ff09c8739c5a378dd64
#: ../../../../1.8/docs/topics/auth/default.txt:1183
msgid ""
"``validlink``: Boolean, True if the link (combination of ``uidb64`` and "
"``token``) is valid or unused yet."
msgstr ""

# 9ee2db63df8d4101a2df3ff9a6d3d95f
#: ../../../../1.8/docs/topics/auth/default.txt:1188
msgid ""
"Presents a view which informs the user that the password has been "
"successfully changed."
msgstr ""

# 6890176434144c7cb7a7c3aa7081862c
#: ../../../../1.8/docs/topics/auth/default.txt:1191
msgid "**URL name:** ``password_reset_complete``"
msgstr ""

# 383d6b7ec472445985bac7af21918770
#: ../../../../1.8/docs/topics/auth/default.txt:1195
msgid ""
"``template_name``: The full name of a template to display the view. Defaults"
" to :file:`registration/password_reset_complete.html`."
msgstr ""

# b32f55242cfa41faac4c949010019dee
#: ../../../../1.8/docs/topics/auth/default.txt:1206
msgid "Helper functions"
msgstr ""

# 4c79841ea36146d3851795576f856408
#: ../../../../1.8/docs/topics/auth/default.txt:1212
msgid ""
"Redirects to the login page, and then back to another URL after a successful"
" login."
msgstr ""

# 9b7be0063cfb43c4ab232ac37620c942
#: ../../../../1.8/docs/topics/auth/default.txt:1215
msgid "**Required arguments:**"
msgstr ""

# 2ee6ee75b9774c359d80c77d69e83425
#: ../../../../1.8/docs/topics/auth/default.txt:1217
msgid "``next``: The URL to redirect to after a successful login."
msgstr ""

# c3b77fa43af146c583062d50288367b1
#: ../../../../1.8/docs/topics/auth/default.txt:1224
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next`` if the given ``GET`` parameter"
" is passed."
msgstr ""

# 145b614e754a47aa808ac2dc0567daca
#: ../../../../1.8/docs/topics/auth/default.txt:1232
msgid "Built-in forms"
msgstr ""

# b4d6f10b27df4d25ac692513054f1395
#: ../../../../1.8/docs/topics/auth/default.txt:1236
msgid ""
"If you don't want to use the built-in views, but want the convenience of not"
" having to write forms for this functionality, the authentication system "
"provides several built-in forms located in :mod:`django.contrib.auth.forms`:"
msgstr ""

# ca755852802e44ef848607b4fde2e40f
#: ../../../../1.8/docs/topics/auth/default.txt:1241
msgid ""
"The built-in authentication forms make certain assumptions about the user "
"model that they are working with. If you're using a :ref:`custom User model "
"<auth-custom-user>`, it may be necessary to define your own forms for the "
"authentication system. For more information, refer to the documentation "
"about :ref:`using the built-in authentication forms with custom user models "
"<custom-users-and-the-built-in-auth-forms>`."
msgstr ""

# b547cf7132524ae18deb58929ae0275d
#: ../../../../1.8/docs/topics/auth/default.txt:1250
msgid "A form used in the admin interface to change a user's password."
msgstr ""

# 66648dc1f1284ca5825db3c8b33e0bdc
#: ../../../../1.8/docs/topics/auth/default.txt:1252
msgid "Takes the ``user`` as the first positional argument."
msgstr ""

# b10938541b5b41fe9de1bdc048a181ab
#: ../../../../1.8/docs/topics/auth/default.txt:1256
msgid "A form for logging a user in."
msgstr ""

# f581c92d86194622b96ad7044eb0eb55
#: ../../../../1.8/docs/topics/auth/default.txt:1258
msgid ""
"Takes ``request`` as its first positional argument, which is stored on the "
"form instance for use by sub-classes."
msgstr ""

# 4fd722cb128e4cc3ac119db97bad7be2
#: ../../../../1.8/docs/topics/auth/default.txt:1265
msgid ""
"By default, ``AuthenticationForm`` rejects users whose ``is_active`` flag is"
" set to ``False``. You may override this behavior with a custom policy to "
"determine which users can log in. Do this with a custom form that subclasses"
" ``AuthenticationForm`` and overrides the ``confirm_login_allowed`` method. "
"This method should raise a :exc:`~django.core.exceptions.ValidationError` if"
" the given user may not log in."
msgstr ""

# b6a2b589dd1a4b61afa576b597d0a93d
#: ../../../../1.8/docs/topics/auth/default.txt:1272
msgid ""
"For example, to allow all users to log in, regardless of \"active\" status::"
msgstr ""

# 3afd7e110d834598be8dbcf2d47f2aab
#: ../../../../1.8/docs/topics/auth/default.txt:1280
msgid "Or to allow only some active users to log in::"
msgstr ""

# 13df20452a354f7b9ba008e543befa4d
#: ../../../../1.8/docs/topics/auth/default.txt:1297
msgid "A form for allowing a user to change their password."
msgstr ""

# 5d7cbdf46bc349a7986590fba610ac81
#: ../../../../1.8/docs/topics/auth/default.txt:1301
msgid ""
"A form for generating and emailing a one-time use link to reset a user's "
"password."
msgstr ""

# 25fb35412ba34a0382ef75e5ab9b4057
#: ../../../../1.8/docs/topics/auth/default.txt:1308
msgid ""
"Uses the arguments to send an ``EmailMultiAlternatives``. Can be overridden "
"to customize how the email is sent to the user."
msgstr ""

# 1018e13dbfb4445fa1b7130c827a22af
#: ../../../../1.8/docs/topics/auth/default.txt:1311
msgid "the template for the subject."
msgstr ""

# 39c6a57d54f942bf9a72fadd2b63bb21
#: ../../../../1.8/docs/topics/auth/default.txt:1312
msgid "the template for the email body."
msgstr ""

# cc8a3cf30b904180a6edd55d4eb682bb
#: ../../../../1.8/docs/topics/auth/default.txt:1313
msgid ""
"context passed to the ``subject_template``, ``email_template``, and "
"``html_email_template`` (if it is not ``None``)."
msgstr ""

# 636066c53855479c9c97016ce2de9f4f
#: ../../../../1.8/docs/topics/auth/default.txt:1315
msgid "the sender's email."
msgstr ""

# 957910e7557e4ff4825daea403ee3454
#: ../../../../1.8/docs/topics/auth/default.txt:1316
msgid "the email of the requester."
msgstr ""

# ac2cc9129bbe4e4e92e62de6c6e7b7a4
#: ../../../../1.8/docs/topics/auth/default.txt:1317
msgid ""
"the template for the HTML body; defaults to ``None``, in which case a plain "
"text email is sent."
msgstr ""

# dae99def4f524a90a883a3f0d562ef43
#: ../../../../1.8/docs/topics/auth/default.txt:1320
msgid ""
"By default, ``save()`` populates the ``context`` with the same variables "
"that :func:`~django.contrib.auth.views.password_reset` passes to its email "
"context."
msgstr ""

# f488f2908c794429835ff2742dd7dc86
#: ../../../../1.8/docs/topics/auth/default.txt:1326
msgid ""
"A form that lets a user change their password without entering the old "
"password."
msgstr ""

# 7b725f9210044ddab9604347c282ca3c
#: ../../../../1.8/docs/topics/auth/default.txt:1331
msgid ""
"A form used in the admin interface to change a user's information and "
"permissions."
msgstr ""

# 21daa61160b3456a9fbc694c7fa59725
#: ../../../../1.8/docs/topics/auth/default.txt:1336
msgid "A form for creating a new user."
msgstr ""

# 0b7a7e06c9f94c3ab101be917f91c093
#: ../../../../1.8/docs/topics/auth/default.txt:1342
msgid "Authentication data in templates"
msgstr ""

# 625818d6c7f8426aac048402e5003e62
#: ../../../../1.8/docs/topics/auth/default.txt:1344
msgid ""
"The currently logged-in user and their permissions are made available in the"
" :doc:`template context </ref/templates/api>` when you use "
":class:`~django.template.RequestContext`."
msgstr ""

# 98bb5cabe6284c0ba65e8d260febe6fd
#: ../../../../1.8/docs/topics/auth/default.txt:1348
msgid "Technicality"
msgstr ""

# 209b55b7f48345a1bbb32169672c4156
#: ../../../../1.8/docs/topics/auth/default.txt:1350
msgid ""
"Technically, these variables are only made available in the template context"
" if you use :class:`~django.template.RequestContext` and the "
"``'django.contrib.auth.context_processors.auth'`` context processor is "
"enabled. It is in the default generated settings file. For more, see the "
":ref:`RequestContext docs <subclassing-context-requestcontext>`."
msgstr ""

# e3d7f78feea447cabe7ae0bd5d9ea8a8
# 7dd1c2bc55d84640a106847b5722a0e7
#: ../../../../1.8/docs/topics/auth/default.txt:1357
#: ../../../../1.8/docs/topics/auth/index.txt:31
msgid "Users"
msgstr ""

# c818a18e1ff44d56afb2c87fdddfb47a
#: ../../../../1.8/docs/topics/auth/default.txt:1359
msgid ""
"When rendering a template :class:`~django.template.RequestContext`, the "
"currently logged-in user, either a  "
":class:`~django.contrib.auth.models.User` instance or an "
":class:`~django.contrib.auth.models.AnonymousUser` instance, is stored in "
"the template variable ``{{ user }}``:"
msgstr ""

# 441820ba75ba452fa8ba7e09fbeef682
#: ../../../../1.8/docs/topics/auth/default.txt:1372
msgid ""
"This template context variable is not available if a ``RequestContext`` is "
"not being used."
msgstr ""

# a890fed2693a417d95f8d90feb638845
#: ../../../../1.8/docs/topics/auth/default.txt:1376
msgid "Permissions"
msgstr "Permisos"

# 29e11825727a4593bfa4941ed8c9718c
#: ../../../../1.8/docs/topics/auth/default.txt:1378
msgid ""
"The currently logged-in user's permissions are stored in the template "
"variable ``{{ perms }}``. This is an instance of "
"``django.contrib.auth.context_processors.PermWrapper``, which is a template-"
"friendly proxy of permissions."
msgstr ""

# c59e90f9d46740cab1e505a3f5e1c550
#: ../../../../1.8/docs/topics/auth/default.txt:1383
msgid ""
"In the ``{{ perms }}`` object, single-attribute lookup is a proxy to "
":meth:`User.has_module_perms "
"<django.contrib.auth.models.User.has_module_perms>`. This example would "
"display ``True`` if the logged-in user had any permissions in the ``foo`` "
"app::"
msgstr ""

# be1c024e47fa48068085de20e2dcce4a
#: ../../../../1.8/docs/topics/auth/default.txt:1390
msgid ""
"Two-level-attribute lookup is a proxy to :meth:`User.has_perm "
"<django.contrib.auth.models.User.has_perm>`. This example would display "
"``True`` if the logged-in user had the permission ``foo.can_vote``::"
msgstr ""

# ab77c420c6be45b58012dcf13705d758
#: ../../../../1.8/docs/topics/auth/default.txt:1397
msgid "Thus, you can check permissions in template ``{% if %}`` statements:"
msgstr ""

# 320e1fb4b41a4d85b2edd1230583eacb
#: ../../../../1.8/docs/topics/auth/default.txt:1413
msgid ""
"It is possible to also look permissions up by ``{% if in %}`` statements. "
"For example:"
msgstr ""

# bfb733b25ed744eea33ee0dbe9380984
#: ../../../../1.8/docs/topics/auth/default.txt:1427
msgid "Managing users in the admin"
msgstr ""

# 08d8bd73210c411fa5744e8625851da3
#: ../../../../1.8/docs/topics/auth/default.txt:1429
msgid ""
"When you have both ``django.contrib.admin`` and ``django.contrib.auth`` "
"installed, the admin provides a convenient way to view and manage users, "
"groups, and permissions. Users can be created and deleted like any Django "
"model. Groups can be created, and permissions can be assigned to users or "
"groups. A log of user edits to models made within the admin is also stored "
"and displayed."
msgstr ""

# 9ae1977c260d4d8cb2df7125aa4f6235
#: ../../../../1.8/docs/topics/auth/default.txt:1437
msgid "Creating Users"
msgstr ""

# 9c1cad607e07441e99f2ced54e38d616
#: ../../../../1.8/docs/topics/auth/default.txt:1439
msgid ""
"You should see a link to \"Users\" in the \"Auth\" section of the main admin"
" index page. The \"Add user\" admin page is different than standard admin "
"pages in that it requires you to choose a username and password before "
"allowing you to edit the rest of the user's fields."
msgstr ""

# 6fa4d8387650477e84d8580bf7ad18f1
#: ../../../../1.8/docs/topics/auth/default.txt:1444
msgid ""
"Also note: if you want a user account to be able to create users using the "
"Django admin site, you'll need to give them permission to add users *and* "
"change users (i.e., the \"Add user\" and \"Change user\" permissions). If an"
" account has permission to add users but not to change them, that account "
"won't be able to add users. Why? Because if you have permission to add "
"users, you have the power to create superusers, which can then, in turn, "
"change other users. So Django requires add *and* change permissions as a "
"slight security measure."
msgstr ""

# 570d13ebb73b474cafd8ee324703fee3
#: ../../../../1.8/docs/topics/auth/default.txt:1453
msgid ""
"Be thoughtful about how you allow users to manage permissions. If you give a"
" non-superuser the ability to edit users, this is ultimately the same as "
"giving them superuser status because they will be able to elevate "
"permissions of users including themselves!"
msgstr ""

# 222f48e142674483bd8aee264e2fa424
#: ../../../../1.8/docs/topics/auth/default.txt:1459
msgid "Changing Passwords"
msgstr ""

# f34c03a6b9a442ccafa5b5775da3ebdd
#: ../../../../1.8/docs/topics/auth/default.txt:1461
msgid ""
"User passwords are not displayed in the admin (nor stored in the database), "
"but the :doc:`password storage details </topics/auth/passwords>` are "
"displayed. Included in the display of this information is a link to a "
"password change form that allows admins to change user passwords."
msgstr ""

# 3897accf6fc34dffb22b28593b719d7e
#: ../../../../1.8/docs/topics/auth/index.txt:3
msgid "User authentication in Django"
msgstr ""

# ce825f2ac0b24832a4f98c63595dc7ab
#: ../../../../1.8/docs/topics/auth/index.txt:15
msgid ""
"Django comes with a user authentication system. It handles user accounts, "
"groups, permissions and cookie-based user sessions. This section of the "
"documentation explains how the default implementation works out of the box, "
"as well as how to :doc:`extend and customize </topics/auth/customizing>` it "
"to suit your project's needs."
msgstr ""

# 782e9661d4ac4e3ebafd168d60243a5f
# 7fb3c53d016f439d82f37bc5f9fe82f2
# bd342d6c09314ca7b2a85a55f3e34609
# 3790f1534a5a4d2bb4c27ff7f6e52b4f
# 444d835c53d94e4d9515ca27adf843d6
# d11dd0968a454dd6b5738f09e742d981
#: ../../../../1.8/docs/topics/auth/index.txt:22
#: ../../../../1.8/docs/topics/http/urls.txt:18
#: ../../../../1.8/docs/topics/i18n/formatting.txt:8
#: ../../../../1.8/docs/topics/i18n/index.txt:14
#: ../../../../1.8/docs/topics/i18n/timezones.txt:10
#: ../../../../1.8/docs/topics/i18n/translation.txt:8
msgid "Overview"
msgstr ""

# de4fdca7d34148188ca2647c7fa0fb5d
#: ../../../../1.8/docs/topics/auth/index.txt:24
msgid ""
"The Django authentication system handles both authentication and "
"authorization. Briefly, authentication verifies a user is who they claim to "
"be, and authorization determines what an authenticated user is allowed to "
"do. Here the term authentication is used to refer to both tasks."
msgstr ""

# ae94a6e7ba12499c8b9edcf98b8292a0
#: ../../../../1.8/docs/topics/auth/index.txt:29
msgid "The auth system consists of:"
msgstr ""

# 7bc8e269922d43d88af749b379df650e
#: ../../../../1.8/docs/topics/auth/index.txt:32
msgid ""
"Permissions: Binary (yes/no) flags designating whether a user may perform a "
"certain task."
msgstr ""

# 355341cac9e14e49ae79bda0588e5bbc
#: ../../../../1.8/docs/topics/auth/index.txt:34
msgid ""
"Groups: A generic way of applying labels and permissions to more than one "
"user."
msgstr ""

# c7bdfb236a9b46b5abe2d786e4c85676
#: ../../../../1.8/docs/topics/auth/index.txt:36
msgid "A configurable password hashing system"
msgstr ""

# 366c416451af4db4ab986404bedcc04f
#: ../../../../1.8/docs/topics/auth/index.txt:37
msgid "Forms and view tools for logging in users, or restricting content"
msgstr ""

# 89125b09156c4f57bf94628d44e0a7f2
#: ../../../../1.8/docs/topics/auth/index.txt:38
msgid "A pluggable backend system"
msgstr ""

# 8de50e8c505b4373ae9fb22a9533372b
#: ../../../../1.8/docs/topics/auth/index.txt:40
msgid ""
"The authentication system in Django aims to be very generic and doesn't "
"provide some features commonly found in web authentication systems. "
"Solutions for some of these common problems have been implemented in third-"
"party packages:"
msgstr ""

# 4ba6fd4697a9439fbc62b7714ffba6f2
#: ../../../../1.8/docs/topics/auth/index.txt:44
msgid "Password strength checking"
msgstr ""

# 0b0b2d8e3b404bddb52b2f2e1bd28547
#: ../../../../1.8/docs/topics/auth/index.txt:45
msgid "Throttling of login attempts"
msgstr ""

# 438f1de5456a48399264a86c463199a0
#: ../../../../1.8/docs/topics/auth/index.txt:46
msgid "Authentication against third-parties (OAuth, for example)"
msgstr ""

# 5c027b53e100401f87966382bce3e86f
#: ../../../../1.8/docs/topics/auth/index.txt:49
msgid "Installation"
msgstr ""

# 166ee4249bbd484ca34ef278c5c49596
#: ../../../../1.8/docs/topics/auth/index.txt:51
msgid ""
"Authentication support is bundled as a Django contrib module in "
"``django.contrib.auth``. By default, the required configuration is already "
"included in the :file:`settings.py` generated by :djadmin:`django-admin "
"startproject <startproject>`, these consist of two items listed in your "
":setting:`INSTALLED_APPS` setting:"
msgstr ""

# 9d584d35d20c4e74b59d5e4fa2203fc3
#: ../../../../1.8/docs/topics/auth/index.txt:57
msgid ""
"``'django.contrib.auth'`` contains the core of the authentication framework,"
" and its default models."
msgstr ""

# ac73a693c5034d62900f306ea4397e3d
#: ../../../../1.8/docs/topics/auth/index.txt:59
msgid ""
"``'django.contrib.contenttypes'`` is the Django :doc:`content type system "
"</ref/contrib/contenttypes>`, which allows permissions to be associated with"
" models you create."
msgstr ""

# e03f3483534642dbb4f7e5b3ff225505
#: ../../../../1.8/docs/topics/auth/index.txt:63
msgid "and two items in your :setting:`MIDDLEWARE_CLASSES` setting:"
msgstr ""

# 17b37bd31eac47d0b0ce4898b06b9f48
#: ../../../../1.8/docs/topics/auth/index.txt:65
msgid ""
":class:`~django.contrib.sessions.middleware.SessionMiddleware` manages "
":doc:`sessions </topics/http/sessions>` across requests."
msgstr ""

# 77f2439372c44a60a1a5be4c5b141ff5
#: ../../../../1.8/docs/topics/auth/index.txt:67
msgid ""
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` associates"
" users with requests using sessions."
msgstr ""

# 43b1d0ff47dc48b6b54d21087520753d
#: ../../../../1.8/docs/topics/auth/index.txt:70
msgid ""
"With these settings in place, running the command ``manage.py migrate`` "
"creates the necessary database tables for auth related models and "
"permissions for any models defined in your installed apps."
msgstr ""

# 7eaef86303164a4181b8ee1dc25fafa4
# d18edbc4dc4140819e77586036c5f3ca
# 090ecd9b02c244aa9c8b018b478fd55e
#: ../../../../1.8/docs/topics/auth/index.txt:75
#: ../../../../1.8/docs/topics/i18n/timezones.txt:654
#: ../../../../1.8/docs/topics/templates.txt:90
msgid "Usage"
msgstr ""

# af863b34b3664089a571be49bc33a0b5
#: ../../../../1.8/docs/topics/auth/index.txt:77
msgid ":doc:`Using Django's default implementation <default>`"
msgstr ""

# 1bc2f3893cea4b7ebf82aaeb7ab088c5
#: ../../../../1.8/docs/topics/auth/index.txt:79
msgid ":ref:`Working with User objects <user-objects>`"
msgstr ""

# ddd8d32a20c848ce87b058441c94cbad
#: ../../../../1.8/docs/topics/auth/index.txt:80
msgid ":ref:`Permissions and authorization <topic-authorization>`"
msgstr ""

# d18c0f2b65c544b2ab5dd1e935ca6546
#: ../../../../1.8/docs/topics/auth/index.txt:81
msgid ":ref:`Authentication in web requests <auth-web-requests>`"
msgstr ""

# 75eca2cac5ee49a59a7354d58b2a21ee
#: ../../../../1.8/docs/topics/auth/index.txt:82
msgid ":ref:`Managing users in the admin <auth-admin>`"
msgstr ""

# 1a8a0032b8d44e04a63b01f910bf5640
#: ../../../../1.8/docs/topics/auth/index.txt:84
msgid ""
":doc:`API reference for the default implementation </ref/contrib/auth>`"
msgstr ""

# 6f6c33d64c2a4989bd5e570109ce97f4
#: ../../../../1.8/docs/topics/auth/index.txt:86
msgid ":doc:`Customizing Users and authentication <customizing>`"
msgstr ""

# 2942831dec294656bf196a2436816463
#: ../../../../1.8/docs/topics/auth/index.txt:88
msgid ":doc:`Password management in Django <passwords>`"
msgstr ""

# d77507be32c14e00b14c01952a5f8034
#: ../../../../1.8/docs/topics/auth/passwords.txt:3
msgid "Password management in Django"
msgstr ""

# db558fe0a0d243189c50edeadccee32b
#: ../../../../1.8/docs/topics/auth/passwords.txt:5
msgid ""
"Password management is something that should generally not be reinvented "
"unnecessarily, and Django endeavors to provide a secure and flexible set of "
"tools for managing user passwords. This document describes how Django stores"
" passwords, how the storage hashing can be configured, and some utilities to"
" work with hashed passwords."
msgstr ""

# f265c2b57c3140af8e9c036016082cb6
#: ../../../../1.8/docs/topics/auth/passwords.txt:13
msgid ""
"Even though users may use strong passwords, attackers might be able to "
"eavesdrop on their connections. Use :ref:`HTTPS <security-recommendation-"
"ssl>` to avoid sending passwords (or any other sensitive data) over plain "
"HTTP connections because they will be vulnerable to password sniffing."
msgstr ""

# f23aed85b8734dcd90a01920ca49d9a5
#: ../../../../1.8/docs/topics/auth/passwords.txt:22
msgid "How Django stores passwords"
msgstr ""

# 9743fc59009b4aaab3f9152fb66169f7
#: ../../../../1.8/docs/topics/auth/passwords.txt:24
msgid ""
"Django provides a flexible password storage system and uses PBKDF2 by "
"default."
msgstr ""

# 3ad179ff05fb495ba64f7df9eab4dd7d
#: ../../../../1.8/docs/topics/auth/passwords.txt:26
msgid ""
"The :attr:`~django.contrib.auth.models.User.password` attribute of a "
":class:`~django.contrib.auth.models.User` object is a string in this "
"format::"
msgstr ""

# 8c26ca249afd4042a71a84059d1833d8
#: ../../../../1.8/docs/topics/auth/passwords.txt:31
msgid ""
"Those are the components used for storing a User's password, separated by "
"the dollar-sign character and consist of: the hashing algorithm, the number "
"of algorithm iterations (work factor), the random salt, and the resulting "
"password hash.  The algorithm is one of a number of one-way hashing or "
"password storage algorithms Django can use; see below. Iterations describe "
"the number of times the algorithm is run over the hash. Salt is the random "
"seed used and the hash is the result of the one-way function."
msgstr ""

# e96cab13db0a44208b190486e649e1cf
#: ../../../../1.8/docs/topics/auth/passwords.txt:39
msgid ""
"By default, Django uses the PBKDF2_ algorithm with a SHA256 hash, a password"
" stretching mechanism recommended by NIST_. This should be sufficient for "
"most users: it's quite secure, requiring massive amounts of computing time "
"to break."
msgstr ""

# ad91345b7b7e4bcf84b0c94086741d3f
#: ../../../../1.8/docs/topics/auth/passwords.txt:44
msgid ""
"However, depending on your requirements, you may choose a different "
"algorithm, or even use a custom algorithm to match your specific security "
"situation. Again, most users shouldn't need to do this -- if you're not "
"sure, you probably don't.  If you do, please read on:"
msgstr ""

# f3808dd378814a1e9688e67e3764d409
#: ../../../../1.8/docs/topics/auth/passwords.txt:49
msgid ""
"Django chooses the algorithm to use by consulting the "
":setting:`PASSWORD_HASHERS` setting. This is a list of hashing algorithm "
"classes that this Django installation supports. The first entry in this list"
" (that is, ``settings.PASSWORD_HASHERS[0]``) will be used to store "
"passwords, and all the other entries are valid hashers that can be used to "
"check existing passwords.  This means that if you want to use a different "
"algorithm, you'll need to modify :setting:`PASSWORD_HASHERS` to list your "
"preferred algorithm first in the list."
msgstr ""

# 44f604daf0ff4d029b88059ccb9e08f9
#: ../../../../1.8/docs/topics/auth/passwords.txt:58
msgid "The default for :setting:`PASSWORD_HASHERS` is::"
msgstr ""

# 86a35f452d8d4fa491a8760517550674
#: ../../../../1.8/docs/topics/auth/passwords.txt:70
msgid ""
"This means that Django will use PBKDF2_ to store all passwords, but will "
"support checking passwords stored with PBKDF2SHA1, bcrypt_, SHA1_, etc. The "
"next few sections describe a couple of common ways advanced users may want "
"to modify this setting."
msgstr ""

# f8ff7a174c154ed4928e4c55684b9a76
#: ../../../../1.8/docs/topics/auth/passwords.txt:78
msgid "Using bcrypt with Django"
msgstr ""

# b8764012a9944a53bab1ce05cd78685c
#: ../../../../1.8/docs/topics/auth/passwords.txt:80
msgid ""
"Bcrypt_ is a popular password storage algorithm that's specifically designed"
" for long-term password storage. It's not the default used by Django since "
"it requires the use of third-party libraries, but since many people may want"
" to use it Django supports bcrypt with minimal effort."
msgstr ""

# d34b993093634507b5fc7cd8877c2d02
#: ../../../../1.8/docs/topics/auth/passwords.txt:85
msgid "To use Bcrypt as your default storage algorithm, do the following:"
msgstr ""

# 6dcc29ec042b40bf98ce2f252daf7c23
#: ../../../../1.8/docs/topics/auth/passwords.txt:87
msgid ""
"Install the `bcrypt library`_. This can be done by running ``pip install "
"django[bcrypt]``, or by downloading the library and installing it with "
"``python setup.py install``."
msgstr ""

# 96fac222370b4024934447595497f367
#: ../../../../1.8/docs/topics/auth/passwords.txt:91
msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``BCryptSHA256PasswordHasher`` "
"first. That is, in your settings file, you'd put::"
msgstr ""

# 33bf6c65dae446cdabe16932f5d433d3
#: ../../../../1.8/docs/topics/auth/passwords.txt:104
msgid ""
"(You need to keep the other entries in this list, or else Django won't be "
"able to upgrade passwords; see below)."
msgstr ""

# 1ca1fb375f664e07830666d160d6680f
#: ../../../../1.8/docs/topics/auth/passwords.txt:107
msgid ""
"That's it -- now your Django install will use Bcrypt as the default storage "
"algorithm."
msgstr ""

# 4b4ea4e0f3404f7899251860531c2bdc
#: ../../../../1.8/docs/topics/auth/passwords.txt:110
msgid "Password truncation with BCryptPasswordHasher"
msgstr ""

# 2c1ae8fc725944d5a497ba9f898a90f9
#: ../../../../1.8/docs/topics/auth/passwords.txt:112
msgid ""
"The designers of bcrypt truncate all passwords at 72 characters which means "
"that ``bcrypt(password_with_100_chars) == "
"bcrypt(password_with_100_chars[:72])``. The original "
"``BCryptPasswordHasher`` does not have any special handling and thus is also"
" subject to this hidden password length limit. "
"``BCryptSHA256PasswordHasher`` fixes this by first first hashing the "
"password using sha256. This prevents the password truncation and so should "
"be preferred over the ``BCryptPasswordHasher``. The practical ramification "
"of this truncation is pretty marginal as the average user does not have a "
"password greater than 72 characters in length and even being truncated at 72"
" the compute powered required to brute force bcrypt in any useful amount of "
"time is still astronomical. Nonetheless, we recommend you use "
"``BCryptSHA256PasswordHasher`` anyway on the principle of \"better safe than"
" sorry\"."
msgstr ""

# aeb648353bea40b58d3e95c98beeadf0
#: ../../../../1.8/docs/topics/auth/passwords.txt:126
msgid "Other bcrypt implementations"
msgstr ""

# 98109e87f1d644dabef6c12bf17d4e92
#: ../../../../1.8/docs/topics/auth/passwords.txt:128
msgid ""
"There are several other implementations that allow bcrypt to be used with "
"Django. Django's bcrypt support is NOT directly compatible with these. To "
"upgrade, you will need to modify the hashes in your database to be in the "
"form ``bcrypt$(raw bcrypt output)``. For example: "
"``bcrypt$$2a$12$NT0I31Sa7ihGEWpka9ASYrEFkhuTNeBQ2xfZskIiiJeyFXhRgS.Sy``."
msgstr ""

# a5c9f0eeed9d4eecb6058239de8c8ad2
#: ../../../../1.8/docs/topics/auth/passwords.txt:138
msgid "Increasing the work factor"
msgstr ""

# aa75c2b0870444c4899594ce9b8adbb3
#: ../../../../1.8/docs/topics/auth/passwords.txt:140
msgid ""
"The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of "
"hashing. This deliberately slows down attackers, making attacks against "
"hashed passwords harder. However, as computing power increases, the number "
"of iterations needs to be increased. We've chosen a reasonable default (and "
"will increase it with each release of Django), but you may wish to tune it "
"up or down, depending on your security needs and available processing power."
" To do so, you'll subclass the appropriate algorithm and override the "
"``iterations`` parameters. For example, to increase the number of iterations"
" used by the default PBKDF2 algorithm:"
msgstr ""

# cfa7e0352af340a090a0d607d701aca1
#: ../../../../1.8/docs/topics/auth/passwords.txt:150
msgid ""
"Create a subclass of ``django.contrib.auth.hashers.PBKDF2PasswordHasher``::"
msgstr ""

# df8032847b0543909e85b53a05df4b84
#: ../../../../1.8/docs/topics/auth/passwords.txt:160
msgid ""
"Save this somewhere in your project. For example, you might put this in a "
"file like ``myproject/hashers.py``."
msgstr ""

# 7942b012a1554b2e9b89ef1f13d90a9e
#: ../../../../1.8/docs/topics/auth/passwords.txt:163
msgid ""
"Add your new hasher as the first entry in :setting:`PASSWORD_HASHERS`::"
msgstr ""

# c37e400f74a54a9cbd5aede53d492c25
#: ../../../../1.8/docs/topics/auth/passwords.txt:177
msgid ""
"That's it -- now your Django install will use more iterations when it stores"
" passwords using PBKDF2."
msgstr ""

# 47072242efb04da7b67d0626a7034b74
#: ../../../../1.8/docs/topics/auth/passwords.txt:183
msgid "Password upgrading"
msgstr ""

# 8865d5e857c149dd8887e4ec3028a93e
#: ../../../../1.8/docs/topics/auth/passwords.txt:185
msgid ""
"When users log in, if their passwords are stored with anything other than "
"the preferred algorithm, Django will automatically upgrade the algorithm to "
"the preferred one. This means that old installs of Django will get "
"automatically more secure as users log in, and it also means that you can "
"switch to new (and better) storage algorithms as they get invented."
msgstr ""

# 0751698173de423db2e0be95eeda2c7f
#: ../../../../1.8/docs/topics/auth/passwords.txt:191
msgid ""
"However, Django can only upgrade passwords that use algorithms mentioned in "
":setting:`PASSWORD_HASHERS`, so as you upgrade to new systems you should "
"make sure never to *remove* entries from this list. If you do, users using "
"unmentioned algorithms won't be able to upgrade. Passwords will be upgraded "
"when changing the PBKDF2 iteration count."
msgstr ""

# abca261bfcd44c24ad11872f333a3b15
#: ../../../../1.8/docs/topics/auth/passwords.txt:205
msgid "Manually managing a user's password"
msgstr ""

# 76d058c6e9894d09a9f247742147a2ac
#: ../../../../1.8/docs/topics/auth/passwords.txt:209
msgid ""
"The :mod:`django.contrib.auth.hashers` module provides a set of functions to"
" create and validate hashed password. You can use them independently from "
"the ``User`` model."
msgstr ""

# d88889fa5c1c4b30915291df0398ff24
#: ../../../../1.8/docs/topics/auth/passwords.txt:215
msgid ""
"If you'd like to manually authenticate a user by comparing a plain-text "
"password to the hashed password in the database, use the convenience "
"function :func:`check_password`. It takes two arguments: the plain-text "
"password to check, and the full value of a user's ``password`` field in the "
"database to check against, and returns ``True`` if they match, ``False`` "
"otherwise."
msgstr ""

# 943ef308233a4eba85d1be3ecfcf55dc
#: ../../../../1.8/docs/topics/auth/passwords.txt:224
msgid ""
"Creates a hashed password in the format used by this application. It takes "
"one mandatory argument: the password in plain-text. Optionally, you can "
"provide a salt and a hashing algorithm to use, if you don't want to use the "
"defaults (first entry of ``PASSWORD_HASHERS`` setting). Currently supported "
"algorithms are: ``'pbkdf2_sha256'``, ``'pbkdf2_sha1'``, ``'bcrypt_sha256'`` "
"(see :ref:`bcrypt_usage`), ``'bcrypt'``, ``'sha1'``, ``'md5'``, "
"``'unsalted_md5'`` (only for backward compatibility) and ``'crypt'`` if you "
"have the ``crypt`` library installed. If the password argument is ``None``, "
"an unusable password is returned (a one that will be never accepted by "
":func:`check_password`)."
msgstr ""

# edc92db474bc49518b21f728ef1f4d72
#: ../../../../1.8/docs/topics/auth/passwords.txt:237
msgid ""
"Checks if the given string is a hashed password that has a chance of being "
"verified against :func:`check_password`."
msgstr ""

# d542765e3d4546b79a79851fec3439c4
#: ../../../../1.8/docs/topics/cache.txt:3
msgid "Django's cache framework"
msgstr ""

# 742f58c426e4414eb156d9b614781d77
#: ../../../../1.8/docs/topics/cache.txt:5
msgid ""
"A fundamental trade-off in dynamic Web sites is, well, they're dynamic. Each"
" time a user requests a page, the Web server makes all sorts of calculations"
" -- from database queries to template rendering to business logic -- to "
"create the page that your site's visitor sees. This is a lot more expensive,"
" from a processing-overhead perspective, than your standard read-a-file-off-"
"the-filesystem server arrangement."
msgstr ""

# 7d4c38612dcf4ed08e1a1e4869bf557e
#: ../../../../1.8/docs/topics/cache.txt:12
msgid ""
"For most Web applications, this overhead isn't a big deal. Most Web "
"applications aren't ``washingtonpost.com`` or ``slashdot.org``; they're "
"simply small- to medium-sized sites with so-so traffic. But for medium- to "
"high-traffic sites, it's essential to cut as much overhead as possible."
msgstr ""

# 19dccb5e5a0a4bbbbf9b6a3b354ff589
#: ../../../../1.8/docs/topics/cache.txt:17
msgid "That's where caching comes in."
msgstr ""

# 0aa4f8bb64604524b85a8397336f447d
#: ../../../../1.8/docs/topics/cache.txt:19
msgid ""
"To cache something is to save the result of an expensive calculation so that"
" you don't have to perform the calculation next time. Here's some pseudocode"
" explaining how this would work for a dynamically generated Web page::"
msgstr ""

# 9a759266036148f4a992bec827c06bce
#: ../../../../1.8/docs/topics/cache.txt:31
msgid ""
"Django comes with a robust cache system that lets you save dynamic pages so "
"they don't have to be calculated for each request. For convenience, Django "
"offers different levels of cache granularity: You can cache the output of "
"specific views, you can cache only the pieces that are difficult to produce,"
" or you can cache your entire site."
msgstr ""

# 179142574728491da04fff1a48bd7180
#: ../../../../1.8/docs/topics/cache.txt:37
msgid ""
"Django also works well with \"downstream\" caches, such as `Squid "
"<http://www.squid-cache.org>`_ and browser-based caches. These are the types"
" of caches that you don't directly control but to which you can provide "
"hints (via HTTP headers) about which parts of your site should be cached, "
"and how."
msgstr ""

# 07e2941a21cb4106a0da1de1daa7c242
#: ../../../../1.8/docs/topics/cache.txt:43
msgid ""
"The :ref:`Cache Framework design philosophy <cache-design-philosophy>` "
"explains a few of the design decisions of the framework."
msgstr ""

# dd595366865c49a6b01a34794f38da0c
#: ../../../../1.8/docs/topics/cache.txt:49
msgid "Setting up the cache"
msgstr ""

# 56168ea3ae2d427c90f8be77d02c9ac3
#: ../../../../1.8/docs/topics/cache.txt:51
msgid ""
"The cache system requires a small amount of setup. Namely, you have to tell "
"it where your cached data should live -- whether in a database, on the "
"filesystem or directly in memory. This is an important decision that affects"
" your cache's performance; yes, some cache types are faster than others."
msgstr ""

# a70e6a5ec8394d2b95efc5f7e323084e
#: ../../../../1.8/docs/topics/cache.txt:56
msgid ""
"Your cache preference goes in the :setting:`CACHES` setting in your settings"
" file. Here's an explanation of all available values for :setting:`CACHES`."
msgstr ""

# e1a8442cd74542e2b9d4eeb45b91074d
#: ../../../../1.8/docs/topics/cache.txt:63
msgid "Memcached"
msgstr ""

# 70f94f37f8904baaa18234e03a5bd194
#: ../../../../1.8/docs/topics/cache.txt:65
msgid ""
"The fastest, most efficient type of cache supported natively by Django, "
"Memcached__ is an entirely memory-based cache server, originally developed "
"to handle high loads at LiveJournal.com and subsequently open-sourced by "
"Danga Interactive. It is used by sites such as Facebook and Wikipedia to "
"reduce database access and dramatically increase site performance."
msgstr ""

# 91c212c3268242089bfdaa2f7f2c0df4
#: ../../../../1.8/docs/topics/cache.txt:73
msgid ""
"Memcached runs as a daemon and is allotted a specified amount of RAM. All it"
" does is provide a fast interface for adding, retrieving and deleting data "
"in the cache. All data is stored directly in memory, so there's no overhead "
"of database or filesystem usage."
msgstr ""

# 73ded14582d7438fa7289e1d68e9e33b
#: ../../../../1.8/docs/topics/cache.txt:78
msgid ""
"After installing Memcached itself, you'll need to install a Memcached "
"binding. There are several Python Memcached bindings available; the two most"
" common are `python-memcached`_ and `pylibmc`_."
msgstr ""

# b54545dca92e412c8d2ea6411fe1427d
#: ../../../../1.8/docs/topics/cache.txt:85
msgid "To use Memcached with Django:"
msgstr ""

# 67427643fbd944749b6a74d621b03bba
#: ../../../../1.8/docs/topics/cache.txt:87
msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to "
"``django.core.cache.backends.memcached.MemcachedCache`` or "
"``django.core.cache.backends.memcached.PyLibMCCache`` (depending on your "
"chosen memcached binding)"
msgstr ""

# d4b7ff1c8f9a41f8a962cd5120667bb7
#: ../../../../1.8/docs/topics/cache.txt:92
msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``ip:port`` values, where "
"``ip`` is the IP address of the Memcached daemon and ``port`` is the port on"
" which Memcached is running, or to a ``unix:path`` value, where ``path`` is "
"the path to a Memcached Unix socket file."
msgstr ""

# f9a1b28404da4f3db0e0acbdcce4b976
#: ../../../../1.8/docs/topics/cache.txt:97
msgid ""
"In this example, Memcached is running on localhost (127.0.0.1) port 11211, "
"using the ``python-memcached`` binding::"
msgstr ""

# b1f6143d0e0e4027abb4c125a35045c6
#: ../../../../1.8/docs/topics/cache.txt:107
msgid ""
"In this example, Memcached is available through a local Unix socket file "
":file:`/tmp/memcached.sock` using the ``python-memcached`` binding::"
msgstr ""

# 20cd28a0e7e748be9e95bb3b6328b3d4
#: ../../../../1.8/docs/topics/cache.txt:117
msgid ""
"One excellent feature of Memcached is its ability to share a cache over "
"multiple servers. This means you can run Memcached daemons on multiple "
"machines, and the program will treat the group of machines as a *single* "
"cache, without the need to duplicate cache values on each machine. To take "
"advantage of this feature, include all server addresses in "
":setting:`LOCATION <CACHES-LOCATION>`, either separated by semicolons or as "
"a list."
msgstr ""

# 32c3ab13c59d4c79a3d789e04954101d
#: ../../../../1.8/docs/topics/cache.txt:125
msgid ""
"In this example, the cache is shared over Memcached instances running on IP "
"address 172.19.26.240 and 172.19.26.242, both on port 11211::"
msgstr ""

# d117aea130604722a17820387e3b996c
#: ../../../../1.8/docs/topics/cache.txt:138
msgid ""
"In the following example, the cache is shared over Memcached instances "
"running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port "
"11212), and 172.19.26.244 (port 11213)::"
msgstr ""

# b8be3cfbaa474399b749ea68640598a3
#: ../../../../1.8/docs/topics/cache.txt:153
msgid ""
"A final point about Memcached is that memory-based caching has a "
"disadvantage: because the cached data is stored in memory, the data will be "
"lost if your server crashes. Clearly, memory isn't intended for permanent "
"data storage, so don't rely on memory-based caching as your only data "
"storage. Without a doubt, *none* of the Django caching backends should be "
"used for permanent storage -- they're all intended to be solutions for "
"caching, not storage -- but we point this out here because memory-based "
"caching is particularly temporary."
msgstr ""

# 80e74940fa0743c38d6d64d38da24aae
#: ../../../../1.8/docs/topics/cache.txt:165
msgid "Database caching"
msgstr ""

# ed40f27386334958ad1ac8299e370bbb
#: ../../../../1.8/docs/topics/cache.txt:167
msgid ""
"Django can store its cached data in your database. This works best if you've"
" got a fast, well-indexed database server."
msgstr ""

# d883e0673fd049fd98d14e922b5b7043
#: ../../../../1.8/docs/topics/cache.txt:170
msgid "To use a database table as your cache backend:"
msgstr ""

# 3f8df1e187764060b1b92e1a036e500b
#: ../../../../1.8/docs/topics/cache.txt:172
msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to "
"``django.core.cache.backends.db.DatabaseCache``"
msgstr ""

# ffc2e22e57634fc9849ec6eb3b0cce6c
#: ../../../../1.8/docs/topics/cache.txt:175
msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``tablename``, the name of the "
"database table. This name can be whatever you want, as long as it's a valid "
"table name that's not already being used in your database."
msgstr ""

# 719574a6b87e4d4ebc376c519f5472cb
#: ../../../../1.8/docs/topics/cache.txt:179
msgid "In this example, the cache table's name is ``my_cache_table``::"
msgstr ""

# a3be8d23149140e9b47c1dc18ad9bdec
#: ../../../../1.8/docs/topics/cache.txt:189
msgid "Creating the cache table"
msgstr ""

# df359e15bd1a42459886f73d7074de0e
#: ../../../../1.8/docs/topics/cache.txt:191
msgid ""
"Before using the database cache, you must create the cache table with this "
"command::"
msgstr ""

# e2dea0f276ce4e41bbbac8d7b68625e0
#: ../../../../1.8/docs/topics/cache.txt:196
msgid ""
"This creates a table in your database that is in the proper format that "
"Django's database-cache system expects. The name of the table is taken from "
":setting:`LOCATION <CACHES-LOCATION>`."
msgstr ""

# d7e08022eb5f4e66919e85b794f15609
#: ../../../../1.8/docs/topics/cache.txt:200
msgid ""
"If you are using multiple database caches, :djadmin:`createcachetable` "
"creates one table for each cache."
msgstr ""

# 5b72000ba42e43d9beb0c90a97c0abf1
#: ../../../../1.8/docs/topics/cache.txt:203
msgid ""
"If you are using multiple databases, :djadmin:`createcachetable` observes "
"the ``allow_migrate()`` method of your database routers (see below)."
msgstr ""

# fe50a5b739514d7db7d634e7812f3ffb
#: ../../../../1.8/docs/topics/cache.txt:206
msgid ""
"Like :djadmin:`migrate`, :djadmin:`createcachetable` won't touch an existing"
" table. It will only create missing tables."
msgstr ""

# 3d2d6aa979db4f878c84321362c0b9ba
#: ../../../../1.8/docs/topics/cache.txt:211
msgid ""
"Before Django 1.7, :djadmin:`createcachetable` created one table at a time. "
"You had to pass the name of the table you wanted to create, and if you were "
"using multiple databases, you had to use the :djadminopt:`--database` "
"option. For backwards compatibility, this is still possible."
msgstr ""

# 4aec8a64da8e426a99c7ad34aabd9bb6
# a59c8b1668d24ea2a5b8fbac8777ae0e
#: ../../../../1.8/docs/topics/cache.txt:217
#: ../../../../1.8/docs/topics/db/multi-db.txt:3
msgid "Multiple databases"
msgstr ""

# 06c7bd7b943a4b968950bff1a380a0fe
#: ../../../../1.8/docs/topics/cache.txt:219
msgid ""
"If you use database caching with multiple databases, you'll also need to set"
" up routing instructions for your database cache table. For the purposes of "
"routing, the database cache table appears as a model named ``CacheEntry``, "
"in an application named ``django_cache``. This model won't appear in the "
"models cache, but the model details can be used for routing purposes."
msgstr ""

# 8ffd483f53c04ff295c6135b76328cd8
#: ../../../../1.8/docs/topics/cache.txt:226
msgid ""
"For example, the following router would direct all cache read operations to "
"``cache_replica``, and all write operations to ``cache_primary``. The cache "
"table will only be synchronized onto ``cache_primary``::"
msgstr ""

# 5f6b1d9a124f41b48a002c46f10d018e
#: ../../../../1.8/docs/topics/cache.txt:252
msgid ""
"If you don't specify routing directions for the database cache model, the "
"cache backend will use the ``default`` database."
msgstr ""

# b8204562936344f8be0ed5bfb0f0537c
#: ../../../../1.8/docs/topics/cache.txt:255
msgid ""
"Of course, if you don't use the database cache backend, you don't need to "
"worry about providing routing instructions for the database cache model."
msgstr ""

# 353792421f2d43bba46e69e4900e2578
#: ../../../../1.8/docs/topics/cache.txt:260
msgid "Filesystem caching"
msgstr ""

# e4e1156b57f14f358a1e90cec7702cf4
#: ../../../../1.8/docs/topics/cache.txt:262
msgid ""
"The file-based backend serializes and stores each cache value as a separate "
"file. To use this backend set :setting:`BACKEND <CACHES-BACKEND>` to "
"``\"django.core.cache.backends.filebased.FileBasedCache\"`` and "
":setting:`LOCATION <CACHES-LOCATION>` to a suitable directory. For example, "
"to store cached data in ``/var/tmp/django_cache``, use this setting::"
msgstr ""

# 9bdfec5677bd4f18baccc906bcb862fc
#: ../../../../1.8/docs/topics/cache.txt:275
msgid ""
"If you're on Windows, put the drive letter at the beginning of the path, "
"like this::"
msgstr ""

# 641325ffbeaa4cedb222749d75294072
#: ../../../../1.8/docs/topics/cache.txt:285
msgid ""
"The directory path should be absolute -- that is, it should start at the "
"root of your filesystem. It doesn't matter whether you put a slash at the "
"end of the setting."
msgstr ""

# 4d791a9f7a184dc6a8a393c2f5a53ef7
#: ../../../../1.8/docs/topics/cache.txt:289
msgid ""
"Make sure the directory pointed-to by this setting exists and is readable "
"and writable by the system user under which your Web server runs. Continuing"
" the above example, if your server runs as the user ``apache``, make sure "
"the directory ``/var/tmp/django_cache`` exists and is readable and writable "
"by the user ``apache``."
msgstr ""

# a3ddaab76b11489284a54a24b60c7565
#: ../../../../1.8/docs/topics/cache.txt:296
msgid "Local-memory caching"
msgstr ""

# 64519c8fae024d3487f65e6d7251dcc7
#: ../../../../1.8/docs/topics/cache.txt:298
msgid ""
"This is the default cache if another is not specified in your settings file."
" If you want the speed advantages of in-memory caching but don't have the "
"capability of running Memcached, consider the local-memory cache backend. "
"This cache is per-process (see below) and thread-safe. To use it, set "
":setting:`BACKEND <CACHES-BACKEND>` to "
"``\"django.core.cache.backends.locmem.LocMemCache\"``. For example::"
msgstr ""

# 2eed976d4422418ab4bb7ff26fdaff93
#: ../../../../1.8/docs/topics/cache.txt:312
msgid ""
"The cache :setting:`LOCATION <CACHES-LOCATION>` is used to identify "
"individual memory stores. If you only have one ``locmem`` cache, you can "
"omit the :setting:`LOCATION <CACHES-LOCATION>`; however, if you have more "
"than one local memory cache, you will need to assign a name to at least one "
"of them in order to keep them separate."
msgstr ""

# d18f38073d214552b9933cade226fcf5
#: ../../../../1.8/docs/topics/cache.txt:318
msgid ""
"Note that each process will have its own private cache instance, which means"
" no cross-process caching is possible. This obviously also means the local "
"memory cache isn't particularly memory-efficient, so it's probably not a "
"good choice for production environments. It's nice for development."
msgstr ""

# 66b5b2a97a9f4702b684d5ee0954af70
#: ../../../../1.8/docs/topics/cache.txt:324
msgid "Dummy caching (for development)"
msgstr ""

# cc6598c9935245ebb5fac208b39e2d26
#: ../../../../1.8/docs/topics/cache.txt:326
msgid ""
"Finally, Django comes with a \"dummy\" cache that doesn't actually cache -- "
"it just implements the cache interface without doing anything."
msgstr ""

# 4ad223c2ffcb41f8b0c4323fc43de31b
#: ../../../../1.8/docs/topics/cache.txt:329
msgid ""
"This is useful if you have a production site that uses heavy-duty caching in"
" various places but a development/test environment where you don't want to "
"cache and don't want to have to change your code to special-case the latter."
" To activate dummy caching, set :setting:`BACKEND <CACHES-BACKEND>` like "
"so::"
msgstr ""

# 724e8c99483d4bc69d06c353e7647c3b
#: ../../../../1.8/docs/topics/cache.txt:341
msgid "Using a custom cache backend"
msgstr ""

# 8033a3ccbe0b4114b04053e09cea163a
#: ../../../../1.8/docs/topics/cache.txt:343
msgid ""
"While Django includes support for a number of cache backends out-of-the-box,"
" sometimes you might want to use a customized cache backend. To use an "
"external cache backend with Django, use the Python import path as the "
":setting:`BACKEND <CACHES-BACKEND>` of the :setting:`CACHES` setting, like "
"so::"
msgstr ""

# d66b244c1c764a39b741c5f7bb251cc9
#: ../../../../1.8/docs/topics/cache.txt:354
msgid ""
"If you're building your own backend, you can use the standard cache backends"
" as reference implementations. You'll find the code in the "
"``django/core/cache/backends/`` directory of the Django source."
msgstr ""

# f967c409b0fe422ebaa13a8f79b79d65
#: ../../../../1.8/docs/topics/cache.txt:358
msgid ""
"Note: Without a really compelling reason, such as a host that doesn't "
"support them, you should stick to the cache backends included with Django. "
"They've been well-tested and are easy to use."
msgstr ""

# 023285ac4d4d421a9f60dfdde07caefc
#: ../../../../1.8/docs/topics/cache.txt:363
msgid "Cache arguments"
msgstr ""

# dc24fa6b0dc643b095b941faa411aecc
#: ../../../../1.8/docs/topics/cache.txt:365
msgid ""
"Each cache backend can be given additional arguments to control caching "
"behavior. These arguments are provided as additional keys in the "
":setting:`CACHES` setting. Valid arguments are as follows:"
msgstr ""

# 3cbc65329f124d97824d0c782a40e828
#: ../../../../1.8/docs/topics/cache.txt:369
msgid ""
":setting:`TIMEOUT <CACHES-TIMEOUT>`: The default timeout, in seconds, to use"
" for the cache. This argument defaults to ``300`` seconds (5 minutes)."
msgstr ""

# e33032e69c084a70b26a59736e571842
#: ../../../../1.8/docs/topics/cache.txt:374
msgid ""
"You can set ``TIMEOUT`` to ``None`` so that, by default, cache keys never "
"expire. A value of ``0`` causes keys to immediately expire (effectively "
"\"don't cache\")."
msgstr ""

# 41c1976ad18e40f4aaa2036ee2bf512c
#: ../../../../1.8/docs/topics/cache.txt:378
msgid ""
":setting:`OPTIONS <CACHES-OPTIONS>`: Any options that should be passed to "
"the cache backend. The list of valid options will vary with each backend, "
"and cache backends backed by a third-party library will pass their options "
"directly to the underlying cache library."
msgstr ""

# c97be181e79040fe839823ba71f76c61
#: ../../../../1.8/docs/topics/cache.txt:383
msgid ""
"Cache backends that implement their own culling strategy (i.e., the "
"``locmem``, ``filesystem`` and ``database`` backends) will honor the "
"following options:"
msgstr ""

# aaaf1857c2b54e75a722826246932244
#: ../../../../1.8/docs/topics/cache.txt:387
msgid ""
"``MAX_ENTRIES``: The maximum number of entries allowed in the cache before "
"old values are deleted. This argument defaults to ``300``."
msgstr ""

# 7c9846449f744704a250d059728f7dbc
#: ../../../../1.8/docs/topics/cache.txt:391
msgid ""
"``CULL_FREQUENCY``: The fraction of entries that are culled when "
"``MAX_ENTRIES`` is reached. The actual ratio is ``1 / CULL_FREQUENCY``, so "
"set ``CULL_FREQUENCY`` to ``2`` to cull half the entries when "
"``MAX_ENTRIES`` is reached. This argument should be an integer and defaults "
"to ``3``."
msgstr ""

# 3e5e1a85d36a4a4a80403ad016036832
#: ../../../../1.8/docs/topics/cache.txt:397
msgid ""
"A value of ``0`` for ``CULL_FREQUENCY`` means that the entire cache will be "
"dumped when ``MAX_ENTRIES`` is reached. On some backends (``database`` in "
"particular) this makes culling *much* faster at the expense of more cache "
"misses."
msgstr ""

# 9e7de93325c542a7927ddb9a29cd796e
#: ../../../../1.8/docs/topics/cache.txt:402
msgid ""
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: A string that will be "
"automatically included (prepended by default) to all cache keys used by the "
"Django server."
msgstr ""

# c92e03b0bf8c4707892739030434f7ba
#: ../../../../1.8/docs/topics/cache.txt:406
msgid ""
"See the :ref:`cache documentation <cache_key_prefixing>` for more "
"information."
msgstr ""

# 8bd0fa0a78204358a19ffb85393fa575
#: ../../../../1.8/docs/topics/cache.txt:409
msgid ""
":setting:`VERSION <CACHES-VERSION>`: The default version number for cache "
"keys generated by the Django server."
msgstr ""

# 2d0fa9fa1914450cb5f86bc0a864f185
#: ../../../../1.8/docs/topics/cache.txt:412
msgid ""
"See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""

# 993746b35f4d454fba12a02f716c4b6e
#: ../../../../1.8/docs/topics/cache.txt:415
msgid ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` A string containing a dotted "
"path to a function that defines how to compose a prefix, version and key "
"into a final cache key."
msgstr ""

# 673b0775f4c540f3b6b5f0612976c081
#: ../../../../1.8/docs/topics/cache.txt:419
msgid ""
"See the :ref:`cache documentation <cache_key_transformation>` for more "
"information."
msgstr ""

# 39cad798e8e8434dad4911cf3ed7dc92
#: ../../../../1.8/docs/topics/cache.txt:422
msgid ""
"In this example, a filesystem backend is being configured with a timeout of "
"60 seconds, and a maximum capacity of 1000 items::"
msgstr ""

# e7a405aea545438bb18e62f7dc4f9bc1
#: ../../../../1.8/docs/topics/cache.txt:436
msgid ""
"Invalid arguments are silently ignored, as are invalid values of known "
"arguments."
msgstr ""

# 903fdcc059614f788f95d28283b4a266
#: ../../../../1.8/docs/topics/cache.txt:442
msgid "The per-site cache"
msgstr ""

# e43c07eac4d2441f8fa18cc991ac406a
#: ../../../../1.8/docs/topics/cache.txt:444
msgid ""
"Once the cache is set up, the simplest way to use caching is to cache your "
"entire site. You'll need to add "
"``'django.middleware.cache.UpdateCacheMiddleware'`` and "
"``'django.middleware.cache.FetchFromCacheMiddleware'`` to your "
":setting:`MIDDLEWARE_CLASSES` setting, as in this example::"
msgstr ""

# 6dc1cf39323e47879cba6925cca68a51
#: ../../../../1.8/docs/topics/cache.txt:458
msgid ""
"No, that's not a typo: the \"update\" middleware must be first in the list, "
"and the \"fetch\" middleware must be last. The details are a bit obscure, "
"but see `Order of MIDDLEWARE_CLASSES`_ below if you'd like the full story."
msgstr ""

# cc9ed17a67584e22a92c5e2ac06d2bdd
#: ../../../../1.8/docs/topics/cache.txt:462
msgid ""
"Then, add the following required settings to your Django settings file:"
msgstr ""

# c8d77ca2609147aba146252aad4f3b94
#: ../../../../1.8/docs/topics/cache.txt:464
msgid ""
":setting:`CACHE_MIDDLEWARE_ALIAS` -- The cache alias to use for storage."
msgstr ""

# c96c665892454de29133dd69ae8e8a46
#: ../../../../1.8/docs/topics/cache.txt:465
msgid ""
":setting:`CACHE_MIDDLEWARE_SECONDS` -- The number of seconds each page "
"should be cached."
msgstr ""

# 9a056031d0ce49229460898bb17cca41
#: ../../../../1.8/docs/topics/cache.txt:467
msgid ""
":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- If the cache is shared across "
"multiple sites using the same Django installation, set this to the name of "
"the site, or some other string that is unique to this Django instance, to "
"prevent key collisions. Use an empty string if you don't care."
msgstr ""

# 2fbdbba1ed6440fcbdac6ab66b34474a
#: ../../../../1.8/docs/topics/cache.txt:472
msgid ""
"``FetchFromCacheMiddleware`` caches GET and HEAD responses with status 200, "
"where the request and response headers allow. Responses to requests for the "
"same URL with different query parameters are considered to be unique pages "
"and are cached separately. This middleware expects that a HEAD request is "
"answered with the same response headers as the corresponding GET request; in"
" which case it can return a cached GET response for HEAD request."
msgstr ""

# b9d4ca0023d24b629357de0dad6ad339
#: ../../../../1.8/docs/topics/cache.txt:479
msgid ""
"Additionally, ``UpdateCacheMiddleware`` automatically sets a few headers in "
"each :class:`~django.http.HttpResponse`:"
msgstr ""

# 364ff060ee3a4f5e9f3776898fdc0147
#: ../../../../1.8/docs/topics/cache.txt:482
msgid ""
"Sets the ``Last-Modified`` header to the current date/time when a fresh (not"
" cached) version of the page is requested."
msgstr ""

# e68047ee868544368251220a3050fac0
#: ../../../../1.8/docs/topics/cache.txt:485
msgid ""
"Sets the ``Expires`` header to the current date/time plus the defined "
":setting:`CACHE_MIDDLEWARE_SECONDS`."
msgstr ""

# d453b51b2b5442e888ff05ba39038b62
#: ../../../../1.8/docs/topics/cache.txt:488
msgid ""
"Sets the ``Cache-Control`` header to give a max age for the page -- again, "
"from the :setting:`CACHE_MIDDLEWARE_SECONDS` setting."
msgstr ""

# 29948858a9e44bf0984e01dbd7d5c7f1
#: ../../../../1.8/docs/topics/cache.txt:491
msgid "See :doc:`/topics/http/middleware` for more on middleware."
msgstr ""

# 9957db8c4a824b9985914f04c6c00fa6
#: ../../../../1.8/docs/topics/cache.txt:493
msgid ""
"If a view sets its own cache expiry time (i.e. it has a ``max-age`` section "
"in its ``Cache-Control`` header) then the page will be cached until the "
"expiry time, rather than :setting:`CACHE_MIDDLEWARE_SECONDS`. Using the "
"decorators in ``django.views.decorators.cache`` you can easily set a view's "
"expiry time (using the ``cache_control`` decorator) or disable caching for a"
" view (using the ``never_cache`` decorator). See the `using other headers`__"
" section for more on these decorators."
msgstr ""

# 735ba85dffa34f13b81c9bc570e8e99f
#: ../../../../1.8/docs/topics/cache.txt:503
msgid ""
"If :setting:`USE_I18N` is set to ``True`` then the generated cache key will "
"include the name of the active :term:`language<language code>` -- see also "
":ref:`how-django-discovers-language-preference`). This allows you to easily "
"cache multilingual sites without having to create the cache key yourself."
msgstr ""

# a588125e39164abf9fd096823dc68c1d
#: ../../../../1.8/docs/topics/cache.txt:508
msgid ""
"Cache keys also include the active :term:`language <language code>` when "
":setting:`USE_L10N` is set to ``True`` and the :ref:`current time zone "
"<default-current-time-zone>` when :setting:`USE_TZ` is set to ``True``."
msgstr ""

# a44e607b53ac4d2984cc50024532d913
#: ../../../../1.8/docs/topics/cache.txt:515
msgid "The per-view cache"
msgstr ""

# 755485ed953f44278ea295a0b6f1e74c
#: ../../../../1.8/docs/topics/cache.txt:519
msgid ""
"A more granular way to use the caching framework is by caching the output of"
" individual views. ``django.views.decorators.cache`` defines a "
"``cache_page`` decorator that will automatically cache the view's response "
"for you. It's easy to use::"
msgstr ""

# 821ef84e5df04a828f2d634cfa569353
#: ../../../../1.8/docs/topics/cache.txt:530
msgid ""
"``cache_page`` takes a single argument: the cache timeout, in seconds. In "
"the above example, the result of the ``my_view()`` view will be cached for "
"15 minutes. (Note that we've written it as ``60 * 15`` for the purpose of "
"readability. ``60 * 15`` will be evaluated to ``900`` -- that is, 15 minutes"
" multiplied by 60 seconds per minute.)"
msgstr ""

# d4f3dea4b0574728b79b32b072c1e2bb
#: ../../../../1.8/docs/topics/cache.txt:536
msgid ""
"The per-view cache, like the per-site cache, is keyed off of the URL. If "
"multiple URLs point at the same view, each URL will be cached separately. "
"Continuing the ``my_view`` example, if your URLconf looks like this::"
msgstr ""

# 4008fecf0a01484286d072d0c99b76b1
#: ../../../../1.8/docs/topics/cache.txt:544
msgid ""
"then requests to ``/foo/1/`` and ``/foo/23/`` will be cached separately, as "
"you may expect. But once a particular URL (e.g., ``/foo/23/``) has been "
"requested, subsequent requests to that URL will use the cache."
msgstr ""

# 61fdf628954843518fa76c1b581fbfc4
#: ../../../../1.8/docs/topics/cache.txt:548
msgid ""
"``cache_page`` can also take an optional keyword argument, ``cache``, which "
"directs the decorator to use a specific cache (from your :setting:`CACHES` "
"setting) when caching view results. By default, the ``default`` cache will "
"be used, but you can specify any cache you want::"
msgstr ""

# 5dc4fcca0d7a4557a6877f6ebe672142
#: ../../../../1.8/docs/topics/cache.txt:558
msgid ""
"You can also override the cache prefix on a per-view basis. ``cache_page`` "
"takes an optional keyword argument, ``key_prefix``, which works in the same "
"way as the :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` setting for the "
"middleware.  It can be used like this::"
msgstr ""

# 5b8c5b506cf9444a9fb11db96fede420
#: ../../../../1.8/docs/topics/cache.txt:567
msgid ""
"The ``key_prefix`` and ``cache`` arguments may be specified together. The "
"``key_prefix`` argument and the :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` "
"specified under :setting:`CACHES` will be concatenated."
msgstr ""

# 0f809275e71f438995fcc9ad025cd669
#: ../../../../1.8/docs/topics/cache.txt:572
msgid "Specifying per-view cache in the URLconf"
msgstr ""

# 027d5d2aaac241f48b7626c31207ba01
#: ../../../../1.8/docs/topics/cache.txt:574
msgid ""
"The examples in the previous section have hard-coded the fact that the view "
"is cached, because ``cache_page`` alters the ``my_view`` function in place. "
"This approach couples your view to the cache system, which is not ideal for "
"several reasons. For instance, you might want to reuse the view functions on"
" another, cache-less site, or you might want to distribute the views to "
"people who might want to use them without being cached. The solution to "
"these problems is to specify the per-view cache in the URLconf rather than "
"next to the view functions themselves."
msgstr ""

# 62900868a4dd481298804031c2ae4830
#: ../../../../1.8/docs/topics/cache.txt:583
msgid ""
"Doing so is easy: simply wrap the view function with ``cache_page`` when you"
" refer to it in the URLconf. Here's the old URLconf from earlier::"
msgstr ""

# 68dcff0c7ff442b480ea298b6543927d
#: ../../../../1.8/docs/topics/cache.txt:590
msgid "Here's the same thing, with ``my_view`` wrapped in ``cache_page``::"
msgstr ""

# 77f8784c5c184ca09c07774bf6dd12ca
#: ../../../../1.8/docs/topics/cache.txt:601
msgid "Template fragment caching"
msgstr ""

# 43da8b9a3c1c45b48d940c647bf5c1c2
#: ../../../../1.8/docs/topics/cache.txt:603
msgid ""
"If you're after even more control, you can also cache template fragments "
"using the ``cache`` template tag. To give your template access to this tag, "
"put ``{% load cache %}`` near the top of your template."
msgstr ""

# 073923a2f5254ecb80113f7d98fdcb24
#: ../../../../1.8/docs/topics/cache.txt:607
msgid ""
"The ``{% cache %}`` template tag caches the contents of the block for a "
"given amount of time. It takes at least two arguments: the cache timeout, in"
" seconds, and the name to give the cache fragment. The name will be taken as"
" is, do not use a variable. For example:"
msgstr ""

# 60b9245f3fdc4d229e4480ee41c0a9f0
#: ../../../../1.8/docs/topics/cache.txt:619
msgid ""
"Sometimes you might want to cache multiple copies of a fragment depending on"
" some dynamic data that appears inside the fragment. For example, you might "
"want a separate cached copy of the sidebar used in the previous example for "
"every user of your site. Do this by passing additional arguments to the ``{%"
" cache %}`` template tag to uniquely identify the cache fragment:"
msgstr ""

# 7f8b1617fa554ac4b3ca549b84485056
#: ../../../../1.8/docs/topics/cache.txt:632
msgid ""
"It's perfectly fine to specify more than one argument to identify the "
"fragment. Simply pass as many arguments to ``{% cache %}`` as you need."
msgstr ""

# 29d4790fa8a54e729162107496c7a896
#: ../../../../1.8/docs/topics/cache.txt:635
msgid ""
"If :setting:`USE_I18N` is set to ``True`` the per-site middleware cache will"
" :ref:`respect the active language<i18n-cache-key>`. For the ``cache`` "
"template tag you could use one of the :ref:`translation-specific variables"
"<template-translation-vars>` available in templates to achieve the same "
"result:"
msgstr ""

# a67e053a19b64b03a3207df9fb68154c
#: ../../../../1.8/docs/topics/cache.txt:652
msgid ""
"The cache timeout can be a template variable, as long as the template "
"variable resolves to an integer value. For example, if the template variable"
" ``my_timeout`` is set to the value ``600``, then the following two examples"
" are equivalent:"
msgstr ""

# 388d1ea971364ecaaf8245409e56846b
#: ../../../../1.8/docs/topics/cache.txt:662
msgid ""
"This feature is useful in avoiding repetition in templates. You can set the "
"timeout in a variable, in one place, and just reuse that value."
msgstr ""

# 3136d32f04ea422e95abba89958c6c82
#: ../../../../1.8/docs/topics/cache.txt:667
msgid ""
"By default, the cache tag will try to use the cache called "
"\"template_fragments\". If no such cache exists, it will fall back to using "
"the default cache. You may select an alternate cache backend to use with the"
" ``using`` keyword argument, which must be the last argument to the tag."
msgstr ""

# b749ab2b66524f6b99d1956a9107cb24
#: ../../../../1.8/docs/topics/cache.txt:676
msgid ""
"It is considered an error to specify a cache name that is not configured."
msgstr ""

# 396963661afe478695944c40c726bd66
#: ../../../../1.8/docs/topics/cache.txt:680
msgid ""
"If you want to obtain the cache key used for a cached fragment, you can use "
"``make_template_fragment_key``. ``fragment_name`` is the same as second "
"argument to the ``cache`` template tag; ``vary_on`` is a list of all "
"additional arguments passed to the tag. This function can be useful for "
"invalidating or overwriting a cached item, for example:"
msgstr ""

# 2eefbf4e167546b8aeb913a32965394a
#: ../../../../1.8/docs/topics/cache.txt:696
msgid "The low-level cache API"
msgstr ""

# 39606224fb0d480bae69e7e9ba26552f
#: ../../../../1.8/docs/topics/cache.txt:700
msgid ""
"Sometimes, caching an entire rendered page doesn't gain you very much and "
"is, in fact, inconvenient overkill."
msgstr ""

# d5d7f355ffa841af99e3f357e879c82e
#: ../../../../1.8/docs/topics/cache.txt:703
msgid ""
"Perhaps, for instance, your site includes a view whose results depend on "
"several expensive queries, the results of which change at different "
"intervals. In this case, it would not be ideal to use the full-page caching "
"that the per-site or per-view cache strategies offer, because you wouldn't "
"want to cache the entire result (since some of the data changes often), but "
"you'd still want to cache the results that rarely change."
msgstr ""

# 92d817f49a844b26b509eae251758fd9
#: ../../../../1.8/docs/topics/cache.txt:710
msgid ""
"For cases like this, Django exposes a simple, low-level cache API. You can "
"use this API to store objects in the cache with any level of granularity you"
" like. You can cache any Python object that can be pickled safely: strings, "
"dictionaries, lists of model objects, and so forth. (Most common Python "
"objects can be pickled; refer to the Python documentation for more "
"information about pickling.)"
msgstr ""

# 6ad9aa4a07fd409493039f1e3d929d03
#: ../../../../1.8/docs/topics/cache.txt:718
msgid "Accessing the cache"
msgstr ""

# 54219196b0f740608151bf890f741682
#: ../../../../1.8/docs/topics/cache.txt:724
msgid ""
"You can access the caches configured in the :setting:`CACHES` setting "
"through a dict-like object: ``django.core.cache.caches``. Repeated requests "
"for the same alias in the same thread will return the same object."
msgstr ""

# 9ca5698d63d243cca34194e7da09b0d8
#: ../../../../1.8/docs/topics/cache.txt:735
msgid ""
"If the named key does not exist, ``InvalidCacheBackendError`` will be "
"raised."
msgstr ""

# 21f4930db5e2430fb54b7d8980d4ca39
#: ../../../../1.8/docs/topics/cache.txt:738
msgid ""
"To provide thread-safety, a different instance of the cache backend will be "
"returned for each thread."
msgstr ""

# 02ea5567c9f44ce4a0951c5095518b5a
#: ../../../../1.8/docs/topics/cache.txt:743
msgid ""
"As a shortcut, the default cache is available as "
"``django.core.cache.cache``::"
msgstr ""

# 90caf3a749ea4e449368bc81ca81d131
#: ../../../../1.8/docs/topics/cache.txt:748
msgid "This object is equivalent to ``caches['default']``."
msgstr ""

# 5fd5f2f6a3924fc39bd6c6853e669a3d
#: ../../../../1.8/docs/topics/cache.txt:752
msgid ""
"This function has been deprecated in favor of "
":data:`~django.core.cache.caches`."
msgstr ""

# 5a8509ba09ee4af4a219dd0d17ffb882
#: ../../../../1.8/docs/topics/cache.txt:756
msgid ""
"Before Django 1.7 this function was the canonical way to obtain a cache "
"instance. It could also be used to create a new cache instance with a "
"different configuration."
msgstr ""

# a5205ccb2e3a4ad9a032282e71c35776
#: ../../../../1.8/docs/topics/cache.txt:766
msgid "Basic usage"
msgstr ""

# 080cd34531764c8382e1eeeacf0e624a
#: ../../../../1.8/docs/topics/cache.txt:768
msgid "The basic interface is ``set(key, value, timeout)`` and ``get(key)``::"
msgstr ""

# c2cc119b1e144f49b7b9a34607c9774c
#: ../../../../1.8/docs/topics/cache.txt:774
msgid ""
"The ``timeout`` argument is optional and defaults to the ``timeout`` "
"argument of the appropriate backend in the :setting:`CACHES` setting "
"(explained above). It's the number of seconds the value should be stored in "
"the cache. Passing in ``None`` for ``timeout`` will cache the value forever."
" A ``timeout`` of ``0`` won't cache the value."
msgstr ""

# 8cb8654360274d7b92956778ce5eb76e
#: ../../../../1.8/docs/topics/cache.txt:780
msgid ""
"If the object doesn't exist in the cache, ``cache.get()`` returns ``None``::"
msgstr ""

# 6fb4613cb92e4720b30864d67d6ed6d1
#: ../../../../1.8/docs/topics/cache.txt:787
msgid ""
"We advise against storing the literal value ``None`` in the cache, because "
"you won't be able to distinguish between your stored ``None`` value and a "
"cache miss signified by a return value of ``None``."
msgstr ""

# a038d708ee0d4bcea18d4e7e9c94ef3f
#: ../../../../1.8/docs/topics/cache.txt:791
msgid ""
"``cache.get()`` can take a ``default`` argument. This specifies which value "
"to return if the object doesn't exist in the cache::"
msgstr ""

# 0bf51e30d51442bfaabf75a979b2c453
#: ../../../../1.8/docs/topics/cache.txt:797
msgid ""
"To add a key only if it doesn't already exist, use the ``add()`` method. It "
"takes the same parameters as ``set()``, but it will not attempt to update "
"the cache if the key specified is already present::"
msgstr ""

# c19cbd50dc5048ac88ca2f23f202b300
#: ../../../../1.8/docs/topics/cache.txt:806
msgid ""
"If you need to know whether ``add()`` stored a value in the cache, you can "
"check the return value. It will return ``True`` if the value was stored, "
"``False`` otherwise."
msgstr ""

# 328b8169b14145a7b178f92bac1ef0d6
#: ../../../../1.8/docs/topics/cache.txt:810
msgid ""
"There's also a ``get_many()`` interface that only hits the cache once. "
"``get_many()`` returns a dictionary with all the keys you asked for that "
"actually exist in the cache (and haven't expired)::"
msgstr ""

# 93b2eed9fb0c41e384e70e96a1f22dcf
#: ../../../../1.8/docs/topics/cache.txt:820
msgid ""
"To set multiple values more efficiently, use ``set_many()`` to pass a "
"dictionary of key-value pairs::"
msgstr ""

# 1be4037890964edeab46100302878276
#: ../../../../1.8/docs/topics/cache.txt:827
msgid ""
"Like ``cache.set()``, ``set_many()`` takes an optional ``timeout`` "
"parameter."
msgstr ""

# d57c4a5e0dbc42a4935f0a04ff0c35a4
#: ../../../../1.8/docs/topics/cache.txt:829
msgid ""
"You can delete keys explicitly with ``delete()``. This is an easy way of "
"clearing the cache for a particular object::"
msgstr ""

# 9c2eedca3a6c4aca8c059c614e0df06d
#: ../../../../1.8/docs/topics/cache.txt:834
msgid ""
"If you want to clear a bunch of keys at once, ``delete_many()`` can take a "
"list of keys to be cleared::"
msgstr ""

# efd73d63ad8e4a94b830b9817ee8cbae
#: ../../../../1.8/docs/topics/cache.txt:839
msgid ""
"Finally, if you want to delete all the keys in the cache, use "
"``cache.clear()``.  Be careful with this; ``clear()`` will remove "
"*everything* from the cache, not just the keys set by your application. ::"
msgstr ""

# 448ed949a8ef4acabf1b5cf1ae125e65
#: ../../../../1.8/docs/topics/cache.txt:845
msgid ""
"You can also increment or decrement a key that already exists using the "
"``incr()`` or ``decr()`` methods, respectively. By default, the existing "
"cache value will incremented or decremented by 1. Other increment/decrement "
"values can be specified by providing an argument to the increment/decrement "
"call. A ValueError will be raised if you attempt to increment or decrement a"
" nonexistent cache key.::"
msgstr ""

# 5a015b60b70649b3859146c95475ae60
#: ../../../../1.8/docs/topics/cache.txt:864
msgid ""
"``incr()``/``decr()`` methods are not guaranteed to be atomic. On those "
"backends that support atomic increment/decrement (most notably, the "
"memcached backend), increment and decrement operations will be atomic. "
"However, if the backend doesn't natively provide an increment/decrement "
"operation, it will be implemented using a two-step retrieve/update."
msgstr ""

# 5e8cae1bf6954ac881cc686c4ec96346
#: ../../../../1.8/docs/topics/cache.txt:871
msgid ""
"You can close the connection to your cache with ``close()`` if implemented "
"by the cache backend."
msgstr ""

# f03179fc3c0545c2a9c5b744551cb162
#: ../../../../1.8/docs/topics/cache.txt:878
msgid "For caches that don't implement ``close`` methods it is a no-op."
msgstr ""

# e259031b18ae491ea55bd72a264bb2ae
#: ../../../../1.8/docs/topics/cache.txt:883
msgid "Cache key prefixing"
msgstr ""

# 3db60372678941c1acc08bd70e80b973
#: ../../../../1.8/docs/topics/cache.txt:885
msgid ""
"If you are sharing a cache instance between servers, or between your "
"production and development environments, it's possible for data cached by "
"one server to be used by another server. If the format of cached data is "
"different between servers, this can lead to some very hard to diagnose "
"problems."
msgstr ""

# 72cf7148afe14e3eacd125be2116b499
#: ../../../../1.8/docs/topics/cache.txt:891
msgid ""
"To prevent this, Django provides the ability to prefix all cache keys used "
"by a server. When a particular cache key is saved or retrieved, Django will "
"automatically prefix the cache key with the value of the "
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` cache setting."
msgstr ""

# a245a8e2dd2d4c7b9be92d39f3475985
#: ../../../../1.8/docs/topics/cache.txt:896
msgid ""
"By ensuring each Django instance has a different :setting:`KEY_PREFIX "
"<CACHES-KEY_PREFIX>`, you can ensure that there will be no collisions in "
"cache values."
msgstr ""

# 7e5bb8342f964efeba4d09f152362329
#: ../../../../1.8/docs/topics/cache.txt:903
msgid "Cache versioning"
msgstr ""

# 8719e317defb4bdb9a19e08191eec952
#: ../../../../1.8/docs/topics/cache.txt:905
msgid ""
"When you change running code that uses cached values, you may need to purge "
"any existing cached values. The easiest way to do this is to flush the "
"entire cache, but this can lead to the loss of cache values that are still "
"valid and useful."
msgstr ""

# f640ac67d99e4c46b597d1c5eb18395f
#: ../../../../1.8/docs/topics/cache.txt:910
msgid ""
"Django provides a better way to target individual cache values. Django's "
"cache framework has a system-wide version identifier, specified using the "
":setting:`VERSION <CACHES-VERSION>` cache setting. The value of this setting"
" is automatically combined with the cache prefix and the user-provided cache"
" key to obtain the final cache key."
msgstr ""

# 5549aeed19974d43b9364c04c5b8abbb
#: ../../../../1.8/docs/topics/cache.txt:916
msgid ""
"By default, any key request will automatically include the site default "
"cache key version. However, the primitive cache functions all include a "
"``version`` argument, so you can specify a particular cache key version to "
"set or get. For example::"
msgstr ""

# 2c79264d08af4cad8f1b175e5225a6ab
#: ../../../../1.8/docs/topics/cache.txt:930
msgid ""
"The version of a specific key can be incremented and decremented using the "
"``incr_version()`` and ``decr_version()`` methods. This enables specific "
"keys to be bumped to a new version, leaving other keys unaffected. "
"Continuing our previous example::"
msgstr ""

# e7949645cb3241bab806282981d8c99b
#: ../../../../1.8/docs/topics/cache.txt:950
msgid "Cache key transformation"
msgstr ""

# b9269dae880d45f09e3f026e91c5913f
#: ../../../../1.8/docs/topics/cache.txt:952
msgid ""
"As described in the previous two sections, the cache key provided by a user "
"is not used verbatim -- it is combined with the cache prefix and key version"
" to provide a final cache key. By default, the three parts are joined using "
"colons to produce a final string::"
msgstr ""

# 316df77138de4e61ac91330c4ac23517
#: ../../../../1.8/docs/topics/cache.txt:960
msgid ""
"If you want to combine the parts in different ways, or apply other "
"processing to the final key (e.g., taking a hash digest of the key parts), "
"you can provide a custom key function."
msgstr ""

# 306cb77665a8416087b4d841bb8790ab
#: ../../../../1.8/docs/topics/cache.txt:964
msgid ""
"The :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` cache setting specifies a "
"dotted-path to a function matching the prototype of ``make_key()`` above. If"
" provided, this custom key function will be used instead of the default key "
"combining function."
msgstr ""

# 13a46c9a1fe2489182dcd520722bb0df
#: ../../../../1.8/docs/topics/cache.txt:970
msgid "Cache key warnings"
msgstr ""

# 13fbcea84b0340409eda5201b7bf2292
#: ../../../../1.8/docs/topics/cache.txt:972
msgid ""
"Memcached, the most commonly-used production cache backend, does not allow "
"cache keys longer than 250 characters or containing whitespace or control "
"characters, and using such keys will cause an exception. To encourage cache-"
"portable code and minimize unpleasant surprises, the other built-in cache "
"backends issue a warning "
"(``django.core.cache.backends.base.CacheKeyWarning``) if a key is used that "
"would cause an error on memcached."
msgstr ""

# 651dc424016647d8965df4ac85e8fcd2
#: ../../../../1.8/docs/topics/cache.txt:979
msgid ""
"If you are using a production backend that can accept a wider range of keys "
"(a custom backend, or one of the non-memcached built-in backends), and want "
"to use this wider range without warnings, you can silence "
"``CacheKeyWarning`` with this code in the ``management`` module of one of "
"your :setting:`INSTALLED_APPS`::"
msgstr ""

# e86fea75238342b4bdda5cb41de62799
#: ../../../../1.8/docs/topics/cache.txt:991
msgid ""
"If you want to instead provide custom key validation logic for one of the "
"built-in backends, you can subclass it, override just the ``validate_key`` "
"method, and follow the instructions for `using a custom cache backend`_. For"
" instance, to do this for the ``locmem`` backend, put this code in a "
"module::"
msgstr ""

# 2369543836474547860ade294b23ddf6
#: ../../../../1.8/docs/topics/cache.txt:1003
msgid ""
"...and use the dotted Python path to this class in the :setting:`BACKEND "
"<CACHES-BACKEND>` portion of your :setting:`CACHES` setting."
msgstr ""

# 0bd7743be2a64b8db1c407865a30ded3
#: ../../../../1.8/docs/topics/cache.txt:1007
msgid "Downstream caches"
msgstr ""

# 4330e37e009546ebae5a52e4cd9e03e5
#: ../../../../1.8/docs/topics/cache.txt:1009
msgid ""
"So far, this document has focused on caching your *own* data. But another "
"type of caching is relevant to Web development, too: caching performed by "
"\"downstream\" caches. These are systems that cache pages for users even "
"before the request reaches your Web site."
msgstr ""

# 2910dd588de44a76a9d4c05a29610324
#: ../../../../1.8/docs/topics/cache.txt:1014
msgid "Here are a few examples of downstream caches:"
msgstr ""

# 32ac6154e04b4fafbd5a0efc19be8879
#: ../../../../1.8/docs/topics/cache.txt:1016
msgid ""
"Your ISP may cache certain pages, so if you requested a page from "
"http://example.com/, your ISP would send you the page without having to "
"access example.com directly. The maintainers of example.com have no "
"knowledge of this caching; the ISP sits between example.com and your Web "
"browser, handling all of the caching transparently."
msgstr ""

# 624d7215c04a4deb893c2d23ce8c1bd7
#: ../../../../1.8/docs/topics/cache.txt:1022
msgid ""
"Your Django Web site may sit behind a *proxy cache*, such as Squid Web Proxy"
" Cache (http://www.squid-cache.org/), that caches pages for performance. In "
"this case, each request first would be handled by the proxy, and it would be"
" passed to your application only if needed."
msgstr ""

# 589f4deed4024200b396cc212815bc74
#: ../../../../1.8/docs/topics/cache.txt:1027
msgid ""
"Your Web browser caches pages, too. If a Web page sends out the appropriate "
"headers, your browser will use the local cached copy for subsequent requests"
" to that page, without even contacting the Web page again to see whether it "
"has changed."
msgstr ""

# b422afafa0ec4e45b676799625ca0231
#: ../../../../1.8/docs/topics/cache.txt:1032
msgid ""
"Downstream caching is a nice efficiency boost, but there's a danger to it: "
"Many Web pages' contents differ based on authentication and a host of other "
"variables, and cache systems that blindly save pages based purely on URLs "
"could expose incorrect or sensitive data to subsequent visitors to those "
"pages."
msgstr ""

# 9f884d86ec8c4e5fb671a94a941bf01b
#: ../../../../1.8/docs/topics/cache.txt:1037
msgid ""
"For example, say you operate a Web email system, and the contents of the "
"\"inbox\" page obviously depend on which user is logged in. If an ISP "
"blindly cached your site, then the first user who logged in through that ISP"
" would have their user-specific inbox page cached for subsequent visitors to"
" the site. That's not cool."
msgstr ""

# a6b5a804eb5e45bda39fdf5a6fff2676
#: ../../../../1.8/docs/topics/cache.txt:1043
msgid ""
"Fortunately, HTTP provides a solution to this problem. A number of HTTP "
"headers exist to instruct downstream caches to differ their cache contents "
"depending on designated variables, and to tell caching mechanisms not to "
"cache particular pages. We'll look at some of these headers in the sections "
"that follow."
msgstr ""

# dc8b5ddce56c4c0e8d420202091d7004
#: ../../../../1.8/docs/topics/cache.txt:1051
msgid "Using Vary headers"
msgstr ""

# b50039694563441bb2731750b3e842f8
#: ../../../../1.8/docs/topics/cache.txt:1053
msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key. For example, if the contents "
"of a Web page depend on a user's language preference, the page is said to "
"\"vary on language.\""
msgstr ""

# af035cf875be4dbea34484e15e6e1c14
#: ../../../../1.8/docs/topics/cache.txt:1058
msgid ""
"By default, Django's cache system creates its cache keys using the requested"
" fully-qualified URL -- e.g., "
"``\"http://www.example.com/stories/2005/?order_by=author\"``. This means "
"every request to that URL will use the same cached version, regardless of "
"user-agent differences such as cookies or language preferences. However, if "
"this page produces different content based on some difference in request "
"headers -- such as a cookie, or a language, or a user-agent -- you'll need "
"to use the ``Vary`` header to tell caching mechanisms that the page output "
"depends on those things."
msgstr ""

# 0f1564a7a0de4d71a58ad9b1be47d85a
#: ../../../../1.8/docs/topics/cache.txt:1069
msgid ""
"Cache keys use the request's fully-qualified URL rather than just the path "
"and query string."
msgstr ""

# f149b3a6501f47ce81306d0d487bb865
#: ../../../../1.8/docs/topics/cache.txt:1072
msgid ""
"To do this in Django, use the convenient "
":func:`django.views.decorators.vary.vary_on_headers` view decorator, like "
"so::"
msgstr ""

# 30bb9c028932484b9d649cb3235d745a
#: ../../../../1.8/docs/topics/cache.txt:1081
msgid ""
"In this case, a caching mechanism (such as Django's own cache middleware) "
"will cache a separate version of the page for each unique user-agent."
msgstr ""

# e2b0ea29ccea4d028ba77603fd7bdb81
#: ../../../../1.8/docs/topics/cache.txt:1084
msgid ""
"The advantage to using the ``vary_on_headers`` decorator rather than "
"manually setting the ``Vary`` header (using something like "
"``response['Vary'] = 'user-agent'``) is that the decorator *adds* to the "
"``Vary`` header (which may already exist), rather than setting it from "
"scratch and potentially overriding anything that was already in there."
msgstr ""

# 1ff9d7d049b84b389754fd5d6a95353e
#: ../../../../1.8/docs/topics/cache.txt:1090
msgid "You can pass multiple headers to ``vary_on_headers()``::"
msgstr ""

# f7f0ee4859d24394a0e56190cc3bc496
#: ../../../../1.8/docs/topics/cache.txt:1096
msgid ""
"This tells downstream caches to vary on *both*, which means each combination"
" of user-agent and cookie will get its own cache value. For example, a "
"request with the user-agent ``Mozilla`` and the cookie value ``foo=bar`` "
"will be considered different from a request with the user-agent ``Mozilla`` "
"and the cookie value ``foo=ham``."
msgstr ""

# b0e520f9cc524876865b93fe33552bb8
#: ../../../../1.8/docs/topics/cache.txt:1102
msgid ""
"Because varying on cookie is so common, there's a "
":func:`django.views.decorators.vary.vary_on_cookie` decorator. These two "
"views are equivalent::"
msgstr ""

# ac6cbd8312794068968a0a4000b4d9ac
#: ../../../../1.8/docs/topics/cache.txt:1114
msgid ""
"The headers you pass to ``vary_on_headers`` are not case sensitive; "
"``\"User-Agent\"`` is the same thing as ``\"user-agent\"``."
msgstr ""

# d5eabb8945ae4e6daf938f8a226ee710
#: ../../../../1.8/docs/topics/cache.txt:1117
msgid ""
"You can also use a helper function, "
":func:`django.utils.cache.patch_vary_headers`, directly. This function sets,"
" or adds to, the ``Vary header``. For example::"
msgstr ""

# d8e406869b4a426884d5c65d997d95c6
#: ../../../../1.8/docs/topics/cache.txt:1128
msgid ""
"``patch_vary_headers`` takes an :class:`~django.http.HttpResponse` instance "
"as its first argument and a list/tuple of case-insensitive header names as "
"its second argument."
msgstr ""

# 653a1f577dc14c588656a7cac5458716
#: ../../../../1.8/docs/topics/cache.txt:1132
msgid "For more on Vary headers, see the `official Vary spec`_."
msgstr ""

# 2a62dfff64014f029c366cedaf70e3e3
#: ../../../../1.8/docs/topics/cache.txt:1137
msgid "Controlling cache: Using other headers"
msgstr ""

# 41c7cf21e5214c338f9c9dc9f6ee6539
#: ../../../../1.8/docs/topics/cache.txt:1139
msgid ""
"Other problems with caching are the privacy of data and the question of "
"where data should be stored in a cascade of caches."
msgstr ""

# 7f2946684bc9448ea875d8eb6c8fdff8
#: ../../../../1.8/docs/topics/cache.txt:1142
msgid ""
"A user usually faces two kinds of caches: their own browser cache (a private"
" cache) and their provider's cache (a public cache). A public cache is used "
"by multiple users and controlled by someone else. This poses problems with "
"sensitive data--you don't want, say, your bank account number stored in a "
"public cache. So Web applications need a way to tell caches which data is "
"private and which is public."
msgstr ""

# f998585a56a74dcea7b2b9a60c4cf8a0
#: ../../../../1.8/docs/topics/cache.txt:1149
msgid ""
"The solution is to indicate a page's cache should be \"private.\" To do this"
" in Django, use the ``cache_control`` view decorator. Example::"
msgstr ""

# 2ae25543407743cb89f015b540525af5
#: ../../../../1.8/docs/topics/cache.txt:1158
msgid ""
"This decorator takes care of sending out the appropriate HTTP header behind "
"the scenes."
msgstr ""

# 1a775ad4ed9f49c3a350895826fe63f6
#: ../../../../1.8/docs/topics/cache.txt:1161
msgid ""
"Note that the cache control settings \"private\" and \"public\" are mutually"
" exclusive. The decorator ensures that the \"public\" directive is removed "
"if \"private\" should be set (and vice versa). An example use of the two "
"directives would be a blog site that offers both private and public entries."
" Public entries may be cached on any shared cache. The following code uses "
":func:`django.utils.cache.patch_cache_control`, the manual way to modify the"
" cache control header (it is internally called by the ``cache_control`` "
"decorator)::"
msgstr ""

# 872208b225074372baa46791d2f5044d
#: ../../../../1.8/docs/topics/cache.txt:1184
msgid ""
"There are a few other ways to control cache parameters. For example, HTTP "
"allows applications to do the following:"
msgstr ""

# 303406fb411b4a83a638cc763887dd1b
#: ../../../../1.8/docs/topics/cache.txt:1187
msgid "Define the maximum time a page should be cached."
msgstr ""

# b4e8f5098e0f424aa202c27d430c5645
#: ../../../../1.8/docs/topics/cache.txt:1189
msgid ""
"Specify whether a cache should always check for newer versions, only "
"delivering the cached content when there are no changes. (Some caches might "
"deliver cached content even if the server page changed, simply because the "
"cache copy isn't yet expired.)"
msgstr ""

# 99dddf26af964645883898a7c5f31ff8
#: ../../../../1.8/docs/topics/cache.txt:1194
msgid ""
"In Django, use the ``cache_control`` view decorator to specify these cache "
"parameters. In this example, ``cache_control`` tells caches to revalidate "
"the cache on every access and to store cached versions for, at most, 3,600 "
"seconds::"
msgstr ""

# 044c7b85ff1e40edb2c134696ce90359
#: ../../../../1.8/docs/topics/cache.txt:1204
msgid ""
"Any valid ``Cache-Control`` HTTP directive is valid in ``cache_control()``. "
"Here's a full list:"
msgstr ""

# b457aff69e3c449f8e254babe228ca90
#: ../../../../1.8/docs/topics/cache.txt:1207
msgid "``public=True``"
msgstr ""

# 6b72c0f3424749f992f9f92a22749d7e
#: ../../../../1.8/docs/topics/cache.txt:1208
msgid "``private=True``"
msgstr ""

# 9c8ce101cb54426aae402b431528d678
#: ../../../../1.8/docs/topics/cache.txt:1209
msgid "``no_cache=True``"
msgstr ""

# 45a3c29a3e9042f89823d250e4d3da9d
#: ../../../../1.8/docs/topics/cache.txt:1210
msgid "``no_transform=True``"
msgstr ""

# 500567e079cd46fb835ea08d3ac22503
#: ../../../../1.8/docs/topics/cache.txt:1211
msgid "``must_revalidate=True``"
msgstr ""

# 36f08470c59949be9387323919c0ce5e
#: ../../../../1.8/docs/topics/cache.txt:1212
msgid "``proxy_revalidate=True``"
msgstr ""

# 5dfc950db383408fb2ffac51e4841f16
#: ../../../../1.8/docs/topics/cache.txt:1213
msgid "``max_age=num_seconds``"
msgstr ""

# 6feb04d3b05d4c989e3a7e13dfa27624
#: ../../../../1.8/docs/topics/cache.txt:1214
msgid "``s_maxage=num_seconds``"
msgstr ""

# 79ed6f41c40c41bb835fc71ea5653618
#: ../../../../1.8/docs/topics/cache.txt:1216
msgid ""
"For explanation of Cache-Control HTTP directives, see the `Cache-Control "
"spec`_."
msgstr ""

# 270e797321554ed9b3710fd64577d619
#: ../../../../1.8/docs/topics/cache.txt:1218
msgid ""
"(Note that the caching middleware already sets the cache header's max-age "
"with the value of the :setting:`CACHE_MIDDLEWARE_SECONDS` setting. If you "
"use a custom ``max_age`` in a ``cache_control`` decorator, the decorator "
"will take precedence, and the header values will be merged correctly.)"
msgstr ""

# 8326ab61f6f14c33b8e992f584be0070
#: ../../../../1.8/docs/topics/cache.txt:1223
msgid ""
"If you want to use headers to disable caching altogether, "
"``django.views.decorators.cache.never_cache`` is a view decorator that adds "
"headers to ensure the response won't be cached by browsers or other caches. "
"Example::"
msgstr ""

# be8a5222b3234e7e81300961d0a5d9f0
#: ../../../../1.8/docs/topics/cache.txt:1237
msgid "Order of MIDDLEWARE_CLASSES"
msgstr ""

# 628b7276b21c47e0ae2c5462b6853d59
#: ../../../../1.8/docs/topics/cache.txt:1239
msgid ""
"If you use caching middleware, it's important to put each half in the right "
"place within the :setting:`MIDDLEWARE_CLASSES` setting. That's because the "
"cache middleware needs to know which headers by which to vary the cache "
"storage. Middleware always adds something to the ``Vary`` response header "
"when it can."
msgstr ""

# 34912a81a7684ff4b05733c71a1e5946
#: ../../../../1.8/docs/topics/cache.txt:1244
msgid ""
"``UpdateCacheMiddleware`` runs during the response phase, where middleware "
"is run in reverse order, so an item at the top of the list runs *last* "
"during the response phase. Thus, you need to make sure that "
"``UpdateCacheMiddleware`` appears *before* any other middleware that might "
"add something to the ``Vary`` header. The following middleware modules do "
"so:"
msgstr ""

# af99a5abcf3f42d1b9418c9b3c4626d6
#: ../../../../1.8/docs/topics/cache.txt:1250
msgid "``SessionMiddleware`` adds ``Cookie``"
msgstr ""

# 8683b87812164a5db7e5b6bd463398ec
#: ../../../../1.8/docs/topics/cache.txt:1251
msgid "``GZipMiddleware`` adds ``Accept-Encoding``"
msgstr ""

# 79d09267488a4a818c847deeca4af008
#: ../../../../1.8/docs/topics/cache.txt:1252
msgid "``LocaleMiddleware`` adds ``Accept-Language``"
msgstr ""

# c4b387203c684cee8d66c85d0a42c7b1
#: ../../../../1.8/docs/topics/cache.txt:1254
msgid ""
"``FetchFromCacheMiddleware``, on the other hand, runs during the request "
"phase, where middleware is applied first-to-last, so an item at the top of "
"the list runs *first* during the request phase. The "
"``FetchFromCacheMiddleware`` also needs to run after other middleware "
"updates the ``Vary`` header, so ``FetchFromCacheMiddleware`` must be *after*"
" any item that does so."
msgstr ""

# d17a1b24429d4a138950ef4bed04b141
#: ../../../../1.8/docs/topics/checks.txt:3
msgid "System check framework"
msgstr "Framework de comprobación de sistema"

# 5605564aa32b4745a9043cd9261f46d2
#: ../../../../1.8/docs/topics/checks.txt:9
msgid ""
"The system check framework is a set of static checks for validating Django "
"projects. It detects common problems and provides hints for how to fix them."
" The framework is extensible so you can easily add your own checks."
msgstr "El framework de comprobación de sistema es un conjunto de comprobaciones estáticas para la validación de proyectos de Django. Detecta problemas comunes y proporciona pistas de cómo resolverlos. El framework es extensible y fácilmente puedes agregar tus propias comprobaciones."

# afce773581f04e5387e521e13e85e8ae
#: ../../../../1.8/docs/topics/checks.txt:13
msgid ""
"Checks can be triggered explicitly via the :djadmin:`check` command. Checks "
"are triggered implicitly before most commands, including "
":djadmin:`runserver` and :djadmin:`migrate`. For performance reasons, checks"
" are not run as part of the WSGI stack that is used in deployment. If you "
"need to run system checks on your deployment server, trigger them explicitly"
" using :djadmin:`check`."
msgstr ""

# fd4309044fb94e8186d550e47b6a3a61
#: ../../../../1.8/docs/topics/checks.txt:19
msgid ""
"Serious errors will prevent Django commands (such as :djadmin:`runserver`) "
"from running at all. Minor problems are reported to the console. If you have"
" inspected the cause of a warning and are happy to ignore it, you can hide "
"specific warnings using the :setting:`SILENCED_SYSTEM_CHECKS` setting in "
"your project settings file."
msgstr ""

# 0806e84aa8634bb6bb71cf194f02374d
#: ../../../../1.8/docs/topics/checks.txt:24
msgid ""
"A full list of all checks that can be raised by Django can be found in the "
":doc:`System check reference </ref/checks>`."
msgstr ""

# 243a807c15f84513bc9c4372779c8a87
#: ../../../../1.8/docs/topics/checks.txt:28
msgid "Writing your own checks"
msgstr ""

# a03271e3660d4ba394fce478ffc891fc
#: ../../../../1.8/docs/topics/checks.txt:30
msgid ""
"The framework is flexible and allows you to write functions that perform any"
" other kind of check you may require. The following is an example stub check"
" function::"
msgstr ""

# eeb88f291bdd4fb0b10c77a1a230a63e
#: ../../../../1.8/docs/topics/checks.txt:42
msgid ""
"The check function *must* accept an ``app_configs`` argument; this argument "
"is the list of applications that should be inspected. If None, the check "
"must be run on *all* installed apps in the project. The ``**kwargs`` "
"argument is required for future expansion."
msgstr ""

# 062d188f7ee4474fa900dd96aca7a79d
#: ../../../../1.8/docs/topics/checks.txt:48
msgid "Messages"
msgstr "Mensajes"

# 4a2d434a890c4874994b98022ebc28fa
#: ../../../../1.8/docs/topics/checks.txt:50
msgid ""
"The function must return a list of messages. If no problems are found as a "
"result of the check, the check function must return an empty list."
msgstr ""

# 0ce7c74e4f7343d3890a3fe8d8484471
#: ../../../../1.8/docs/topics/checks.txt:55
msgid ""
"The warnings and errors raised by the check method must be instances of "
":class:`~django.core.checks.CheckMessage`. An instance of "
":class:`~django.core.checks.CheckMessage` encapsulates a single reportable "
"error or warning. It also provides context and hints applicable to the "
"message, and a unique identifier that is used for filtering purposes."
msgstr ""

# 47c56d022a9a4968bdbce77c6567f731
#: ../../../../1.8/docs/topics/checks.txt:61
msgid ""
"The concept is very similar to messages from the :doc:`message framework "
"</ref/contrib/messages>` or the :doc:`logging framework </topics/logging>`. "
"Messages are tagged with a ``level`` indicating the severity of the message."
msgstr ""

# 78422c089e174d528704cf276d68904d
#: ../../../../1.8/docs/topics/checks.txt:66
msgid "Constructor arguments are:"
msgstr ""

# 36ab5a2e5ea549baa590bc547bd00586
#: ../../../../1.8/docs/topics/checks.txt:74
msgid "``level``"
msgstr ""

# cbe62a62239647a19e397950812cff0a
#: ../../../../1.8/docs/topics/checks.txt:69
msgid ""
"The severity of the message. Use one of the predefined values: ``DEBUG``, "
"``INFO``, ``WARNING``, ``ERROR``, ``CRITICAL``. If the level is greater or "
"equal to ``ERROR``, then Django will prevent management commands from "
"executing. Messages with level lower than ``ERROR`` (i.e. warnings) are "
"reported to the console, but can be silenced."
msgstr ""

# c25f2f1b1ac64d3191af340479e10f36
#: ../../../../1.8/docs/topics/checks.txt:78
msgid "``msg``"
msgstr ""

# 915e992cb9b147eaaf2929b2966893ff
#: ../../../../1.8/docs/topics/checks.txt:77
msgid ""
"A short (less than 80 characters) string describing the problem. The string "
"should *not* contain newlines."
msgstr ""

# e7d47b6fc77e4bcb897882da35f6fc90
#: ../../../../1.8/docs/topics/checks.txt:83
msgid "``hint``"
msgstr ""

# 66b2ffe6bf664239820bbd345666e886
#: ../../../../1.8/docs/topics/checks.txt:81
msgid ""
"A single-line string providing a hint for fixing the problem. If no hint can"
" be provided, or the hint is self-evident from the error message, the hint "
"can be omitted, or a value of ``None`` can be used."
msgstr ""

# 0c7985c9a26a44a1bf7bae3ed06e4d56
#: ../../../../1.8/docs/topics/checks.txt:90
msgid "``obj``"
msgstr ""

# 950cf5f756af4e339877707458d86816
#: ../../../../1.8/docs/topics/checks.txt:86
msgid ""
"Optional. An object providing context for the message (for example, the "
"model where the problem was discovered). The object should be a model, "
"field, or manager or any other object that defines ``__str__`` method (on "
"Python 2 you need to define ``__unicode__`` method). The method is used "
"while reporting all messages and its result precedes the message."
msgstr ""

# ecab4d51c0da415e89238ceeca370b60
#: ../../../../1.8/docs/topics/checks.txt:97
msgid "``id``"
msgstr ""

# b69039b25a68458d923e6dd498914ec1
#: ../../../../1.8/docs/topics/checks.txt:93
msgid ""
"Optional string. A unique identifier for the issue. Identifiers should "
"follow the pattern ``applabel.X001``, where ``X`` is one of the letters "
"``CEWID``, indicating the message severity (``C`` for criticals, ``E`` for "
"errors and so). The number can be allocated by the application, but should "
"be unique within that application."
msgstr ""

# e8e7ba1df8aa489a8d1f2889ec2ebf32
#: ../../../../1.8/docs/topics/checks.txt:99
msgid ""
"There are also shortcuts to make creating messages with common levels "
"easier. When using these methods you can omit the ``level`` argument because"
" it is implied by the class name."
msgstr ""

# 32aa642742b94f25b613696e00758f82
#: ../../../../1.8/docs/topics/checks.txt:109
msgid "Messages are comparable. That allows you to easily write tests::"
msgstr ""

# d19f8ccf57c146c79f777e26a2da30d1
#: ../../../../1.8/docs/topics/checks.txt:124
msgid "Registering and labeling checks"
msgstr ""

# 01bbb0e5087e49008bf17cbe8dc63cf2
#: ../../../../1.8/docs/topics/checks.txt:126
msgid ""
"Lastly, your check function must be registered explicitly with system check "
"registry."
msgstr ""

# 48329f9afeeb477e9da3686f3a3a618e
#: ../../../../1.8/docs/topics/checks.txt:131
msgid ""
"You can pass as many tags to ``register`` as you want in order to label your"
" check. Tagging checks is useful since it allows you to run only a certain "
"group of checks. For example, to register a compatibility check, you would "
"make the following call::"
msgstr ""

# 73a5238eccf840c89d36addc546d2e0f
#: ../../../../1.8/docs/topics/checks.txt:145
msgid ""
"You can register \"deployment checks\" that are only relevant to a "
"production settings file like this::"
msgstr ""

# 9ea46eab6c314536901b3878bb4e21ff
#: ../../../../1.8/docs/topics/checks.txt:152
msgid ""
"These checks will only be run if the :djadminopt:`--deploy` option is passed"
" to the :djadmin:`check` command."
msgstr ""

# 981dd60515dc4a2cbd43725e14673166
#: ../../../../1.8/docs/topics/checks.txt:155
msgid ""
"You can also use ``register`` as a function rather than a decorator by "
"passing a callable object (usually a function) as the first argument to "
"``register``."
msgstr ""

# 01119c4952674676bcf0c35388aa4838
#: ../../../../1.8/docs/topics/checks.txt:159
msgid "The code below is equivalent to the code above::"
msgstr ""

# 8d21dea3b7a641c39332f548faf50a82
#: ../../../../1.8/docs/topics/checks.txt:167
msgid "The ability to use register as a function was added."
msgstr ""

# 02cbcbc6ace641ecb7eb2f8c9b780473
#: ../../../../1.8/docs/topics/checks.txt:172
msgid "Field, Model, and Manager checks"
msgstr ""

# 256555ad74a84480840f203c8a6ec224
#: ../../../../1.8/docs/topics/checks.txt:174
msgid ""
"In some cases, you won't need to register your check function -- you can "
"piggyback on an existing registration."
msgstr ""

# eb60f7db4aba4c99bc51a77c3b28325e
#: ../../../../1.8/docs/topics/checks.txt:177
msgid ""
"Fields, models, and model managers all implement a ``check()`` method that "
"is already registered with the check framework. If you want to add extra "
"checks, you can extend the implementation on the base class, perform any "
"extra checks you need, and append any messages to those generated by the "
"base class. It's recommended that you delegate each check to separate "
"methods."
msgstr ""

# f9da9f44e9cc4d20a082fb468c2abb84
#: ../../../../1.8/docs/topics/checks.txt:183
msgid ""
"Consider an example where you are implementing a custom field named "
"``RangedIntegerField``. This field adds ``min`` and ``max`` arguments to the"
" constructor of ``IntegerField``. You may want to add a check to ensure that"
" users provide a min value that is less than or equal to the max value. The "
"following code snippet shows how you can implement this check::"
msgstr ""

# e842360ca46449e8ab78d329a9221738
#: ../../../../1.8/docs/topics/checks.txt:223
msgid ""
"If you wanted to add checks to a model manager, you would take the same "
"approach on your subclass of :class:`~django.db.models.Manager`."
msgstr ""

# a58c60c804084d419652526142b9593c
#: ../../../../1.8/docs/topics/checks.txt:226
msgid ""
"If you want to add a check to a model class, the approach is *almost* the "
"same: the only difference is that the check is a classmethod, not an "
"instance method::"
msgstr ""

# c92dc9a6ddb6478d92eb3e8b4a4b4b91
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:5
msgid "Built-in Class-based generic views"
msgstr ""

# 86740082d177422e951516343b166138
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:7
msgid ""
"Writing Web applications can be monotonous, because we repeat certain "
"patterns again and again. Django tries to take away some of that monotony at"
" the model and template layers, but Web developers also experience this "
"boredom at the view level."
msgstr ""

# 92924658b03546efb0797638e0e257a8
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:12
msgid ""
"Django's *generic views* were developed to ease that pain. They take certain"
" common idioms and patterns found in view development and abstract them so "
"that you can quickly write common views of data without having to write too "
"much code."
msgstr ""

# 7b4c9be281eb405cb92f5187f62e005b
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:17
msgid ""
"We can recognize certain common tasks, like displaying a list of objects, "
"and write code that displays a list of *any* object. Then the model in "
"question can be passed as an extra argument to the URLconf."
msgstr ""

# 09923d506d894cd1b46d2fe3df38207d
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:21
msgid "Django ships with generic views to do the following:"
msgstr ""

# 4aa213619984449798a893237a8f56f3
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:23
msgid ""
"Display list and detail pages for a single object. If we were creating an "
"application to manage conferences then a ``TalkListView`` and a "
"``RegisteredUserListView`` would be examples of list views. A single talk "
"page is an example of what we call a \"detail\" view."
msgstr ""

# d92b6c257fa64351bb2ebd86e337946f
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:28
msgid ""
"Present date-based objects in year/month/day archive pages, associated "
"detail, and \"latest\" pages."
msgstr ""

# c596169ced0c4fda9edbb9d768875b5b
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:31
msgid ""
"Allow users to create, update, and delete objects -- with or without "
"authorization."
msgstr ""

# 77c6e754b6314609a6445a4bbbba39be
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:34
msgid ""
"Taken together, these views provide easy interfaces to perform the most "
"common tasks developers encounter."
msgstr ""

# efa927ee3e4b4b9a8b36e9ceea936ae6
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:39
msgid "Extending generic views"
msgstr ""

# 419ddb5b6f2c4f1a9a94cc5c592217ac
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:41
msgid ""
"There's no question that using generic views can speed up development "
"substantially. In most projects, however, there comes a moment when the "
"generic views no longer suffice. Indeed, the most common question asked by "
"new Django developers is how to make generic views handle a wider array of "
"situations."
msgstr ""

# 3d58953fe2684a0b8daa9801cf5fbb63
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:47
msgid ""
"This is one of the reasons generic views were redesigned for the 1.3 release"
" - previously, they were just view functions with a bewildering array of "
"options; now, rather than passing in a large amount of configuration in the "
"URLconf, the recommended way to extend generic views is to subclass them, "
"and override their attributes or methods."
msgstr ""

# b6d32a4b0f4f4174a00a49b54d3cbbe2
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:53
msgid ""
"That said, generic views will have a limit. If you find you're struggling to"
" implement your view as a subclass of a generic view, then you may find it "
"more effective to write just the code you need, using your own class-based "
"or functional views."
msgstr ""

# 681efb24f8d84be3a9b3da39e68b0e5f
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:58
msgid ""
"More examples of generic views are available in some third party "
"applications, or you could write your own as needed."
msgstr ""

# b11d74de226542ef84ca0c599f58a7af
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:63
msgid "Generic views of objects"
msgstr ""

# 1b588f4190464186aa4918d203b656ad
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:65
msgid ""
":class:`~django.views.generic.base.TemplateView` certainly is useful, but "
"Django's generic views really shine when it comes to presenting views of "
"your database content. Because it's such a common task, Django comes with a "
"handful of built-in generic views that make generating list and detail views"
" of objects incredibly easy."
msgstr ""

# 7f0052c9c0d348b9842988d21b321b61
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:71
msgid ""
"Let's start by looking at some examples of showing a list of objects or an "
"individual object."
msgstr ""

# 720b1bb449ae4220893383c81b085a41
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:76
msgid "We'll be using these models::"
msgstr ""

# bbbf3fff433a47a2b776a594d9d0e9eb
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:110
msgid "Now we need to define a view::"
msgstr ""

# 569a8f0c61434d3ba649c303dd767e9e
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:119
msgid "Finally hook that view into your urls::"
msgstr ""

# 36cb75a39a634f2d826d7021ffa880f9
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:129
msgid ""
"That's all the Python code we need to write. We still need to write a "
"template, however. We could explicitly tell the view which template to use "
"by adding a ``template_name`` attribute to the view, but in the absence of "
"an explicit template Django will infer one from the object's name. In this "
"case, the inferred template will be ``\"books/publisher_list.html\"`` -- the"
" \"books\" part comes from the name of the app that defines the model, while"
" the \"publisher\" bit is just the lowercased version of the model's name."
msgstr ""

# d0de36120d0a46958dd9091008b9f4a3
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:139
msgid ""
"Thus, when (for example) the ``APP_DIRS`` option of a ``DjangoTemplates`` "
"backend is set to True in :setting:`TEMPLATES`, a template location could "
"be: /path/to/project/books/templates/books/publisher_list.html"
msgstr ""

# be179dbdc0b64662bbe9af5154350942
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:143
msgid ""
"This template will be rendered against a context containing a variable "
"called ``object_list`` that contains all the publisher objects. A very "
"simple template might look like the following:"
msgstr ""

# 517990acab9a4a44876b08718ccd42e4
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:160
msgid ""
"That's really all there is to it. All the cool features of generic views "
"come from changing the attributes set on the generic view. The :doc:`generic"
" views reference</ref/class-based-views/index>` documents all the generic "
"views and their options in detail; the rest of this document will consider "
"some of the common ways you might customize and extend generic views."
msgstr ""

# 6081628d8cd34b07acdee336e4c01168
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:168
msgid "Making \"friendly\" template contexts"
msgstr ""

# 03d47df2aa17468090de6867037f4446
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:170
msgid ""
"You might have noticed that our sample publisher list template stores all "
"the publishers in a variable named ``object_list``. While this works just "
"fine, it isn't all that \"friendly\" to template authors: they have to "
"\"just know\" that they're dealing with publishers here."
msgstr ""

# d3e4cc17cd894c878f649e2225536545
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:175
msgid ""
"Well, if you're dealing with a model object, this is already done for you. "
"When you are dealing with an object or queryset, Django is able to populate "
"the context using the lower cased version of the model class' name. This is "
"provided in addition to the default ``object_list`` entry, but contains "
"exactly the same data, i.e. ``publisher_list``."
msgstr ""

# 5f7b5471049e46fda5f47156012eea3b
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:181
msgid ""
"If this still isn't a good match, you can manually set the name of the "
"context variable. The ``context_object_name`` attribute on a generic view "
"specifies the context variable to use::"
msgstr ""

# ec85785226b3429ca1002931dc1f54c9
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:193
msgid ""
"Providing a useful ``context_object_name`` is always a good idea. Your "
"coworkers who design templates will thank you."
msgstr ""

# 2e4a916f3b37418e8d317331fb7a5958
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:200
msgid "Adding extra context"
msgstr ""

# 7fac0ab680f64764b0b5791fca3ddc34
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:202
msgid ""
"Often you simply need to present some extra information beyond that provided"
" by the generic view. For example, think of showing a list of all the books "
"on each publisher detail page. The "
":class:`~django.views.generic.detail.DetailView` generic view provides the "
"publisher to the context, but how do we get additional information in that "
"template?"
msgstr ""

# d82de11300e44970a06ba7c34542073d
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:209
msgid ""
"The answer is to subclass :class:`~django.views.generic.detail.DetailView` "
"and provide your own implementation of the ``get_context_data`` method. The "
"default implementation simply adds the object being displayed to the "
"template, but you can override it to send more::"
msgstr ""

# 72ececcceaf244d892b74e001d250a5a
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:230
msgid ""
"Generally, ``get_context_data`` will merge the context data of all parent "
"classes with those of the current class. To preserve this behavior in your "
"own classes where you want to alter the context, you should be sure to call "
"``get_context_data`` on the super class. When no two classes try to define "
"the same key, this will give the expected results. However if any class "
"attempts to override a key after parent classes have set it (after the call "
"to super), any children of that class will also need to explicitly set it "
"after super if they want to be sure to override all parents. If you're "
"having trouble, review the method resolution order of your view."
msgstr ""

# 6b2c57e4a9ce4746aba19fb818272896
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:243
msgid "Viewing subsets of objects"
msgstr ""

# a2991d70f2bf40c9984656d672a975f4
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:245
msgid ""
"Now let's take a closer look at the ``model`` argument we've been using all "
"along. The ``model`` argument, which specifies the database model that the "
"view will operate upon, is available on all the generic views that operate "
"on a single object or a collection of objects. However, the ``model`` "
"argument is not the only way to specify the objects that the view will "
"operate upon -- you can also specify the list of objects using the "
"``queryset`` argument::"
msgstr ""

# 2f53b1386abb44f98ded65d399c7a44f
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:261
msgid ""
"Specifying ``model = Publisher`` is really just shorthand for saying "
"``queryset = Publisher.objects.all()``. However, by using ``queryset`` to "
"define a filtered list of objects you can be more specific about the objects"
" that will be visible in the view (see :doc:`/topics/db/queries` for more "
"information about :class:`~django.db.models.query.QuerySet` objects, and see"
" the :doc:`class-based views reference </ref/class-based-views/index>` for "
"the complete details)."
msgstr ""

# 1a10aba63d99437581d8bf1316c0d8d7
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:269
msgid ""
"To pick a simple example, we might want to order a list of books by "
"publication date, with the most recent first::"
msgstr ""

# 4abb0c203ed44b98b12a17c109d2521e
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:279
msgid ""
"That's a pretty simple example, but it illustrates the idea nicely. Of "
"course, you'll usually want to do more than just reorder objects. If you "
"want to present a list of books by a particular publisher, you can use the "
"same technique::"
msgstr ""

# 18a36dc041cf4cc2aed17a7666102f7e
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:293
msgid ""
"Notice that along with a filtered ``queryset``, we're also using a custom "
"template name. If we didn't, the generic view would use the same template as"
" the \"vanilla\" object list, which might not be what we want."
msgstr ""

# 356793bd99614bfb974eb9b91e2f7a93
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:297
msgid ""
"Also notice that this isn't a very elegant way of doing publisher-specific "
"books. If we want to add another publisher page, we'd need another handful "
"of lines in the URLconf, and more than a few publishers would get "
"unreasonable. We'll deal with this problem in the next section."
msgstr ""

# 2d6b6f77fde14b13a0c539dd9e9f28e3
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:304
msgid ""
"If you get a 404 when requesting ``/books/acme/``, check to ensure you "
"actually have a Publisher with the name 'ACME Publishing'.  Generic views "
"have an ``allow_empty`` parameter for this case.  See the :doc:`class-based-"
"views reference</ref/class-based-views/index>` for more details."
msgstr ""

# 2a235797d97d45f98c3cee800b8cd15e
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:312
msgid "Dynamic filtering"
msgstr ""

# 9283421d1867453babd6d3c2c679be2e
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:314
msgid ""
"Another common need is to filter down the objects given in a list page by "
"some key in the URL. Earlier we hard-coded the publisher's name in the "
"URLconf, but what if we wanted to write a view that displayed all the books "
"by some arbitrary publisher?"
msgstr ""

# d7d1ae4e71474d2b8802afbade78aec0
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:319
msgid ""
"Handily, the ``ListView`` has a "
":meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset` method "
"we can override. Previously, it has just been returning the value of the "
"``queryset`` attribute, but now we can add more logic."
msgstr ""

# d3ffcd421e87481183698bd8b3a7e33b
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:324
msgid ""
"The key part to making this work is that when class-based views are called, "
"various useful things are stored on ``self``; as well as the request "
"(``self.request``) this includes the positional (``self.args``) and name-"
"based (``self.kwargs``) arguments captured according to the URLconf."
msgstr ""

# 6b2b8860ff0a4327a7e32c2551e653c0
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:329
msgid "Here, we have a URLconf with a single captured group::"
msgstr ""

# 858f7df2109e45359d8a24453f07be68
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:339
msgid "Next, we'll write the ``PublisherBookList`` view itself::"
msgstr ""

# 812de5fed5e545fd81265dcb2728f818
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:354
msgid ""
"As you can see, it's quite easy to add more logic to the queryset selection;"
" if we wanted, we could use ``self.request.user`` to filter using the "
"current user, or other more complex logic."
msgstr ""

# 6c090477fdf14de08e24525ee0f1816e
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:358
msgid ""
"We can also add the publisher into the context at the same time, so we can "
"use it in the template::"
msgstr ""

# 7ec510cbfe144f5da707547198080a55
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:373
msgid "Performing extra work"
msgstr ""

# b17f547be413421b88dc16e4ba125c15
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:375
msgid ""
"The last common pattern we'll look at involves doing some extra work before "
"or after calling the generic view."
msgstr ""

# 3da602322c614739866c30bb032cde76
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:378
msgid ""
"Imagine we had a ``last_accessed`` field on our ``Author`` model that we "
"were using to keep track of the last time anybody looked at that author::"
msgstr ""

# 6eb94d250dad4568b7df1557bedde1c4
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:391
msgid ""
"The generic ``DetailView`` class, of course, wouldn't know anything about "
"this field, but once again we could easily write a custom view to keep that "
"field updated."
msgstr ""

# 2657f1826b4f49b8abe967f1fb363782
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:395
msgid ""
"First, we'd need to add an author detail bit in the URLconf to point to a "
"custom view::"
msgstr ""

# f3ef66f8b4034b11b8289296e24e881e
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:406
msgid ""
"Then we'd write our new view -- ``get_object`` is the method that retrieves "
"the object -- so we simply override it and wrap the call::"
msgstr ""

# 577dafedea4b4a8190e74c4c43488d8b
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:428
msgid ""
"The URLconf here uses the named group ``pk`` - this name is the default name"
" that ``DetailView`` uses to find the value of the primary key used to "
"filter the queryset."
msgstr ""

# d9be277bb4a847f098f36d519c073553
#: ../../../../1.8/docs/topics/class-based-views/generic-display.txt:432
msgid ""
"If you want to call the group something else, you can set ``pk_url_kwarg`` "
"on the view. More details can be found in the reference for "
":class:`~django.views.generic.detail.DetailView`"
msgstr ""

# 098522f1c7ae44e7ba40d6860245280a
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:2
msgid "Form handling with class-based views"
msgstr ""

# 410882013cbb46db9361e5e499c8ad97
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:4
msgid "Form processing generally has 3 paths:"
msgstr ""

# 0a8888919ece4ab1aaa040e639d2a5b2
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:6
msgid "Initial GET (blank or prepopulated form)"
msgstr ""

# dcf130bfd1a94845a83f135f0a67cbde
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:7
msgid "POST with invalid data (typically redisplay form with errors)"
msgstr ""

# 335191e85ff2484d8fa7f11d8036a75b
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:8
msgid "POST with valid data (process the data and typically redirect)"
msgstr ""

# e96358dddda2402cb82a9d8faeb41e47
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:10
msgid ""
"Implementing this yourself often results in a lot of repeated boilerplate "
"code (see :ref:`Using a form in a view<using-a-form-in-a-view>`). To help "
"avoid this, Django provides a collection of generic class-based views for "
"form processing."
msgstr ""

# 3267417e51cd45e7af9409d08732e3cc
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:16
msgid "Basic Forms"
msgstr ""

# fc17603f8fb444268c09303c61a3dfe2
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:18
msgid "Given a simple contact form:"
msgstr ""

# 21b010ad22af48e0ba8253f3c1b99640
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:33
msgid "The view can be constructed using a ``FormView``:"
msgstr ""

# 04541024177d4d39a5ad981eda073e3e
# 16b436b6de914bc1a7e150cb8d80ab78
# 7336ef1a9aa64f6d875a0d30bd30fca5
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:52
#: ../../../../1.8/docs/topics/http/urls.txt:86
#: ../../../../1.8/docs/topics/i18n/translation.txt:1917
msgid "Notes:"
msgstr ""

# ac4e929ff00d44c1a7cb236bb8fb64c8
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:54
msgid ""
"FormView inherits :class:`~django.views.generic.base.TemplateResponseMixin` "
"so :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"can be used here."
msgstr ""

# 37b8c2147a3a47df955b4694e00ab873
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:58
msgid ""
"The default implementation for "
":meth:`~django.views.generic.edit.FormMixin.form_valid` simply redirects to "
"the :attr:`~django.views.generic.edit.FormMixin.success_url`."
msgstr ""

# db7de8c4b4934f70bb3f43f436aadbdf
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:63
msgid "Model Forms"
msgstr ""

# deb3df7587cc48d2b037abbcd25b1d68
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:65
msgid ""
"Generic views really shine when working with models.  These generic views "
"will automatically create a :class:`~django.forms.ModelForm`, so long as "
"they can work out which model class to use:"
msgstr ""

# bc7cbc2e55934994891201ad34804604
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:69
msgid ""
"If the :attr:`~django.views.generic.edit.ModelFormMixin.model` attribute is "
"given, that model class will be used."
msgstr ""

# d701cb829fa44601a333de5e224bb1bb
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:71
msgid ""
"If :meth:`~django.views.generic.detail.SingleObjectMixin.get_object()` "
"returns an object, the class of that object will be used."
msgstr ""

# 347f480048274f8a80c47fba65f1fbc6
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:73
msgid ""
"If a :attr:`~django.views.generic.detail.SingleObjectMixin.queryset` is "
"given, the model for that queryset will be used."
msgstr ""

# 5a9e574c5a3b4f2994e7a8b0ba7fbb74
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:76
msgid ""
"Model form views provide a "
":meth:`~django.views.generic.edit.ModelFormMixin.form_valid()` "
"implementation that saves the model automatically.  You can override this if"
" you have any special requirements; see below for examples."
msgstr ""

# a1ebf60e13c64977bdf5daed32be88dc
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:81
msgid ""
"You don't even need to provide a ``success_url`` for "
":class:`~django.views.generic.edit.CreateView` or "
":class:`~django.views.generic.edit.UpdateView` - they will use "
":meth:`~django.db.models.Model.get_absolute_url()` on the model object if "
"available."
msgstr ""

# 7e67477045cc42698886a825716727a0
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:86
msgid ""
"If you want to use a custom :class:`~django.forms.ModelForm` (for instance "
"to add extra validation) simply set "
":attr:`~django.views.generic.edit.FormMixin.form_class` on your view."
msgstr ""

# 2435909583df4c7bac00022865325f74
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:91
msgid ""
"When specifying a custom form class, you must still specify the model, even "
"though the :attr:`~django.views.generic.edit.FormMixin.form_class` may be a "
":class:`~django.forms.ModelForm`."
msgstr ""

# f1dc374743ca424cae8ad6fdab2774f3
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:95
msgid ""
"First we need to add :meth:`~django.db.models.Model.get_absolute_url()` to "
"our ``Author`` class:"
msgstr ""

# 412d33c8bc9144658b1d24d73fa3c22c
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:110
msgid ""
"Then we can use :class:`CreateView` and friends to do the actual work. "
"Notice how we're just configuring the generic class-based views here; we "
"don't have to write any logic ourselves:"
msgstr ""

# 54288453ef1a4dcc9aa06cad35a55fc8
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:134
msgid ""
"We have to use :func:`~django.core.urlresolvers.reverse_lazy` here, not just"
" ``reverse`` as the urls are not loaded when the file is imported."
msgstr ""

# cbf023fdc6144aa68e070be683c8cbc0
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:137
msgid ""
"The ``fields`` attribute works the same way as the ``fields`` attribute on "
"the inner ``Meta`` class on :class:`~django.forms.ModelForm`. Unless you "
"define the form class in another way, the attribute is required and the view"
" will raise an :exc:`~django.core.exceptions.ImproperlyConfigured` exception"
" if it's not."
msgstr ""

# 033726595660463aac5007c3b3f15db4
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:142
msgid ""
"If you specify both the "
":attr:`~django.views.generic.edit.ModelFormMixin.fields` and "
":attr:`~django.views.generic.edit.FormMixin.form_class` attributes, an "
":exc:`~django.core.exceptions.ImproperlyConfigured` exception will be "
"raised."
msgstr ""

# 53b57db5336c4009b936d322f7325f17
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:148
msgid ""
"Omitting the ``fields`` attribute was previously allowed and resulted in a "
"form with all of the model's fields."
msgstr ""

# 64b46a70ac224910bacf2dca55950062
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:153
msgid ""
"Previously if both ``fields`` and ``form_class`` were specified, ``fields`` "
"was silently ignored."
msgstr ""

# 43e44794dc204c979e23ef6347e179b9
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:156
msgid "Finally, we hook these new views into the URLconf:"
msgstr ""

# 03296094730a473fb7f569f746aca836
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:173
msgid ""
"These views inherit "
":class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin` "
"which uses "
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix`"
" to construct the "
":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` based"
" on the model."
msgstr ""

# 5d92c6d76820459ab9545cf582160924
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:181
msgid "In this example:"
msgstr ""

# 4f42c385c94e4a9b9123a4fb5670638a
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:183
msgid ""
":class:`CreateView` and :class:`UpdateView` use ``myapp/author_form.html``"
msgstr ""

# 907601d53fa24f3db4101dee89e6d3cf
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:184
msgid ":class:`DeleteView` uses ``myapp/author_confirm_delete.html``"
msgstr ""

# b6929ea62df44124a00d60012766f96f
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:186
msgid ""
"If you wish to have separate templates for :class:`CreateView` and "
":class:`UpdateView`, you can set either "
":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` or "
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix`"
" on your view class."
msgstr ""

# 86666b080667458ea329c81d4e4cef7a
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:193
msgid "Models and request.user"
msgstr ""

# d534af2c476e4b2dbde72b6ba50c2f43
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:195
msgid ""
"To track the user that created an object using a :class:`CreateView`, you "
"can use a custom :class:`~django.forms.ModelForm` to do this. First, add the"
" foreign key relation to the model:"
msgstr ""

# 7ed6f7a51d5945cc935097c6917c115a
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:211
msgid ""
"In the view, ensure that you don't include ``created_by`` in the list of "
"fields to edit, and override "
":meth:`~django.views.generic.edit.ModelFormMixin.form_valid()` to add the "
"user:"
msgstr ""

# 49eb7cee3d414798bb52325ee3ae1bb3
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:229
msgid ""
"Note that you'll need to :ref:`decorate this view<decorating-class-based-"
"views>` using :func:`~django.contrib.auth.decorators.login_required`, or "
"alternatively handle unauthorized users in the "
":meth:`~django.views.generic.edit.ModelFormMixin.form_valid()`."
msgstr ""

# abe3b0442cde405aa3dc8bf5903a5faf
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:236
msgid "AJAX example"
msgstr ""

# 41cb9b0f06a0460bb42b7e1f390e75a4
#: ../../../../1.8/docs/topics/class-based-views/generic-editing.txt:238
msgid ""
"Here is a simple example showing how you might go about implementing a form "
"that works for AJAX requests as well as 'normal' form POSTs::"
msgstr ""

# d8ef750413774b05ba250cc81fb095ca
#: ../../../../1.8/docs/topics/class-based-views/index.txt:3
msgid "Class-based views"
msgstr ""

# fa1ad4ee70584bcc90b8e6f0919e5933
#: ../../../../1.8/docs/topics/class-based-views/index.txt:5
msgid ""
"A view is a callable which takes a request and returns a response. This can "
"be more than just a function, and Django provides an example of some classes"
" which can be used as views. These allow you to structure your views and "
"reuse code by harnessing inheritance and mixins. There are also some generic"
" views for simple tasks which we'll get to later, but you may want to design"
" your own structure of reusable views which suits your use case. For full "
"details, see the :doc:`class-based views reference documentation</ref/class-"
"based-views/index>`."
msgstr ""

# 5ed024111f7b42b888177356ec35b4c2
#: ../../../../1.8/docs/topics/class-based-views/index.txt:23
msgid "Basic examples"
msgstr ""

# 0c512e00402d4cce91ce17d98665daf9
#: ../../../../1.8/docs/topics/class-based-views/index.txt:25
msgid ""
"Django provides base view classes which will suit a wide range of "
"applications. All views inherit from the "
":class:`~django.views.generic.base.View` class, which handles linking the "
"view in to the URLs, HTTP method dispatching and other simple features. "
":class:`~django.views.generic.base.RedirectView` is for a simple HTTP "
"redirect, and :class:`~django.views.generic.base.TemplateView` extends the "
"base class to make it also render a template."
msgstr ""

# 1fbef691e92447af95906c981140b9ca
#: ../../../../1.8/docs/topics/class-based-views/index.txt:34
msgid "Simple usage in your URLconf"
msgstr ""

# e76b81c75d384315a64fdd324d19fddd
#: ../../../../1.8/docs/topics/class-based-views/index.txt:36
msgid ""
"The simplest way to use generic views is to create them directly in your "
"URLconf. If you're only changing a few simple attributes on a class-based "
"view, you can simply pass them into the "
":meth:`~django.views.generic.base.View.as_view` method call itself::"
msgstr ""

# 304801d76a3e4cc69ea4504488436593
#: ../../../../1.8/docs/topics/class-based-views/index.txt:48
msgid ""
"Any arguments passed to :meth:`~django.views.generic.base.View.as_view` will"
" override attributes set on the class. In this example, we set "
"``template_name`` on the ``TemplateView``. A similar overriding pattern can "
"be used for the ``url`` attribute on "
":class:`~django.views.generic.base.RedirectView`."
msgstr ""

# 8e4f60831a28418396994eeb140b84fe
#: ../../../../1.8/docs/topics/class-based-views/index.txt:55
msgid "Subclassing generic views"
msgstr ""

# ab4f724b138e424daea1bf0d42fad428
#: ../../../../1.8/docs/topics/class-based-views/index.txt:57
msgid ""
"The second, more powerful way to use generic views is to inherit from an "
"existing view and override attributes (such as the ``template_name``) or "
"methods (such as ``get_context_data``) in your subclass to provide new "
"values or methods. Consider, for example, a view that just displays one "
"template, ``about.html``. Django has a generic view to do this - "
":class:`~django.views.generic.base.TemplateView` - so we can just subclass "
"it, and override the template name::"
msgstr ""

# e6c55ca86d1345208557403d38351336
#: ../../../../1.8/docs/topics/class-based-views/index.txt:71
msgid ""
"Then we just need to add this new view into our URLconf. "
":class:`~django.views.generic.base.TemplateView` is a class, not a function,"
" so we point the URL to the :meth:`~django.views.generic.base.View.as_view` "
"class method instead, which provides a function-like entry to class-based "
"views::"
msgstr ""

# 0501c7c39bae425fbcebc9379117e67c
#: ../../../../1.8/docs/topics/class-based-views/index.txt:86
msgid ""
"For more information on how to use the built in generic views, consult the "
"next topic on :doc:`generic class based views</topics/class-based-views"
"/generic-display>`."
msgstr ""

# c9c15adc4db94ba9ade73ad4b854253a
#: ../../../../1.8/docs/topics/class-based-views/index.txt:92
msgid "Supporting other HTTP methods"
msgstr ""

# d615869b32c04c48afbd27b80c2a9f58
#: ../../../../1.8/docs/topics/class-based-views/index.txt:94
msgid ""
"Suppose somebody wants to access our book library over HTTP using the views "
"as an API. The API client would connect every now and then and download book"
" data for the books published since last visit. But if no new books appeared"
" since then, it is a waste of CPU time and bandwidth to fetch the books from"
" the database, render a full response and send it to the client. It might be"
" preferable to ask the API when the most recent book was published."
msgstr ""

# d4def2b05081416bbbc544b152640b41
#: ../../../../1.8/docs/topics/class-based-views/index.txt:101
msgid "We map the URL to book list view in the URLconf::"
msgstr ""

# 563dd257626b4fa58f7a225adfd465b5
#: ../../../../1.8/docs/topics/class-based-views/index.txt:110
msgid "And the view::"
msgstr ""

# 2efb6dbf6d0f4b6da3efff35437b6718
#: ../../../../1.8/docs/topics/class-based-views/index.txt:126
msgid ""
"If the view is accessed from a ``GET`` request, a plain-and-simple object "
"list is returned in the response (using ``book_list.html`` template). But if"
" the client issues a ``HEAD`` request, the response has an empty body and "
"the ``Last-Modified`` header indicates when the most recent book was "
"published. Based on this information, the client may or may not download the"
" full object list."
msgstr ""

# fd56a828b4ed41aa81a6f7ff315d87dd
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:3
msgid "Introduction to Class-based views"
msgstr ""

# 15a55be28c5249458e1166b53ca811c3
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:5
msgid ""
"Class-based views provide an alternative way to implement views as Python "
"objects instead of functions. They do not replace function-based views, but "
"have certain differences and advantages when compared to function-based "
"views:"
msgstr ""

# f9a80c762870490f925dfb0175eeee0c
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:9
msgid ""
"Organization of code related to specific HTTP methods (``GET``, ``POST``, "
"etc) can be addressed by separate methods instead of conditional branching."
msgstr ""

# 428d67f73e7547b1848048910ab0eb6f
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:12
msgid ""
"Object oriented techniques such as mixins (multiple inheritance) can be used"
" to factor code into reusable components."
msgstr ""

# b6d3236c09f44a53a85609e80c698aad
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:16
msgid ""
"The relationship and history of generic views, class-based views, and class-"
"based generic views"
msgstr ""

# 1d461d39bd4f4e1abbfe8e3a4da3af18
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:18
msgid ""
"In the beginning there was only the view function contract, Django passed "
"your function an :class:`~django.http.HttpRequest` and expected back an "
":class:`~django.http.HttpResponse`. This was the extent of what Django "
"provided."
msgstr ""

# 474de771c77946ce86f8fe407f77eb18
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:22
msgid ""
"Early on it was recognized that there were common idioms and patterns found "
"in view development. Function-based generic views were introduced to "
"abstract these patterns and ease view development for the common cases."
msgstr ""

# bf0c492e8b164bc19397add5934be92d
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:26
msgid ""
"The problem with function-based generic views is that while they covered the"
" simple cases well, there was no way to extend or customize them beyond some"
" simple configuration options, limiting their usefulness in many real-world "
"applications."
msgstr ""

# deb4b0eda1a7495085429f0764533e63
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:31
msgid ""
"Class-based generic views were created with the same objective as function-"
"based generic views, to make view development easier. However, the way the "
"solution is implemented, through the use of mixins, provides a toolkit that "
"results in class-based generic views being more extensible and flexible than"
" their function-based counterparts."
msgstr ""

# de5eaada6cd74d60a0bd914e58717c0a
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:37
msgid ""
"If you have tried function based generic views in the past and found them "
"lacking, you should not think of class-based generic views as simply a "
"class-based equivalent, but rather as a fresh approach to solving the "
"original problems that generic views were meant to solve."
msgstr ""

# c675d7648dd04af3bb3012569f24ddca
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:42
msgid ""
"The toolkit of base classes and mixins that Django uses to build class-based"
" generic views are built for maximum flexibility, and as such have many "
"hooks in the form of default method implementations and attributes that you "
"are unlikely to be concerned with in the simplest use cases. For example, "
"instead of limiting you to a class based attribute for ``form_class``, the "
"implementation uses a ``get_form`` method, which calls a ``get_form_class`` "
"method, which in its default implementation just returns the ``form_class`` "
"attribute of the class. This gives you several options for specifying what "
"form to use, from a simple attribute, to a fully dynamic, callable hook. "
"These options seem to add hollow complexity for simple situations, but "
"without them, more advanced designs would be limited."
msgstr ""

# f3eb9e5d1af646e3b0ede30b49f01732
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:55
msgid "Using class-based views"
msgstr ""

# dc9f5bd6552d4851884d97c09a2cc39c
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:57
msgid ""
"At its core, a class-based view allows you to respond to different HTTP "
"request methods with different class instance methods, instead of with "
"conditionally branching code inside a single view function."
msgstr ""

# 372d00082b144ec2bad2f74c21ebea79
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:61
msgid ""
"So where the code to handle HTTP ``GET`` in a view function would look "
"something like::"
msgstr ""

# a36956af70f848678268f142eb03201d
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:71
msgid "In a class-based view, this would become::"
msgstr ""

# e4d645ec1ffc46608a39288f45a11e5b
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:81
msgid ""
"Because Django's URL resolver expects to send the request and associated "
"arguments to a callable function, not a class, class-based views have an "
":meth:`~django.views.generic.base.View.as_view` class method which serves as"
" the callable entry point to your class. The ``as_view`` entry point creates"
" an instance of your class and calls its "
":meth:`~django.views.generic.base.View.dispatch` method. ``dispatch`` looks "
"at the request to determine whether it is a ``GET``, ``POST``, etc, and "
"relays the request to a matching method if one is defined, or raises "
":class:`~django.http.HttpResponseNotAllowed` if not::"
msgstr ""

# 69ce20d6bcb94c378ae78c7e0b32beba
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:100
msgid ""
"It is worth noting that what your method returns is identical to what you "
"return from a function-based view, namely some form of "
":class:`~django.http.HttpResponse`. This means that :doc:`http shortcuts "
"</topics/http/shortcuts>` or "
":class:`~django.template.response.TemplateResponse` objects are valid to use"
" inside a class-based view."
msgstr ""

# eaaae4a1a044435a89185c9d573b8817
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:107
msgid ""
"While a minimal class-based view does not require any class attributes to "
"perform its job, class attributes are useful in many class-based designs, "
"and there are two ways to configure or set class attributes."
msgstr ""

# 8556a9c0a5be4d9fb5e6bf2e27cb6170
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:111
msgid ""
"The first is the standard Python way of subclassing and overriding "
"attributes and methods in the subclass. So that if your parent class had an "
"attribute ``greeting`` like this::"
msgstr ""

# 3f13725d50f74b1cb1a7dc3df300978c
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:124
msgid "You can override that in a subclass::"
msgstr ""

# b53af43c6d894b3e9859151628440272
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:129
msgid ""
"Another option is to configure class attributes as keyword arguments to the "
":meth:`~django.views.generic.base.View.as_view` call in the URLconf::"
msgstr ""

# c629a9ed4cf54fec870ce42ba8518369
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:138
msgid ""
"While your class is instantiated for each request dispatched to it, class "
"attributes set through the :meth:`~django.views.generic.base.View.as_view` "
"entry point are configured only once at the time your URLs are imported."
msgstr ""

# 54b0f1ab80524418ad1eccbca7d59fa9
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:144
msgid "Using mixins"
msgstr ""

# ae13e691be7b4e45a49bd95b3b60c0c4
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:146
msgid ""
"Mixins are a form of multiple inheritance where behaviors and attributes of "
"multiple parent classes can be combined."
msgstr ""

# 61a9ef4093f84a139dd91da1639c08bd
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:149
msgid ""
"For example, in the generic class-based views there is a mixin called "
":class:`~django.views.generic.base.TemplateResponseMixin` whose primary "
"purpose is to define the method "
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`."
" When combined with the behavior of the "
":class:`~django.views.generic.base.View` base class, the result is a "
":class:`~django.views.generic.base.TemplateView` class that will dispatch "
"requests to the appropriate matching methods (a behavior defined in the "
"``View`` base class), and that has a "
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response` "
"method that uses a "
":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"attribute to return a :class:`~django.template.response.TemplateResponse` "
"object (a behavior defined in the ``TemplateResponseMixin``)."
msgstr ""

# 62588a524f024c1eade8b7647801cdb5
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:163
msgid ""
"Mixins are an excellent way of reusing code across multiple classes, but "
"they come with some cost. The more your code is scattered among mixins, the "
"harder it will be to read a child class and know what exactly it is doing, "
"and the harder it will be to know which methods from which mixins to "
"override if you are subclassing something that has a deep inheritance tree."
msgstr ""

# 87cf07acd5114b7bb41d7cc1291bd2e1
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:169
msgid ""
"Note also that you can only inherit from one generic view - that is, only "
"one parent class may inherit from :class:`~django.views.generic.base.View` "
"and the rest (if any) should be mixins. Trying to inherit from more than one"
" class that inherits from ``View`` - for example, trying to use a form at "
"the top of a list and combining "
":class:`~django.views.generic.edit.ProcessFormView` and "
":class:`~django.views.generic.list.ListView` - won't work as expected."
msgstr ""

# e0e696bbfe5d4f58981eec0af0aad819
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:179
msgid "Mixins that wrap ``as_view()``"
msgstr ""

# 7cc394ed82a7455db0a5d2caefde585d
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:181
msgid ""
"One way to apply common behavior to many classes is to write a mixin that "
"wraps the :meth:`~django.views.generic.base.View.as_view()` method."
msgstr ""

# f6eecd73c0f44d7d8ea4c0e909c7c21f
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:184
msgid ""
"For example, if you have many generic views that should be decorated with "
":func:`~django.contrib.auth.decorators.login_required` you could implement a"
" mixin like this::"
msgstr ""

# 51b9ad45f3fb4b9f8dbaec02a1aea3d2
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:201
msgid "Handling forms with class-based views"
msgstr ""

# 13758cc6ea654333ae526237e91d4519
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:203
msgid ""
"A basic function-based view that handles forms may look something like "
"this::"
msgstr ""

# 424e74cd2a6c4826a5ff5d72fde7da4a
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:221
msgid "A similar class-based view might look like::"
msgstr ""

# 2081517dc16a4b2c9fc310623d795c33
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:246
msgid ""
"This is a very simple case, but you can see that you would then have the "
"option of customizing this view by overriding any of the class attributes, "
"e.g. ``form_class``, via URLconf configuration, or subclassing and "
"overriding one or more of the methods (or both!)."
msgstr ""

# 8aabd63900b345dc9efa2d151386b864
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:252
msgid "Decorating class-based views"
msgstr ""

# 696b199ae2dc4aa8bcfba312949844c6
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:254
msgid ""
"The extension of class-based views isn't limited to using mixins. You can "
"also use decorators. Since class-based views aren't functions, decorating "
"them works differently depending on if you're using ``as_view()`` or "
"creating a subclass."
msgstr ""

# b501f7d98e12473aa2d70d78c147f651
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:259
msgid "Decorating in URLconf"
msgstr ""

# 32f1cd8031394a0480a9c0a3bd350b4e
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:261
msgid ""
"The simplest way of decorating class-based views is to decorate the result "
"of the :meth:`~django.views.generic.base.View.as_view` method. The easiest "
"place to do this is in the URLconf where you deploy your view::"
msgstr ""

# 62ef650644b244e7ae93794e2b3e13f9
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:275
msgid ""
"This approach applies the decorator on a per-instance basis. If you want "
"every instance of a view to be decorated, you need to take a different "
"approach."
msgstr ""

# 56d7f9a772a3474283174d58231da697
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:282
msgid "Decorating the class"
msgstr ""

# 1842a60a7da0430f877bbf42f45f9e04
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:284
msgid ""
"To decorate every instance of a class-based view, you need to decorate the "
"class definition itself. To do this you apply the decorator to the "
":meth:`~django.views.generic.base.View.dispatch` method of the class."
msgstr ""

# 7b2bac3c38db467e8bf35b885ef42c53
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:288
msgid ""
"A method on a class isn't quite the same as a standalone function, so you "
"can't just apply a function decorator to the method -- you need to transform"
" it into a method decorator first. The ``method_decorator`` decorator "
"transforms a function decorator into a method decorator so that it can be "
"used on an instance method. For example::"
msgstr ""

# 7d74c18324a641329e08d675a9eeece1
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:305
msgid ""
"In this example, every instance of ``ProtectedView`` will have login "
"protection."
msgstr ""

# d88fe31d3a374fdfb631f1dc0c670637
#: ../../../../1.8/docs/topics/class-based-views/intro.txt:310
msgid ""
"``method_decorator`` passes ``*args`` and ``**kwargs`` as parameters to the "
"decorated method on the class. If your method does not accept a compatible "
"set of parameters it will raise a ``TypeError`` exception."
msgstr ""

# 8a38082b35fb4d3d98e94b8861dd0ab3
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:3
msgid "Using mixins with class-based views"
msgstr ""

# a31da31653514d27ad3538a57152f1b7
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:7
msgid ""
"This is an advanced topic. A working knowledge of :doc:`Django's class-based"
" views<index>` is advised before exploring these techniques."
msgstr ""

# 0a4cd00b492f490ba2611dcb585cf7e0
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:11
msgid ""
"Django's built-in class-based views provide a lot of functionality, but some"
" of it you may want to use separately. For instance, you may want to write a"
" view that renders a template to make the HTTP response, but you can't use "
":class:`~django.views.generic.base.TemplateView`; perhaps you need to render"
" a template only on ``POST``, with ``GET`` doing something else entirely. "
"While you could use :class:`~django.template.response.TemplateResponse` "
"directly, this will likely result in duplicate code."
msgstr ""

# 2c4f5cf82b4a407e913d86078c79a974
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:21
msgid ""
"For this reason, Django also provides a number of mixins that provide more "
"discrete functionality. Template rendering, for instance, is encapsulated in"
" the :class:`~django.views.generic.base.TemplateResponseMixin`. The Django "
"reference documentation contains :doc:`full documentation of all the "
"mixins</ref/class-based-views/mixins>`."
msgstr ""

# f3166364ea054196baa7a197010db4b4
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:29
msgid "Context and template responses"
msgstr ""

# 9a302e91734d45179144ffbf65082bcb
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:31
msgid ""
"Two central mixins are provided that help in providing a consistent "
"interface to working with templates in class-based views."
msgstr ""

# 77f4f234360f43838c1cb8d973acbee0
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:56
msgid ":class:`~django.views.generic.base.TemplateResponseMixin`"
msgstr ""

# 15e6badf0f694c0c92fdac928e778136
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:35
msgid ""
"Every built in view which returns a "
":class:`~django.template.response.TemplateResponse` will call the "
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response()`"
" method that ``TemplateResponseMixin`` provides. Most of the time this will "
"be called for you (for instance, it is called by the ``get()`` method "
"implemented by both :class:`~django.views.generic.base.TemplateView` and "
":class:`~django.views.generic.detail.DetailView`); similarly, it's unlikely "
"that you'll need to override it, although if you want your response to "
"return something not rendered via a Django template then you'll want to do "
"it. For an example of this, see the :ref:`JSONResponseMixin example "
"<jsonresponsemixin-example>`."
msgstr ""

# 417078579f7041f3870fd2ae79a90231
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:47
msgid ""
"``render_to_response()`` itself calls "
":meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names`,"
" which by default will just look up "
":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` on "
"the class-based view; two other mixins "
"(:class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin` and"
" :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`) "
"override this to provide more flexible defaults when dealing with actual "
"objects."
msgstr ""

# 17a7f5c489ff48e8b66373863e6df855
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:65
msgid ":class:`~django.views.generic.base.ContextMixin`"
msgstr ""

# d13ec11626644d84a5076f15a903211a
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:59
msgid ""
"Every built in view which needs context data, such as for rendering a "
"template (including ``TemplateResponseMixin`` above), should call "
":meth:`~django.views.generic.base.ContextMixin.get_context_data()` passing "
"any data they want to ensure is in there as keyword arguments. "
"``get_context_data()`` returns a dictionary; in ``ContextMixin`` it simply "
"returns its keyword arguments, but it is common to override this to add more"
" members to the dictionary."
msgstr ""

# 3ecdf68155224ef9b4274acf75b62924
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:68
msgid "Building up Django's generic class-based views"
msgstr ""

# b6255cc016fe478ebd79421ba152e554
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:70
msgid ""
"Let's look at how two of Django's generic class-based views are built out of"
" mixins providing discrete functionality. We'll consider "
":class:`~django.views.generic.detail.DetailView`, which renders a \"detail\""
" view of an object, and :class:`~django.views.generic.list.ListView`, which "
"will render a list of objects, typically from a queryset, and optionally "
"paginate them. This will introduce us to four mixins which between them "
"provide useful functionality when working with either a single Django "
"object, or multiple objects."
msgstr ""

# ca1be50d24014dcbbd9766563a1f285d
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:80
msgid ""
"There are also mixins involved in the generic edit views "
"(:class:`~django.views.generic.edit.FormView`, and the model-specific views "
":class:`~django.views.generic.edit.CreateView`, "
":class:`~django.views.generic.edit.UpdateView` and "
":class:`~django.views.generic.edit.DeleteView`), and in the date-based "
"generic views. These are covered in the :doc:`mixin reference "
"documentation</ref/class-based-views/mixins>`."
msgstr ""

# 3290d055ef8f479d9b40342a44f71c6b
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:90
msgid "DetailView: working with a single Django object"
msgstr ""

# 937cd565f9264a8b852d79adb445fab4
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:92
msgid ""
"To show the detail of an object, we basically need to do two things: we need"
" to look up the object and then we need to make a "
":class:`~django.template.response.TemplateResponse` with a suitable "
"template, and that object as context."
msgstr ""

# 70a12c05d5d94e0d898840dd0ab46f7b
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:97
msgid ""
"To get the object, :class:`~django.views.generic.detail.DetailView` relies "
"on :class:`~django.views.generic.detail.SingleObjectMixin`, which provides a"
" :meth:`~django.views.generic.detail.SingleObjectMixin.get_object` method "
"that figures out the object based on the URL of the request (it looks for "
"``pk`` and ``slug`` keyword arguments as declared in the URLConf, and looks "
"the object up either from the "
":attr:`~django.views.generic.detail.SingleObjectMixin.model` attribute on "
"the view, or the "
":attr:`~django.views.generic.detail.SingleObjectMixin.queryset` attribute if"
" that's provided). ``SingleObjectMixin`` also overrides "
":meth:`~django.views.generic.base.ContextMixin.get_context_data()`, which is"
" used across all Django's built in class-based views to supply context data "
"for template renders."
msgstr ""

# b69ba9bfb6b848fba1585718430a12bf
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:112
msgid ""
"To then make a :class:`~django.template.response.TemplateResponse`, "
":class:`DetailView` uses "
":class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`, "
"which extends :class:`~django.views.generic.base.TemplateResponseMixin`, "
"overriding "
":meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names()`"
" as discussed above. It actually provides a fairly sophisticated set of "
"options, but the main one that most people are going to use is "
"``<app_label>/<model_name>_detail.html``. The ``_detail`` part can be "
"changed by setting "
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix`"
" on a subclass to something else. (For instance, the :doc:`generic edit "
"views<generic-editing>` use ``_form`` for create and update views, and "
"``_confirm_delete`` for delete views.)"
msgstr ""

# dec0f7dd6fe040cab2836601b85c4e4d
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:128
msgid "ListView: working with many Django objects"
msgstr ""

# a3eb047793e04d48bd74c49a81a12db7
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:130
msgid ""
"Lists of objects follow roughly the same pattern: we need a (possibly "
"paginated) list of objects, typically a "
":class:`~django.db.models.query.QuerySet`, and then we need to make a "
":class:`~django.template.response.TemplateResponse` with a suitable template"
" using that list of objects."
msgstr ""

# 06faf02e8b334c6b82a0481410fed2ea
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:136
msgid ""
"To get the objects, :class:`~django.views.generic.list.ListView` uses "
":class:`~django.views.generic.list.MultipleObjectMixin`, which provides both"
" :meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset` and "
":meth:`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`. "
"Unlike with :class:`~django.views.generic.detail.SingleObjectMixin`, there's"
" no need to key off parts of the URL to figure out the queryset to work "
"with, so the default just uses the "
":attr:`~django.views.generic.list.MultipleObjectMixin.queryset` or "
":attr:`~django.views.generic.list.MultipleObjectMixin.model` attribute on "
"the view class. A common reason to override "
":meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset` here "
"would be to dynamically vary the objects, such as depending on the current "
"user or to exclude posts in the future for a blog."
msgstr ""

# 5a2c10331bce455ab38d45f5d2547812
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:152
msgid ""
":class:`~django.views.generic.list.MultipleObjectMixin` also overrides "
":meth:`~django.views.generic.base.ContextMixin.get_context_data()` to "
"include appropriate context variables for pagination (providing dummies if "
"pagination is disabled). It relies on ``object_list`` being passed in as a "
"keyword argument, which :class:`ListView` arranges for it."
msgstr ""

# 9663f5496c034de292b6c04503332c6c
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:159
msgid ""
"To make a :class:`~django.template.response.TemplateResponse`, "
":class:`ListView` then uses "
":class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`; as "
"with :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`"
" above, this overrides ``get_template_names()`` to provide :meth:`a range of"
" options <django.views.generic.list.MultipleObjectTemplateResponseMixin>`, "
"with the most commonly-used being ``<app_label>/<model_name>_list.html``, "
"with the ``_list`` part again being taken from the "
":attr:`~django.views.generic.list.MultipleObjectTemplateResponseMixin.template_name_suffix`"
" attribute. (The date based generic views use suffixes such as ``_archive``,"
" ``_archive_year`` and so on to use different templates for the various "
"specialized date-based list views.)"
msgstr ""

# a2fae3d55a1a4e40bcedf4fce538f2a2
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:174
msgid "Using Django's class-based view mixins"
msgstr ""

# 9afc0d2d8a2746519968dcfbbdae1e8d
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:176
msgid ""
"Now we've seen how Django's generic class-based views use the provided "
"mixins, let's look at other ways we can combine them. Of course we're still "
"going to be combining them with either built-in class-based views, or other "
"generic class-based views, but there are a range of rarer problems you can "
"solve than are provided for by Django out of the box."
msgstr ""

# 08a89696c878450abdd8cdd0659319f4
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:185
msgid ""
"Not all mixins can be used together, and not all generic class based views "
"can be used with all other mixins. Here we present a few examples that do "
"work; if you want to bring together other functionality then you'll have to "
"consider interactions between attributes and methods that overlap between "
"the different classes you're using, and how `method resolution order`_ will "
"affect which versions of the methods will be called in what order."
msgstr ""

# 4be82995549f4c9fa7f76287b2ad836d
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:193
msgid ""
"The reference documentation for Django's :doc:`class-based views</ref/class-"
"based-views/index>` and :doc:`class-based view mixins</ref/class-based-"
"views/mixins>` will help you in understanding which attributes and methods "
"are likely to cause conflict between different classes and mixins."
msgstr ""

# 2e75b337442c4624b78c5d7b35c0cbeb
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:199
msgid ""
"If in doubt, it's often better to back off and base your work on "
":class:`View` or :class:`TemplateView`, perhaps with "
":class:`~django.views.generic.detail.SingleObjectMixin` and "
":class:`~django.views.generic.list.MultipleObjectMixin`. Although you will "
"probably end up writing more code, it is more likely to be clearly "
"understandable to someone else coming to it later, and with fewer "
"interactions to worry about you will save yourself some thinking. (Of "
"course, you can always dip into Django's implementation of the generic class"
" based views for inspiration on how to tackle problems.)"
msgstr ""

# 94ac4060b2d64e7a943c5dbf7b67eab0
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:213
msgid "Using SingleObjectMixin with View"
msgstr ""

# 165272fce3714fe6be30aece1238503d
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:215
msgid ""
"If we want to write a simple class-based view that responds only to "
"``POST``, we'll subclass :class:`~django.views.generic.base.View` and write "
"a ``post()`` method in the subclass. However if we want our processing to "
"work on a particular object, identified from the URL, we'll want the "
"functionality provided by "
":class:`~django.views.generic.detail.SingleObjectMixin`."
msgstr ""

# 5943b7483c1346659ce80ee2a0102108
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:222
msgid ""
"We'll demonstrate this with the ``Author`` model we used in the "
":doc:`generic class-based views introduction<generic-display>`."
msgstr ""

# b85b0164e90646d4ad977394bdd75919
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:248
msgid ""
"In practice you'd probably want to record the interest in a key-value store "
"rather than in a relational database, so we've left that bit out. The only "
"bit of the view that needs to worry about using "
":class:`~django.views.generic.detail.SingleObjectMixin` is where we want to "
"look up the author we're interested in, which it just does with a simple "
"call to ``self.get_object()``. Everything else is taken care of for us by "
"the mixin."
msgstr ""

# 9cb7136511a44bc78c80373e94225485
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:256
msgid "We can hook this into our URLs easily enough:"
msgstr ""

# 7c1b084cc0ad423ab05d95f134dc249f
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:269
msgid ""
"Note the ``pk`` named group, which "
":meth:`~django.views.generic.detail.SingleObjectMixin.get_object` uses to "
"look up the ``Author`` instance. You could also use a slug, or any of the "
"other features of :class:`~django.views.generic.detail.SingleObjectMixin`."
msgstr ""

# 9b74d32ae7e64f20b8d57773d3e1ac56
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:276
msgid "Using SingleObjectMixin with ListView"
msgstr ""

# 09011608f83649d79ffeac495c10fdf2
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:278
msgid ""
":class:`~django.views.generic.list.ListView` provides built-in pagination, "
"but you might want to paginate a list of objects that are all linked (by a "
"foreign key) to another object. In our publishing example, you might want to"
" paginate through all the books by a particular publisher."
msgstr ""

# cac25db2f2ce49028f3709e59e3bf4f3
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:284
msgid ""
"One way to do this is to combine :class:`ListView` with "
":class:`~django.views.generic.detail.SingleObjectMixin`, so that the "
"queryset for the paginated list of books can hang off the publisher found as"
" the single object. In order to do this, we need to have two different "
"querysets:"
msgstr ""

# 47871eec05b54f8cb89066d409071539
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:292
msgid ""
"``Book`` queryset for use by :class:`~django.views.generic.list.ListView`"
msgstr ""

# b52e52daabf644b28555dd229c60e3f3
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:290
msgid ""
"Since we have access to the ``Publisher`` whose books we want to list, we "
"simply override ``get_queryset()`` and use the ``Publisher``’s :ref:`reverse"
" foreign key manager<backwards-related-objects>`."
msgstr ""

# 10c109331c594a47938e8dad918730bb
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:300
msgid ""
"``Publisher`` queryset for use in "
":meth:`~django.views.generic.detail.SingleObjectMixin.get_object()`"
msgstr ""

# db066e37240e40a5870670072c2ffe36
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:295
msgid ""
"We'll rely on the default implementation of ``get_object()`` to fetch the "
"correct ``Publisher`` object. However, we need to explicitly pass a "
"``queryset`` argument because otherwise the default implementation of "
"``get_object()`` would call ``get_queryset()`` which we have overridden to "
"return ``Book`` objects instead of ``Publisher`` ones."
msgstr ""

# cc662ad4f81641f990d55abb5b4539e5
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:304
msgid ""
"We have to think carefully about ``get_context_data()``. Since both "
":class:`~django.views.generic.detail.SingleObjectMixin` and "
":class:`ListView` will put things in the context data under the value of "
"``context_object_name`` if it's set, we'll instead explicitly ensure the "
"``Publisher`` is in the context data. :class:`ListView` will add in the "
"suitable ``page_obj`` and ``paginator`` for us providing we remember to call"
" ``super()``."
msgstr ""

# 16a7effbd13c47508403712cd211169f
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:313
msgid "Now we can write a new ``PublisherDetail``::"
msgstr ""

# e459d8c54ed74b5f95a3a24a1d4220bc
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:335
msgid ""
"Notice how we set ``self.object`` within ``get()`` so we can use it again "
"later in ``get_context_data()`` and ``get_queryset()``. If you don't set "
"``template_name``, the template will default to the normal :class:`ListView`"
" choice, which in this case would be ``\"books/book_list.html\"`` because "
"it's a list of books; :class:`ListView` knows nothing about "
":class:`~django.views.generic.detail.SingleObjectMixin`, so it doesn't have "
"any clue this view is anything to do with a ``Publisher``."
msgstr ""

# 7d5b116fa9b44dce825ccfd6912b599c
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:344
msgid ""
"The ``paginate_by`` is deliberately small in the example so you don't have "
"to create lots of books to see the pagination working! Here's the template "
"you'd want to use:"
msgstr ""

# 261b79679b314e5082061867ed4e0cbc
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:379
msgid "Avoid anything more complex"
msgstr ""

# e2d125f7698349c9a062ae51d40a4ec4
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:381
msgid ""
"Generally you can use "
":class:`~django.views.generic.base.TemplateResponseMixin` and "
":class:`~django.views.generic.detail.SingleObjectMixin` when you need their "
"functionality. As shown above, with a bit of care you can even combine "
"``SingleObjectMixin`` with :class:`~django.views.generic.list.ListView`. "
"However things get increasingly complex as you try to do so, and a good rule"
" of thumb is:"
msgstr ""

# 8097eb038020439987448a5acbd6f0d0
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:391
msgid ""
"Each of your views should use only mixins or views from one of the groups of"
" generic class-based views: :doc:`detail, list<generic-display>`, "
":doc:`editing<generic-editing>` and date. For example it's fine to combine "
":class:`TemplateView` (built in view) with "
":class:`~django.views.generic.list.MultipleObjectMixin` (generic list), but "
"you're likely to have problems combining ``SingleObjectMixin`` (generic "
"detail) with ``MultipleObjectMixin`` (generic list)."
msgstr ""

# 3fa096f85e19416cb02057e1354b2cf0
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:400
msgid ""
"To show what happens when you try to get more sophisticated, we show an "
"example that sacrifices readability and maintainability when there is a "
"simpler solution. First, let's look at a naive attempt to combine "
":class:`~django.views.generic.detail.DetailView` with "
":class:`~django.views.generic.edit.FormMixin` to enable use to ``POST`` a "
"Django :class:`~django.forms.Form` to the same URL as we're displaying an "
"object using :class:`DetailView`."
msgstr ""

# 32dd4c2de84648d2b5045a7b0c9e442d
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:409
msgid "Using FormMixin with DetailView"
msgstr ""

# 9d470749ac5642079b56799849ffd7a6
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:411
msgid ""
"Think back to our earlier example of using :class:`View` and "
":class:`~django.views.generic.detail.SingleObjectMixin` together. We were "
"recording a user's interest in a particular author; say now that we want to "
"let them leave a message saying why they like them. Again, let's assume "
"we're not going to store this in a relational database but instead in "
"something more esoteric that we won't worry about here."
msgstr ""

# f05fdb5514004087ba80eef27f288c42
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:418
msgid ""
"At this point it's natural to reach for a :class:`~django.forms.Form` to "
"encapsulate the information sent from the user's browser to Django. Say also"
" that we're heavily invested in `REST`_, so we want to use the same URL for "
"displaying the author as for capturing the message from the user. Let's "
"rewrite our ``AuthorDetailView`` to do that."
msgstr ""

# 70aa05a5506b41089544481c029cb8d7
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:426
msgid ""
"We'll keep the ``GET`` handling from :class:`DetailView`, although we'll "
"have to add a :class:`~django.forms.Form` into the context data so we can "
"render it in the template. We'll also want to pull in form processing from "
":class:`~django.views.generic.edit.FormMixin`, and write a bit of code so "
"that on ``POST`` the form gets called appropriately."
msgstr ""

# 428234f450934434ade485fbce42f2d1
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:434
msgid ""
"We use :class:`~django.views.generic.edit.FormMixin` and implement "
"``post()`` ourselves rather than try to mix :class:`DetailView` with "
":class:`FormView` (which provides a suitable ``post()`` already) because "
"both of the views implement ``get()``, and things would get much more "
"confusing."
msgstr ""

# 6e70293b6e694e2a80407a7ce834b12d
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:440
msgid "Our new ``AuthorDetail`` looks like this::"
msgstr ""

# 0fd36d76786b4be6bf270c06c5fe5597
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:484
msgid ""
"``get_success_url()`` is just providing somewhere to redirect to, which gets"
" used in the default implementation of ``form_valid()``. We have to provide "
"our own ``post()`` as noted earlier, and override ``get_context_data()`` to "
"make the :class:`~django.forms.Form` available in the context data."
msgstr ""

# 756203f5cbde48e794caa3e20b7237af
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:491
msgid "A better solution"
msgstr ""

# d32f715471d8488fb6503cb1097b18a4
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:493
msgid ""
"It should be obvious that the number of subtle interactions between "
":class:`~django.views.generic.edit.FormMixin` and :class:`DetailView` is "
"already testing our ability to manage things. It's unlikely you'd want to "
"write this kind of class yourself."
msgstr ""

# d5d2c5c1f9eb47a1922633f2cf43c428
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:498
msgid ""
"In this case, it would be fairly easy to just write the ``post()`` method "
"yourself, keeping :class:`DetailView` as the only generic functionality, "
"although writing :class:`~django.forms.Form` handling code involves a lot of"
" duplication."
msgstr ""

# 901b7711cfa14a0bad2ac380a5c9aa22
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:503
msgid ""
"Alternatively, it would still be easier than the above approach to have a "
"separate view for processing the form, which could use "
":class:`~django.views.generic.edit.FormView` distinct from "
":class:`DetailView` without concerns."
msgstr ""

# d0ba658609d940b5ae0d703a5def2cd3
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:509
msgid "An alternative better solution"
msgstr ""

# fc3c397d05c84514aed19be83de79f28
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:511
msgid ""
"What we're really trying to do here is to use two different class based "
"views from the same URL. So why not do just that? We have a very clear "
"division here: ``GET`` requests should get the :class:`DetailView` (with the"
" :class:`~django.forms.Form` added to the context data), and ``POST`` "
"requests should get the :class:`FormView`. Let's set up those views first."
msgstr ""

# 1ed8b53e70854087958d2cdea822e6f3
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:518
msgid ""
"The ``AuthorDisplay`` view is almost the same as :ref:`when we first "
"introduced AuthorDetail<generic-views-extra-work>`; we have to write our own"
" ``get_context_data()`` to make the ``AuthorInterestForm`` available to the "
"template. We'll skip the ``get_object()`` override from before for clarity::"
msgstr ""

# 7b8929fadf5c486dbeaa55523819defd
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:539
msgid ""
"Then the ``AuthorInterest`` is a simple :class:`FormView`, but we have to "
"bring in :class:`~django.views.generic.detail.SingleObjectMixin` so we can "
"find the author we're talking about, and we have to remember to set "
"``template_name`` to ensure that form errors will render the same template "
"as ``AuthorDisplay`` is using on ``GET``::"
msgstr ""

# f17b5769407b4bf385c4eec45c04ea84
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:564
msgid ""
"Finally we bring this together in a new ``AuthorDetail`` view. We already "
"know that calling :meth:`~django.views.generic.base.View.as_view()` on a "
"class-based view gives us something that behaves exactly like a function "
"based view, so we can do that at the point we choose between the two "
"subviews."
msgstr ""

# 012f48e178d24d05adfc47bf4fca5ba4
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:569
msgid ""
"You can of course pass through keyword arguments to "
":meth:`~django.views.generic.base.View.as_view()` in the same way you would "
"in your URLconf, such as if you wanted the ``AuthorInterest`` behavior to "
"also appear at another URL but using a different template::"
msgstr ""

# 727d41d2ffbb4865b8d7d3d98bd41f25
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:586
msgid ""
"This approach can also be used with any other generic class-based views or "
"your own class-based views inheriting directly from :class:`View` or "
":class:`TemplateView`, as it keeps the different views as separate as "
"possible."
msgstr ""

# b6de051daaeb43cdae0a5b5955407513
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:594
msgid "More than just HTML"
msgstr ""

# 8fc707c98c454836a38cdc7078bdeaec
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:596
msgid ""
"Where class based views shine is when you want to do the same thing many "
"times. Suppose you're writing an API, and every view should return JSON "
"instead of rendered HTML."
msgstr ""

# cd37c5458f2a4fe9a5dbe17bf4c11f35
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:600
msgid ""
"We can create a mixin class to use in all of our views, handling the "
"conversion to JSON once."
msgstr ""

# 84f03dad7ed749bd8c77ecf3e016fb8f
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:603
msgid "For example, a simple JSON mixin might look something like this::"
msgstr ""

# 1bda518fe3e845bb94ff8de6ebc8aac7
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:632
msgid ""
"Check out the :doc:`/topics/serialization` documentation for more "
"information on how to correctly transform Django models and querysets into "
"JSON."
msgstr ""

# 1c8aaf063abd4d00a281f30585915090
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:636
msgid ""
"This mixin provides a ``render_to_json_response()`` method with the same "
"signature as "
":func:`~django.views.generic.base.TemplateResponseMixin.render_to_response()`."
" To use it, we simply need to mix it into a ``TemplateView`` for example, "
"and override ``render_to_response()`` to call ``render_to_json_response()`` "
"instead::"
msgstr ""

# f290149950bd4797ad055cc542700326
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:647
msgid ""
"Equally we could use our mixin with one of the generic views. We can make "
"our own version of :class:`~django.views.generic.detail.DetailView` by "
"mixing ``JSONResponseMixin`` with the "
"``django.views.generic.detail.BaseDetailView`` -- (the "
":class:`~django.views.generic.detail.DetailView` before template rendering "
"behavior has been mixed in)::"
msgstr ""

# b51970078a2a463a8df4a7bd58c0cd7e
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:660
msgid ""
"This view can then be deployed in the same way as any other "
":class:`~django.views.generic.detail.DetailView`, with exactly the same "
"behavior -- except for the format of the response."
msgstr ""

# 946f8a2fab36482497b6a2079f5eedef
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:664
msgid ""
"If you want to be really adventurous, you could even mix a "
":class:`~django.views.generic.detail.DetailView` subclass that is able to "
"return *both* HTML and JSON content, depending on some property of the HTTP "
"request, such as a query argument or a HTTP header. Just mix in both the "
"``JSONResponseMixin`` and a "
":class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`, and"
" override the implementation of "
":func:`~django.views.generic.base.TemplateResponseMixin.render_to_response()`"
" to defer to the appropriate rendering method depending on the type of "
"response that the user requested::"
msgstr ""

# 6b08170a25b64f0bbd107d3f7e1ff3a6
#: ../../../../1.8/docs/topics/class-based-views/mixins.txt:685
msgid ""
"Because of the way that Python resolves method overloading, the call to "
"``super(HybridDetailView, self).render_to_response(context)`` ends up "
"calling the "
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response()`"
" implementation of "
":class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

# 0d104124d3bc49a8bfd97c94dd1fd25f
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:3
msgid "Conditional View Processing"
msgstr ""

# b7b4ff6f161f4f20b335a22ea13a8113
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:5
msgid ""
"HTTP clients can send a number of headers to tell the server about copies of"
" a resource that they have already seen. This is commonly used when "
"retrieving a Web page (using an HTTP ``GET`` request) to avoid sending all "
"the data for something the client has already retrieved. However, the same "
"headers can be used for all HTTP methods (``POST``, ``PUT``, ``DELETE``, "
"etc)."
msgstr ""

# eff28ff10b6848fbad8bfe90b1588d56
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:11
msgid ""
"For each page (response) that Django sends back from a view, it might "
"provide two HTTP headers: the ``ETag`` header and the ``Last-Modified`` "
"header. These headers are optional on HTTP responses. They can be set by "
"your view function, or you can rely on the "
":class:`~django.middleware.common.CommonMiddleware` middleware to set the "
"``ETag`` header."
msgstr ""

# 439c78609ad84602ac6944a78e5f6db3
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:17
msgid ""
"When the client next requests the same resource, it might send along a "
"header such as either `If-modified-since`_ or `If-unmodified-since`_, "
"containing the date of the last modification time it was sent, or either "
"`If-match`_ or `If-none-match`_, containing the last ``ETag`` it was sent. "
"If the current version of the page matches the ``ETag`` sent by the client, "
"or if the resource has not been modified, a 304 status code can be sent "
"back, instead of a full response, telling the client that nothing has "
"changed. Depending on the header, if the page has been modified or does not "
"match the ``ETag`` sent by the client, a 412 status code (Precondition "
"Failed) may be returned."
msgstr ""

# 6fdb94fafe38400fadfb4d2bd71266f4
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:33
msgid ""
"When you need more fine-grained control you may use per-view conditional "
"processing functions."
msgstr ""

# f9feb532b7844343b9ead4cc0c254df5
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:38
msgid ""
"Support for the ``If-unmodified-since`` header was added to conditional view"
" processing."
msgstr ""

# 11173344db8e47dab37da539dfd97536
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:44
msgid "The ``condition`` decorator"
msgstr ""

# 478ddd1fce4547b1a49440689067c072
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:46
msgid ""
"Sometimes (in fact, quite often) you can create functions to rapidly compute"
" the ETag_ value or the last-modified time for a resource, **without** "
"needing to do all the computations needed to construct the full view. Django"
" can then use these functions to provide an \"early bailout\" option for the"
" view processing. Telling the client that the content has not been modified "
"since the last request, perhaps."
msgstr ""

# 0f6695978d3f4036b9899e1f516a081d
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:55
msgid ""
"These two functions are passed as parameters the "
"``django.views.decorators.http.condition`` decorator. This decorator uses "
"the two functions (you only need to supply one, if you can't compute both "
"quantities easily and quickly) to work out if the headers in the HTTP "
"request match those on the resource. If they don't match, a new copy of the "
"resource must be computed and your normal view is called."
msgstr ""

# a45a72723e4548c496995f0a7cd3d451
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:62
msgid "The ``condition`` decorator's signature looks like this::"
msgstr ""

# 951a200748d149b592863af8a9a887a8
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:66
msgid ""
"The two functions, to compute the ETag and the last modified time, will be "
"passed the incoming ``request`` object and the same parameters, in the same "
"order, as the view function they are helping to wrap. The function passed "
"``last_modified_func`` should return a standard datetime value specifying "
"the last time the resource was modified, or ``None`` if the resource doesn't"
" exist. The function passed to the ``etag`` decorator should return a string"
" representing the `Etag`_ for the resource, or ``None`` if it doesn't exist."
msgstr ""

# b85056efa3af41b4b404fe2e5e7f6ef0
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:74
msgid ""
"Using this feature usefully is probably best explained with an example. "
"Suppose you have this pair of models, representing a simple blog system::"
msgstr ""

# c59cc139656d420d92290340ede42a29
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:88
msgid ""
"If the front page, displaying the latest blog entries, only changes when you"
" add a new blog entry, you can compute the last modified time very quickly. "
"You need the latest ``published`` date for every entry associated with that "
"blog. One way to do this would be::"
msgstr ""

# 1faaa256ee33444b938c3426a6423991
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:96
msgid ""
"You can then use this function to provide early detection of an unchanged "
"page for your front page view::"
msgstr ""

# eeaf969d0d084a6b9af75a9769d2efe3
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:106
msgid "Shortcuts for only computing one value"
msgstr ""

# e6bb3f69c53d405eaa91d56823a95364
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:108
msgid ""
"As a general rule, if you can provide functions to compute *both* the ETag "
"and the last modified time, you should do so. You don't know which headers "
"any given HTTP client will send you, so be prepared to handle both. However,"
" sometimes only one value is easy to compute and Django provides decorators "
"that handle only ETag or only last-modified computations."
msgstr ""

# ea31c824c0f649719de73d5829b01b2f
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:114
msgid ""
"The ``django.views.decorators.http.etag`` and "
"``django.views.decorators.http.last_modified`` decorators are passed the "
"same type of functions as the ``condition`` decorator. Their signatures "
"are::"
msgstr ""

# 4c6993be150042908c2f0529ad290c35
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:121
msgid ""
"We could write the earlier example, which only uses a last-modified "
"function, using one of these decorators::"
msgstr ""

# 4a9c43a464be4da4adbd8f06cb1a0513
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:128
msgid "...or::"
msgstr ""

# afeeadc4939641b58db899cd9c64bb91
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:135
msgid "Use ``condition`` when testing both conditions"
msgstr ""

# 24d63b9e98974b738eedaaf58921a22f
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:137
msgid ""
"It might look nicer to some people to try and chain the ``etag`` and "
"``last_modified`` decorators if you want to test both preconditions. "
"However, this would lead to incorrect behavior."
msgstr ""

# aecf5eaffc5f408592bfecbaf7b7d9dd
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:151
msgid ""
"The first decorator doesn't know anything about the second and might answer "
"that the response is not modified even if the second decorators would "
"determine otherwise. The ``condition`` decorator uses both callback "
"functions simultaneously to work out the right action to take."
msgstr ""

# 1e9560621c8a4223847be20a0f85388f
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:157
msgid "Using the decorators with other HTTP methods"
msgstr ""

# 725ec8acfb2a4abd9834881e00788f17
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:159
msgid ""
"The ``condition`` decorator is useful for more than only ``GET`` and "
"``HEAD`` requests (``HEAD`` requests are the same as ``GET`` in this "
"situation). It can also be used to provide checking for ``POST``, ``PUT`` "
"and ``DELETE`` requests. In these situations, the idea isn't to return a "
"\"not modified\" response, but to tell the client that the resource they are"
" trying to change has been altered in the meantime."
msgstr ""

# 1a2a6e306cb24b4396dfbd66c6e3e92b
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:166
msgid ""
"For example, consider the following exchange between the client and server:"
msgstr ""

# 7b297025af4d45c588bdc8d416a87eb0
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:168
msgid "Client requests ``/foo/``."
msgstr ""

# 99e54061505a4b4e9fbabee5c1490008
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:169
msgid "Server responds with some content with an ETag of ``\"abcd1234\"``."
msgstr ""

# b8eb7eb51d9e45d9bccccc49f21da951
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:170
msgid ""
"Client sends an HTTP ``PUT`` request to ``/foo/`` to update the resource. It"
" also sends an ``If-Match: \"abcd1234\"`` header to specify the version it "
"is trying to update."
msgstr ""

# 3bbe930439d44b8fb26e8b266e1d6d0e
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:173
msgid ""
"Server checks to see if the resource has changed, by computing the ETag the "
"same way it does for a ``GET`` request (using the same function). If the "
"resource *has* changed, it will return a 412 status code code, meaning "
"\"precondition failed\"."
msgstr ""

# 9602f473db824119ba82c2ae97379662
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:177
msgid ""
"Client sends a ``GET`` request to ``/foo/``, after receiving a 412 response,"
" to retrieve an updated version of the content before updating it."
msgstr ""

# 542f88dabfeb463c9e499ddba57d170a
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:181
msgid ""
"The important thing this example shows is that the same functions can be "
"used to compute the ETag and last modification values in all situations. In "
"fact, you **should** use the same functions, so that the same values are "
"returned every time."
msgstr ""

# 8abd11df819946ac8c83a9d458ecead7
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:187
msgid "Comparison with middleware conditional processing"
msgstr ""

# 4ec5f342ce1f4fd99a67bf7f3fb70312
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:189
msgid ""
"You may notice that Django already provides simple and straightforward "
"conditional ``GET`` handling via the "
":class:`django.middleware.http.ConditionalGetMiddleware` and "
":class:`~django.middleware.common.CommonMiddleware`. Whilst certainly being "
"easy to use and suitable for many situations, those pieces of middleware "
"functionality have limitations for advanced usage:"
msgstr ""

# 10d110505888413cb23fb15d2fb2adf4
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:196
msgid "They are applied globally to all views in your project"
msgstr ""

# 5f4eb916ba3b46fca1094de386976d15
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:197
msgid ""
"They don't save you from generating the response itself, which may be "
"expensive"
msgstr ""

# b0cda17e3f9c45faaec3e871bfb55583
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:199
msgid "They are only appropriate for HTTP ``GET`` requests."
msgstr ""

# 9f25b838b31c4bf9ab8746def97830c8
#: ../../../../1.8/docs/topics/conditional-view-processing.txt:201
msgid ""
"You should choose the most appropriate tool for your particular problem "
"here. If you have a way to compute ETags and modification times quickly and "
"if some view takes a while to generate the content, you should consider "
"using the ``condition`` decorator described in this document. If everything "
"already runs fairly quickly, stick to using the middleware and the amount of"
" network traffic sent back to the clients will still be reduced if the view "
"hasn't changed."
msgstr ""

# 51814c89c98b443ba83338dbbd4ae3e6
#: ../../../../1.8/docs/topics/db/aggregation.txt:3
msgid "Aggregation"
msgstr ""

# fb68e7e9b2504bd89cc070f4d58a5d81
#: ../../../../1.8/docs/topics/db/aggregation.txt:7
msgid ""
"The topic guide on :doc:`Django's database-abstraction API "
"</topics/db/queries>` described the way that you can use Django queries that"
" create, retrieve, update and delete individual objects. However, sometimes "
"you will need to retrieve values that are derived by summarizing or "
"*aggregating* a collection of objects. This topic guide describes the ways "
"that aggregate values can be generated and returned using Django queries."
msgstr ""

# b56046975a1645999477df22aa318685
#: ../../../../1.8/docs/topics/db/aggregation.txt:14
msgid ""
"Throughout this guide, we'll refer to the following models. These models are"
" used to track the inventory for a series of online bookstores:"
msgstr ""

# 6ec21a0c3fba48febcbc2326071dc91a
#: ../../../../1.8/docs/topics/db/aggregation.txt:46
msgid "Cheat sheet"
msgstr ""

# d028eee3f73a4600a1d6dc0fff5a9e26
#: ../../../../1.8/docs/topics/db/aggregation.txt:48
msgid ""
"In a hurry? Here's how to do common aggregate queries, assuming the models "
"above:"
msgstr ""

# d8857d16177e45cd81b1e7f854d97749
#: ../../../../1.8/docs/topics/db/aggregation.txt:92
msgid "Generating aggregates over a QuerySet"
msgstr ""

# 133ec74e9c9b45519391b1aa7ef0dbcf
#: ../../../../1.8/docs/topics/db/aggregation.txt:94
msgid ""
"Django provides two ways to generate aggregates. The first way is to "
"generate summary values over an entire ``QuerySet``. For example, say you "
"wanted to calculate the average price of all books available for sale. "
"Django's query syntax provides a means for describing the set of all books::"
msgstr ""

# ba4e820d71ad4bdbaee9b3b3ec04a3eb
#: ../../../../1.8/docs/topics/db/aggregation.txt:101
msgid ""
"What we need is a way to calculate summary values over the objects that "
"belong to this ``QuerySet``. This is done by appending an ``aggregate()`` "
"clause onto the ``QuerySet``::"
msgstr ""

# 7f7c8cd825a54d0885792836312d168c
#: ../../../../1.8/docs/topics/db/aggregation.txt:109
msgid ""
"The ``all()`` is redundant in this example, so this could be simplified to::"
msgstr ""

# bd578ad7d0584826b3c58a900cac357d
#: ../../../../1.8/docs/topics/db/aggregation.txt:114
msgid ""
"The argument to the ``aggregate()`` clause describes the aggregate value "
"that we want to compute - in this case, the average of the ``price`` field "
"on the ``Book`` model. A list of the aggregate functions that are available "
"can be found in the :ref:`QuerySet reference <aggregation-functions>`."
msgstr ""

# 5a8236fcb20542f886b82faee29a305f
#: ../../../../1.8/docs/topics/db/aggregation.txt:119
msgid ""
"``aggregate()`` is a terminal clause for a ``QuerySet`` that, when invoked, "
"returns a dictionary of name-value pairs. The name is an identifier for the "
"aggregate value; the value is the computed aggregate. The name is "
"automatically generated from the name of the field and the aggregate "
"function. If you want to manually specify a name for the aggregate value, "
"you can do so by providing that name when you specify the aggregate clause::"
msgstr ""

# 969725ee58f549d98b31664ccd81afde
#: ../../../../1.8/docs/topics/db/aggregation.txt:129
msgid ""
"If you want to generate more than one aggregate, you just add another "
"argument to the ``aggregate()`` clause. So, if we also wanted to know the "
"maximum and minimum price of all books, we would issue the query::"
msgstr ""

# 16354bad644f43f1ba594f6c13560856
#: ../../../../1.8/docs/topics/db/aggregation.txt:138
msgid "Generating aggregates for each item in a QuerySet"
msgstr ""

# 42a68464dcd845e394282bda8750da50
#: ../../../../1.8/docs/topics/db/aggregation.txt:140
msgid ""
"The second way to generate summary values is to generate an independent "
"summary for each object in a ``QuerySet``. For example, if you are "
"retrieving a list of books, you may want to know how many authors "
"contributed to each book. Each Book has a many-to-many relationship with the"
" Author; we want to summarize this relationship for each book in the "
"``QuerySet``."
msgstr ""

# b665294a7bdd43b2883aac6232824357
#: ../../../../1.8/docs/topics/db/aggregation.txt:146
msgid ""
"Per-object summaries can be generated using the ``annotate()`` clause. When "
"an ``annotate()`` clause is specified, each object in the ``QuerySet`` will "
"be annotated with the specified values."
msgstr ""

# c243312f272a43a98f217773479bc032
#: ../../../../1.8/docs/topics/db/aggregation.txt:150
msgid ""
"The syntax for these annotations is identical to that used for the "
"``aggregate()`` clause. Each argument to ``annotate()`` describes an "
"aggregate that is to be calculated. For example, to annotate books with the "
"number of authors:"
msgstr ""

# 04abaa0f1fc84836b4e7097dade32595
#: ../../../../1.8/docs/topics/db/aggregation.txt:171
msgid ""
"As with ``aggregate()``, the name for the annotation is automatically "
"derived from the name of the aggregate function and the name of the field "
"being aggregated. You can override this default name by providing an alias "
"when you specify the annotation::"
msgstr ""

# 3115c88209d64dd7b0d68d93c24a7c81
#: ../../../../1.8/docs/topics/db/aggregation.txt:182
msgid ""
"Unlike ``aggregate()``, ``annotate()`` is *not* a terminal clause. The "
"output of the ``annotate()`` clause is a ``QuerySet``; this ``QuerySet`` can"
" be modified using any other ``QuerySet`` operation, including ``filter()``,"
" ``order_by()``, or even additional calls to ``annotate()``."
msgstr ""

# 3a9a96dbde3c430a8958d893fd119700
#: ../../../../1.8/docs/topics/db/aggregation.txt:187
msgid "If in doubt, inspect the SQL query!"
msgstr ""

# 093fdb7b2a164ff9b98f21365db43cbc
#: ../../../../1.8/docs/topics/db/aggregation.txt:189
msgid ""
"In order to understand what happens in your query, consider inspecting the "
"``query`` property of your ``QuerySet``."
msgstr ""

# 58fc3048c9fb4b1d9731970503ecbfa4
#: ../../../../1.8/docs/topics/db/aggregation.txt:192
msgid ""
"For instance, combining multiple aggregations with ``annotate()`` will yield"
" the wrong results, as `multiple tables are cross joined`_, resulting in "
"duplicate row aggregations."
msgstr ""

# b7ef833cb15247b6b957dd7bab7f6e89
#: ../../../../1.8/docs/topics/db/aggregation.txt:199
msgid "Joins and aggregates"
msgstr ""

# 69708d79619240a6968e9044f41ea7e5
#: ../../../../1.8/docs/topics/db/aggregation.txt:201
msgid ""
"So far, we have dealt with aggregates over fields that belong to the model "
"being queried. However, sometimes the value you want to aggregate will "
"belong to a model that is related to the model you are querying."
msgstr ""

# e608485a4c094491a293ad2951c8b3e7
#: ../../../../1.8/docs/topics/db/aggregation.txt:205
msgid ""
"When specifying the field to be aggregated in an aggregate function, Django "
"will allow you to use the same :ref:`double underscore notation <field-"
"lookups-intro>` that is used when referring to related fields in filters. "
"Django will then handle any table joins that are required to retrieve and "
"aggregate the related value."
msgstr ""

# 8cb39997f7ab403590a9308a961c7301
#: ../../../../1.8/docs/topics/db/aggregation.txt:211
msgid ""
"For example, to find the price range of books offered in each store, you "
"could use the annotation::"
msgstr ""

# 94da0ea8b69e468bbb81b16f6100b905
#: ../../../../1.8/docs/topics/db/aggregation.txt:217
msgid ""
"This tells Django to retrieve the ``Store`` model, join (through the many-"
"to-many relationship) with the ``Book`` model, and aggregate on the price "
"field of the book model to produce a minimum and maximum value."
msgstr ""

# 80e8bf1f5b0c45cebe7128c0b106fb0e
#: ../../../../1.8/docs/topics/db/aggregation.txt:221
msgid ""
"The same rules apply to the ``aggregate()`` clause. If you wanted to know "
"the lowest and highest price of any book that is available for sale in a "
"store, you could use the aggregate::"
msgstr ""

# 26d7c4bc3d0449ca88327b2115ce0a30
#: ../../../../1.8/docs/topics/db/aggregation.txt:227
msgid ""
"Join chains can be as deep as you require. For example, to extract the age "
"of the youngest author of any book available for sale, you could issue the "
"query::"
msgstr ""

# afb18a7b8d414ffcba4e0d2013b7cfad
#: ../../../../1.8/docs/topics/db/aggregation.txt:234
msgid "Following relationships backwards"
msgstr ""

# b911ab8a2aa543fbb968c8012c1e3ba4
#: ../../../../1.8/docs/topics/db/aggregation.txt:236
msgid ""
"In a way similar to :ref:`lookups-that-span-relationships`, aggregations and"
" annotations on fields of models or models that are related to the one you "
"are querying can include traversing \"reverse\" relationships. The lowercase"
" name of related models and double-underscores are used here too."
msgstr ""

# fcfe2af9bba94f7a9e7df16bc93b8604
#: ../../../../1.8/docs/topics/db/aggregation.txt:241
msgid ""
"For example, we can ask for all publishers, annotated with their respective "
"total book stock counters (note how we use ``'book'`` to specify the "
"``Publisher`` -> ``Book`` reverse foreign key hop)::"
msgstr ""

# ccf2328bf12d4a8c80e93cc0c95c3341
#: ../../../../1.8/docs/topics/db/aggregation.txt:248
msgid ""
"(Every ``Publisher`` in the resulting ``QuerySet`` will have an extra "
"attribute called ``book__count``.)"
msgstr ""

# b854b141d1704ac9afd77428920943e2
#: ../../../../1.8/docs/topics/db/aggregation.txt:251
msgid ""
"We can also ask for the oldest book of any of those managed by every "
"publisher::"
msgstr ""

# 4c41459c658d489d96ea25fdec985d82
#: ../../../../1.8/docs/topics/db/aggregation.txt:255
msgid ""
"(The resulting dictionary will have a key called ``'oldest_pubdate'``. If no"
" such alias were specified, it would be the rather long "
"``'book__pubdate__min'``.)"
msgstr ""

# 2028ed1a8e0f4fc288b4d5cf28105b1f
#: ../../../../1.8/docs/topics/db/aggregation.txt:258
msgid ""
"This doesn't apply just to foreign keys. It also works with many-to-many "
"relations. For example, we can ask for every author, annotated with the "
"total number of pages considering all the books the author has (co-)authored"
" (note how we use ``'book'`` to specify the ``Author`` -> ``Book`` reverse "
"many-to-many hop)::"
msgstr ""

# c48f22a39a0c491da20ebd42d619af0d
#: ../../../../1.8/docs/topics/db/aggregation.txt:265
msgid ""
"(Every ``Author`` in the resulting ``QuerySet`` will have an extra attribute"
" called ``total_pages``. If no such alias were specified, it would be the "
"rather long ``book__pages__sum``.)"
msgstr ""

# 1f6209f0484c46219d40c989e4ffb8f3
#: ../../../../1.8/docs/topics/db/aggregation.txt:269
msgid ""
"Or ask for the average rating of all the books written by author(s) we have "
"on file::"
msgstr ""

# a99e381719574686be2c0280513aa31e
#: ../../../../1.8/docs/topics/db/aggregation.txt:274
msgid ""
"(The resulting dictionary will have a key called ``'average__rating'``. If "
"no such alias were specified, it would be the rather long "
"``'book__rating__avg'``.)"
msgstr ""

# f2d9580937484a5eb383f92756cb7704
#: ../../../../1.8/docs/topics/db/aggregation.txt:278
msgid "Aggregations and other QuerySet clauses"
msgstr ""

# d299df8063ed4a8baeb08013285dc97a
#: ../../../../1.8/docs/topics/db/aggregation.txt:281
msgid "``filter()`` and ``exclude()``"
msgstr ""

# 2c3745a44eaf43c5911c61cc549761d0
#: ../../../../1.8/docs/topics/db/aggregation.txt:283
msgid ""
"Aggregates can also participate in filters. Any ``filter()`` (or "
"``exclude()``) applied to normal model fields will have the effect of "
"constraining the objects that are considered for aggregation."
msgstr ""

# 2717084ca5324ec7892648ed72d0ff51
#: ../../../../1.8/docs/topics/db/aggregation.txt:287
msgid ""
"When used with an ``annotate()`` clause, a filter has the effect of "
"constraining the objects for which an annotation is calculated. For example,"
" you can generate an annotated list of all books that have a title starting "
"with \"Django\" using the query::"
msgstr ""

# 3adc7bb0fc5f41a5860fb1bb1c98d93d
#: ../../../../1.8/docs/topics/db/aggregation.txt:295
msgid ""
"When used with an ``aggregate()`` clause, a filter has the effect of "
"constraining the objects over which the aggregate is calculated. For "
"example, you can generate the average price of all books with a title that "
"starts with \"Django\" using the query::"
msgstr ""

# 2519664b7ca343c598b87ee65e16730f
#: ../../../../1.8/docs/topics/db/aggregation.txt:303
msgid "Filtering on annotations"
msgstr ""

# 49e4abee43bd4288abf88c6669461ad9
#: ../../../../1.8/docs/topics/db/aggregation.txt:305
msgid ""
"Annotated values can also be filtered. The alias for the annotation can be "
"used in ``filter()`` and ``exclude()`` clauses in the same way as any other "
"model field."
msgstr ""

# 94639f3e41d448af96b0c8acf69703ef
#: ../../../../1.8/docs/topics/db/aggregation.txt:309
msgid ""
"For example, to generate a list of books that have more than one author, you"
" can issue the query::"
msgstr ""

# 82cdf541cda9449bada912f4be6fd4ec
#: ../../../../1.8/docs/topics/db/aggregation.txt:314
msgid ""
"This query generates an annotated result set, and then generates a filter "
"based upon that annotation."
msgstr ""

# 215b9f48f8074ebab8371c999d521828
#: ../../../../1.8/docs/topics/db/aggregation.txt:318
msgid "Order of ``annotate()`` and ``filter()`` clauses"
msgstr ""

# 6bce666597284a4aa3704a81e83a3082
#: ../../../../1.8/docs/topics/db/aggregation.txt:320
msgid ""
"When developing a complex query that involves both ``annotate()`` and "
"``filter()`` clauses, particular attention should be paid to the order in "
"which the clauses are applied to the ``QuerySet``."
msgstr ""

# dd0f59f1adaa458c958dccc2d1543656
#: ../../../../1.8/docs/topics/db/aggregation.txt:324
msgid ""
"When an ``annotate()`` clause is applied to a query, the annotation is "
"computed over the state of the query up to the point where the annotation is"
" requested. The practical implication of this is that ``filter()`` and "
"``annotate()`` are not commutative operations -- that is, there is a "
"difference between the query::"
msgstr ""

# b92503aed9ae4e19b021615e252ace89
#: ../../../../1.8/docs/topics/db/aggregation.txt:332
msgid "and the query::"
msgstr ""

# 4c8d30556ea349958b5abe5b658bafda
#: ../../../../1.8/docs/topics/db/aggregation.txt:336
msgid ""
"Both queries will return a list of publishers that have at least one good "
"book (i.e., a book with a rating exceeding 3.0). However, the annotation in "
"the first query will provide the total number of all books published by the "
"publisher; the second query will only include good books in the annotated "
"count. In the first query, the annotation precedes the filter, so the filter"
" has no effect on the annotation. In the second query, the filter precedes "
"the annotation, and as a result, the filter constrains the objects "
"considered when calculating the annotation."
msgstr ""

# aad90a4cf74147a3835a70548562a460
#: ../../../../1.8/docs/topics/db/aggregation.txt:346
msgid "``order_by()``"
msgstr ""

# aab41db0a3364f708124b9ca400f255d
#: ../../../../1.8/docs/topics/db/aggregation.txt:348
msgid ""
"Annotations can be used as a basis for ordering. When you define an "
"``order_by()`` clause, the aggregates you provide can reference any alias "
"defined as part of an ``annotate()`` clause in the query."
msgstr ""

# 5f4b7a83c91348bdba00f9d43442e882
#: ../../../../1.8/docs/topics/db/aggregation.txt:352
msgid ""
"For example, to order a ``QuerySet`` of books by the number of authors that "
"have contributed to the book, you could use the following query::"
msgstr ""

# a612492e3a8b44e8a445d9e3a19fefd3
#: ../../../../1.8/docs/topics/db/aggregation.txt:358
msgid "``values()``"
msgstr ""

# 312780a66aba41478429d7c08c10d7f2
#: ../../../../1.8/docs/topics/db/aggregation.txt:360
msgid ""
"Ordinarily, annotations are generated on a per-object basis - an annotated "
"``QuerySet`` will return one result for each object in the original "
"``QuerySet``. However, when a ``values()`` clause is used to constrain the "
"columns that are returned in the result set, the method for evaluating "
"annotations is slightly different. Instead of returning an annotated result "
"for each result in the original ``QuerySet``, the original results are "
"grouped according to the unique combinations of the fields specified in the "
"``values()`` clause. An annotation is then provided for each unique group; "
"the annotation is computed over all members of the group."
msgstr ""

# 687f2e4a3808410699a53fd060bc97ee
#: ../../../../1.8/docs/topics/db/aggregation.txt:370
msgid ""
"For example, consider an author query that attempts to find out the average "
"rating of books written by each author:"
msgstr ""

# b681d3f14b054294990e4e48e9e9db87
#: ../../../../1.8/docs/topics/db/aggregation.txt:375
msgid ""
"This will return one result for each author in the database, annotated with "
"their average book rating."
msgstr ""

# 4c7d8b0196c241499144e02bc0d2b432
#: ../../../../1.8/docs/topics/db/aggregation.txt:378
msgid ""
"However, the result will be slightly different if you use a ``values()`` "
"clause::"
msgstr ""

# b8f02dd2ae4c4d148e15474448f86953
#: ../../../../1.8/docs/topics/db/aggregation.txt:382
msgid ""
"In this example, the authors will be grouped by name, so you will only get "
"an annotated result for each *unique* author name. This means if you have "
"two authors with the same name, their results will be merged into a single "
"result in the output of the query; the average will be computed as the "
"average over the books written by both authors."
msgstr ""

# e1d0e531ad344acba0626ec91c413e70
#: ../../../../1.8/docs/topics/db/aggregation.txt:389
msgid "Order of ``annotate()`` and ``values()`` clauses"
msgstr ""

# 5e6d94ba0f524766a633b21fdbe6522e
#: ../../../../1.8/docs/topics/db/aggregation.txt:391
msgid ""
"As with the ``filter()`` clause, the order in which ``annotate()`` and "
"``values()`` clauses are applied to a query is significant. If the "
"``values()`` clause precedes the ``annotate()``, the annotation will be "
"computed using the grouping described by the ``values()`` clause."
msgstr ""

# c26a2a01e39142bf88168d06bdd3ad33
#: ../../../../1.8/docs/topics/db/aggregation.txt:396
msgid ""
"However, if the ``annotate()`` clause precedes the ``values()`` clause, the "
"annotations will be generated over the entire query set. In this case, the "
"``values()`` clause only constrains the fields that are generated on output."
msgstr ""

# f0fe554ff72b4069a89876d4bb16b1c2
#: ../../../../1.8/docs/topics/db/aggregation.txt:401
msgid ""
"For example, if we reverse the order of the ``values()`` and ``annotate()`` "
"clause from our previous example::"
msgstr ""

# f2bf777c1ea243168ea36af9de1c47ba
#: ../../../../1.8/docs/topics/db/aggregation.txt:406
msgid ""
"This will now yield one unique result for each author; however, only the "
"author's name and the ``average_rating`` annotation will be returned in the "
"output data."
msgstr ""

# 39b595b663e24f3db56aa43630ed3644
#: ../../../../1.8/docs/topics/db/aggregation.txt:410
msgid ""
"You should also note that ``average_rating`` has been explicitly included in"
" the list of values to be returned. This is required because of the ordering"
" of the ``values()`` and ``annotate()`` clause."
msgstr ""

# d854cd810dc1422b93f35c0f3bdaa168
#: ../../../../1.8/docs/topics/db/aggregation.txt:414
msgid ""
"If the ``values()`` clause precedes the ``annotate()`` clause, any "
"annotations will be automatically added to the result set. However, if the "
"``values()`` clause is applied after the ``annotate()`` clause, you need to "
"explicitly include the aggregate column."
msgstr ""

# 10c86ecf406646bdbf4eeffa7c9c341e
#: ../../../../1.8/docs/topics/db/aggregation.txt:420
msgid "Interaction with default ordering or ``order_by()``"
msgstr ""

# 000133ce60bb41b8925eebbfd78e2ffc
#: ../../../../1.8/docs/topics/db/aggregation.txt:422
msgid ""
"Fields that are mentioned in the ``order_by()`` part of a queryset (or which"
" are used in the default ordering on a model) are used when selecting the "
"output data, even if they are not otherwise specified in the ``values()`` "
"call. These extra fields are used to group \"like\" results together and "
"they can make otherwise identical result rows appear to be separate. This "
"shows up, particularly, when counting things."
msgstr ""

# 7782ad6b3f23445f9ee21817bcd3d490
#: ../../../../1.8/docs/topics/db/aggregation.txt:429
msgid "By way of example, suppose you have a model like this::"
msgstr ""

# a31927ea37ba4e31bd37354a5667fe29
#: ../../../../1.8/docs/topics/db/aggregation.txt:440
msgid ""
"The important part here is the default ordering on the ``name`` field. If "
"you want to count how many times each distinct ``data`` value appears, you "
"might try this::"
msgstr ""

# 3cc0a17c9fd84a2bacadecbf8caddaa9
#: ../../../../1.8/docs/topics/db/aggregation.txt:447
msgid ""
"...which will group the ``Item`` objects by their common ``data`` values and"
" then count the number of ``id`` values in each group. Except that it won't "
"quite work. The default ordering by ``name`` will also play a part in the "
"grouping, so this query will group by distinct ``(data, name)`` pairs, which"
" isn't what you want. Instead, you should construct this queryset::"
msgstr ""

# 49aef721c3544259b3560e852a61084d
#: ../../../../1.8/docs/topics/db/aggregation.txt:455
msgid ""
"...clearing any ordering in the query. You could also order by, say, "
"``data`` without any harmful effects, since that is already playing a role "
"in the query."
msgstr ""

# 74543f84a52e4fb685520d7a3a3df661
#: ../../../../1.8/docs/topics/db/aggregation.txt:459
msgid ""
"This behavior is the same as that noted in the queryset documentation for "
":meth:`~django.db.models.query.QuerySet.distinct` and the general rule is "
"the same: normally you won't want extra columns playing a part in the "
"result, so clear out the ordering, or at least make sure it's restricted "
"only to those fields you also select in a ``values()`` call."
msgstr ""

# 56d3ff603b8b43bc97e3493c0690077d
#: ../../../../1.8/docs/topics/db/aggregation.txt:466
msgid ""
"You might reasonably ask why Django doesn't remove the extraneous columns "
"for you. The main reason is consistency with ``distinct()`` and other "
"places: Django **never** removes ordering constraints that you have "
"specified (and we can't change those other methods' behavior, as that would "
"violate our :doc:`/misc/api-stability` policy)."
msgstr ""

# 12f0d37fec514877acbdbf497c2c4ba9
#: ../../../../1.8/docs/topics/db/aggregation.txt:473
msgid "Aggregating annotations"
msgstr ""

# 8aa5f24e488e40ceb3428b6dd80e758a
#: ../../../../1.8/docs/topics/db/aggregation.txt:475
msgid ""
"You can also generate an aggregate on the result of an annotation. When you "
"define an ``aggregate()`` clause, the aggregates you provide can reference "
"any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""

# 7104a5bdf4694465a289846320423be7
#: ../../../../1.8/docs/topics/db/aggregation.txt:479
msgid ""
"For example, if you wanted to calculate the average number of authors per "
"book you first annotate the set of books with the author count, then "
"aggregate that author count, referencing the annotation field::"
msgstr ""

# 93026554200047a4a245dc9bd61ed7b8
#: ../../../../1.8/docs/topics/db/examples/index.txt:3
msgid "Examples of model relationship API usage"
msgstr ""

# cdaff1371db742fa97ff3f6982f95a00
# d9b263fd78cf437ea6c3df6363ecb933
# d901ff315c624a4fab0cc0946f6b3ef9
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:3
#: ../../../../1.8/docs/topics/db/models.txt:352
#: ../../../../1.8/docs/topics/db/queries.txt:1241
msgid "Many-to-many relationships"
msgstr ""

# 598defe86b284dc193d531c4ccb009fb
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:7
msgid "To define a many-to-many relationship, use :ref:`ref-manytomany`."
msgstr ""

# d4e5690f7fa3442f9701f4861e06eb5d
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:9
msgid ""
"In this example, an ``Article`` can be published in multiple ``Publication``"
" objects, and a ``Publication`` has multiple ``Article`` objects:"
msgstr ""

# b7fe930ab7a144968d3aa4d2d430f909
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:35
msgid ""
"What follows are examples of operations that can be performed using the "
"Python API facilities. Note that if you are using :ref:`an intermediate "
"model <intermediary-manytomany>` for a many-to-many relationship, some of "
"the related manager's methods are disabled, so some of these examples won't "
"work with such models."
msgstr ""

# a45c09592993476093e7c8a76f42278e
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:41
msgid "Create a couple of ``Publications``::"
msgstr ""

# 61b4a557a00e4a3d97fd3eb2e4404c74
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:50
msgid "Create an ``Article``::"
msgstr ""

# 52f530be57d54e89894fafecd0810767
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:54
msgid "You can't associate it with a ``Publication`` until it's been saved::"
msgstr ""

# b1e43f84da4c439da19b5ef6b5c5bdaf
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:61
msgid "Save it! ::"
msgstr ""

# 9628e478c61c4e47bc8fb42d9159ff71
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:66
msgid "Associate the ``Article`` with a ``Publication``::"
msgstr ""

# 35aeb92858104e8d8f23489f32622148
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:70
msgid ""
"Create another ``Article``, and set it to appear in both ``Publications``::"
msgstr ""

# 529d0ab1b61943d58b61a34cce65d868
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:77
msgid "Adding a second time is OK::"
msgstr ""

# 6da88f2bb73b40b4acecb66df95b0fd0
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:81
msgid "Adding an object of the wrong type raises :exc:`TypeError`::"
msgstr ""

# e3002a7c839a4d1987e8ac314364449a
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:88
msgid ""
"Create and add a ``Publication`` to an ``Article`` in one step using "
":meth:`~django.db.models.fields.related.RelatedManager.create`::"
msgstr ""

# b06b5b31b9e34707afef33c875587d3e
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:93
msgid ""
"``Article`` objects have access to their related ``Publication`` objects::"
msgstr ""

# 0590ce6db6e649708b66ab40127db853
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:100
msgid ""
"``Publication`` objects have access to their related ``Article`` objects::"
msgstr ""

# c66561c455f94923b228753904991519
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:109
msgid ""
"Many-to-many relationships can be queried using :ref:`lookups across "
"relationships <lookups-that-span-relationships>`::"
msgstr ""

# 962e676bdf69495bbb1e20a71ee3718a
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:127
msgid ""
"The :meth:`~django.db.models.query.QuerySet.count` function respects "
":meth:`~django.db.models.query.QuerySet.distinct` as well::"
msgstr ""

# 46702ce2bf274c42be182e61becd8a0b
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:141
msgid ""
"Reverse m2m queries are supported (i.e., starting at the table that doesn't "
"have a :class:`~django.db.models.ManyToManyField`)::"
msgstr ""

# a7da908e668e471b927a224bb0e3b2f3
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:166
msgid ""
"Excluding a related item works as you would expect, too (although the SQL "
"involved is a little complex)::"
msgstr ""

# 30e7241c64d046abac23319d87c1517a
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:172
msgid ""
"If we delete a ``Publication``, its ``Articles`` won't be able to access "
"it::"
msgstr ""

# 1f8eaec4c778491ca8e336b734e27b8d
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:181
msgid ""
"If we delete an ``Article``, its ``Publications`` won't be able to access "
"it::"
msgstr ""

# 70d6afc5365c4b74bec72c3569405329
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:189
msgid "Adding via the 'other' end of an m2m::"
msgstr ""

# 41ddf8c1291548878448419e374183f2
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:199
msgid "Adding via the other end using keywords::"
msgstr ""

# f1c44ad8e1a9431bb4f69397897e6957
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:208
msgid "Removing ``Publication`` from an ``Article``::"
msgstr ""

# d373ea3390af4ca8ae713cb8b5434643
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:216
msgid "And from the other end::"
msgstr ""

# 46913a33689a4b5c95aee2d76b9944f1
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:224
msgid ""
"Relation sets can be assigned. Assignment clears any existing set members::"
msgstr ""

# 4762ec778cc747139633fe1bec1014ea
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:232
msgid "Relation sets can be cleared::"
msgstr ""

# f4c174931b8048e2b417ffa538fa2527
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:238
msgid "And you can clear from the other end::"
msgstr ""

# d352de4c623841eb960bce9cdeee8926
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:251
msgid "Recreate the ``Article`` and ``Publication`` we have deleted::"
msgstr ""

# 8c471b6fff7a41be80bd1c0ef2e0bcef
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:259
msgid ""
"Bulk delete some ``Publications`` - references to deleted publications "
"should go::"
msgstr ""

# f018c540ba9e4e4e81d7c9859f7a0ec1
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:270
msgid "Bulk delete some articles - references to deleted objects should go::"
msgstr ""

# 156a1bd8120b41db97cda0b07233901b
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:277
msgid ""
"After the :meth:`~django.db.models.query.QuerySet.delete`, the "
":class:`~django.db.models.query.QuerySet` cache needs to be cleared, and the"
" referenced objects should be gone::"
msgstr ""

# 910888dfa0084a9681984203fca0dff1
#: ../../../../1.8/docs/topics/db/examples/many_to_many.txt:286
msgid ""
"An alternate to calling "
":meth:`~django.db.models.fields.related.RelatedManager.clear` is to assign "
"the empty set::"
msgstr ""

# 6b38436651f640679b1342b0afad1e64
# 2019d4fdcd814a51a028e192f2e449b4
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:3
#: ../../../../1.8/docs/topics/db/models.txt:300
msgid "Many-to-one relationships"
msgstr ""

# 426b1f604bb64a46a2c3228cdbff9114
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:5
msgid ""
"To define a many-to-one relationship, use "
":class:`~django.db.models.ForeignKey`::"
msgstr ""

# 9a26cde9a99444088002056e1fcf6f17
# 8d648375e666485a955a7874edf31d7a
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:28
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:33
msgid ""
"What follows are examples of operations that can be performed using the "
"Python API facilities."
msgstr ""

# ab1800fe0bd74f68ac0f702b81643406
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:33
msgid "Create a few Reporters::"
msgstr ""

# ced156f9ad234eae813bce966b0818a7
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:41
msgid "Create an Article::"
msgstr ""

# e9a3cc7dab9b4ac583dcfae2d6135100
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:53
msgid ""
"Note that you must save an object before it can be assigned to a foreign key"
" relationship. For example, creating an ``Article`` with unsaved "
"``Reporter`` raises ``ValueError``::"
msgstr ""

# aae48ff65376452facc4d639a89cd61c
# c2df6a08b4b947f98fb41e3c7f3cf529
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:63
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:104
msgid ""
"If you want to disable the unsaved instance check, you can use the "
":attr:`~django.db.models.ForeignKey.allow_unsaved_instance_assignment` "
"attribute."
msgstr ""

# ad4442588358471e9635b2ec43d6c073
# fc15ad33cdfc41669f2f8717d897bea2
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:69
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:110
msgid ""
"Previously, assigning unsaved objects did not raise an error and could "
"result in silent data loss."
msgstr ""

# 5514efbd40b34286813202a548edb24c
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:72
msgid "Article objects have access to their related Reporter objects::"
msgstr ""

# 8d61db5397254d1b8a865fd0c14607a7
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:76
msgid ""
"On Python 2, these are strings of type ``str`` instead of unicode strings "
"because that's what was used in the creation of this reporter (and we "
"haven't refreshed the data from the database, which always returns unicode "
"strings)::"
msgstr ""

# 4863a8ecfd724806adcd0c6b0bf6a980
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:83
msgid "Create an Article via the Reporter object::"
msgstr ""

# bde679f0c50045539f3181260263d731
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:93
msgid "Create a new article, and add it to the article set::"
msgstr ""

# aa29d3fea18e4dbfbb17b26096e2301a
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:104
msgid ""
"Add the same article to a different article set - check that it moves::"
msgstr ""

# 334516376c034e6eb21a15d4a254ec68
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:112
msgid "Adding an object of the wrong type raises TypeError::"
msgstr ""

# 1339781a132f45aab19ddcf8bf6255cc
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:130
msgid "Note that in the last example the article has moved from John to Paul."
msgstr ""

# 05201dc50f944c8e8ff116a1c76e015c
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:132
msgid ""
"Related managers support field lookups as well. The API automatically "
"follows relationships as far as you need. Use double underscores to separate"
" relationships. This works as many levels deep as you want. There's no "
"limit. For example::"
msgstr ""

# ff6c76926400453a80d0f28de4c10638
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:144
msgid "Exact match is implied here::"
msgstr ""

# 27f4d4bacd324a71bb80834e05eb708d
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:149
msgid ""
"Query twice over the related field. This translates to an AND condition in "
"the WHERE clause::"
msgstr ""

# 475897d5adf7442ea286099f8036d918
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:155
msgid ""
"For the related lookup you can supply a primary key value or pass the "
"related object explicitly::"
msgstr ""

# 597f051b86fc47d9a274783b55daa0d2
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:170
msgid "You can also use a queryset instead of a literal list of instances::"
msgstr ""

# 43321ca8d47442c192ac0ebc6d01c457
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:175
msgid "Querying in the opposite direction::"
msgstr ""

# 1a6ff60c6ef3476fb912096cfcfda931
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:189
msgid ""
"Counting in the opposite direction works in conjunction with distinct()::"
msgstr ""

# fa4c5cb3a992468aa9ce99802fd95c22
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:196
msgid "Queries can go round in circles::"
msgstr ""

# 056c1ac13f78426a82405fba97a6665e
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:205
msgid ""
"If you delete a reporter, his articles will be deleted (assuming that the "
"ForeignKey was defined with :attr:`django.db.models.ForeignKey.on_delete` "
"set to ``CASCADE``, which is the default)::"
msgstr ""

# 6535d5030b6245eb8340c45c34ae619e
#: ../../../../1.8/docs/topics/db/examples/many_to_one.txt:219
msgid "You can delete using a JOIN in the query::"
msgstr ""

# 9eac9eb1c7fc4970be63c4d7638ee43c
# d4f0647671ab4d6fbe1b1ac39e2d01c3
# e36ef6a8b1824fd5a73540b3a49b5525
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:3
#: ../../../../1.8/docs/topics/db/models.txt:575
#: ../../../../1.8/docs/topics/db/queries.txt:1269
msgid "One-to-one relationships"
msgstr ""

# 657519fdca0343bcb6ed905f906f891f
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:5
msgid "To define a one-to-one relationship, use :ref:`ref-onetoone`."
msgstr ""

# 992c787521a745b4bb78816e6dfcfdce
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:7
msgid "In this example, a ``Place`` optionally can be a ``Restaurant``::"
msgstr ""

# 59b45b5650ec4b8d98c0365ab3444cdf
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:38
msgid "Create a couple of Places::"
msgstr ""

# d9d78dfbb7f04bc3b2fddf79a0152e71
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:45
msgid ""
"Create a Restaurant. Pass the ID of the \"parent\" object as this object's "
"ID::"
msgstr ""

# 2b42d38ae43a40bd83fc43d37b71af12
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:50
msgid "A Restaurant can access its place::"
msgstr ""

# 1cee81fff4be4a07a731c3496205ef78
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:55
msgid "A Place can access its restaurant, if available::"
msgstr ""

# 878d09ccc4e34627a3a2ea9bb864d40d
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:60
msgid "p2 doesn't have an associated restaurant::"
msgstr ""

# 33fb84f191914db4a0476249c4b631e5
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:69
msgid ""
"You can also use ``hasattr`` to avoid the need for exception catching::"
msgstr ""

# 6ca73845b37e43bb849beb7530d19326
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:74
msgid ""
"Set the place using assignment notation. Because place is the primary key on"
" Restaurant, the save will create a new restaurant::"
msgstr ""

# 9dda84d2e07c4e95b63363030f68a5b4
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:84
msgid "Set the place back again, using assignment in the reverse direction::"
msgstr ""

# c1e985619d1c41209f2b8a9bebc70b46
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:90
msgid ""
"Note that you must save an object before it can be assigned to a one-to-one "
"relationship. For example, creating an ``Restaurant`` with unsaved ``Place``"
" raises ``ValueError``::"
msgstr ""

# 427c8247f0554d888f7aceda0e586a71
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:113
msgid ""
"Restaurant.objects.all() just returns the Restaurants, not the Places.  Note"
" that there are two restaurants - Ace Hardware the Restaurant was created in"
" the call to r.place = p2::"
msgstr ""

# e952b8f272b14d7e882363a491a32279
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:120
msgid ""
"Place.objects.all() returns all Places, regardless of whether they have "
"Restaurants::"
msgstr ""

# ab51192ba8994733b42be2456a6cba15
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:126
msgid ""
"You can query the models using :ref:`lookups across relationships <lookups-"
"that-span-relationships>`::"
msgstr ""

# 1ff42906f72945809befb08513d7ed12
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:137
msgid "This of course works in reverse::"
msgstr ""

# d2a8b2b6fda14e47aca5cdc6b1bd90f6
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:148
msgid "Add a Waiter to the Restaurant::"
msgstr ""

# 0eceeb0c790e48c88f9c741b410c1a61
#: ../../../../1.8/docs/topics/db/examples/one_to_one.txt:155
msgid "Query the waiters::"
msgstr ""

# d92d570144774638a7de6911b1bd82d3
#: ../../../../1.8/docs/topics/db/index.txt:2
msgid "Models and databases"
msgstr ""

# 3a664cda3d2f411695b09f2427914b9e
#: ../../../../1.8/docs/topics/db/index.txt:6
msgid ""
"A model is the single, definitive source of data about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Generally, each model maps to a single database table."
msgstr ""

# 9a9aaa14499942039140a1f92da1d792
#: ../../../../1.8/docs/topics/db/managers.txt:3
msgid "Managers"
msgstr ""

# 55ef63e8a19046ff8d849fcd8b3aeaf0
#: ../../../../1.8/docs/topics/db/managers.txt:9
msgid ""
"A ``Manager`` is the interface through which database query operations are "
"provided to Django models. At least one ``Manager`` exists for every model "
"in a Django application."
msgstr ""

# ddd5cdbfd9dc4e6d9766ee939500e075
#: ../../../../1.8/docs/topics/db/managers.txt:13
msgid ""
"The way ``Manager`` classes work is documented in :doc:`/topics/db/queries`;"
" this document specifically touches on model options that customize "
"``Manager`` behavior."
msgstr ""

# 29a59789a6db490892bdb814c0bc5e8d
#: ../../../../1.8/docs/topics/db/managers.txt:20
msgid "Manager names"
msgstr ""

# bd96c75f1d0447ccb49c173224e24ecf
#: ../../../../1.8/docs/topics/db/managers.txt:22
msgid ""
"By default, Django adds a ``Manager`` with the name ``objects`` to every "
"Django model class. However, if you want to use ``objects`` as a field name,"
" or if you want to use a name other than ``objects`` for the ``Manager``, "
"you can rename it on a per-model basis. To rename the ``Manager`` for a "
"given class, define a class attribute of type ``models.Manager()`` on that "
"model. For example::"
msgstr ""

# cf1f0a08c68f42979697fee7847fd703
#: ../../../../1.8/docs/topics/db/managers.txt:34
msgid ""
"Using this example model, ``Person.objects`` will generate an "
"``AttributeError`` exception, but ``Person.people.all()`` will provide a "
"list of all ``Person`` objects."
msgstr ""

# 097ddf153b5b43c7aff5987a5b8f5763
#: ../../../../1.8/docs/topics/db/managers.txt:41
msgid "Custom Managers"
msgstr ""

# a0a0111abcd841f3974ef3fb09c9a07f
#: ../../../../1.8/docs/topics/db/managers.txt:43
msgid ""
"You can use a custom ``Manager`` in a particular model by extending the base"
" ``Manager`` class and instantiating your custom ``Manager`` in your model."
msgstr ""

# 62f2041e367a430f9c5372cf1719eda1
#: ../../../../1.8/docs/topics/db/managers.txt:46
msgid ""
"There are two reasons you might want to customize a ``Manager``: to add "
"extra ``Manager`` methods, and/or to modify the initial ``QuerySet`` the "
"``Manager`` returns."
msgstr ""

# 6e469aeb7304409d9d802887b5cc9921
#: ../../../../1.8/docs/topics/db/managers.txt:51
msgid "Adding extra Manager methods"
msgstr ""

# bf6661e655da40d599a288e6c6315f41
#: ../../../../1.8/docs/topics/db/managers.txt:53
msgid ""
"Adding extra ``Manager`` methods is the preferred way to add \"table-level\""
" functionality to your models. (For \"row-level\" functionality -- i.e., "
"functions that act on a single instance of a model object -- use :ref:`Model"
" methods <model-methods>`, not custom ``Manager`` methods.)"
msgstr ""

# a03d43943db94cc997c0c19069beac59
#: ../../../../1.8/docs/topics/db/managers.txt:58
msgid ""
"A custom ``Manager`` method can return anything you want. It doesn't have to"
" return a ``QuerySet``."
msgstr ""

# 872d4c65edc944d790a0507e087274b3
#: ../../../../1.8/docs/topics/db/managers.txt:61
msgid ""
"For example, this custom ``Manager`` offers a method ``with_counts()``, "
"which returns a list of all ``OpinionPoll`` objects, each with an extra "
"``num_responses`` attribute that is the result of an aggregate query::"
msgstr ""

# a725e6a7dae44bb8b4c7ad2368aab65c
#: ../../../../1.8/docs/topics/db/managers.txt:94
msgid ""
"With this example, you'd use ``OpinionPoll.objects.with_counts()`` to return"
" that list of ``OpinionPoll`` objects with ``num_responses`` attributes."
msgstr ""

# 9f180662907543a594ab91f21c76e641
#: ../../../../1.8/docs/topics/db/managers.txt:97
msgid ""
"Another thing to note about this example is that ``Manager`` methods can "
"access ``self.model`` to get the model class to which they're attached."
msgstr ""

# 002c1505f5314effb53601242c83647d
#: ../../../../1.8/docs/topics/db/managers.txt:101
msgid "Modifying initial Manager QuerySets"
msgstr ""

# c5d695f4dcf5444bb666505567621c50
#: ../../../../1.8/docs/topics/db/managers.txt:103
msgid ""
"A ``Manager``’s base ``QuerySet`` returns all objects in the system. For "
"example, using this model::"
msgstr ""

# c9f7fc39e142423eba33f25498f56023
#: ../../../../1.8/docs/topics/db/managers.txt:112
msgid ""
"...the statement ``Book.objects.all()`` will return all books in the "
"database."
msgstr ""

# 01fc3c3d9eae428bbd6d3004b3bdc52c
#: ../../../../1.8/docs/topics/db/managers.txt:114
msgid ""
"You can override a ``Manager``’s base ``QuerySet`` by overriding the "
"``Manager.get_queryset()`` method. ``get_queryset()`` should return a "
"``QuerySet`` with the properties you require."
msgstr ""

# 043262afee9f41a08494c018177b2b14
#: ../../../../1.8/docs/topics/db/managers.txt:118
msgid ""
"For example, the following model has *two* ``Manager``\\s -- one that "
"returns all objects, and one that returns only the books by Roald Dahl::"
msgstr ""

# fdb389fa426a4bb1a0aa45d09ebc3271
#: ../../../../1.8/docs/topics/db/managers.txt:134
msgid ""
"With this sample model, ``Book.objects.all()`` will return all books in the "
"database, but ``Book.dahl_objects.all()`` will only return the ones written "
"by Roald Dahl."
msgstr ""

# f84467846e044fe69342e4b10e217278
#: ../../../../1.8/docs/topics/db/managers.txt:138
msgid ""
"Of course, because ``get_queryset()`` returns a ``QuerySet`` object, you can"
" use ``filter()``, ``exclude()`` and all the other ``QuerySet`` methods on "
"it. So these statements are all legal::"
msgstr ""

# d6d5342ca33c44879d7afada2c06f81d
#: ../../../../1.8/docs/topics/db/managers.txt:146
msgid ""
"This example also pointed out another interesting technique: using multiple "
"managers on the same model. You can attach as many ``Manager()`` instances "
"to a model as you'd like. This is an easy way to define common \"filters\" "
"for your models."
msgstr ""

# dfb31d475a264936b027f98ab5903e11
#: ../../../../1.8/docs/topics/db/managers.txt:169
msgid ""
"This example allows you to request ``Person.authors.all()``, "
"``Person.editors.all()``, and ``Person.people.all()``, yielding predictable "
"results."
msgstr ""

# ea1d6b2a180641f0a24ddedce672276f
#: ../../../../1.8/docs/topics/db/managers.txt:175
msgid "Default managers"
msgstr ""

# c65051a0d12b41d0a2b19c9c1d9f7840
#: ../../../../1.8/docs/topics/db/managers.txt:177
msgid ""
"If you use custom ``Manager`` objects, take note that the first ``Manager`` "
"Django encounters (in the order in which they're defined in the model) has a"
" special status. Django interprets the first ``Manager`` defined in a class "
"as the \"default\" ``Manager``, and several parts of Django (including "
":djadmin:`dumpdata`) will use that ``Manager`` exclusively for that model. "
"As a result, it's a good idea to be careful in your choice of default "
"manager in order to avoid a situation where overriding ``get_queryset()`` "
"results in an inability to retrieve objects you'd like to work with."
msgstr ""

# 2c7fbadd392947ad8af7abfb3231c5f3
#: ../../../../1.8/docs/topics/db/managers.txt:190
msgid "Using managers for related object access"
msgstr ""

# 5d9b507ab5064636a33442e24edad5ce
#: ../../../../1.8/docs/topics/db/managers.txt:192
msgid ""
"By default, Django uses an instance of a \"plain\" manager class when "
"accessing related objects (i.e. ``choice.poll``), not the default manager on"
" the related object. This is because Django needs to be able to retrieve the"
" related object, even if it would otherwise be filtered out (and hence be "
"inaccessible) by the default manager."
msgstr ""

# 2e597bb013124d17aa8246f080ed0270
#: ../../../../1.8/docs/topics/db/managers.txt:198
msgid ""
"If the normal plain manager class (:class:`django.db.models.Manager`) is not"
" appropriate for your circumstances, you can force Django to use the same "
"class as the default manager for your model by setting the "
"``use_for_related_fields`` attribute on the manager class. This is "
"documented fully below_."
msgstr ""

# 19665611543540d695ec34b2caa46b65
#: ../../../../1.8/docs/topics/db/managers.txt:208
msgid "Calling custom ``QuerySet`` methods from the ``Manager``"
msgstr ""

# 0f94d9c80e294a18bd5eb23f31c93045
#: ../../../../1.8/docs/topics/db/managers.txt:210
msgid ""
"While most methods from the standard ``QuerySet`` are accessible directly "
"from the ``Manager``, this is only the case for the extra methods defined on"
" a custom ``QuerySet`` if you also implement them on the ``Manager``::"
msgstr ""

# b71c864d41e14033b093430016a3bb08
#: ../../../../1.8/docs/topics/db/managers.txt:237
msgid ""
"This example allows you to call both ``authors()`` and ``editors()`` "
"directly from the manager ``Person.people``."
msgstr ""

# ae1420caf26449068d3b823cff17e5bf
#: ../../../../1.8/docs/topics/db/managers.txt:243
msgid "Creating ``Manager`` with ``QuerySet`` methods"
msgstr ""

# 0146e40d7d2a4e4aa99a4e7181bc7210
#: ../../../../1.8/docs/topics/db/managers.txt:247
msgid ""
"In lieu of the above approach which requires duplicating methods on both the"
" ``QuerySet`` and the ``Manager``, :meth:`QuerySet.as_manager() "
"<django.db.models.query.QuerySet.as_manager>` can be used to create an "
"instance of ``Manager`` with a copy of a custom ``QuerySet``’s methods::"
msgstr ""

# b3a4330cd16a4eddbddc9adbc972f203
#: ../../../../1.8/docs/topics/db/managers.txt:256
msgid ""
"The ``Manager`` instance created by :meth:`QuerySet.as_manager() "
"<django.db.models.query.QuerySet.as_manager>` will be virtually identical to"
" the ``PersonManager`` from the previous example."
msgstr ""

# c78578e7899041cbb4123882158fa39e
#: ../../../../1.8/docs/topics/db/managers.txt:260
msgid ""
"Not every ``QuerySet`` method makes sense at the ``Manager`` level; for "
"instance we intentionally prevent the :meth:`QuerySet.delete() "
"<django.db.models.query.QuerySet.delete>` method from being copied onto the "
"``Manager`` class."
msgstr ""

# 2bb84cb9a1ff4ebe8986fc21fedfd68b
#: ../../../../1.8/docs/topics/db/managers.txt:265
msgid "Methods are copied according to the following rules:"
msgstr ""

# 139c912c11654120ba2445453cb6df46
#: ../../../../1.8/docs/topics/db/managers.txt:267
msgid "Public methods are copied by default."
msgstr ""

# 2b16d0a7a8e04958b69a0118d7a71f84
#: ../../../../1.8/docs/topics/db/managers.txt:268
msgid ""
"Private methods (starting with an underscore) are not copied by default."
msgstr ""

# a9a6e7d1a9ee42658ff48035064ee3b7
#: ../../../../1.8/docs/topics/db/managers.txt:269
msgid ""
"Methods with a ``queryset_only`` attribute set to ``False`` are always "
"copied."
msgstr ""

# fd55f63aa3ed4c77ad29f261e7581b8e
#: ../../../../1.8/docs/topics/db/managers.txt:270
msgid ""
"Methods with a ``queryset_only`` attribute set to ``True`` are never copied."
msgstr ""

# c1116d98f4124025a557f1669a002f38
#: ../../../../1.8/docs/topics/db/managers.txt:294
msgid "from_queryset"
msgstr ""

# 5fbb83c51b7c45c4a8657c57a9bb4da1
#: ../../../../1.8/docs/topics/db/managers.txt:298
msgid ""
"For advanced usage you might want both a custom ``Manager`` and a custom "
"``QuerySet``. You can do that by calling ``Manager.from_queryset()`` which "
"returns a *subclass* of your base ``Manager`` with a copy of the custom "
"``QuerySet`` methods::"
msgstr ""

# 7f5cf85565bd4dda9ff4d2c3ffaee476
#: ../../../../1.8/docs/topics/db/managers.txt:314
msgid "You may also store the generated class into a variable::"
msgstr ""

# b4582fb4fad4462eb5791d0c07326f48
#: ../../../../1.8/docs/topics/db/managers.txt:324
msgid "Custom managers and model inheritance"
msgstr ""

# ef5d65489d2b4c698c6f8f62e2337e5e
#: ../../../../1.8/docs/topics/db/managers.txt:326
msgid ""
"Class inheritance and model managers aren't quite a perfect match for each "
"other. Managers are often specific to the classes they are defined on and "
"inheriting them in subclasses isn't necessarily a good idea. Also, because "
"the first manager declared is the *default manager*, it is important to "
"allow that to be controlled. So here's how Django handles custom managers "
"and :ref:`model inheritance <model-inheritance>`:"
msgstr ""

# 2c7eaa2362cc49dcad5fb3ae0d5ff662
#: ../../../../1.8/docs/topics/db/managers.txt:333
msgid ""
"Managers defined on non-abstract base classes are *not* inherited by child "
"classes. If you want to reuse a manager from a non-abstract base, redeclare "
"it explicitly on the child class. These sorts of managers are likely to be "
"fairly specific to the class they are defined on, so inheriting them can "
"often lead to unexpected results (particularly as far as the default manager"
" goes). Therefore, they aren't passed onto child classes."
msgstr ""

# 1e10ab4326e34c9a828e5e53c87a1b1d
#: ../../../../1.8/docs/topics/db/managers.txt:341
msgid ""
"Managers from abstract base classes are always inherited by the child class,"
" using Python's normal name resolution order (names on the child class "
"override all others; then come names on the first parent class, and so on). "
"Abstract base classes are designed to capture information and behavior that "
"is common to their child classes. Defining common managers is an appropriate"
" part of this common information."
msgstr ""

# 1ccc8aaa79c048808a5830c90042ff3f
#: ../../../../1.8/docs/topics/db/managers.txt:348
msgid ""
"The default manager on a class is either the first manager declared on the "
"class, if that exists, or the default manager of the first abstract base "
"class in the parent hierarchy, if that exists. If no default manager is "
"explicitly declared, Django's normal default manager is used."
msgstr ""

# fe979b6d4bf742c0b1ddae1dd24ada9d
#: ../../../../1.8/docs/topics/db/managers.txt:354
msgid ""
"These rules provide the necessary flexibility if you want to install a "
"collection of custom managers on a group of models, via an abstract base "
"class, but still customize the default manager. For example, suppose you "
"have this base class::"
msgstr ""

# 615ee9b029f9410dad77930fcea70007
#: ../../../../1.8/docs/topics/db/managers.txt:366
msgid ""
"If you use this directly in a subclass, ``objects`` will be the default "
"manager if you declare no managers in the base class::"
msgstr ""

# ff21930b00df42e5acaeb888c66d46ba
#: ../../../../1.8/docs/topics/db/managers.txt:374
msgid ""
"If you want to inherit from ``AbstractBase``, but provide a different "
"default manager, you can provide the default manager on the child class::"
msgstr ""

# 2b2b1e29a6d9427595098e38ab22645a
#: ../../../../1.8/docs/topics/db/managers.txt:382
msgid ""
"Here, ``default_manager`` is the default. The ``objects`` manager is still "
"available, since it's inherited. It just isn't used as the default."
msgstr ""

# aed84c820491467c83f0a3b43c0bc38f
#: ../../../../1.8/docs/topics/db/managers.txt:385
msgid ""
"Finally for this example, suppose you want to add extra managers to the "
"child class, but still use the default from ``AbstractBase``. You can't add "
"the new manager directly in the child class, as that would override the "
"default and you would have to also explicitly include all the managers from "
"the abstract base class. The solution is to put the extra managers in "
"another base class and introduce it into the inheritance hierarchy *after* "
"the defaults::"
msgstr ""

# 7a9ddbcd77134ceaa5e79dcb77324b23
#: ../../../../1.8/docs/topics/db/managers.txt:404
msgid ""
"Note that while you can *define* a custom manager on the abstract model, you"
" can't *invoke* any methods using the abstract model. That is::"
msgstr ""

# bbbf21f5bcca48fe90a3c916fa7641d7
#: ../../../../1.8/docs/topics/db/managers.txt:409
msgid "is legal, but::"
msgstr ""

# 0489628aaeb1460ba382bedf883b13d5
#: ../../../../1.8/docs/topics/db/managers.txt:413
msgid ""
"will raise an exception. This is because managers are intended to "
"encapsulate logic for managing collections of objects. Since you can't have "
"a collection of abstract objects, it doesn't make sense to be managing them."
" If you have functionality that applies to the abstract model, you should "
"put that functionality in a ``staticmethod`` or ``classmethod`` on the "
"abstract model."
msgstr ""

# 94a5b6c709954c4baee46e90cbdcc817
#: ../../../../1.8/docs/topics/db/managers.txt:420
msgid "Implementation concerns"
msgstr ""

# dd5220dc9ca548b581d15e9297e32666
#: ../../../../1.8/docs/topics/db/managers.txt:422
msgid ""
"Whatever features you add to your custom ``Manager``, it must be possible to"
" make a shallow copy of a ``Manager`` instance; i.e., the following code "
"must work::"
msgstr ""

# 2d2b257929ad425a8017b27cf4aa5c9d
#: ../../../../1.8/docs/topics/db/managers.txt:430
msgid ""
"Django makes shallow copies of manager objects during certain queries; if "
"your Manager cannot be copied, those queries will fail."
msgstr ""

# 272cef0b83704a12a5f7fec65ae30eff
#: ../../../../1.8/docs/topics/db/managers.txt:433
msgid ""
"This won't be an issue for most custom managers. If you are just adding "
"simple methods to your ``Manager``, it is unlikely that you will "
"inadvertently make instances of your ``Manager`` uncopyable. However, if "
"you're overriding ``__getattr__`` or some other private method of your "
"``Manager`` object that controls object state, you should ensure that you "
"don't affect the ability of your ``Manager`` to be copied."
msgstr ""

# eced40af65c040c491a0502b265cddef
#: ../../../../1.8/docs/topics/db/managers.txt:444
msgid "Controlling automatic Manager types"
msgstr ""

# cba6ee04b699431b97a0a7d5be9da179
#: ../../../../1.8/docs/topics/db/managers.txt:446
msgid ""
"This document has already mentioned a couple of places where Django creates "
"a manager class for you: `default managers`_ and the \"plain\" manager used "
"to `access related objects`_. There are other places in the implementation "
"of Django where temporary plain managers are needed. Those automatically "
"created managers will normally be instances of the "
":class:`django.db.models.Manager` class."
msgstr ""

# 43bd8611d50f4497b2c2a8044892d06f
#: ../../../../1.8/docs/topics/db/managers.txt:456
msgid ""
"Throughout this section, we will use the term \"automatic manager\" to mean "
"a manager that Django creates for you -- either as a default manager on a "
"model with no managers, or to use temporarily when accessing related "
"objects."
msgstr ""

# 063f9dd8515542d9a1f1916c73f3ddd7
#: ../../../../1.8/docs/topics/db/managers.txt:460
msgid ""
"Sometimes this default class won't be the right choice. One example is in "
"the :mod:`django.contrib.gis` application that ships with Django itself. All"
" ``gis`` models must use a special manager class "
"(:class:`~django.contrib.gis.db.models.GeoManager`) because they need a "
"special queryset (:class:`~django.contrib.gis.db.models.GeoQuerySet`) to be "
"used for interacting with the database.  It turns out that models which "
"require a special manager like this need to use the same manager class "
"wherever an automatic manager is created."
msgstr ""

# eb87807dedf64834a2c886dbed1e1831
#: ../../../../1.8/docs/topics/db/managers.txt:468
msgid ""
"Django provides a way for custom manager developers to say that their "
"manager class should be used for automatic managers whenever it is the "
"default manager on a model. This is done by setting the "
"``use_for_related_fields`` attribute on the manager class::"
msgstr ""

# 059bc825abb24beabfcf3d8073775fb6
#: ../../../../1.8/docs/topics/db/managers.txt:477
msgid ""
"If this attribute is set on the *default* manager for a model (only the "
"default manager is considered in these situations), Django will use that "
"class whenever it needs to automatically create a manager for the class.  "
"Otherwise, it will use :class:`django.db.models.Manager`."
msgstr ""

# cb097c73a53640019c5e11d6f325e7b7
#: ../../../../1.8/docs/topics/db/managers.txt:482
msgid "Historical Note"
msgstr ""

# 7ff37c581e3341a98c64ecb959ee58f6
#: ../../../../1.8/docs/topics/db/managers.txt:484
msgid ""
"Given the purpose for which it's used, the name of this attribute "
"(``use_for_related_fields``) might seem a little odd. Originally, the "
"attribute only controlled the type of manager used for related field access,"
" which is where the name came from. As it became clear the concept was more "
"broadly useful, the name hasn't been changed. This is primarily so that "
"existing code will :doc:`continue to work </misc/api-stability>` in future "
"Django versions."
msgstr ""

# b08fbfa923e441d0bb5d9c868072d7b3
#: ../../../../1.8/docs/topics/db/managers.txt:493
msgid "Writing correct Managers for use in automatic Manager instances"
msgstr ""

# aad280100f564eae8d7b5b965cc14526
#: ../../../../1.8/docs/topics/db/managers.txt:495
msgid ""
"As already suggested by the :mod:`django.contrib.gis` example, above, the "
"``use_for_related_fields`` feature is primarily for managers that need to "
"return a custom ``QuerySet`` subclass. In providing this functionality in "
"your manager, there are a couple of things to remember."
msgstr ""

# 701b3fe088734116a9750ecf3e45a8a3
#: ../../../../1.8/docs/topics/db/managers.txt:501
msgid "Do not filter away any results in this type of manager subclass"
msgstr ""

# ddf83d273f6544d5b433e5b4cd565eae
#: ../../../../1.8/docs/topics/db/managers.txt:503
msgid ""
"One reason an automatic manager is used is to access objects that are "
"related to from some other model. In those situations, Django has to be able"
" to see all the objects for the model it is fetching, so that *anything* "
"which is referred to can be retrieved."
msgstr ""

# 24e98c83ee694775a51240a9ca04b581
#: ../../../../1.8/docs/topics/db/managers.txt:508
msgid ""
"If you override the ``get_queryset()`` method and filter out any rows, "
"Django will return incorrect results. Don't do that. A manager that filters "
"results in ``get_queryset()`` is not appropriate for use as an automatic "
"manager."
msgstr ""

# dea071cc14a54c68969138947c9f9dc0
#: ../../../../1.8/docs/topics/db/managers.txt:513
msgid "Set ``use_for_related_fields`` when you define the class"
msgstr ""

# 4b84411be0aa426bb06420043f66790b
#: ../../../../1.8/docs/topics/db/managers.txt:515
msgid ""
"The ``use_for_related_fields`` attribute must be set on the manager *class*,"
" not on an *instance* of the class. The earlier example shows the correct "
"way to set it, whereas the following will not work::"
msgstr ""

# 7ea6c405636042818b9287484b2315ae
#: ../../../../1.8/docs/topics/db/managers.txt:535
msgid ""
"You also shouldn't change the attribute on the class object after it has "
"been used in a model, since the attribute's value is processed when the "
"model class is created and not subsequently reread. Set the attribute on the"
" manager class when it is first defined, as in the initial example of this "
"section and everything will work smoothly."
msgstr ""

# 5e7e4f3c3b754f7bb281ce5e57b6a487
#: ../../../../1.8/docs/topics/db/models.txt:3
msgid "Models"
msgstr "Modelos"

# 1b38f414cfe141e2b460dbd2a61e1c46
#: ../../../../1.8/docs/topics/db/models.txt:7
msgid ""
"A model is the single, definitive source of information about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Generally, each model maps to a single database table."
msgstr ""

# 512024c1a0fe42a881e5b4e3f6f8c9f3
#: ../../../../1.8/docs/topics/db/models.txt:11
msgid "The basics:"
msgstr ""

# 36be66c335bd475d984c7357901512a9
#: ../../../../1.8/docs/topics/db/models.txt:13
msgid ""
"Each model is a Python class that subclasses "
":class:`django.db.models.Model`."
msgstr ""

# 01a0a10212a647eaa670a875a7cc016e
#: ../../../../1.8/docs/topics/db/models.txt:16
msgid "Each attribute of the model represents a database field."
msgstr ""

# f03901bcbdae4a0db424c72cd0dbec1c
#: ../../../../1.8/docs/topics/db/models.txt:18
msgid ""
"With all of this, Django gives you an automatically-generated database-"
"access API; see :doc:`/topics/db/queries`."
msgstr ""

# 950c361691474676b2bdd5da7b882da1
# 24f75727a8a142d88db86798ac11f03d
#: ../../../../1.8/docs/topics/db/models.txt:23
#: ../../../../1.8/docs/topics/email.txt:17
msgid "Quick example"
msgstr ""

# ee01b390ed0d4f8bacbd6775a0a96698
#: ../../../../1.8/docs/topics/db/models.txt:25
msgid ""
"This example model defines a ``Person``, which has a ``first_name`` and "
"``last_name``::"
msgstr ""

# 73b3b9621f3040988bf0aff08a494513
#: ../../../../1.8/docs/topics/db/models.txt:34
msgid ""
"``first_name`` and ``last_name`` are fields_ of the model. Each field is "
"specified as a class attribute, and each attribute maps to a database "
"column."
msgstr ""

# 232a496effb54993aed53c0c0e3a9c35
#: ../../../../1.8/docs/topics/db/models.txt:37
msgid "The above ``Person`` model would create a database table like this:"
msgstr ""

# eab0a64653d04a618be36584d21c8180
#: ../../../../1.8/docs/topics/db/models.txt:47
msgid "Some technical notes:"
msgstr ""

# 03b462e5dde2496794f4fdeb0d60f60d
#: ../../../../1.8/docs/topics/db/models.txt:49
msgid ""
"The name of the table, ``myapp_person``, is automatically derived from some "
"model metadata but can be overridden. See :ref:`table-names` for more "
"details."
msgstr ""

# f297b6adfc4149ad94d7ae04f1bffd1b
#: ../../../../1.8/docs/topics/db/models.txt:53
msgid ""
"An ``id`` field is added automatically, but this behavior can be overridden."
" See :ref:`automatic-primary-key-fields`."
msgstr ""

# 02ec2fc4c0fc4b8f92c20fb9a67b4b30
#: ../../../../1.8/docs/topics/db/models.txt:56
msgid ""
"The ``CREATE TABLE`` SQL in this example is formatted using PostgreSQL "
"syntax, but it's worth noting Django uses SQL tailored to the database "
"backend specified in your :doc:`settings file </topics/settings>`."
msgstr ""

# 181fed3f1eb549bb907ede1be0f315c0
#: ../../../../1.8/docs/topics/db/models.txt:61
msgid "Using models"
msgstr ""

# 03820751c40f456aaa1dfcc998655630
#: ../../../../1.8/docs/topics/db/models.txt:63
msgid ""
"Once you have defined your models, you need to tell Django you're going to "
"*use* those models. Do this by editing your settings file and changing the "
":setting:`INSTALLED_APPS` setting to add the name of the module that "
"contains your ``models.py``."
msgstr ""

# d3d256a6ff374bdebe3417b35d1ee808
#: ../../../../1.8/docs/topics/db/models.txt:68
msgid ""
"For example, if the models for your application live in the module "
"``myapp.models`` (the package structure that is created for an application "
"by the :djadmin:`manage.py startapp <startapp>` script), "
":setting:`INSTALLED_APPS` should read, in part::"
msgstr ""

# 426daaf6e93749cb86df75b1d9448a63
#: ../../../../1.8/docs/topics/db/models.txt:79
msgid ""
"When you add new apps to :setting:`INSTALLED_APPS`, be sure to run "
":djadmin:`manage.py migrate <migrate>`, optionally making migrations for "
"them first with :djadmin:`manage.py makemigrations <makemigrations>`."
msgstr ""

# 9b35f271c5a54517a57362f46b0e51ec
#: ../../../../1.8/docs/topics/db/models.txt:84
msgid "Fields"
msgstr "Campo"

# edb0679e728443d68c430927f0ab03f0
#: ../../../../1.8/docs/topics/db/models.txt:86
msgid ""
"The most important part of a model -- and the only required part of a model "
"-- is the list of database fields it defines. Fields are specified by class "
"attributes. Be careful not to choose field names that conflict with the "
":doc:`models API </ref/models/instances>` like ``clean``, ``save``, or "
"``delete``."
msgstr ""

# 5782eb793dce48a98ea57aa02b141a51
# cbfbfc2bcbc24060b982d58aa2460134
# f19533517ec144448be0424cc058e13c
# e0357cb153174b04b8fa23c9e29be23a
# d2f642486b8d46dd8d3782e75e762a7a
#: ../../../../1.8/docs/topics/db/models.txt:92
#: ../../../../1.8/docs/topics/db/queries.txt:251
#: ../../../../1.8/docs/topics/db/queries.txt:1094
#: ../../../../1.8/docs/topics/db/queries.txt:1144
#: ../../../../1.8/docs/topics/settings.txt:187
msgid "Example::"
msgstr ""

# 3ceff0fd9faf4aecbb0ed0da91d8c865
# 7f4b46979c054fd68602d2e20e758705
#: ../../../../1.8/docs/topics/db/models.txt:108
#: ../../../../1.8/docs/topics/forms/modelforms.txt:42
msgid "Field types"
msgstr ""

# 923060a5585347dcac37346f4808fff8
#: ../../../../1.8/docs/topics/db/models.txt:110
msgid ""
"Each field in your model should be an instance of the appropriate "
":class:`~django.db.models.Field` class. Django uses the field class types to"
" determine a few things:"
msgstr ""

# e2d3bcab4ff2460a8235261e36325490
#: ../../../../1.8/docs/topics/db/models.txt:114
msgid "The database column type (e.g. ``INTEGER``, ``VARCHAR``)."
msgstr ""

# 5783622055e2496d981b2ea681fb60f7
#: ../../../../1.8/docs/topics/db/models.txt:116
msgid ""
"The default HTML :doc:`widget </ref/forms/widgets>` to use when rendering a "
"form field (e.g. ``<input type=\"text\">``, ``<select>``)."
msgstr ""

# f10f241477a84a3aaa90b064da692a7e
#: ../../../../1.8/docs/topics/db/models.txt:119
msgid ""
"The minimal validation requirements, used in Django's admin and in "
"automatically-generated forms."
msgstr ""

# 971c29666cc6468ab498a1c65ca36ef6
#: ../../../../1.8/docs/topics/db/models.txt:122
msgid ""
"Django ships with dozens of built-in field types; you can find the complete "
"list in the :ref:`model field reference <model-field-types>`. You can easily"
" write your own fields if Django's built-in ones don't do the trick; see "
":doc:`/howto/custom-model-fields`."
msgstr ""

# 6d87cd109ee344ba941f675b183a60a5
#: ../../../../1.8/docs/topics/db/models.txt:128
msgid "Field options"
msgstr ""

# c5acfa9e1a3b4f30bd050ad3524be405
#: ../../../../1.8/docs/topics/db/models.txt:130
msgid ""
"Each field takes a certain set of field-specific arguments (documented in "
"the :ref:`model field reference <model-field-types>`). For example, "
":class:`~django.db.models.CharField` (and its subclasses) require a "
":attr:`~django.db.models.CharField.max_length` argument which specifies the "
"size of the ``VARCHAR`` database field used to store the data."
msgstr ""

# 275d5a4260ce472ea431b5cf76d6fed8
#: ../../../../1.8/docs/topics/db/models.txt:136
msgid ""
"There's also a set of common arguments available to all field types. All are"
" optional. They're fully explained in the :ref:`reference <common-model-"
"field-options>`, but here's a quick summary of the most often-used ones:"
msgstr ""

# 9b8b3effbca44871a1d53af201d6da61
#: ../../../../1.8/docs/topics/db/models.txt:143
msgid ":attr:`~Field.null`"
msgstr ""

# 076150a325a94e639dc9d6298d308924
#: ../../../../1.8/docs/topics/db/models.txt:142
msgid ""
"If ``True``, Django will store empty values as ``NULL`` in the database. "
"Default is ``False``."
msgstr ""

# 83891d0dccf34857a26c5baa81ada74b
#: ../../../../1.8/docs/topics/db/models.txt:153
msgid ":attr:`~Field.blank`"
msgstr ""

# 2c0d6eb755ca4f86be6758f8450383a7
#: ../../../../1.8/docs/topics/db/models.txt:146
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""

# 57718d84a81a4f05b0a5667b62e79af3
#: ../../../../1.8/docs/topics/db/models.txt:148
msgid ""
"Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is"
" purely database-related, whereas :attr:`~Field.blank` is validation-"
"related. If a field has :attr:`blank=True <Field.blank>`, form validation "
"will allow entry of an empty value. If a field has :attr:`blank=False "
"<Field.blank>`, the field will be required."
msgstr ""

# 8fb7e755b67b41ee87afac5a736e47a0
#: ../../../../1.8/docs/topics/db/models.txt:195
msgid ":attr:`~Field.choices`"
msgstr ""

# fc1ee597ba524830af79fdfa7edd2007
#: ../../../../1.8/docs/topics/db/models.txt:156
msgid ""
"An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this "
"field. If this is given, the default form widget will be a select box "
"instead of the standard text field and will limit choices to the choices "
"given."
msgstr ""

# 091e0435bfc54ba68915e8e2ec20c3b4
#: ../../../../1.8/docs/topics/db/models.txt:161
msgid "A choices list looks like this::"
msgstr ""

# e4156a61ae0047a1855b319a5f09afad
#: ../../../../1.8/docs/topics/db/models.txt:171
msgid ""
"The first element in each tuple is the value that will be stored in the "
"database, the second element will be displayed by the default form widget or"
" in a ModelChoiceField. Given an instance of a model object, the display "
"value for a choices field can be accessed using the ``get_FOO_display`` "
"method. For example::"
msgstr ""

# 5b417a47456a40e889fc806694693cef
#: ../../../../1.8/docs/topics/db/models.txt:200
msgid ":attr:`~Field.default`"
msgstr ""

# d95b5f96764c4d7790665def7ed638e5
#: ../../../../1.8/docs/topics/db/models.txt:198
msgid ""
"The default value for the field. This can be a value or a callable object. "
"If callable it will be called every time a new object is created."
msgstr ""

# 569dace697904e05a643b9c41936def4
#: ../../../../1.8/docs/topics/db/models.txt:204
msgid ":attr:`~Field.help_text`"
msgstr ""

# e511245bca7c4d7fa1e7a859c2371d1a
#: ../../../../1.8/docs/topics/db/models.txt:203
msgid ""
"Extra \"help\" text to be displayed with the form widget. It's useful for "
"documentation even if your field isn't used on a form."
msgstr ""

# 0df81efc575042bb82b896f8f228f0cb
#: ../../../../1.8/docs/topics/db/models.txt:231
msgid ":attr:`~Field.primary_key`"
msgstr ""

# f60ee34bd34342548964fe0ae400aa12
#: ../../../../1.8/docs/topics/db/models.txt:207
msgid "If ``True``, this field is the primary key for the model."
msgstr ""

# b16bf109cb6f4749bc88bfe1fa83b0a9
#: ../../../../1.8/docs/topics/db/models.txt:209
msgid ""
"If you don't specify :attr:`primary_key=True <Field.primary_key>` for any "
"fields in your model, Django will automatically add an :class:`IntegerField`"
" to hold the primary key, so you don't need to set :attr:`primary_key=True "
"<Field.primary_key>` on any of your fields unless you want to override the "
"default primary-key behavior. For more, see :ref:`automatic-primary-key-"
"fields`."
msgstr ""

# b6a7cbeb254e40f5877cc76ed295e774
#: ../../../../1.8/docs/topics/db/models.txt:216
msgid ""
"The primary key field is read-only. If you change the value of the primary "
"key on an existing object and then save it, a new object will be created "
"alongside the old one. For example::"
msgstr ""

# 169181fb8633413fb49d11358ccfc0c1
#: ../../../../1.8/docs/topics/db/models.txt:234
msgid ":attr:`~Field.unique`"
msgstr ""

# 029dcbd85a504daf8f3efec9b8554120
#: ../../../../1.8/docs/topics/db/models.txt:234
msgid "If ``True``, this field must be unique throughout the table."
msgstr ""

# 529880a28bfc433db3edd811fb88f7c9
#: ../../../../1.8/docs/topics/db/models.txt:236
msgid ""
"Again, these are just short descriptions of the most common field options. "
"Full details can be found in the :ref:`common model field option reference "
"<common-model-field-options>`."
msgstr ""

# b021b25de73d47b59a3fbf0083e9dc44
#: ../../../../1.8/docs/topics/db/models.txt:243
msgid "Automatic primary key fields"
msgstr ""

# f1a8d0b3f7204fb997ec2265572eaf3e
#: ../../../../1.8/docs/topics/db/models.txt:245
msgid "By default, Django gives each model the following field::"
msgstr ""

# d32337d4f5204808ba7175bf91485a56
#: ../../../../1.8/docs/topics/db/models.txt:249
msgid "This is an auto-incrementing primary key."
msgstr ""

# acb89bef88bb4f2794adfdd4f0c99796
#: ../../../../1.8/docs/topics/db/models.txt:251
msgid ""
"If you'd like to specify a custom primary key, just specify "
":attr:`primary_key=True <Field.primary_key>` on one of your fields. If "
"Django sees you've explicitly set :attr:`Field.primary_key`, it won't add "
"the automatic ``id`` column."
msgstr ""

# e4c5bb21103f4f78975c357e13581f05
#: ../../../../1.8/docs/topics/db/models.txt:256
msgid ""
"Each model requires exactly one field to have :attr:`primary_key=True "
"<Field.primary_key>` (either explicitly declared or automatically added)."
msgstr ""

# 2342b59a6b2f4053846e9ad5a2110632
#: ../../../../1.8/docs/topics/db/models.txt:262
msgid "Verbose field names"
msgstr ""

# e56c080d30b54e418df04655f8759d0e
#: ../../../../1.8/docs/topics/db/models.txt:264
msgid ""
"Each field type, except for :class:`~django.db.models.ForeignKey`, "
":class:`~django.db.models.ManyToManyField` and "
":class:`~django.db.models.OneToOneField`, takes an optional first positional"
" argument -- a verbose name. If the verbose name isn't given, Django will "
"automatically create it using the field's attribute name, converting "
"underscores to spaces."
msgstr ""

# b72ee67f0daa4c52bdb8f694077a1341
#: ../../../../1.8/docs/topics/db/models.txt:271
msgid "In this example, the verbose name is ``\"person's first name\"``::"
msgstr ""

# c70b0f4b76f3409686cb097693ebbb29
#: ../../../../1.8/docs/topics/db/models.txt:275
msgid "In this example, the verbose name is ``\"first name\"``::"
msgstr ""

# 126894c336c1453b976b1e4c35f5f729
#: ../../../../1.8/docs/topics/db/models.txt:279
msgid ""
":class:`~django.db.models.ForeignKey`, "
":class:`~django.db.models.ManyToManyField` and "
":class:`~django.db.models.OneToOneField` require the first argument to be a "
"model class, so use the :attr:`~Field.verbose_name` keyword argument::"
msgstr ""

# 04bd7e39032a480fab8193da9769eeaa
#: ../../../../1.8/docs/topics/db/models.txt:288
msgid ""
"The convention is not to capitalize the first letter of the "
":attr:`~Field.verbose_name`. Django will automatically capitalize the first "
"letter where it needs to."
msgstr ""

# bce1606242a344989ff02883f359558b
#: ../../../../1.8/docs/topics/db/models.txt:293
msgid "Relationships"
msgstr ""

# b9c8c225c0404a0996363a96d8e19c80
#: ../../../../1.8/docs/topics/db/models.txt:295
msgid ""
"Clearly, the power of relational databases lies in relating tables to each "
"other. Django offers ways to define the three most common types of database "
"relationships: many-to-one, many-to-many and one-to-one."
msgstr ""

# 14d7a31bb47545409cc1bc66de4a6e05
#: ../../../../1.8/docs/topics/db/models.txt:302
msgid ""
"To define a many-to-one relationship, use "
":class:`django.db.models.ForeignKey`. You use it just like any other "
":class:`~django.db.models.Field` type: by including it as a class attribute "
"of your model."
msgstr ""

# 7374169c22a54019a169a9b1960e3e38
#: ../../../../1.8/docs/topics/db/models.txt:306
msgid ""
":class:`~django.db.models.ForeignKey` requires a positional argument: the "
"class to which the model is related."
msgstr ""

# 5734bb53601241ebb4bf7fed9eb424c2
#: ../../../../1.8/docs/topics/db/models.txt:309
msgid ""
"For example, if a ``Car`` model has a ``Manufacturer`` -- that is, a "
"``Manufacturer`` makes multiple cars but each ``Car`` only has one "
"``Manufacturer`` -- use the following definitions::"
msgstr ""

# 73cd48c204fa404f9dc5978956c47692
#: ../../../../1.8/docs/topics/db/models.txt:323
msgid ""
"You can also create :ref:`recursive relationships <recursive-relationships>`"
" (an object with a many-to-one relationship to itself) and "
":ref:`relationships to models not yet defined <lazy-relationships>`; see "
":ref:`the model field reference <ref-foreignkey>` for details."
msgstr ""

# 745d1d4cc24e49b9a1c7406d59bdfcc9
#: ../../../../1.8/docs/topics/db/models.txt:328
msgid ""
"It's suggested, but not required, that the name of a "
":class:`~django.db.models.ForeignKey` field (``manufacturer`` in the example"
" above) be the name of the model, lowercase. You can, of course, call the "
"field whatever you want. For example::"
msgstr ""

# b214f8a48937404a93325ecd9c8f6296
#: ../../../../1.8/docs/topics/db/models.txt:339
msgid ""
":class:`~django.db.models.ForeignKey` fields accept a number of extra "
"arguments which are explained in :ref:`the model field reference <foreign-"
"key-arguments>`. These options help define how the relationship should work;"
" all are optional."
msgstr ""

# 3e7c0ad82ae7413983e64b805f1ef660
#: ../../../../1.8/docs/topics/db/models.txt:344
msgid ""
"For details on accessing backwards-related objects, see the :ref:`Following "
"relationships backward example <backwards-related-objects>`."
msgstr ""

# edb5faa61ae34361ba68102c62736340
#: ../../../../1.8/docs/topics/db/models.txt:347
msgid ""
"For sample code, see the :doc:`Many-to-one relationship model example "
"</topics/db/examples/many_to_one>`."
msgstr ""

# 8aa35aecc60b41e6bcea526d76989741
#: ../../../../1.8/docs/topics/db/models.txt:354
msgid ""
"To define a many-to-many relationship, use "
":class:`~django.db.models.ManyToManyField`. You use it just like any other "
":class:`~django.db.models.Field` type: by including it as a class attribute "
"of your model."
msgstr ""

# daad2e9ce6db41c88b6bcc6380f5a7c1
#: ../../../../1.8/docs/topics/db/models.txt:359
msgid ""
":class:`~django.db.models.ManyToManyField` requires a positional argument: "
"the class to which the model is related."
msgstr ""

# f4f49078a69d4b2291f1ee2910c97a87
#: ../../../../1.8/docs/topics/db/models.txt:362
msgid ""
"For example, if a ``Pizza`` has multiple ``Topping`` objects -- that is, a "
"``Topping`` can be on multiple pizzas and each ``Pizza`` has multiple "
"toppings -- here's how you'd represent that::"
msgstr ""

# c227bd780c9948e085cff222629e2819
#: ../../../../1.8/docs/topics/db/models.txt:376
msgid ""
"As with :class:`~django.db.models.ForeignKey`, you can also create "
":ref:`recursive relationships <recursive-relationships>` (an object with a "
"many-to-many relationship to itself) and :ref:`relationships to models not "
"yet defined <lazy-relationships>`; see :ref:`the model field reference <ref-"
"manytomany>` for details."
msgstr ""

# e4b901fa0e1b4f6298539ef05cfab16a
#: ../../../../1.8/docs/topics/db/models.txt:382
msgid ""
"It's suggested, but not required, that the name of a "
":class:`~django.db.models.ManyToManyField` (``toppings`` in the example "
"above) be a plural describing the set of related model objects."
msgstr ""

# 1fc4e58fc5c040a995329589c4fa3e78
#: ../../../../1.8/docs/topics/db/models.txt:386
msgid ""
"It doesn't matter which model has the "
":class:`~django.db.models.ManyToManyField`, but you should only put it in "
"one of the models -- not both."
msgstr ""

# 80fbc851e2da4a878b2be5888054762f
#: ../../../../1.8/docs/topics/db/models.txt:390
msgid ""
"Generally, :class:`~django.db.models.ManyToManyField` instances should go in"
" the object that's going to be edited on a form. In the above example, "
"``toppings`` is in ``Pizza`` (rather than ``Topping`` having a ``pizzas`` "
":class:`~django.db.models.ManyToManyField` ) because it's more natural to "
"think about a pizza having toppings than a topping being on multiple pizzas."
" The way it's set up above, the ``Pizza`` form would let users select the "
"toppings."
msgstr ""

# 39e41127f6574d59bffd06e7c564668e
#: ../../../../1.8/docs/topics/db/models.txt:399
msgid ""
"See the :doc:`Many-to-many relationship model example "
"</topics/db/examples/many_to_many>` for a full example."
msgstr ""

# 2def3b8806cb480bb29a4d92248808ce
#: ../../../../1.8/docs/topics/db/models.txt:402
msgid ""
":class:`~django.db.models.ManyToManyField` fields also accept a number of "
"extra arguments which are explained in :ref:`the model field reference "
"<manytomany-arguments>`. These options help define how the relationship "
"should work; all are optional."
msgstr ""

# d8fda1d80b9741a0bd5da0554cf7f02a
#: ../../../../1.8/docs/topics/db/models.txt:410
msgid "Extra fields on many-to-many relationships"
msgstr ""

# 6a561cfe9fe545f0b68069fe2fdae43a
#: ../../../../1.8/docs/topics/db/models.txt:412
msgid ""
"When you're only dealing with simple many-to-many relationships such as "
"mixing and matching pizzas and toppings, a standard "
":class:`~django.db.models.ManyToManyField` is all you need. However, "
"sometimes you may need to associate data with the relationship between two "
"models."
msgstr ""

# e07961531ab5449f995b9dfe7c5f4032
#: ../../../../1.8/docs/topics/db/models.txt:417
msgid ""
"For example, consider the case of an application tracking the musical groups"
" which musicians belong to. There is a many-to-many relationship between a "
"person and the groups of which they are a member, so you could use a "
":class:`~django.db.models.ManyToManyField` to represent this relationship. "
"However, there is a lot of detail about the membership that you might want "
"to collect, such as the date at which the person joined the group."
msgstr ""

# 2a157a877a4f4f14a81b349fc407b08a
#: ../../../../1.8/docs/topics/db/models.txt:424
msgid ""
"For these situations, Django allows you to specify the model that will be "
"used to govern the many-to-many relationship. You can then put extra fields "
"on the intermediate model. The intermediate model is associated with the "
":class:`~django.db.models.ManyToManyField` using the :attr:`through "
"<ManyToManyField.through>` argument to point to the model that will act as "
"an intermediary. For our musician example, the code would look something "
"like this::"
msgstr ""

# 4cb2348870d443d3a6c33885b0655c0e
#: ../../../../1.8/docs/topics/db/models.txt:453
msgid ""
"When you set up the intermediary model, you explicitly specify foreign keys "
"to the models that are involved in the many-to-many relationship. This "
"explicit declaration defines how the two models are related."
msgstr ""

# 9be4c6694e1540c89190aa80e09a55e4
#: ../../../../1.8/docs/topics/db/models.txt:457
msgid "There are a few restrictions on the intermediate model:"
msgstr ""

# 4b10cd41f8cb4377aea4f0db7158feab
#: ../../../../1.8/docs/topics/db/models.txt:459
msgid ""
"Your intermediate model must contain one - and *only* one - foreign key to "
"the source model (this would be ``Group`` in our example), or you must "
"explicitly specify the foreign keys Django should use for the relationship "
"using :attr:`ManyToManyField.through_fields "
"<ManyToManyField.through_fields>`. If you have more than one foreign key and"
" ``through_fields`` is not specified, a validation error will be raised. A "
"similar restriction applies to the foreign key to the target model (this "
"would be ``Person`` in our example)."
msgstr ""

# 709ad07ec34845d6935d117d9875f7eb
#: ../../../../1.8/docs/topics/db/models.txt:468
msgid ""
"For a model which has a many-to-many relationship to itself through an "
"intermediary model, two foreign keys to the same model are permitted, but "
"they will be treated as the two (different) sides of the many-to-many "
"relationship. If there are *more* than two foreign keys though, you must "
"also specify ``through_fields`` as above, or a validation error will be "
"raised."
msgstr ""

# d2814ca7143b44ca8591be27dce706f6
#: ../../../../1.8/docs/topics/db/models.txt:475
msgid ""
"When defining a many-to-many relationship from a model to itself, using an "
"intermediary model, you *must* use :attr:`symmetrical=False "
"<ManyToManyField.symmetrical>` (see :ref:`the model field reference "
"<manytomany-arguments>`)."
msgstr ""

# 347b9c871189442092b484f3a8aa8163
#: ../../../../1.8/docs/topics/db/models.txt:482
msgid ""
"In Django 1.6 and earlier, intermediate models containing more than one "
"foreign key to any of the models involved in the many-to-many relationship "
"used to be prohibited."
msgstr ""

# 73dcdb76f9844bc5841950057761bcde
#: ../../../../1.8/docs/topics/db/models.txt:486
msgid ""
"Now that you have set up your :class:`~django.db.models.ManyToManyField` to "
"use your intermediary model (``Membership``, in this case), you're ready to "
"start creating some many-to-many relationships. You do this by creating "
"instances of the intermediate model::"
msgstr ""

# c3307896b1544f6f9142e017dbfdb400
#: ../../../../1.8/docs/topics/db/models.txt:508
msgid ""
"Unlike normal many-to-many fields, you *can't* use ``add``, ``create``, or "
"assignment (i.e., ``beatles.members = [...]``) to create relationships::"
msgstr ""

# 6b9320aa9de04308bd3d67ceda8d735b
#: ../../../../1.8/docs/topics/db/models.txt:518
msgid ""
"Why? You can't just create a relationship between a ``Person`` and a "
"``Group`` - you need to specify all the detail for the relationship required"
" by the ``Membership`` model. The simple ``add``, ``create`` and assignment "
"calls don't provide a way to specify this extra detail. As a result, they "
"are disabled for many-to-many relationships that use an intermediate model. "
"The only way to create this type of relationship is to create instances of "
"the intermediate model."
msgstr ""

# 1b95bb6797f14eab82f0e26f062ddd7c
#: ../../../../1.8/docs/topics/db/models.txt:526
msgid ""
"The :meth:`~django.db.models.fields.related.RelatedManager.remove` method is"
" disabled for similar reasons. However, the "
":meth:`~django.db.models.fields.related.RelatedManager.clear` method can be "
"used to remove all many-to-many relationships for an instance::"
msgstr ""

# 5c6a316560fb4a918fddb1214a7abb99
#: ../../../../1.8/docs/topics/db/models.txt:537
msgid ""
"Once you have established the many-to-many relationships by creating "
"instances of your intermediate model, you can issue queries. Just as with "
"normal many-to-many relationships, you can query using the attributes of the"
" many-to-many-related model::"
msgstr ""

# 9cc45b23fd8e4431a2b146e74b95b164
#: ../../../../1.8/docs/topics/db/models.txt:546
msgid ""
"As you are using an intermediate model, you can also query on its "
"attributes::"
msgstr ""

# f33efb4a3e2945a8bc2cbc17e0e57726
#: ../../../../1.8/docs/topics/db/models.txt:554
msgid ""
"If you need to access a membership's information you may do so by directly "
"querying the ``Membership`` model::"
msgstr ""

# c8b20f537eed4f8d935123c2eb744281
#: ../../../../1.8/docs/topics/db/models.txt:563
msgid ""
"Another way to access the same information is by querying the :ref:`many-to-"
"many reverse relationship<m2m-reverse-relationships>` from a ``Person`` "
"object::"
msgstr ""

# e3e2fd6448bb47cdbc1fdfd70d865d4f
#: ../../../../1.8/docs/topics/db/models.txt:577
msgid ""
"To define a one-to-one relationship, use "
":class:`~django.db.models.OneToOneField`. You use it just like any other "
"``Field`` type: by including it as a class attribute of your model."
msgstr ""

# b1cd288a43ff499a82ae7d2dbd1b8b53
#: ../../../../1.8/docs/topics/db/models.txt:581
msgid ""
"This is most useful on the primary key of an object when that object "
"\"extends\" another object in some way."
msgstr ""

# 29a35aea09cf4688b6f0c2613d809c91
#: ../../../../1.8/docs/topics/db/models.txt:584
msgid ""
":class:`~django.db.models.OneToOneField` requires a positional argument: the"
" class to which the model is related."
msgstr ""

# dc5a982abefd4ffe8bec3486cf856731
#: ../../../../1.8/docs/topics/db/models.txt:587
msgid ""
"For example, if you were building a database of \"places\", you would build "
"pretty standard stuff such as address, phone number, etc. in the database. "
"Then, if you wanted to build a database of restaurants on top of the places,"
" instead of repeating yourself and replicating those fields in the "
"``Restaurant`` model, you could make ``Restaurant`` have a "
":class:`~django.db.models.OneToOneField` to ``Place`` (because a restaurant "
"\"is a\" place; in fact, to handle this you'd typically use "
":ref:`inheritance <model-inheritance>`, which involves an implicit one-to-"
"one relation)."
msgstr ""

# fbd2f68ee28b4ee2b1616c0b5c800703
#: ../../../../1.8/docs/topics/db/models.txt:597
msgid ""
"As with :class:`~django.db.models.ForeignKey`, a :ref:`recursive "
"relationship <recursive-relationships>` can be defined and :ref:`references "
"to as-yet undefined models <lazy-relationships>` can be made; see :ref:`the "
"model field reference <ref-onetoone>` for details."
msgstr ""

# 7584ae23ed9a43d9a87def7518a0bb5d
#: ../../../../1.8/docs/topics/db/models.txt:605
msgid ""
"See the :doc:`One-to-one relationship model example "
"</topics/db/examples/one_to_one>` for a full example."
msgstr ""

# 4136215d5fc144019678722fe71b44ea
#: ../../../../1.8/docs/topics/db/models.txt:608
msgid ""
":class:`~django.db.models.OneToOneField` fields also accept one specific, "
"optional ``parent_link`` argument described in the :ref:`model field "
"reference <ref-onetoone>`."
msgstr ""

# 77fa09635d584badaf93142589d754c2
#: ../../../../1.8/docs/topics/db/models.txt:612
msgid ""
":class:`~django.db.models.OneToOneField` classes used to automatically "
"become the primary key on a model. This is no longer true (although you can "
"manually pass in the :attr:`~django.db.models.Field.primary_key` argument if"
" you like). Thus, it's now possible to have multiple fields of type "
":class:`~django.db.models.OneToOneField` on a single model."
msgstr ""

# 4456fc2dc54f408da0e8865876c09844
#: ../../../../1.8/docs/topics/db/models.txt:619
msgid "Models across files"
msgstr ""

# ffb47405496f42239ec330db3dc77b49
#: ../../../../1.8/docs/topics/db/models.txt:621
msgid ""
"It's perfectly OK to relate a model to one from another app. To do this, "
"import the related model at the top of the file where your model is defined."
" Then, just refer to the other model class wherever needed. For example::"
msgstr ""

# e2cd6d2e1e044f1daf83c93e8af36848
#: ../../../../1.8/docs/topics/db/models.txt:633
msgid "Field name restrictions"
msgstr ""

# ab28db13674c447fa0de5c7f9d6cdfcc
#: ../../../../1.8/docs/topics/db/models.txt:635
msgid "Django places only two restrictions on model field names:"
msgstr ""

# 656d7d2e8d9a4fdfaeda3eccbef8cbbb
#: ../../../../1.8/docs/topics/db/models.txt:637
msgid ""
"A field name cannot be a Python reserved word, because that would result in "
"a Python syntax error. For example::"
msgstr ""

# f075075c22824e9a85f05885c7efecaa
#: ../../../../1.8/docs/topics/db/models.txt:643
msgid ""
"A field name cannot contain more than one underscore in a row, due to the "
"way Django's query lookup syntax works. For example::"
msgstr ""

# 32c0bf3350fb449fafa3da28b8f40c74
#: ../../../../1.8/docs/topics/db/models.txt:649
msgid ""
"These limitations can be worked around, though, because your field name "
"doesn't necessarily have to match your database column name. See the "
":attr:`~Field.db_column` option."
msgstr ""

# 66f24fc10820473f868a01951ba8f2af
#: ../../../../1.8/docs/topics/db/models.txt:653
msgid ""
"SQL reserved words, such as ``join``, ``where`` or ``select``, *are* allowed"
" as model field names, because Django escapes all database table names and "
"column names in every underlying SQL query. It uses the quoting syntax of "
"your particular database engine."
msgstr ""

# de757b1f58f2452cadeb864ddf1ac528
#: ../../../../1.8/docs/topics/db/models.txt:659
msgid "Custom field types"
msgstr ""

# 8933e4edd7214558b315098058b5a096
#: ../../../../1.8/docs/topics/db/models.txt:661
msgid ""
"If one of the existing model fields cannot be used to fit your purposes, or "
"if you wish to take advantage of some less common database column types, you"
" can create your own field class. Full coverage of creating your own fields "
"is provided in :doc:`/howto/custom-model-fields`."
msgstr ""

# ddd77215cca64592b6f8c2583d6b04aa
#: ../../../../1.8/docs/topics/db/models.txt:669
msgid "Meta options"
msgstr ""

# 3324cd0b3d1a432da66ebb4bae3eea86
#: ../../../../1.8/docs/topics/db/models.txt:671
msgid "Give your model metadata by using an inner ``class Meta``, like so::"
msgstr ""

# 5fc1f4941b5746a59354503253e24993
#: ../../../../1.8/docs/topics/db/models.txt:682
msgid ""
"Model metadata is \"anything that's not a field\", such as ordering options "
"(:attr:`~Options.ordering`), database table name "
"(:attr:`~Options.db_table`), or human-readable singular and plural names "
"(:attr:`~Options.verbose_name` and :attr:`~Options.verbose_name_plural`). "
"None are required, and adding ``class Meta`` to a model is completely "
"optional."
msgstr ""

# 63b5de5acce14f479d04bffac489d32c
#: ../../../../1.8/docs/topics/db/models.txt:688
msgid ""
"A complete list of all possible ``Meta`` options can be found in the "
":doc:`model option reference </ref/models/options>`."
msgstr ""

# c19f68dfe13744bbb373ffe9c1b0dc82
#: ../../../../1.8/docs/topics/db/models.txt:694
msgid "Model attributes"
msgstr ""

# 8347be0bd3704428b4cd30810ce92722
#: ../../../../1.8/docs/topics/db/models.txt:703
msgid "``objects``"
msgstr ""

# 84add8556b2d44fbb03be1d96e08606a
#: ../../../../1.8/docs/topics/db/models.txt:697
msgid ""
"The most important attribute of a model is the "
":class:`~django.db.models.Manager`. It's the interface through which "
"database query operations are provided to Django models and is used to "
":ref:`retrieve the instances <retrieving-objects>` from the database. If no "
"custom ``Manager`` is defined, the default name is "
":attr:`~django.db.models.Model.objects`. Managers are only accessible via "
"model classes, not the model instances."
msgstr ""

# aecaf57813154e14a6f56a1cd8f4b8e6
#: ../../../../1.8/docs/topics/db/models.txt:708
msgid "Model methods"
msgstr ""

# 0a5c54de5a2a499f9c03d619393ecf77
#: ../../../../1.8/docs/topics/db/models.txt:710
msgid ""
"Define custom methods on a model to add custom \"row-level\" functionality "
"to your objects. Whereas :class:`~django.db.models.Manager` methods are "
"intended to do \"table-wide\" things, model methods should act on a "
"particular model instance."
msgstr ""

# 398e237829a548f0867023825e15a0a1
#: ../../../../1.8/docs/topics/db/models.txt:714
msgid ""
"This is a valuable technique for keeping business logic in one place -- the "
"model."
msgstr ""

# 126c5de9c96e4e2281df8b4f337e1d7b
#: ../../../../1.8/docs/topics/db/models.txt:717
msgid "For example, this model has a few custom methods::"
msgstr ""

# 6ff969dfca6c4342993807a20dd2613d
#: ../../../../1.8/docs/topics/db/models.txt:741
msgid "The last method in this example is a :term:`property`."
msgstr ""

# f47852e0dc744987852ea9ab95833c28
#: ../../../../1.8/docs/topics/db/models.txt:743
msgid ""
"The :doc:`model instance reference </ref/models/instances>` has a complete "
"list of :ref:`methods automatically given to each model <model-instance-"
"methods>`. You can override most of these -- see `overriding predefined "
"model methods`_, below -- but there are a couple that you'll almost always "
"want to define:"
msgstr ""

# c356be665a784775b0212d962238b19b
#: ../../../../1.8/docs/topics/db/models.txt:749
msgid ":meth:`~Model.__str__` (Python 3)"
msgstr ""

# 179ea7260d1245228235306265965722
#: ../../../../1.8/docs/topics/db/models.txt:749
msgid "Python 3 equivalent of ``__unicode__()``."
msgstr ""

# 2060109b35f9433b97e32c4830b118e4
#: ../../../../1.8/docs/topics/db/models.txt:759
msgid ":meth:`~Model.__unicode__` (Python 2)"
msgstr ""

# 22f5cd60693846e4a4e3d73a3664b587
#: ../../../../1.8/docs/topics/db/models.txt:752
msgid ""
"A Python \"magic method\" that returns a unicode \"representation\" of any "
"object. This is what Python and Django will use whenever a model instance "
"needs to be coerced and displayed as a plain string. Most notably, this "
"happens when you display an object in an interactive console or in the "
"admin."
msgstr ""

# b00882ee08ae4595908ff23046cfb5fe
#: ../../../../1.8/docs/topics/db/models.txt:758
msgid ""
"You'll always want to define this method; the default isn't very helpful at "
"all."
msgstr ""

# 7498a0e158ce40a7903d504620ac0813
#: ../../../../1.8/docs/topics/db/models.txt:767
msgid ":meth:`~Model.get_absolute_url`"
msgstr ""

# 918959ccd66949b59636186de6e54b9c
#: ../../../../1.8/docs/topics/db/models.txt:762
msgid ""
"This tells Django how to calculate the URL for an object. Django uses this "
"in its admin interface, and any time it needs to figure out a URL for an "
"object."
msgstr ""

# 470830f84a164eb8a644d19a9ec4a51b
#: ../../../../1.8/docs/topics/db/models.txt:766
msgid ""
"Any object that has a URL that uniquely identifies it should define this "
"method."
msgstr ""

# cd802a31c148437c8b27a94a152b54b3
#: ../../../../1.8/docs/topics/db/models.txt:772
msgid "Overriding predefined model methods"
msgstr ""

# 53c0d2d4f15243f4add58aea009af519
#: ../../../../1.8/docs/topics/db/models.txt:774
msgid ""
"There's another set of :ref:`model methods <model-instance-methods>` that "
"encapsulate a bunch of database behavior that you'll want to customize. In "
"particular you'll often want to change the way :meth:`~Model.save` and "
":meth:`~Model.delete` work."
msgstr ""

# 10ac4274988244ceb771a0875c1dda51
#: ../../../../1.8/docs/topics/db/models.txt:779
msgid ""
"You're free to override these methods (and any other model method) to alter "
"behavior."
msgstr ""

# 7b64f852e158483bb4c7f058476a16e9
#: ../../../../1.8/docs/topics/db/models.txt:782
msgid ""
"A classic use-case for overriding the built-in methods is if you want "
"something to happen whenever you save an object. For example (see "
":meth:`~Model.save` for documentation of the parameters it accepts)::"
msgstr ""

# 30c08a475b304c85a1f1f411e6f45a08
#: ../../../../1.8/docs/topics/db/models.txt:797
msgid "You can also prevent saving::"
msgstr ""

# d63cee6ec06742e4960384cdf7c70bab
#: ../../../../1.8/docs/topics/db/models.txt:811
msgid ""
"It's important to remember to call the superclass method -- that's that "
"``super(Blog, self).save(*args, **kwargs)`` business -- to ensure that the "
"object still gets saved into the database. If you forget to call the "
"superclass method, the default behavior won't happen and the database won't "
"get touched."
msgstr ""

# f3f1022c70db4681980da1dd7a996b5f
#: ../../../../1.8/docs/topics/db/models.txt:817
msgid ""
"It's also important that you pass through the arguments that can be passed "
"to the model method -- that's what the ``*args, **kwargs`` bit does. Django "
"will, from time to time, extend the capabilities of built-in model methods, "
"adding new arguments. If you use ``*args, **kwargs`` in your method "
"definitions, you are guaranteed that your code will automatically support "
"those arguments when they are added."
msgstr ""

# 4b75b29863c44af0ac643f934d16d373
#: ../../../../1.8/docs/topics/db/models.txt:824
msgid "Overridden model methods are not called on bulk operations"
msgstr ""

# 6be133b8768c4033a9c1506f61ef455f
#: ../../../../1.8/docs/topics/db/models.txt:826
msgid ""
"Note that the :meth:`~Model.delete()` method for an object is not "
"necessarily called when :ref:`deleting objects in bulk using a QuerySet"
"<topics-db-queries-delete>`. To ensure customized delete logic gets "
"executed, you can use :data:`~django.db.models.signals.pre_delete` and/or "
":data:`~django.db.models.signals.post_delete` signals."
msgstr ""

# de27eb282efb43319502924433ce683f
#: ../../../../1.8/docs/topics/db/models.txt:832
msgid ""
"Unfortunately, there isn't a workaround when "
":meth:`creating<django.db.models.query.QuerySet.bulk_create>` or "
":meth:`updating<django.db.models.query.QuerySet.update>` objects in bulk, "
"since none of :meth:`~Model.save()`, "
":data:`~django.db.models.signals.pre_save`, and "
":data:`~django.db.models.signals.post_save` are called."
msgstr ""

# b26bca6afa25442cb1c635957dff6170
#: ../../../../1.8/docs/topics/db/models.txt:840
msgid "Executing custom SQL"
msgstr ""

# e9f35cce7875434a839bae2762ea4b8c
#: ../../../../1.8/docs/topics/db/models.txt:842
msgid ""
"Another common pattern is writing custom SQL statements in model methods and"
" module-level methods. For more details on using raw SQL, see the "
"documentation on :doc:`using raw SQL</topics/db/sql>`."
msgstr ""

# 41704d9cab054a349b0808775fe87e6d
#: ../../../../1.8/docs/topics/db/models.txt:849
msgid "Model inheritance"
msgstr ""

# 481eb5ae7be34aa484b18f293d764d16
#: ../../../../1.8/docs/topics/db/models.txt:851
msgid ""
"Model inheritance in Django works almost identically to the way normal class"
" inheritance works in Python, but the basics at the beginning of the page "
"should still be followed. That means the base class should subclass "
":class:`django.db.models.Model`."
msgstr ""

# 33affaf46dcd4c158e4022665b8cd0e2
#: ../../../../1.8/docs/topics/db/models.txt:856
msgid ""
"The only decision you have to make is whether you want the parent models to "
"be models in their own right (with their own database tables), or if the "
"parents are just holders of common information that will only be visible "
"through the child models."
msgstr ""

# 24815febd3cc48208006d5e2c9de7c36
#: ../../../../1.8/docs/topics/db/models.txt:861
msgid "There are three styles of inheritance that are possible in Django."
msgstr ""

# 7b5aa4960ac84052be3792df9f771a3d
#: ../../../../1.8/docs/topics/db/models.txt:863
msgid ""
"Often, you will just want to use the parent class to hold information that "
"you don't want to have to type out for each child model. This class isn't "
"going to ever be used in isolation, so :ref:`abstract-base-classes` are what"
" you're after."
msgstr ""

# 2c675f0c1c4941fd8e169a2b4e275dd3
#: ../../../../1.8/docs/topics/db/models.txt:867
msgid ""
"If you're subclassing an existing model (perhaps something from another "
"application entirely) and want each model to have its own database table, "
":ref:`multi-table-inheritance` is the way to go."
msgstr ""

# e426415e782941319bbeba84729a3196
#: ../../../../1.8/docs/topics/db/models.txt:870
msgid ""
"Finally, if you only want to modify the Python-level behavior of a model, "
"without changing the models fields in any way, you can use :ref:`proxy-"
"models`."
msgstr ""

# 362e7c005dd54b8f9d45344383fefa77
#: ../../../../1.8/docs/topics/db/models.txt:877
msgid "Abstract base classes"
msgstr ""

# 316b44c23bbc40c9a276385ba1c6e1e2
#: ../../../../1.8/docs/topics/db/models.txt:879
msgid ""
"Abstract base classes are useful when you want to put some common "
"information into a number of other models. You write your base class and put"
" ``abstract=True`` in the :ref:`Meta <meta-options>` class. This model will "
"then not be used to create any database table. Instead, when it is used as a"
" base class for other models, its fields will be added to those of the child"
" class. It is an error to have fields in the abstract base class with the "
"same name as those in the child (and Django will raise an exception)."
msgstr ""

# 272a97f492e74a1fbaafc9aa9c9a8276
# c6afa2f7fa9d431996da296ee54e338b
#: ../../../../1.8/docs/topics/db/models.txt:888
#: ../../../../1.8/docs/topics/i18n/translation.txt:655
msgid "An example::"
msgstr ""

# c28ffc9400ed4622a11d7a73b510a5a8
#: ../../../../1.8/docs/topics/db/models.txt:902
msgid ""
"The ``Student`` model will have three fields: ``name``, ``age`` and "
"``home_group``. The ``CommonInfo`` model cannot be used as a normal Django "
"model, since it is an abstract base class. It does not generate a database "
"table or have a manager, and cannot be instantiated or saved directly."
msgstr ""

# cb30d5a87aa34387b3efd82ba43b0b2f
#: ../../../../1.8/docs/topics/db/models.txt:907
msgid ""
"For many uses, this type of model inheritance will be exactly what you want."
" It provides a way to factor out common information at the Python level, "
"whilst still only creating one database table per child model at the "
"database level."
msgstr ""

# 516d160aa2914d729b37a4386b5605d5
#: ../../../../1.8/docs/topics/db/models.txt:912
msgid "``Meta`` inheritance"
msgstr ""

# c5f19964b6f34e1c957eec6864650023
#: ../../../../1.8/docs/topics/db/models.txt:914
msgid ""
"When an abstract base class is created, Django makes any :ref:`Meta <meta-"
"options>` inner class you declared in the base class available as an "
"attribute. If a child class does not declare its own :ref:`Meta <meta-"
"options>` class, it will inherit the parent's :ref:`Meta <meta-options>`. If"
" the child wants to extend the parent's :ref:`Meta <meta-options>` class, it"
" can subclass it. For example::"
msgstr ""

# e1e39c3074444b4e9a07605879c92c73
#: ../../../../1.8/docs/topics/db/models.txt:933
msgid ""
"Django does make one adjustment to the :ref:`Meta <meta-options>` class of "
"an abstract base class: before installing the :ref:`Meta <meta-options>` "
"attribute, it sets ``abstract=False``. This means that children of abstract "
"base classes don't automatically become abstract classes themselves. Of "
"course, you can make an abstract base class that inherits from another "
"abstract base class. You just need to remember to explicitly set "
"``abstract=True`` each time."
msgstr ""

# 836a02209bcc40998c851f75ffce0bdc
#: ../../../../1.8/docs/topics/db/models.txt:940
msgid ""
"Some attributes won't make sense to include in the :ref:`Meta <meta-"
"options>` class of an abstract base class. For example, including "
"``db_table`` would mean that all the child classes (the ones that don't "
"specify their own :ref:`Meta <meta-options>`) would use the same database "
"table, which is almost certainly not what you want."
msgstr ""

# 0340739face84976b1d6193f071f8a31
#: ../../../../1.8/docs/topics/db/models.txt:948
msgid "Be careful with ``related_name``"
msgstr ""

# 5e1c02f8d8ea48aea1654ecc3b863e7e
#: ../../../../1.8/docs/topics/db/models.txt:950
msgid ""
"If you are using the :attr:`~django.db.models.ForeignKey.related_name` "
"attribute on a ``ForeignKey`` or ``ManyToManyField``, you must always "
"specify a *unique* reverse name for the field. This would normally cause a "
"problem in abstract base classes, since the fields on this class are "
"included into each of the child classes, with exactly the same values for "
"the attributes (including :attr:`~django.db.models.ForeignKey.related_name`)"
" each time."
msgstr ""

# 64ad1d2ab5d24952a0237b6cb3e52dca
#: ../../../../1.8/docs/topics/db/models.txt:956
msgid ""
"To work around this problem, when you are using "
":attr:`~django.db.models.ForeignKey.related_name` in an abstract base class "
"(only), part of the name should contain ``'%(app_label)s'`` and "
"``'%(class)s'``."
msgstr ""

# 4070f0cfc29e498eabefe1ba17b8788a
#: ../../../../1.8/docs/topics/db/models.txt:960
msgid ""
"``'%(class)s'`` is replaced by the lower-cased name of the child class that "
"the field is used in."
msgstr ""

# 74945f80189f4f02863fe3676e07a959
#: ../../../../1.8/docs/topics/db/models.txt:962
msgid ""
"``'%(app_label)s'`` is replaced by the lower-cased name of the app the child"
" class is contained within. Each installed application name must be unique "
"and the model class names within each app must also be unique, therefore the"
" resulting name will end up being different."
msgstr ""

# fff3e0033ba2429d935b9dc963368c7e
#: ../../../../1.8/docs/topics/db/models.txt:967
msgid "For example, given an app ``common/models.py``::"
msgstr ""

# 435be430f77f426cba9d5182d7a06529
#: ../../../../1.8/docs/topics/db/models.txt:983
msgid "Along with another app ``rare/models.py``::"
msgstr ""

# d767f79f4ec0441bb9d29cecdf8bfa3c
#: ../../../../1.8/docs/topics/db/models.txt:990
msgid ""
"The reverse name of the ``common.ChildA.m2m`` field will be "
"``common_childa_related``, whilst the reverse name of the "
"``common.ChildB.m2m`` field will be ``common_childb_related``, and finally "
"the reverse name of the ``rare.ChildB.m2m`` field will be "
"``rare_childb_related``. It is up to you how you use the ``'%(class)s'`` and"
" ``'%(app_label)s`` portion to construct your related name, but if you "
"forget to use it, Django will raise errors when you perform system checks "
"(or run :djadmin:`migrate`)."
msgstr ""

# 23f0454105e34c439822875a3840dd7e
#: ../../../../1.8/docs/topics/db/models.txt:998
msgid ""
"If you don't specify a :attr:`~django.db.models.ForeignKey.related_name` "
"attribute for a field in an abstract base class, the default reverse name "
"will be the name of the child class followed by ``'_set'``, just as it "
"normally would be if you'd declared the field directly on the child class. "
"For example, in the above code, if the "
":attr:`~django.db.models.ForeignKey.related_name` attribute was omitted, the"
" reverse name for the ``m2m`` field would be ``childa_set`` in the "
"``ChildA`` case and ``childb_set`` for the ``ChildB`` field."
msgstr ""

# b1f4d10112e04e939d10e915c4d53fe9
#: ../../../../1.8/docs/topics/db/models.txt:1010
msgid "Multi-table inheritance"
msgstr ""

# f8c3aedd5d824eb48de1a11bfb1d5b8d
#: ../../../../1.8/docs/topics/db/models.txt:1012
msgid ""
"The second type of model inheritance supported by Django is when each model "
"in the hierarchy is a model all by itself. Each model corresponds to its own"
" database table and can be queried and created individually. The inheritance"
" relationship introduces links between the child model and each of its "
"parents (via an automatically-created "
":class:`~django.db.models.OneToOneField`). For example::"
msgstr ""

# b8420dde5af44f478a395ad20b2dcb41
#: ../../../../1.8/docs/topics/db/models.txt:1029
msgid ""
"All of the fields of ``Place`` will also be available in ``Restaurant``, "
"although the data will reside in a different database table. So these are "
"both possible::"
msgstr ""

# 71f3148dad0a4d9885b388db72a5cd6b
#: ../../../../1.8/docs/topics/db/models.txt:1036
msgid ""
"If you have a ``Place`` that is also a ``Restaurant``, you can get from the "
"``Place`` object to the ``Restaurant`` object by using the lower-case "
"version of the model name::"
msgstr ""

# 47fab2b12d144346be8b6bf02cb81d01
#: ../../../../1.8/docs/topics/db/models.txt:1045
msgid ""
"However, if ``p`` in the above example was *not* a ``Restaurant`` (it had "
"been created directly as a ``Place`` object or was the parent of some other "
"class), referring to ``p.restaurant`` would raise a "
"``Restaurant.DoesNotExist`` exception."
msgstr ""

# 535c3e7019af4640bd518d7b6a94bd98
#: ../../../../1.8/docs/topics/db/models.txt:1051
msgid "``Meta`` and multi-table inheritance"
msgstr ""

# 95a1274cda5d49a5bfb0bbaf99d9b090
#: ../../../../1.8/docs/topics/db/models.txt:1053
msgid ""
"In the multi-table inheritance situation, it doesn't make sense for a child "
"class to inherit from its parent's :ref:`Meta <meta-options>` class. All the"
" :ref:`Meta <meta-options>` options have already been applied to the parent "
"class and applying them again would normally only lead to contradictory "
"behavior (this is in contrast with the abstract base class case, where the "
"base class doesn't exist in its own right)."
msgstr ""

# bb39e07764874ceeb267928e76a6e966
#: ../../../../1.8/docs/topics/db/models.txt:1060
msgid ""
"So a child model does not have access to its parent's :ref:`Meta <meta-"
"options>` class. However, there are a few limited cases where the child "
"inherits behavior from the parent: if the child does not specify an "
":attr:`~django.db.models.Options.ordering` attribute or a "
":attr:`~django.db.models.Options.get_latest_by` attribute, it will inherit "
"these from its parent."
msgstr ""

# f03b58574a5f4c9e97e51de25b16bfa2
#: ../../../../1.8/docs/topics/db/models.txt:1067
msgid ""
"If the parent has an ordering and you don't want the child to have any "
"natural ordering, you can explicitly disable it::"
msgstr ""

# 3c5f2a99dba547379ab2eacd95f21d73
#: ../../../../1.8/docs/topics/db/models.txt:1077
msgid "Inheritance and reverse relations"
msgstr ""

# 1e48e2f4de58432ba178c75ae21e7a1e
#: ../../../../1.8/docs/topics/db/models.txt:1079
msgid ""
"Because multi-table inheritance uses an implicit "
":class:`~django.db.models.OneToOneField` to link the child and the parent, "
"it's possible to move from the parent down to the child, as in the above "
"example. However, this uses up the name that is the default "
":attr:`~django.db.models.ForeignKey.related_name` value for "
":class:`~django.db.models.ForeignKey` and "
":class:`~django.db.models.ManyToManyField` relations.  If you are putting "
"those types of relations on a subclass of the parent model, you **must** "
"specify the :attr:`~django.db.models.ForeignKey.related_name` attribute on "
"each such field. If you forget, Django will raise a validation error."
msgstr ""

# 556520694f534453ae3a16969e92c491
#: ../../../../1.8/docs/topics/db/models.txt:1091
msgid ""
"For example, using the above ``Place`` class again, let's create another "
"subclass with a :class:`~django.db.models.ManyToManyField`::"
msgstr ""

# deccd624ee604ae4bb1d7ced4a2c8d97
#: ../../../../1.8/docs/topics/db/models.txt:1097
msgid "This results in the error::"
msgstr ""

# f0b73fec72f34bf491499e59d3201414
#: ../../../../1.8/docs/topics/db/models.txt:1105
msgid ""
"Adding ``related_name`` to the ``customers`` field as follows would resolve "
"the error: ``models.ManyToManyField(Place, related_name='provider')``."
msgstr ""

# 8bcbccb00e894b5b88d13b2ca1127e63
#: ../../../../1.8/docs/topics/db/models.txt:1109
msgid "Specifying the parent link field"
msgstr ""

# cb0a280a49bf43aaaf0c14f577850bd8
#: ../../../../1.8/docs/topics/db/models.txt:1111
msgid ""
"As mentioned, Django will automatically create a "
":class:`~django.db.models.OneToOneField` linking your child class back any "
"non-abstract parent models. If you want to control the name of the attribute"
" linking back to the parent, you can create your own "
":class:`~django.db.models.OneToOneField` and set :attr:`parent_link=True "
"<django.db.models.OneToOneField.parent_link>` to indicate that your field is"
" the link back to the parent class."
msgstr ""

# 14c82077c9254d999f0c05eea0a3b59f
#: ../../../../1.8/docs/topics/db/models.txt:1122
msgid "Proxy models"
msgstr ""

# 3afebe0c55ff4356b9bdfd1c19169a49
#: ../../../../1.8/docs/topics/db/models.txt:1124
msgid ""
"When using :ref:`multi-table inheritance <multi-table-inheritance>`, a new "
"database table is created for each subclass of a model. This is usually the "
"desired behavior, since the subclass needs a place to store any additional "
"data fields that are not present on the base class. Sometimes, however, you "
"only want to change the Python behavior of a model -- perhaps to change the "
"default manager, or add a new method."
msgstr ""

# 6fef83a634ef41aab78ecccd6627fe0e
#: ../../../../1.8/docs/topics/db/models.txt:1131
msgid ""
"This is what proxy model inheritance is for: creating a *proxy* for the "
"original model. You can create, delete and update instances of the proxy "
"model and all the data will be saved as if you were using the original (non-"
"proxied) model. The difference is that you can change things like the "
"default model ordering or the default manager in the proxy, without having "
"to alter the original."
msgstr ""

# 20720180c3424d66b68d354e2e2ba817
#: ../../../../1.8/docs/topics/db/models.txt:1138
msgid ""
"Proxy models are declared like normal models. You tell Django that it's a "
"proxy model by setting the :attr:`~django.db.models.Options.proxy` attribute"
" of the ``Meta`` class to ``True``."
msgstr ""

# 844012aa05824a84b315715d8f9f6b93
#: ../../../../1.8/docs/topics/db/models.txt:1142
msgid ""
"For example, suppose you want to add a method to the ``Person`` model. You "
"can do it like this::"
msgstr ""

# 46afeb6b37af4d47a3c6dbd87e058864
#: ../../../../1.8/docs/topics/db/models.txt:1158
msgid ""
"The ``MyPerson`` class operates on the same database table as its parent "
"``Person`` class. In particular, any new instances of ``Person`` will also "
"be accessible through ``MyPerson``, and vice-versa::"
msgstr ""

# fbe43ea8f05443abbe286d8574734e55
#: ../../../../1.8/docs/topics/db/models.txt:1166
msgid ""
"You could also use a proxy model to define a different default ordering on a"
" model. You might not always want to order the ``Person`` model, but "
"regularly order by the ``last_name`` attribute when you use the proxy. This "
"is easy::"
msgstr ""

# 5453ec0b97da44bda04c2f177829c5f4
#: ../../../../1.8/docs/topics/db/models.txt:1175
msgid ""
"Now normal ``Person`` queries will be unordered and ``OrderedPerson`` "
"queries will be ordered by ``last_name``."
msgstr ""

# f2afd11b235f4e3c94e219ae4796deb9
#: ../../../../1.8/docs/topics/db/models.txt:1179
msgid "QuerySets still return the model that was requested"
msgstr ""

# 70ad691c9d7e42078e2137ec24e6e07b
#: ../../../../1.8/docs/topics/db/models.txt:1181
msgid ""
"There is no way to have Django return, say, a ``MyPerson`` object whenever "
"you query for ``Person`` objects. A queryset for ``Person`` objects will "
"return those types of objects. The whole point of proxy objects is that code"
" relying on the original ``Person`` will use those and your own code can use"
" the extensions you included (that no other code is relying on anyway). It "
"is not a way to replace the ``Person`` (or any other) model everywhere with "
"something of your own creation."
msgstr ""

# 63a3aec844784f34a3299f30cd2d2852
#: ../../../../1.8/docs/topics/db/models.txt:1190
msgid "Base class restrictions"
msgstr ""

# 99739095016c4626b5cec7232c9e8c00
#: ../../../../1.8/docs/topics/db/models.txt:1192
msgid ""
"A proxy model must inherit from exactly one non-abstract model class. You "
"can't inherit from multiple non-abstract models as the proxy model doesn't "
"provide any connection between the rows in the different database tables. A "
"proxy model can inherit from any number of abstract model classes, providing"
" they do *not* define any model fields."
msgstr ""

# 63a79025d80f4a67a5d35e7af6936031
#: ../../../../1.8/docs/topics/db/models.txt:1199
msgid "Proxy model managers"
msgstr ""

# 0820367f06a8466e83004fce0a046017
#: ../../../../1.8/docs/topics/db/models.txt:1201
msgid ""
"If you don't specify any model managers on a proxy model, it inherits the "
"managers from its model parents. If you define a manager on the proxy model,"
" it will become the default, although any managers defined on the parent "
"classes will still be available."
msgstr ""

# d8edd9d4a797403faf4f782d0b92906c
#: ../../../../1.8/docs/topics/db/models.txt:1206
msgid ""
"Continuing our example from above, you could change the default manager used"
" when you query the ``Person`` model like this::"
msgstr ""

# 6810e3623d484c61a49215c63b41422f
#: ../../../../1.8/docs/topics/db/models.txt:1221
msgid ""
"If you wanted to add a new manager to the Proxy, without replacing the "
"existing default, you can use the techniques described in the :ref:`custom "
"manager <custom-managers-and-inheritance>` documentation: create a base "
"class containing the new managers and inherit that after the primary base "
"class::"
msgstr ""

# 8dcd9072b1a348f5b968d7b9b664c2eb
#: ../../../../1.8/docs/topics/db/models.txt:1237
msgid ""
"You probably won't need to do this very often, but, when you do, it's "
"possible."
msgstr ""

# ecad2177bbc4434d9575625c122baa25
#: ../../../../1.8/docs/topics/db/models.txt:1243
msgid "Differences between proxy inheritance and  unmanaged models"
msgstr ""

# 533abf1c212c41c0ab0fcdf2d2605e65
#: ../../../../1.8/docs/topics/db/models.txt:1245
msgid ""
"Proxy model inheritance might look fairly similar to creating an unmanaged "
"model, using the :attr:`~django.db.models.Options.managed` attribute on a "
"model's ``Meta`` class. The two alternatives are not quite the same and it's"
" worth considering which one you should use."
msgstr ""

# 1bda83a1b4e54c408bfe35ca79e14395
#: ../../../../1.8/docs/topics/db/models.txt:1250
msgid ""
"One difference is that you can (and, in fact, must unless you want an empty "
"model) specify model fields on models with ``Meta.managed=False``. You "
"could, with careful setting of :attr:`Meta.db_table "
"<django.db.models.Options.db_table>` create an unmanaged model that shadowed"
" an existing model and add Python methods to it. However, that would be very"
" repetitive and fragile as you need to keep both copies synchronized if you "
"make any changes."
msgstr ""

# b437c53cdd1840f7b7fa6db73ce4c7e3
#: ../../../../1.8/docs/topics/db/models.txt:1258
msgid ""
"The other difference that is more important for proxy models, is how model "
"managers are handled. Proxy models are intended to behave exactly like the "
"model they are proxying for. So they inherit the parent model's managers, "
"including the default manager. In the normal multi-table model inheritance "
"case, children do not inherit managers from their parents as the custom "
"managers aren't always appropriate when extra fields are involved. The "
":ref:`manager documentation <custom-managers-and-inheritance>` has more "
"details about this latter case."
msgstr ""

# 65207988f89f4d22a13066570a8860f0
#: ../../../../1.8/docs/topics/db/models.txt:1267
msgid ""
"When these two features were implemented, attempts were made to squash them "
"into a single option. It turned out that interactions with inheritance, in "
"general, and managers, in particular, made the API very complicated and "
"potentially difficult to understand and use. It turned out that two options "
"were needed in any case, so the current separation arose."
msgstr ""

# 2e929ca0482f4820927ae9d2b14a27d3
#: ../../../../1.8/docs/topics/db/models.txt:1273
msgid "So, the general rules are:"
msgstr ""

# a1b349a1f4434106baa11be07fc74025
#: ../../../../1.8/docs/topics/db/models.txt:1275
msgid ""
"If you are mirroring an existing model or database table and don't want all "
"the original database table columns, use ``Meta.managed=False``. That option"
" is normally useful for modeling database views and tables not under the "
"control of Django."
msgstr ""

# c56af4214249461f974c4f767cdeea95
#: ../../../../1.8/docs/topics/db/models.txt:1279
msgid ""
"If you are wanting to change the Python-only behavior of a model, but keep "
"all the same fields as in the original, use ``Meta.proxy=True``. This sets "
"things up so that the proxy model is an exact copy of the storage structure "
"of the original model when data is saved."
msgstr ""

# 9d514aa105454c948886c48a8f0ec746
#: ../../../../1.8/docs/topics/db/models.txt:1287
msgid "Multiple inheritance"
msgstr ""

# 2d9188788f48418a8f08d1a5dd2a5ad9
#: ../../../../1.8/docs/topics/db/models.txt:1289
msgid ""
"Just as with Python's subclassing, it's possible for a Django model to "
"inherit from multiple parent models. Keep in mind that normal Python name "
"resolution rules apply. The first base class that a particular name (e.g. "
":ref:`Meta <meta-options>`) appears in will be the one that is used; for "
"example, this means that if multiple parents contain a :ref:`Meta <meta-"
"options>` class, only the first one is going to be used, and all others will"
" be ignored."
msgstr ""

# 90238b45eb9c45fc80e9b30758898b28
#: ../../../../1.8/docs/topics/db/models.txt:1296
msgid ""
"Generally, you won't need to inherit from multiple parents. The main use-"
"case where this is useful is for \"mix-in\" classes: adding a particular "
"extra field or method to every class that inherits the mix-in. Try to keep "
"your inheritance hierarchies as simple and straightforward as possible so "
"that you won't have to struggle to work out where a particular piece of "
"information is coming from."
msgstr ""

# f9acee90af8b4a8f9236301a9ccf74f3
#: ../../../../1.8/docs/topics/db/models.txt:1305
msgid ""
"Before Django 1.7, inheriting from multiple models that had an ``id`` "
"primary key field did not raise an error, but could result in data loss. For"
" example, consider these models (which no longer validate due to the "
"clashing ``id`` fields)::"
msgstr ""

# ca7b93654b034709814d3b772f1290bd
#: ../../../../1.8/docs/topics/db/models.txt:1320
msgid ""
"This snippet demonstrates how creating a child object overwrote the value of"
" a previously created parent object::"
msgstr ""

# 9596653b57244ccfacfbf42582555c83
#: ../../../../1.8/docs/topics/db/models.txt:1336
msgid ""
"To properly use multiple inheritance, you can use an explicit "
":class:`~django.db.models.AutoField` in the base models::"
msgstr ""

# 41879d9c88c64713888740142c68cfbb
#: ../../../../1.8/docs/topics/db/models.txt:1350
msgid ""
"Or use a common ancestor to hold the :class:`~django.db.models.AutoField`::"
msgstr ""

# 499d6e4c3408483fa6b10880f5dd7c0a
#: ../../../../1.8/docs/topics/db/models.txt:1365
msgid "Field name \"hiding\" is not permitted"
msgstr ""

# d7c8da76847a482c8f96b67bdc5d8835
#: ../../../../1.8/docs/topics/db/models.txt:1367
msgid ""
"In normal Python class inheritance, it is permissible for a child class to "
"override any attribute from the parent class. In Django, this is not "
"permitted for attributes that are :class:`~django.db.models.Field` instances"
" (at least, not at the moment). If a base class has a field called "
"``author``, you cannot create another model field called ``author`` in any "
"class that inherits from that base class."
msgstr ""

# 43fdd9f6379a41b7a6473178f71004b2
#: ../../../../1.8/docs/topics/db/models.txt:1374
msgid ""
"Overriding fields in a parent model leads to difficulties in areas such as "
"initializing new instances (specifying which field is being initialized in "
"``Model.__init__``) and serialization. These are features which normal "
"Python class inheritance doesn't have to deal with in quite the same way, so"
" the difference between Django model inheritance and Python class "
"inheritance isn't arbitrary."
msgstr ""

# 282fe2ee576948bba6c783de8772a638
#: ../../../../1.8/docs/topics/db/models.txt:1381
msgid ""
"This restriction only applies to attributes which are "
":class:`~django.db.models.Field` instances. Normal Python attributes can be "
"overridden if you wish. It also only applies to the name of the attribute as"
" Python sees it: if you are manually specifying the database column name, "
"you can have the same column name appearing in both a child and an ancestor "
"model for multi-table inheritance (they are columns in two different "
"database tables)."
msgstr ""

# 824167332e0b4d5589164b0bf8bf7aef
#: ../../../../1.8/docs/topics/db/models.txt:1389
msgid ""
"Django will raise a :exc:`~django.core.exceptions.FieldError` if you "
"override any model field in any ancestor model."
msgstr ""

# 076bcd6f0f604d4da509abc618d709a3
#: ../../../../1.8/docs/topics/db/models.txt:1395
msgid ":doc:`The Models Reference </ref/models/index>`"
msgstr ""

# 97be54edd81e44dab8e7ca26d5486140
#: ../../../../1.8/docs/topics/db/models.txt:1395
msgid ""
"Covers all the model related APIs including model fields, related objects, "
"and ``QuerySet``."
msgstr ""

# d199c5a94c8e4bbd8fe25fd434300b84
#: ../../../../1.8/docs/topics/db/multi-db.txt:5
msgid ""
"This topic guide describes Django's support for interacting with multiple "
"databases. Most of the rest of Django's documentation assumes you are "
"interacting with a single database. If you want to interact with multiple "
"databases, you'll need to take some additional steps."
msgstr ""

# 169d0bf7b8ae4c10905ce401769ef231
#: ../../../../1.8/docs/topics/db/multi-db.txt:11
msgid "Defining your databases"
msgstr ""

# 5685b24bae7640878c25b54d446fa84b
#: ../../../../1.8/docs/topics/db/multi-db.txt:13
msgid ""
"The first step to using more than one database with Django is to tell Django"
" about the database servers you'll be using. This is done using the "
":setting:`DATABASES` setting. This setting maps database aliases, which are "
"a way to refer to a specific database throughout Django, to a dictionary of "
"settings for that specific connection. The settings in the inner "
"dictionaries are described fully in the :setting:`DATABASES` documentation."
msgstr ""

# 6211236d186c4479be0cf52f1efc85c3
#: ../../../../1.8/docs/topics/db/multi-db.txt:21
msgid ""
"Databases can have any alias you choose. However, the alias ``default`` has "
"special significance. Django uses the database with the alias of ``default``"
" when no other database has been selected."
msgstr ""

# 87975851cc22487c8081e1ec514d01bb
#: ../../../../1.8/docs/topics/db/multi-db.txt:25
msgid ""
"The following is an example ``settings.py`` snippet defining two databases "
"-- a default PostgreSQL database and a MySQL database called ``users``::"
msgstr ""

# f151bedccab94cdd9f7e7c9dbe77ee3d
#: ../../../../1.8/docs/topics/db/multi-db.txt:44
msgid ""
"If the concept of a ``default`` database doesn't make sense in the context "
"of your project, you need to be careful to always specify the database that "
"you want to use. Django requires that a ``default`` database entry be "
"defined, but the parameters dictionary can be left blank if it will not be "
"used. You must setup :setting:`DATABASE_ROUTERS` for all of your apps' "
"models, including those in any contrib and third-party apps you are using, "
"so that no queries are routed to the default database in order to do this. "
"The following is an example ``settings.py`` snippet defining two non-default"
" databases, with the ``default`` entry intentionally left empty::"
msgstr ""

# 1b2abe7ca16e4f88a0ab28dc8305cf9e
#: ../../../../1.8/docs/topics/db/multi-db.txt:70
msgid ""
"If you attempt to access a database that you haven't defined in your "
":setting:`DATABASES` setting, Django will raise a "
"``django.db.utils.ConnectionDoesNotExist`` exception."
msgstr ""

# 8d49f56e928c49309e6b0d2976f970c2
#: ../../../../1.8/docs/topics/db/multi-db.txt:75
msgid "Synchronizing your databases"
msgstr ""

# a1086f59dcfc4d308c1dd6c8cdf9069c
#: ../../../../1.8/docs/topics/db/multi-db.txt:77
msgid ""
"The :djadmin:`migrate` management command operates on one database at a "
"time. By default, it operates on the ``default`` database, but by providing "
"a :djadminopt:`--database` argument, you can tell :djadmin:`migrate` to "
"synchronize a different database. So, to synchronize all models onto all "
"databases in our example, you would need to call::"
msgstr ""

# 665b62d9691246b98c72f2dd546cafa9
#: ../../../../1.8/docs/topics/db/multi-db.txt:86
msgid ""
"If you don't want every application to be synchronized onto a particular "
"database, you can define a :ref:`database router<topics-db-multi-db-"
"routing>` that implements a policy constraining the availability of "
"particular models."
msgstr ""

# e415fc113a654b8c84733a5c2e3fd8e8
#: ../../../../1.8/docs/topics/db/multi-db.txt:92
msgid "Using other management commands"
msgstr ""

# 3c35264860be4226bf9b441bd9fc05bc
#: ../../../../1.8/docs/topics/db/multi-db.txt:94
msgid ""
"The other ``django-admin`` commands that interact with the database operate "
"in the same way as :djadmin:`migrate` -- they only ever operate on one "
"database at a time, using :djadminopt:`--database` to control the database "
"used."
msgstr ""

# 4d6c95ff723d4c2eadcbaf2bf66ce2f1
#: ../../../../1.8/docs/topics/db/multi-db.txt:102
msgid "Automatic database routing"
msgstr ""

# 8db2c6f7b12a4f67b72e34eaff092696
#: ../../../../1.8/docs/topics/db/multi-db.txt:104
msgid ""
"The easiest way to use multiple databases is to set up a database routing "
"scheme. The default routing scheme ensures that objects remain 'sticky' to "
"their original database (i.e., an object retrieved from the ``foo`` database"
" will be saved on the same database). The default routing scheme ensures "
"that if a database isn't specified, all queries fall back to the ``default``"
" database."
msgstr ""

# d08c9aa56b664492bd6b53e5e9cf20b7
#: ../../../../1.8/docs/topics/db/multi-db.txt:111
msgid ""
"You don't have to do anything to activate the default routing scheme -- it "
"is provided 'out of the box' on every Django project. However, if you want "
"to implement more interesting database allocation behaviors, you can define "
"and install your own database routers."
msgstr ""

# bd1cef9a82b14da09315eb2cf165b011
#: ../../../../1.8/docs/topics/db/multi-db.txt:117
msgid "Database routers"
msgstr ""

# a5c26bc716474f02807fc6867ae4024f
#: ../../../../1.8/docs/topics/db/multi-db.txt:119
msgid "A database Router is a class that provides up to four methods:"
msgstr ""

# 5898822e1a534cd69544d57c7fcd382e
#: ../../../../1.8/docs/topics/db/multi-db.txt:123
msgid ""
"Suggest the database that should be used for read operations for objects of "
"type ``model``."
msgstr ""

# 6357eb1a697d4144bafb349d97ecabfd
# f0ca73ecb26d4a00babc91a952787e6c
#: ../../../../1.8/docs/topics/db/multi-db.txt:126
#: ../../../../1.8/docs/topics/db/multi-db.txt:138
msgid ""
"If a database operation is able to provide any additional information that "
"might assist in selecting a database, it will be provided in the ``hints`` "
"dictionary. Details on valid hints are provided :ref:`below <topics-db-"
"multi-db-hints>`."
msgstr ""

# 484753c7e4cd47558c58f397ac457c9d
# 2117ad1dfa9746a4b35021687388dad5
#: ../../../../1.8/docs/topics/db/multi-db.txt:131
#: ../../../../1.8/docs/topics/db/multi-db.txt:143
msgid "Returns ``None`` if there is no suggestion."
msgstr ""

# 2ebe3dc623864f4093366ee1efa3f271
#: ../../../../1.8/docs/topics/db/multi-db.txt:135
msgid ""
"Suggest the database that should be used for writes of objects of type "
"Model."
msgstr ""

# e76821e4e3e94831a6c43504f4c94586
#: ../../../../1.8/docs/topics/db/multi-db.txt:147
msgid ""
"Return ``True`` if a relation between ``obj1`` and ``obj2`` should be "
"allowed, ``False`` if the relation should be prevented, or ``None`` if the "
"router has no opinion. This is purely a validation operation, used by "
"foreign key and many to many operations to determine if a relation should be"
" allowed between two objects."
msgstr ""

# 16a131403868410eaeff119bd7ab8ff8
#: ../../../../1.8/docs/topics/db/multi-db.txt:155
msgid ""
"Determine if the migration operation is allowed to run on the database with "
"alias ``db``. Return ``True`` if the operation should run, ``False`` if it "
"shouldn't run, or ``None`` if the router has no opinion."
msgstr ""

# 904c0ec0055946308ad47278bf1c182e
#: ../../../../1.8/docs/topics/db/multi-db.txt:159
msgid ""
"The ``app_label`` positional argument is the label of the application being "
"migrated."
msgstr ""

# 1db09938f759403b8c2cb18d8fb622f2
#: ../../../../1.8/docs/topics/db/multi-db.txt:162
msgid ""
"``model_name`` is set by most migration operations to the value of "
"``model._meta.model_name`` (the lowercased version of the model "
"``__name__``) of the model being migrated. Its value is ``None`` for the "
":class:`~django.db.migrations.operations.RunPython` and "
":class:`~django.db.migrations.operations.RunSQL` operations unless they "
"provide it using hints."
msgstr ""

# bda80050c285461a80a71de8b75729ff
#: ../../../../1.8/docs/topics/db/multi-db.txt:169
msgid ""
"``hints`` are used by certain operations to communicate additional "
"information to the router."
msgstr ""

# 33ff6713b51d4f0eb99905dc354adcd0
#: ../../../../1.8/docs/topics/db/multi-db.txt:172
msgid ""
"When ``model_name`` is set, ``hints`` normally contains the model class "
"under the key ``'model'``. Note that it may be a :ref:`historical model "
"<historical-models>`, and thus not have any custom attributes, methods, or "
"managers. You should only rely on ``_meta``."
msgstr ""

# e69ee22fc0db4664a47445392869d7ce
#: ../../../../1.8/docs/topics/db/multi-db.txt:177
msgid ""
"This method can also be used to determine the availability of a model on a "
"given database."
msgstr ""

# 8e271bdc67c149c6bdb5167b96991b27
#: ../../../../1.8/docs/topics/db/multi-db.txt:180
msgid ""
"Note that migrations will just silently not perform any operations on a "
"model for which this returns ``False``. This may result in broken foreign "
"keys, extra tables, or missing tables if you change it once you have applied"
" some migrations."
msgstr ""

# 8ce8b0c29c9044d29fff9ab8acf3ccf9
#: ../../../../1.8/docs/topics/db/multi-db.txt:187
msgid ""
"The signature of ``allow_migrate`` has changed significantly from previous "
"versions. See the :ref:`deprecation notes <deprecated-signature-of-allow-"
"migrate>` for more details."
msgstr ""

# 05ea7521d5c44cc7b62d7f3746ebad6a
#: ../../../../1.8/docs/topics/db/multi-db.txt:191
msgid ""
"A router doesn't have to provide *all* these methods -- it may omit one or "
"more of them. If one of the methods is omitted, Django will skip that router"
" when performing the relevant check."
msgstr ""

# dfc6609974a742b2a9e6c20acc529076
#: ../../../../1.8/docs/topics/db/multi-db.txt:198
msgid "Hints"
msgstr ""

# e7c31da3f19c4d768e02cbd9bd1c51de
#: ../../../../1.8/docs/topics/db/multi-db.txt:200
msgid ""
"The hints received by the database router can be used to decide which "
"database should receive a given request."
msgstr ""

# ce97e9c4740e4c23808c732a93976423
#: ../../../../1.8/docs/topics/db/multi-db.txt:203
msgid ""
"At present, the only hint that will be provided is ``instance``, an object "
"instance that is related to the read or write operation that is underway. "
"This might be the instance that is being saved, or it might be an instance "
"that is being added in a many-to-many relation. In some cases, no instance "
"hint will be provided at all. The router checks for the existence of an "
"instance hint, and determine if that hint should be used to alter routing "
"behavior."
msgstr ""

# 4fb8bf7f62b4464d94130091575225db
#: ../../../../1.8/docs/topics/db/multi-db.txt:212
msgid "Using routers"
msgstr ""

# 0542e78917ba4efaa25929a29058abde
#: ../../../../1.8/docs/topics/db/multi-db.txt:214
msgid ""
"Database routers are installed using the :setting:`DATABASE_ROUTERS` "
"setting. This setting defines a list of class names, each specifying a "
"router that should be used by the master router (``django.db.router``)."
msgstr ""

# d72386273a4f47678cd77cb1a185cf63
#: ../../../../1.8/docs/topics/db/multi-db.txt:219
msgid ""
"The master router is used by Django's database operations to allocate "
"database usage. Whenever a query needs to know which database to use, it "
"calls the master router, providing a model and a hint (if available). Django"
" then tries each router in turn until a database suggestion can be found. If"
" no suggestion can be found, it tries the current ``_state.db`` of the hint "
"instance. If a hint instance wasn't provided, or the instance doesn't "
"currently have database state, the master router will allocate the "
"``default`` database."
msgstr ""

# d343d9026cdc4139bc355e547d476b38
# 0c73aff5cc874fbbabf9ad96650f9158
#: ../../../../1.8/docs/topics/db/multi-db.txt:229
#: ../../../../1.8/docs/topics/db/tablespaces.txt:45
msgid "An example"
msgstr ""

# cc0847c6669f43c3898f146a1a09bad5
#: ../../../../1.8/docs/topics/db/multi-db.txt:231
msgid "Example purposes only!"
msgstr ""

# 0296feea01734211b405a4a8d2ebd9be
#: ../../../../1.8/docs/topics/db/multi-db.txt:233
msgid ""
"This example is intended as a demonstration of how the router infrastructure"
" can be used to alter database usage. It intentionally ignores some complex "
"issues in order to demonstrate how routers are used."
msgstr ""

# f53b5ee14b354322aa5ff83c032b3b70
#: ../../../../1.8/docs/topics/db/multi-db.txt:238
msgid ""
"This example won't work if any of the models in ``myapp`` contain "
"relationships to models outside of the ``other`` database. :ref:`Cross-"
"database relationships <no_cross_database_relations>` introduce referential "
"integrity problems that Django can't currently handle."
msgstr ""

# c54b7a25cad248e58804aefc95db9170
#: ../../../../1.8/docs/topics/db/multi-db.txt:244
msgid ""
"The primary/replica (referred to as master/slave by some databases) "
"configuration described is also flawed -- it doesn't provide any solution "
"for handling replication lag (i.e., query inconsistencies introduced because"
" of the time taken for a write to propagate to the replicas). It also "
"doesn't consider the interaction of transactions with the database "
"utilization strategy."
msgstr ""

# 556f54a7fc3045178756d539df8d3589
#: ../../../../1.8/docs/topics/db/multi-db.txt:251
msgid ""
"So - what does this mean in practice? Let's consider another sample "
"configuration. This one will have several databases: one for the ``auth`` "
"application, and all other apps using a primary/replica setup with two read "
"replicas. Here are the settings specifying these databases::"
msgstr ""

# 01a94b3617c6433ea853f61beece153e
#: ../../../../1.8/docs/topics/db/multi-db.txt:284
msgid ""
"Now we'll need to handle routing. First we want a router that knows to send "
"queries for the ``auth`` app to ``auth_db``::"
msgstr ""

# c33748cc357c4163987900a0df2dda59
#: ../../../../1.8/docs/topics/db/multi-db.txt:326
msgid ""
"And we also want a router that sends all other apps to the primary/replica "
"configuration, and randomly chooses a replica to read from::"
msgstr ""

# f167529757f74d50b0cf4f58fc84a266
#: ../../../../1.8/docs/topics/db/multi-db.txt:361
msgid ""
"Finally, in the settings file, we add the following (substituting "
"``path.to.`` with the actual Python path to the module(s) where the routers "
"are defined)::"
msgstr ""

# fbb1b510a0cb451dad5d07b6f8022266
#: ../../../../1.8/docs/topics/db/multi-db.txt:367
msgid ""
"The order in which routers are processed is significant. Routers will be "
"queried in the order the are listed in the :setting:`DATABASE_ROUTERS` "
"setting . In this example, the ``AuthRouter`` is processed before the "
"``PrimaryReplicaRouter``, and as a result, decisions concerning the models "
"in ``auth`` are processed before any other decision is made. If the "
":setting:`DATABASE_ROUTERS` setting listed the two routers in the other "
"order, ``PrimaryReplicaRouter.allow_migrate()`` would be processed first. "
"The catch-all nature of the PrimaryReplicaRouter implementation would mean "
"that all models would be available on all databases."
msgstr ""

# 8cbbd1cb213347bcbd6838527dd92150
#: ../../../../1.8/docs/topics/db/multi-db.txt:378
msgid "With this setup installed, lets run some Django code::"
msgstr ""

# c533e9022db94dcfa1177c21aa75aa08
#: ../../../../1.8/docs/topics/db/multi-db.txt:405
msgid "Manually selecting a database"
msgstr ""

# db47c57820814075b1fb730f7a00acaa
#: ../../../../1.8/docs/topics/db/multi-db.txt:407
msgid ""
"Django also provides an API that allows you to maintain complete control "
"over database usage in your code. A manually specified database allocation "
"will take priority over a database allocated by a router."
msgstr ""

# 7198cb41a6a44777912163f1b2359e42
#: ../../../../1.8/docs/topics/db/multi-db.txt:412
msgid "Manually selecting a database for a ``QuerySet``"
msgstr ""

# c624f0c9349046a88b3da4cd2b233bda
#: ../../../../1.8/docs/topics/db/multi-db.txt:414
msgid ""
"You can select the database for a ``QuerySet`` at any point in the "
"``QuerySet`` \"chain.\" Just call ``using()`` on the ``QuerySet`` to get "
"another ``QuerySet`` that uses the specified database."
msgstr ""

# 6398e7907ff047cfa5c0a98deddd3d3c
#: ../../../../1.8/docs/topics/db/multi-db.txt:418
msgid ""
"``using()`` takes a single argument: the alias of the database on which you "
"want to run the query. For example::"
msgstr ""

# 11d0342703c448e3821b64425436de0e
#: ../../../../1.8/docs/topics/db/multi-db.txt:431
msgid "Selecting a database for ``save()``"
msgstr ""

# 05d7710a7128496bbc4fea473a2c0b19
#: ../../../../1.8/docs/topics/db/multi-db.txt:433
msgid ""
"Use the ``using`` keyword to ``Model.save()`` to specify to which database "
"the data should be saved."
msgstr ""

# e40b329d5a2e44c1b00a60639c84b46b
#: ../../../../1.8/docs/topics/db/multi-db.txt:436
msgid ""
"For example, to save an object to the ``legacy_users`` database, you'd use "
"this::"
msgstr ""

# 17e4453defe649659b6ebae41e486e83
#: ../../../../1.8/docs/topics/db/multi-db.txt:441
msgid ""
"If you don't specify ``using``, the ``save()`` method will save into the "
"default database allocated by the routers."
msgstr ""

# 9134a1d99b8f4902a989da4a1d8a227a
#: ../../../../1.8/docs/topics/db/multi-db.txt:445
msgid "Moving an object from one database to another"
msgstr ""

# 7ae9496dff3f4a53aaad4fd1ba81b6eb
#: ../../../../1.8/docs/topics/db/multi-db.txt:447
msgid ""
"If you've saved an instance to one database, it might be tempting to use "
"``save(using=...)`` as a way to migrate the instance to a new database. "
"However, if you don't take appropriate steps, this could have some "
"unexpected consequences."
msgstr ""

# c31cdd48e406424597e6daa7d50c94b3
#: ../../../../1.8/docs/topics/db/multi-db.txt:452
msgid "Consider the following example::"
msgstr ""

# a6d5ca80f24a456781e69ec5c3427e07
#: ../../../../1.8/docs/topics/db/multi-db.txt:458
msgid ""
"In statement 1, a new ``Person`` object is saved to the ``first`` database. "
"At this time, ``p`` doesn't have a primary key, so Django issues an SQL "
"``INSERT`` statement. This creates a primary key, and Django assigns that "
"primary key to ``p``."
msgstr ""

# 0f49033b09a6429f9bdaf905c525a80a
#: ../../../../1.8/docs/topics/db/multi-db.txt:463
msgid ""
"When the save occurs in statement 2, ``p`` already has a primary key value, "
"and Django will attempt to use that primary key on the new database. If the "
"primary key value isn't in use in the ``second`` database, then you won't "
"have any problems -- the object will be copied to the new database."
msgstr ""

# d8f6259de55f461cb90c9718fa9cac47
#: ../../../../1.8/docs/topics/db/multi-db.txt:469
msgid ""
"However, if the primary key of ``p`` is already in use on the ``second`` "
"database, the existing object in the ``second`` database will be overridden "
"when ``p`` is saved."
msgstr ""

# 961616f8bf984b4293e2ee8dce234362
#: ../../../../1.8/docs/topics/db/multi-db.txt:473
msgid ""
"You can avoid this in two ways. First, you can clear the primary key of the "
"instance. If an object has no primary key, Django will treat it as a new "
"object, avoiding any loss of data on the ``second`` database::"
msgstr ""

# 80ee70fdfb1e4a86b2680d256a94e5de
#: ../../../../1.8/docs/topics/db/multi-db.txt:483
msgid ""
"The second option is to use the ``force_insert`` option to ``save()`` to "
"ensure that Django does an SQL ``INSERT``::"
msgstr ""

# dc831524eae645faa4273d03114f67cf
#: ../../../../1.8/docs/topics/db/multi-db.txt:490
msgid ""
"This will ensure that the person named ``Fred`` will have the same primary "
"key on both databases. If that primary key is already in use when you try to"
" save onto the ``second`` database, an error will be raised."
msgstr ""

# 4bf532a28d484d4b9306c8274b897c06
#: ../../../../1.8/docs/topics/db/multi-db.txt:496
msgid "Selecting a database to delete from"
msgstr ""

# d47a96de4397400eab180307cf1db4ce
#: ../../../../1.8/docs/topics/db/multi-db.txt:498
msgid ""
"By default, a call to delete an existing object will be executed on the same"
" database that was used to retrieve the object in the first place::"
msgstr ""

# 479999c71e824a1295e01fcc03eb2a76
#: ../../../../1.8/docs/topics/db/multi-db.txt:505
msgid ""
"To specify the database from which a model will be deleted, pass a ``using``"
" keyword argument to the ``Model.delete()`` method. This argument works just"
" like the ``using`` keyword argument to ``save()``."
msgstr ""

# 8466fce855c44e92bab2356b2c091525
#: ../../../../1.8/docs/topics/db/multi-db.txt:509
msgid ""
"For example, if you're migrating a user from the ``legacy_users`` database "
"to the ``new_users`` database, you might use these commands::"
msgstr ""

# 8d98fafb0216441e8d6208eb2619ee2b
#: ../../../../1.8/docs/topics/db/multi-db.txt:516
msgid "Using managers with multiple databases"
msgstr ""

# 71e814417a9645839636fae216815d81
#: ../../../../1.8/docs/topics/db/multi-db.txt:518
msgid ""
"Use the ``db_manager()`` method on managers to give managers access to a "
"non-default database."
msgstr ""

# 034d2058b57f45708e85c25aa5362212
#: ../../../../1.8/docs/topics/db/multi-db.txt:521
msgid ""
"For example, say you have a custom manager method that touches the database "
"-- ``User.objects.create_user()``. Because ``create_user()`` is a manager "
"method, not a ``QuerySet`` method, you can't do "
"``User.objects.using('new_users').create_user()``. (The ``create_user()`` "
"method is only available on ``User.objects``, the manager, not on "
"``QuerySet`` objects derived from the manager.) The solution is to use "
"``db_manager()``, like this::"
msgstr ""

# 6dde509ba8444393bbe96c6758f692a7
#: ../../../../1.8/docs/topics/db/multi-db.txt:531
msgid ""
"``db_manager()`` returns a copy of the manager bound to the database you "
"specify."
msgstr ""

# 54bd03b55b2040759cbd570d0b2d5787
#: ../../../../1.8/docs/topics/db/multi-db.txt:534
msgid "Using ``get_queryset()`` with multiple databases"
msgstr ""

# 4ef57a9e3ea3444984842a6ea73241da
#: ../../../../1.8/docs/topics/db/multi-db.txt:536
msgid ""
"If you're overriding ``get_queryset()`` on your manager, be sure to either "
"call the method on the parent (using ``super()``) or do the appropriate "
"handling of the ``_db`` attribute on the manager (a string containing the "
"name of the database to use)."
msgstr ""

# cf91bc24e3164e6c91bdb23d82307f06
#: ../../../../1.8/docs/topics/db/multi-db.txt:541
msgid ""
"For example, if you want to return a custom ``QuerySet`` class from the "
"``get_queryset`` method, you could do this::"
msgstr ""

# 51700ee8edd743ac8ee2821cb5a5465f
#: ../../../../1.8/docs/topics/db/multi-db.txt:552
msgid "Exposing multiple databases in Django's admin interface"
msgstr ""

# 03913b6728414c87ba9e99258dee9655
#: ../../../../1.8/docs/topics/db/multi-db.txt:554
msgid ""
"Django's admin doesn't have any explicit support for multiple databases. If "
"you want to provide an admin interface for a model on a database other than "
"that specified by your router chain, you'll need to write custom "
":class:`~django.contrib.admin.ModelAdmin` classes that will direct the admin"
" to use a specific database for content."
msgstr ""

# 7ffad58a507a452caeea69cfd076afb0
#: ../../../../1.8/docs/topics/db/multi-db.txt:560
msgid ""
"``ModelAdmin`` objects have five methods that require customization for "
"multiple-database support::"
msgstr ""

# 91f87ad26b1d406a92a268f06d6bffa6
#: ../../../../1.8/docs/topics/db/multi-db.txt:589
msgid ""
"The implementation provided here implements a multi-database strategy where "
"all objects of a given type are stored on a specific database (e.g., all "
"``User`` objects are in the ``other`` database). If your usage of multiple "
"databases is more complex, your ``ModelAdmin`` will need to reflect that "
"strategy."
msgstr ""

# 4be1705b9a16458c9de7e5334fd46f47
#: ../../../../1.8/docs/topics/db/multi-db.txt:595
msgid ""
"Inlines can be handled in a similar fashion. They require three customized "
"methods::"
msgstr ""

# ac64fd1b56cc47af8068a70ac03c3c75
#: ../../../../1.8/docs/topics/db/multi-db.txt:614
msgid ""
"Once you've written your model admin definitions, they can be registered "
"with any ``Admin`` instance::"
msgstr ""

# 675e03f1db5e4fbcb7324699cad4fb45
#: ../../../../1.8/docs/topics/db/multi-db.txt:632
msgid ""
"This example sets up two admin sites. On the first site, the ``Author`` and "
"``Publisher`` objects are exposed; ``Publisher`` objects have an tabular "
"inline showing books published by that publisher. The second site exposes "
"just publishers, without the inlines."
msgstr ""

# 175796b0e9ee42cc9f546d62acfe9345
#: ../../../../1.8/docs/topics/db/multi-db.txt:639
msgid "Using raw cursors with multiple databases"
msgstr ""

# c8db0694bb11450895556917444ce3dd
#: ../../../../1.8/docs/topics/db/multi-db.txt:641
msgid ""
"If you are using more than one database you can use "
"``django.db.connections`` to obtain the connection (and cursor) for a "
"specific database. ``django.db.connections`` is a dictionary-like object "
"that allows you to retrieve a specific connection using its alias::"
msgstr ""

# 5622fabf989f4d578039ae730da6dd1e
#: ../../../../1.8/docs/topics/db/multi-db.txt:651
msgid "Limitations of multiple databases"
msgstr ""

# 50e03962023041469d9b8c044424f69f
#: ../../../../1.8/docs/topics/db/multi-db.txt:656
msgid "Cross-database relations"
msgstr ""

# a173b1e8e4364d95b486474cbcbc849f
#: ../../../../1.8/docs/topics/db/multi-db.txt:658
msgid ""
"Django doesn't currently provide any support for foreign key or many-to-many"
" relationships spanning multiple databases. If you have used a router to "
"partition models to different databases, any foreign key and many-to-many "
"relationships defined by those models must be internal to a single database."
msgstr ""

# b71d6b6cd31e41f4be8a684360b78844
#: ../../../../1.8/docs/topics/db/multi-db.txt:664
msgid ""
"This is because of referential integrity. In order to maintain a "
"relationship between two objects, Django needs to know that the primary key "
"of the related object is valid. If the primary key is stored on a separate "
"database, it's not possible to easily evaluate the validity of a primary "
"key."
msgstr ""

# aeef6df5c2374e2e9e13964355628074
#: ../../../../1.8/docs/topics/db/multi-db.txt:670
msgid ""
"If you're using Postgres, Oracle, or MySQL with InnoDB, this is enforced at "
"the database integrity level -- database level key constraints prevent the "
"creation of relations that can't be validated."
msgstr ""

# 5973cd57b33245fd995e2f4699e944e5
#: ../../../../1.8/docs/topics/db/multi-db.txt:674
msgid ""
"However, if you're using SQLite or MySQL with MyISAM tables, there is no "
"enforced referential integrity; as a result, you may be able to 'fake' cross"
" database foreign keys. However, this configuration is not officially "
"supported by Django."
msgstr ""

# eb2661508fd14bfabc14ef9c977c69a4
#: ../../../../1.8/docs/topics/db/multi-db.txt:682
msgid "Behavior of contrib apps"
msgstr ""

# 97e83584e0fb4b44a17a6dcb0b4d0684
#: ../../../../1.8/docs/topics/db/multi-db.txt:684
msgid ""
"Several contrib apps include models, and some apps depend on others. Since "
"cross-database relationships are impossible, this creates some restrictions "
"on how you can split these models across databases:"
msgstr ""

# 93ee8c84f25541e48710856ede1082ec
#: ../../../../1.8/docs/topics/db/multi-db.txt:688
msgid ""
"each one of ``contenttypes.ContentType``, ``sessions.Session`` and "
"``sites.Site`` can be stored in any database, given a suitable router."
msgstr ""

# cd464b9e060641a9a031045264b87f06
#: ../../../../1.8/docs/topics/db/multi-db.txt:690
msgid ""
"``auth`` models — ``User``, ``Group`` and ``Permission`` — are linked "
"together and linked to ``ContentType``, so they must be stored in the same "
"database as ``ContentType``."
msgstr ""

# d92c1551e0614855ab5b0e34caaa9fcc
#: ../../../../1.8/docs/topics/db/multi-db.txt:693
msgid ""
"``admin`` depends on ``auth``, so their models must be in the same database "
"as ``auth``."
msgstr ""

# 9c301c8df74d42029b14c16166270c47
#: ../../../../1.8/docs/topics/db/multi-db.txt:695
msgid ""
"``flatpages`` and ``redirects`` depend on ``sites``, so their models must be"
" in the same database as ``sites``."
msgstr ""

# 88f6be1744644f69809f8b470abfa5aa
#: ../../../../1.8/docs/topics/db/multi-db.txt:698
msgid ""
"In addition, some objects are automatically created just after "
":djadmin:`migrate` creates a table to hold them in a database:"
msgstr ""

# 3e45f8f87dd344b09d3bc552a2984a9b
#: ../../../../1.8/docs/topics/db/multi-db.txt:701
msgid "a default ``Site``,"
msgstr ""

# 89ca0a1a9c9f4f7db3fb65a0cf435a27
#: ../../../../1.8/docs/topics/db/multi-db.txt:702
msgid ""
"a ``ContentType`` for each model (including those not stored in that "
"database),"
msgstr ""

# 6e7a87ae5d1640a880bbd6c9c91f0d8d
#: ../../../../1.8/docs/topics/db/multi-db.txt:704
msgid ""
"three ``Permission`` for each model (including those not stored in that "
"database)."
msgstr ""

# dea286f430184a0680a99548301fd0e6
#: ../../../../1.8/docs/topics/db/multi-db.txt:707
msgid ""
"For common setups with multiple databases, it isn't useful to have these "
"objects in more than one database. Common setups include primary/replica and"
" connecting to external databases. Therefore, it's recommended to write a "
":ref:`database router<topics-db-multi-db-routing>` that allows synchronizing"
" these three models to only one database. Use the same approach for contrib "
"and third-party apps that don't need their tables in multiple databases."
msgstr ""

# 55992c13a09c402a8775e1040e34b248
#: ../../../../1.8/docs/topics/db/multi-db.txt:716
msgid ""
"If you're synchronizing content types to more than one database, be aware "
"that their primary keys may not match across databases. This may result in "
"data corruption or data loss."
msgstr ""

# 7455ec27f4b740a39dc3b5287ac48f77
#: ../../../../1.8/docs/topics/db/optimization.txt:3
msgid "Database access optimization"
msgstr ""

# 6b31bff7638c412595cd1d9dbe4b96b4
#: ../../../../1.8/docs/topics/db/optimization.txt:5
msgid ""
"Django's database layer provides various ways to help developers get the "
"most out of their databases. This document gathers together links to the "
"relevant documentation, and adds various tips, organized under a number of "
"headings that outline the steps to take when attempting to optimize your "
"database usage."
msgstr ""

# 2e030cf3f7eb4b24b7c417c2edfb05e9
#: ../../../../1.8/docs/topics/db/optimization.txt:11
msgid "Profile first"
msgstr ""

# 6a4bb7ac28c0474b8014a321bc933fe3
#: ../../../../1.8/docs/topics/db/optimization.txt:13
msgid ""
"As general programming practice, this goes without saying. Find out "
":ref:`what queries you are doing and what they are costing you <faq-see-raw-"
"sql-queries>`. You may also want to use an external project like django-"
"debug-toolbar_, or a tool that monitors your database directly."
msgstr ""

# bddbf5e81b774406b111897b701515d4
#: ../../../../1.8/docs/topics/db/optimization.txt:18
msgid ""
"Remember that you may be optimizing for speed or memory or both, depending "
"on your requirements. Sometimes optimizing for one will be detrimental to "
"the other, but sometimes they will help each other. Also, work that is done "
"by the database process might not have the same cost (to you) as the same "
"amount of work done in your Python process. It is up to you to decide what "
"your priorities are, where the balance must lie, and profile all of these as"
" required since this will depend on your application and server."
msgstr ""

# 5d7e1b5c997e4540aea00fd3b4a11d1d
#: ../../../../1.8/docs/topics/db/optimization.txt:26
msgid ""
"With everything that follows, remember to profile after every change to "
"ensure that the change is a benefit, and a big enough benefit given the "
"decrease in readability of your code. **All** of the suggestions below come "
"with the caveat that in your circumstances the general principle might not "
"apply, or might even be reversed."
msgstr ""

# 8ae85388d16748549d0cd7ff279d9d7d
#: ../../../../1.8/docs/topics/db/optimization.txt:35
msgid "Use standard DB optimization techniques"
msgstr ""

# 951953cce91143a58e3cbe2ff6582100
#: ../../../../1.8/docs/topics/db/optimization.txt:37
msgid "...including:"
msgstr ""

# fc6aaa5ea6914e86a43c0145b5d04513
#: ../../../../1.8/docs/topics/db/optimization.txt:39
msgid ""
"Indexes_. This is a number one priority, *after* you have determined from "
"profiling what indexes should be added. Use :attr:`Field.db_index "
"<django.db.models.Field.db_index>` or :attr:`Meta.index_together "
"<django.db.models.Options.index_together>` to add these from Django. "
"Consider adding indexes to fields that you frequently query using "
":meth:`~django.db.models.query.QuerySet.filter()`, "
":meth:`~django.db.models.query.QuerySet.exclude()`, "
":meth:`~django.db.models.query.QuerySet.order_by()`, etc. as indexes may "
"help to speed up lookups. Note that determining the best indexes is a "
"complex database-dependent topic that will depend on your particular "
"application. The overhead of maintaining an index may outweigh any gains in "
"query speed."
msgstr ""

# 76cd8d5655124a1482d3436e2939a76f
#: ../../../../1.8/docs/topics/db/optimization.txt:53
msgid "Appropriate use of field types."
msgstr ""

# 430fd855266b467eaff6d4d6d17d4612
#: ../../../../1.8/docs/topics/db/optimization.txt:55
msgid ""
"We will assume you have done the obvious things above. The rest of this "
"document focuses on how to use Django in such a way that you are not doing "
"unnecessary work. This document also does not address other optimization "
"techniques that apply to all expensive operations, such as :doc:`general "
"purpose caching </topics/cache>`."
msgstr ""

# e683f2bd8831486daffeb22d3010d636
#: ../../../../1.8/docs/topics/db/optimization.txt:62
msgid "Understand QuerySets"
msgstr ""

# e563b061fdd34b67af2126d29ac61ffb
#: ../../../../1.8/docs/topics/db/optimization.txt:64
msgid ""
"Understanding :doc:`QuerySets </ref/models/querysets>` is vital to getting "
"good performance with simple code. In particular:"
msgstr ""

# 1a0c528e93c9465eaad6d7a666899de8
#: ../../../../1.8/docs/topics/db/optimization.txt:68
msgid "Understand QuerySet evaluation"
msgstr ""

# 1a6c72a8a07d43849963893c484189e9
#: ../../../../1.8/docs/topics/db/optimization.txt:70
msgid "To avoid performance problems, it is important to understand:"
msgstr ""

# 3895099a956b426f81258693d381bdc4
#: ../../../../1.8/docs/topics/db/optimization.txt:72
msgid "that :ref:`QuerySets are lazy <querysets-are-lazy>`."
msgstr ""

# 1da7a9615eae44719f86b3c892afe2b2
#: ../../../../1.8/docs/topics/db/optimization.txt:74
msgid "when :ref:`they are evaluated <when-querysets-are-evaluated>`."
msgstr ""

# 3afdbd7a35e6437592f72d92a59cfd10
#: ../../../../1.8/docs/topics/db/optimization.txt:76
msgid "how :ref:`the data is held in memory <caching-and-querysets>`."
msgstr ""

# 6a5793cf8f18426286eaf52f8734ebc3
#: ../../../../1.8/docs/topics/db/optimization.txt:79
msgid "Understand cached attributes"
msgstr ""

# e2f9966689c2424ab77869e2a923086e
#: ../../../../1.8/docs/topics/db/optimization.txt:81
msgid ""
"As well as caching of the whole ``QuerySet``, there is caching of the result"
" of attributes on ORM objects. In general, attributes that are not callable "
"will be cached. For example, assuming the :ref:`example Weblog models "
"<queryset-model-example>`::"
msgstr ""

# e24df8e5d1a64da293079a0302a6133a
#: ../../../../1.8/docs/topics/db/optimization.txt:90
msgid "But in general, callable attributes cause DB lookups every time::"
msgstr ""

# 55b2ee211f5f49bebda3544927bea6d1
#: ../../../../1.8/docs/topics/db/optimization.txt:96
msgid ""
"Be careful when reading template code - the template system does not allow "
"use of parentheses, but will call callables automatically, hiding the above "
"distinction."
msgstr ""

# e6783796a69946ba9a63f2cf544b330e
#: ../../../../1.8/docs/topics/db/optimization.txt:100
msgid ""
"Be careful with your own custom properties - it is up to you to implement "
"caching when required, for example using the "
":class:`~django.utils.functional.cached_property` decorator."
msgstr ""

# 23e8211a0f0442cd836f410898c77918
#: ../../../../1.8/docs/topics/db/optimization.txt:105
msgid "Use the ``with`` template tag"
msgstr ""

# 418d0c850e414df3ab634460a0abb57d
#: ../../../../1.8/docs/topics/db/optimization.txt:107
msgid ""
"To make use of the caching behavior of ``QuerySet``, you may need to use the"
" :ttag:`with` template tag."
msgstr ""

# 176a8facf9a9462db678cadc8948c134
#: ../../../../1.8/docs/topics/db/optimization.txt:111
msgid "Use ``iterator()``"
msgstr ""

# 875e41be64504f35a997ae11b18048a4
#: ../../../../1.8/docs/topics/db/optimization.txt:113
msgid ""
"When you have a lot of objects, the caching behavior of the ``QuerySet`` can"
" cause a large amount of memory to be used. In this case, "
":meth:`~django.db.models.query.QuerySet.iterator()` may help."
msgstr ""

# e29b7fe79dd8422b8763bc3077ada307
#: ../../../../1.8/docs/topics/db/optimization.txt:118
msgid "Do database work in the database rather than in Python"
msgstr ""

# 5a25ca0c4b5a4c17a37a3b6c7517d74b
#: ../../../../1.8/docs/topics/db/optimization.txt:120
msgid "For instance:"
msgstr ""

# 81fb1fb9bb124528bc15b264ce394590
#: ../../../../1.8/docs/topics/db/optimization.txt:122
msgid ""
"At the most basic level, use :ref:`filter and exclude <queryset-api>` to do "
"filtering in the database."
msgstr ""

# 80adec60d749484590d69f009972ce67
#: ../../../../1.8/docs/topics/db/optimization.txt:125
msgid ""
"Use :class:`F expressions <django.db.models.F>` to filter based on other "
"fields within the same model."
msgstr ""

# 4f6ab280e5e3450abd8228eac35aa1d3
#: ../../../../1.8/docs/topics/db/optimization.txt:128
msgid ""
"Use :doc:`annotate to do aggregation in the database "
"</topics/db/aggregation>`."
msgstr ""

# aa29f64b3e6b43c38f05c64bcc5093f9
#: ../../../../1.8/docs/topics/db/optimization.txt:131
msgid "If these aren't enough to generate the SQL you need:"
msgstr ""

# 94294b165b1b406c8f0203804237d6ef
#: ../../../../1.8/docs/topics/db/optimization.txt:134
msgid "Use ``QuerySet.extra()``"
msgstr ""

# 6b4ce382d5e544f8a604d2cb074dd5a4
#: ../../../../1.8/docs/topics/db/optimization.txt:136
msgid ""
"A less portable but more powerful method is "
":meth:`~django.db.models.query.QuerySet.extra()`, which allows some SQL to "
"be explicitly added to the query. If that still isn't powerful enough:"
msgstr ""

# 116e1d955fc248f2b2a94bd34846dbe5
#: ../../../../1.8/docs/topics/db/optimization.txt:141
msgid "Use raw SQL"
msgstr ""

# 97591106a0ef43b7990a1479b0bf0e7f
#: ../../../../1.8/docs/topics/db/optimization.txt:143
msgid ""
"Write your own :doc:`custom SQL to retrieve data or populate models "
"</topics/db/sql>`. Use ``django.db.connection.queries`` to find out what "
"Django is writing for you and start from there."
msgstr ""

# b7828314428c4f3fadf239103888d4ed
#: ../../../../1.8/docs/topics/db/optimization.txt:148
msgid "Retrieve individual objects using a unique, indexed column"
msgstr ""

# 9a571569984a4d4f9363598ec6b46fa8
#: ../../../../1.8/docs/topics/db/optimization.txt:150
msgid ""
"There are two reasons to use a column with "
":attr:`~django.db.models.Field.unique` or "
":attr:`~django.db.models.Field.db_index` when using "
":meth:`~django.db.models.query.QuerySet.get` to retrieve individual objects."
" First, the query will be quicker because of the underlying database index. "
"Also, the query could run much slower if multiple objects match the lookup; "
"having a unique constraint on the column guarantees this will never happen."
msgstr ""

# b71ffb4a45114ec6b53b10e411cdfe78
#: ../../../../1.8/docs/topics/db/optimization.txt:158
msgid "So using the :ref:`example Weblog models <queryset-model-example>`::"
msgstr ""

# d371ca72ace54a17b758753521e76325
#: ../../../../1.8/docs/topics/db/optimization.txt:162
msgid "will be quicker than:"
msgstr ""

# 13bf8e1840824136aae739e4e4ec8a8a
#: ../../../../1.8/docs/topics/db/optimization.txt:166
msgid ""
"because ``id`` is indexed by the database and is guaranteed to be unique."
msgstr ""

# 2af1d95913dd4d6384508beaf027dd3c
#: ../../../../1.8/docs/topics/db/optimization.txt:168
msgid "Doing the following is potentially quite slow:"
msgstr ""

# 50be61f422df44fb81c264ca6851dbfb
#: ../../../../1.8/docs/topics/db/optimization.txt:172
msgid ""
"First of all, ``headline`` is not indexed, which will make the underlying "
"database fetch slower."
msgstr ""

# bc51db8e5ecf4e36a8d6fd3e0551d8b8
#: ../../../../1.8/docs/topics/db/optimization.txt:175
msgid ""
"Second, the lookup doesn't guarantee that only one object will be returned. "
"If the query matches more than one object, it will retrieve and transfer all"
" of them from the database. This penalty could be substantial if hundreds or"
" thousands of records are returned. The penalty will be compounded if the "
"database lives on a separate server, where network overhead and latency also"
" play a factor."
msgstr ""

# 167ccb357af240dd841402d9a816446a
#: ../../../../1.8/docs/topics/db/optimization.txt:183
msgid "Retrieve everything at once if you know you will need it"
msgstr ""

# 910412ef4bae4843869515e9b2bb4c51
#: ../../../../1.8/docs/topics/db/optimization.txt:185
msgid ""
"Hitting the database multiple times for different parts of a single 'set' of"
" data that you will need all parts of is, in general, less efficient than "
"retrieving it all in one query. This is particularly important if you have a"
" query that is executed in a loop, and could therefore end up doing many "
"database queries, when only one was needed. So:"
msgstr ""

# b89e9137c2b94967ad2c259dc3d82a5d
#: ../../../../1.8/docs/topics/db/optimization.txt:192
msgid "Use ``QuerySet.select_related()`` and ``prefetch_related()``"
msgstr ""

# d4997acc80564f83a954191380e4a470
#: ../../../../1.8/docs/topics/db/optimization.txt:194
msgid ""
"Understand :meth:`~django.db.models.query.QuerySet.select_related` and "
":meth:`~django.db.models.query.QuerySet.prefetch_related` thoroughly, and "
"use them:"
msgstr ""

# 70739b8d9fbb49a1bb69848629613663
#: ../../../../1.8/docs/topics/db/optimization.txt:198
msgid "in view code,"
msgstr ""

# 42e641fd0b4648dd885bc95fb91f9968
#: ../../../../1.8/docs/topics/db/optimization.txt:200
msgid ""
"and in :doc:`managers and default managers </topics/db/managers>` where "
"appropriate. Be aware when your manager is and is not used; sometimes this "
"is tricky so don't make assumptions."
msgstr ""

# 7ec8b84661174a26a45e6279043b5ee8
#: ../../../../1.8/docs/topics/db/optimization.txt:205
msgid "Don't retrieve things you don't need"
msgstr ""

# 6a85b5debb2c41feb4c8354e702c3361
#: ../../../../1.8/docs/topics/db/optimization.txt:208
msgid "Use ``QuerySet.values()`` and ``values_list()``"
msgstr ""

# 78fed24fc07b4bf682ee4e94b0a12c9d
#: ../../../../1.8/docs/topics/db/optimization.txt:210
msgid ""
"When you just want a ``dict`` or ``list`` of values, and don't need ORM "
"model objects, make appropriate usage of "
":meth:`~django.db.models.query.QuerySet.values()`. These can be useful for "
"replacing model objects in template code - as long as the dicts you supply "
"have the same attributes as those used in the template, you are fine."
msgstr ""

# 4e49dca2fb204cc481f04665e93404f9
#: ../../../../1.8/docs/topics/db/optimization.txt:218
msgid "Use ``QuerySet.defer()`` and ``only()``"
msgstr ""

# a330cc881a9347ccbc849f30f7264228
#: ../../../../1.8/docs/topics/db/optimization.txt:220
msgid ""
"Use :meth:`~django.db.models.query.QuerySet.defer()` and "
":meth:`~django.db.models.query.QuerySet.only()` if there are database "
"columns you know that you won't need (or won't need in most cases) to avoid "
"loading them. Note that if you *do* use them, the ORM will have to go and "
"get them in a separate query, making this a pessimization if you use it "
"inappropriately."
msgstr ""

# 851babaa4bf242efa6746304519385b7
#: ../../../../1.8/docs/topics/db/optimization.txt:226
msgid ""
"Also, be aware that there is some (small extra) overhead incurred inside "
"Django when constructing a model with deferred fields. Don't be too "
"aggressive in deferring fields without profiling as the database has to read"
" most of the non-text, non-VARCHAR data from the disk for a single row in "
"the results, even if it ends up only using a few columns. The ``defer()`` "
"and ``only()`` methods are most useful when you can avoid loading a lot of "
"text data or for fields that might take a lot of processing to convert back "
"to Python. As always, profile first, then optimize."
msgstr ""

# 914de48ae984455ba961005e7ac543d4
#: ../../../../1.8/docs/topics/db/optimization.txt:236
msgid "Use QuerySet.count()"
msgstr ""

# 4c7b1070f0204efb872f82595cd3edef
#: ../../../../1.8/docs/topics/db/optimization.txt:238
msgid "...if you only want the count, rather than doing ``len(queryset)``."
msgstr ""

# 1956576e3a8443c4968a3e7862a4edf2
#: ../../../../1.8/docs/topics/db/optimization.txt:241
msgid "Use QuerySet.exists()"
msgstr ""

# b77a8f981e7943f59f1f49f1da25f31f
#: ../../../../1.8/docs/topics/db/optimization.txt:243
msgid ""
"...if you only want to find out if at least one result exists, rather than "
"``if queryset``."
msgstr ""

# e56a178dad2940999d376e8f27159f9f
#: ../../../../1.8/docs/topics/db/optimization.txt:246
msgid "But:"
msgstr ""

# 405a6211fe5f45dfad382cdc405dcdc3
#: ../../../../1.8/docs/topics/db/optimization.txt:251
msgid "Don't overuse ``count()`` and ``exists()``"
msgstr ""

# f6604701e98a440f9eaf37a27214f5ee
#: ../../../../1.8/docs/topics/db/optimization.txt:253
msgid ""
"If you are going to need other data from the QuerySet, just evaluate it."
msgstr ""

# 823ca05c42874599b3f25727052debaf
#: ../../../../1.8/docs/topics/db/optimization.txt:255
msgid ""
"For example, assuming an Email model that has a ``body`` attribute and a "
"many-to-many relation to User, the following template code is optimal:"
msgstr ""

# 7f58771f1007451bb8e9e704c1e52eb6
#: ../../../../1.8/docs/topics/db/optimization.txt:274
msgid "It is optimal because:"
msgstr ""

# 9f0de7cfd6ec4dda957c57f1d144fcbb
#: ../../../../1.8/docs/topics/db/optimization.txt:276
msgid ""
"Since QuerySets are lazy, this does no database queries if 'display_inbox' "
"is False."
msgstr ""

# ad7cd460f1994245a2d75c6471b4e443
#: ../../../../1.8/docs/topics/db/optimization.txt:279
msgid ""
"Use of :ttag:`with` means that we store ``user.emails.all`` in a variable "
"for later use, allowing its cache to be re-used."
msgstr ""

# d8980874fa524923b430b1d83168f859
#: ../../../../1.8/docs/topics/db/optimization.txt:282
msgid ""
"The line ``{% if emails %}`` causes ``QuerySet.__bool__()`` to be called, "
"which causes the ``user.emails.all()`` query to be run on the database, and "
"at the least the first line to be turned into an ORM object. If there aren't"
" any results, it will return False, otherwise True."
msgstr ""

# 4e27da74d8af4d1f8a97f7a536525703
#: ../../../../1.8/docs/topics/db/optimization.txt:287
msgid ""
"The use of ``{{ emails|length }}`` calls ``QuerySet.__len__()``, filling out"
" the rest of the cache without doing another query."
msgstr ""

# 0bc4eb15441a489093ba643f21e87a5c
#: ../../../../1.8/docs/topics/db/optimization.txt:290
msgid "The :ttag:`for` loop iterates over the already filled cache."
msgstr ""

# e33ef6eb01314118aa1d7c0c13d0b5bb
#: ../../../../1.8/docs/topics/db/optimization.txt:292
msgid ""
"In total, this code does either one or zero database queries. The only "
"deliberate optimization performed is the use of the :ttag:`with` tag. Using "
"``QuerySet.exists()`` or ``QuerySet.count()`` at any point would cause "
"additional queries."
msgstr ""

# 9aee20ad027743a08bdc5360d306ee9f
#: ../../../../1.8/docs/topics/db/optimization.txt:298
msgid "Use ``QuerySet.update()`` and ``delete()``"
msgstr ""

# 692587cdd2a345cbb186a983afa3c95b
#: ../../../../1.8/docs/topics/db/optimization.txt:300
msgid ""
"Rather than retrieve a load of objects, set some values, and save them "
"individual, use a bulk SQL UPDATE statement, via :ref:`QuerySet.update() "
"<topics-db-queries-update>`. Similarly, do :ref:`bulk deletes <topics-db-"
"queries-delete>` where possible."
msgstr ""

# e41d22e4e1814bc1aeaef7d2843a34cb
#: ../../../../1.8/docs/topics/db/optimization.txt:305
msgid ""
"Note, however, that these bulk update methods cannot call the ``save()`` or "
"``delete()`` methods of individual instances, which means that any custom "
"behavior you have added for these methods will not be executed, including "
"anything driven from the normal database object :doc:`signals "
"</ref/signals>`."
msgstr ""

# c1d156b9a1b54092b288beb2bce6f4fe
#: ../../../../1.8/docs/topics/db/optimization.txt:311
msgid "Use foreign key values directly"
msgstr ""

# 6f6aedf0e62c4e8eb3e414f526956724
#: ../../../../1.8/docs/topics/db/optimization.txt:313
msgid ""
"If you only need a foreign key value, use the foreign key value that is "
"already on the object you've got, rather than getting the whole related "
"object and taking its primary key. i.e. do::"
msgstr ""

# 007ce50ce75140c3a54f8839d1af40d1
#: ../../../../1.8/docs/topics/db/optimization.txt:319
msgid "instead of::"
msgstr ""

# e644796dc0724e9fad4fe0a5c357aad6
#: ../../../../1.8/docs/topics/db/optimization.txt:324
msgid "Don't order results if you don't care"
msgstr ""

# 87b4d573a57e4404ad75836c71497f22
#: ../../../../1.8/docs/topics/db/optimization.txt:326
msgid ""
"Ordering is not free; each field to order by is an operation the database "
"must perform. If a model has a default ordering (:attr:`Meta.ordering "
"<django.db.models.Options.ordering>`) and you don't need it, remove it on a "
"``QuerySet`` by calling :meth:`~django.db.models.query.QuerySet.order_by()` "
"with no parameters."
msgstr ""

# 07cdc100ea034571a550e619316c6a61
#: ../../../../1.8/docs/topics/db/optimization.txt:332
msgid ""
"Adding an index to your database may help to improve ordering performance."
msgstr ""

# cc549e143f124393af85f62267ad17a3
#: ../../../../1.8/docs/topics/db/optimization.txt:335
msgid "Insert in bulk"
msgstr ""

# 5839fe8151ed4416b5b83883724b029a
#: ../../../../1.8/docs/topics/db/optimization.txt:337
msgid ""
"When creating objects, where possible, use the "
":meth:`~django.db.models.query.QuerySet.bulk_create()` method to reduce the "
"number of SQL queries. For example::"
msgstr ""

# 3e459517d88d414aa155656b32490415
# 4ec921c59db742d29f463b553e6ee0a9
#: ../../../../1.8/docs/topics/db/optimization.txt:346
#: ../../../../1.8/docs/topics/db/optimization.txt:360
msgid "...is preferable to::"
msgstr ""

# 9d2e60483d0f4cc88fa0b46563338122
#: ../../../../1.8/docs/topics/db/optimization.txt:351
msgid ""
"Note that there are a number of :meth:`caveats to this method "
"<django.db.models.query.QuerySet.bulk_create>`, so make sure it's "
"appropriate for your use case."
msgstr ""

# b032e35c80b64fcea1cf02ac7b43e72c
#: ../../../../1.8/docs/topics/db/optimization.txt:355
msgid ""
"This also applies to :class:`ManyToManyFields "
"<django.db.models.ManyToManyField>`, so doing::"
msgstr ""

# 4e1afcb0d6ad43c788263fb9f9f79b48
#: ../../../../1.8/docs/topics/db/optimization.txt:365
msgid "...where ``Bands`` and ``Artists`` have a many-to-many relationship."
msgstr ""

# 849e81e4caf74f5c89d5b9c8ba435ffc
#: ../../../../1.8/docs/topics/db/queries.txt:3
msgid "Making queries"
msgstr ""

# 0961552f74284e0b869f40ae4bd6cc29
#: ../../../../1.8/docs/topics/db/queries.txt:7
msgid ""
"Once you've created your :doc:`data models </topics/db/models>`, Django "
"automatically gives you a database-abstraction API that lets you create, "
"retrieve, update and delete objects. This document explains how to use this "
"API. Refer to the :doc:`data model reference </ref/models/index>` for full "
"details of all the various model lookup options."
msgstr ""

# d6fd38d66b414966a2ec9759f15ddbf3
#: ../../../../1.8/docs/topics/db/queries.txt:13
msgid ""
"Throughout this guide (and in the reference), we'll refer to the following "
"models, which comprise a Weblog application:"
msgstr ""

# 026fe3b5a8c34698a3908a6cceedb195
#: ../../../../1.8/docs/topics/db/queries.txt:51
msgid "Creating objects"
msgstr ""

# 4b22f38a9edf4fb98c7644825835af28
#: ../../../../1.8/docs/topics/db/queries.txt:53
msgid ""
"To represent database-table data in Python objects, Django uses an intuitive"
" system: A model class represents a database table, and an instance of that "
"class represents a particular record in the database table."
msgstr ""

# 273980fcf2034d6396bd52b1b6b03cfd
#: ../../../../1.8/docs/topics/db/queries.txt:57
msgid ""
"To create an object, instantiate it using keyword arguments to the model "
"class, then call :meth:`~django.db.models.Model.save` to save it to the "
"database."
msgstr ""

# e7e3a6207c23445ead29c518ef8f3690
#: ../../../../1.8/docs/topics/db/queries.txt:60
msgid ""
"Assuming models live in a file ``mysite/blog/models.py``, here's an "
"example::"
msgstr ""

# b39cf293ae80457b9ae94104b095f104
#: ../../../../1.8/docs/topics/db/queries.txt:66
msgid ""
"This performs an ``INSERT`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call "
":meth:`~django.db.models.Model.save`."
msgstr ""

# 243342fb94724f8abb4b5330b65d3ee4
#: ../../../../1.8/docs/topics/db/queries.txt:69
msgid "The :meth:`~django.db.models.Model.save` method has no return value."
msgstr ""

# 0a26dfe48d214f74844b38cd91c97ac1
#: ../../../../1.8/docs/topics/db/queries.txt:73
msgid ""
":meth:`~django.db.models.Model.save` takes a number of advanced options not "
"described here. See the documentation for "
":meth:`~django.db.models.Model.save` for complete details."
msgstr ""

# afa7da98f83843aabf4d24be4b330a81
#: ../../../../1.8/docs/topics/db/queries.txt:77
msgid ""
"To create and save an object in a single step, use the "
":meth:`~django.db.models.query.QuerySet.create()` method."
msgstr ""

# 2c5d077758cd49dd8d779243153f84a8
#: ../../../../1.8/docs/topics/db/queries.txt:81
msgid "Saving changes to objects"
msgstr ""

# 9040fdaf688f41f29d087462b184f3da
#: ../../../../1.8/docs/topics/db/queries.txt:83
msgid ""
"To save changes to an object that's already in the database, use "
":meth:`~django.db.models.Model.save`."
msgstr ""

# c146ac5e9d384efca20003a88648e42e
#: ../../../../1.8/docs/topics/db/queries.txt:86
msgid ""
"Given a ``Blog`` instance ``b5`` that has already been saved to the "
"database, this example changes its name and updates its record in the "
"database::"
msgstr ""

# 95307e91824347c2b269110c1ca38d43
#: ../../../../1.8/docs/topics/db/queries.txt:92
msgid ""
"This performs an ``UPDATE`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call "
":meth:`~django.db.models.Model.save`."
msgstr ""

# 4e4368ae4d524cac97817f2237eb0008
#: ../../../../1.8/docs/topics/db/queries.txt:96
msgid "Saving ``ForeignKey`` and ``ManyToManyField`` fields"
msgstr ""

# b200140d61564cb985f3483f0b96a91a
#: ../../../../1.8/docs/topics/db/queries.txt:98
msgid ""
"Updating a :class:`~django.db.models.ForeignKey` field works exactly the "
"same way as saving a normal field -- simply assign an object of the right "
"type to the field in question. This example updates the ``blog`` attribute "
"of an ``Entry`` instance ``entry``, assuming appropriate instances of "
"``Entry`` and ``Blog`` are already saved to the database (so we can retrieve"
" them below)::"
msgstr ""

# 316a3b6e4f88492ba988f6bcf40ba13a
#: ../../../../1.8/docs/topics/db/queries.txt:110
msgid ""
"Updating a :class:`~django.db.models.ManyToManyField` works a little "
"differently -- use the "
":meth:`~django.db.models.fields.related.RelatedManager.add` method on the "
"field to add a record to the relation. This example adds the ``Author`` "
"instance ``joe`` to the ``entry`` object::"
msgstr ""

# bf67caa5c48b4a5cb03f0f2aa58266af
#: ../../../../1.8/docs/topics/db/queries.txt:120
msgid ""
"To add multiple records to a :class:`~django.db.models.ManyToManyField` in "
"one go, include multiple arguments in the call to "
":meth:`~django.db.models.fields.related.RelatedManager.add`, like this::"
msgstr ""

# f4586e61020d435aa5a514da0499251d
#: ../../../../1.8/docs/topics/db/queries.txt:130
msgid ""
"Django will complain if you try to assign or add an object of the wrong "
"type."
msgstr ""

# 13106beb66534f458716b424f63b997a
#: ../../../../1.8/docs/topics/db/queries.txt:135
msgid "Retrieving objects"
msgstr ""

# b1d8686fc3d742368b8b1b1c840966c8
#: ../../../../1.8/docs/topics/db/queries.txt:137
msgid ""
"To retrieve objects from your database, construct a "
":class:`~django.db.models.query.QuerySet` via a "
":class:`~django.db.models.Manager` on your model class."
msgstr ""

# 73db4043d2634d4b96b0c5add451dc5e
#: ../../../../1.8/docs/topics/db/queries.txt:141
msgid ""
"A :class:`~django.db.models.query.QuerySet` represents a collection of "
"objects from your database. It can have zero, one or many *filters*. Filters"
" narrow down the query results based on the given parameters. In SQL terms, "
"a :class:`~django.db.models.query.QuerySet` equates to a ``SELECT`` "
"statement, and a filter is a limiting clause such as ``WHERE`` or ``LIMIT``."
msgstr ""

# e85855bb32c449c8bec6803e412ede49
#: ../../../../1.8/docs/topics/db/queries.txt:147
msgid ""
"You get a :class:`~django.db.models.query.QuerySet` by using your model's "
":class:`~django.db.models.Manager`. Each model has at least one "
":class:`~django.db.models.Manager`, and it's called "
":attr:`~django.db.models.Model.objects` by default. Access it directly via "
"the model class, like so::"
msgstr ""

# 8728965c7e664be395d98527dc5588fd
#: ../../../../1.8/docs/topics/db/queries.txt:163
msgid ""
"``Managers`` are accessible only via model classes, rather than from model "
"instances, to enforce a separation between \"table-level\" operations and "
"\"record-level\" operations."
msgstr ""

# 4cb96ac3dd224645a92012a542c4f178
#: ../../../../1.8/docs/topics/db/queries.txt:167
msgid ""
"The :class:`~django.db.models.Manager` is the main source of ``QuerySets`` "
"for a model. For example, ``Blog.objects.all()`` returns a "
":class:`~django.db.models.query.QuerySet` that contains all ``Blog`` objects"
" in the database."
msgstr ""

# 6c0334a4f6294256bd7575457c5e92ae
#: ../../../../1.8/docs/topics/db/queries.txt:173
msgid "Retrieving all objects"
msgstr ""

# 2efb1b8b74e945bd949e3b88ea7a99b2
#: ../../../../1.8/docs/topics/db/queries.txt:175
msgid ""
"The simplest way to retrieve objects from a table is to get all of them. To "
"do this, use the :meth:`~django.db.models.query.QuerySet.all` method on a "
":class:`~django.db.models.Manager`::"
msgstr ""

# 517cb15d2511469f85fa424a94b57c78
#: ../../../../1.8/docs/topics/db/queries.txt:181
msgid ""
"The :meth:`~django.db.models.query.QuerySet.all` method returns a "
":class:`~django.db.models.query.QuerySet` of all the objects in the "
"database."
msgstr ""

# e75757fb4f85423aa310c190d735a34b
#: ../../../../1.8/docs/topics/db/queries.txt:185
msgid "Retrieving specific objects with filters"
msgstr ""

# bd4adab777e946c4a5f7799d8fbfd9a2
#: ../../../../1.8/docs/topics/db/queries.txt:187
msgid ""
"The :class:`~django.db.models.query.QuerySet` returned by "
":meth:`~django.db.models.query.QuerySet.all` describes all objects in the "
"database table. Usually, though, you'll need to select only a subset of the "
"complete set of objects."
msgstr ""

# f3de7a626036410bbb3318eff2370f86
#: ../../../../1.8/docs/topics/db/queries.txt:192
msgid ""
"To create such a subset, you refine the initial "
":class:`~django.db.models.query.QuerySet`, adding filter conditions. The two"
" most common ways to refine a :class:`~django.db.models.query.QuerySet` are:"
msgstr ""

# 6b66b1cfbcf7407f965c1a35818101b2
#: ../../../../1.8/docs/topics/db/queries.txt:198
msgid "``filter(**kwargs)``"
msgstr ""

# 89f7a92445f540e0a8e5296cee64b124
#: ../../../../1.8/docs/topics/db/queries.txt:197
msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that match the given lookup parameters."
msgstr ""

# 5dcc3c6532944b928a546af7bd3002b0
#: ../../../../1.8/docs/topics/db/queries.txt:202
msgid "``exclude(**kwargs)``"
msgstr ""

# 632892610a9f4afe982653b3d77b6eeb
#: ../../../../1.8/docs/topics/db/queries.txt:201
msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that do *not* match the given lookup parameters."
msgstr ""

# e3742924a0864d8fab2f8105f739405c
#: ../../../../1.8/docs/topics/db/queries.txt:204
msgid ""
"The lookup parameters (``**kwargs`` in the above function definitions) "
"should be in the format described in `Field lookups`_ below."
msgstr ""

# 35efd173bf03475fbc17383bf5c1e2df
#: ../../../../1.8/docs/topics/db/queries.txt:207
msgid ""
"For example, to get a :class:`~django.db.models.query.QuerySet` of blog "
"entries from the year 2006, use "
":meth:`~django.db.models.query.QuerySet.filter` like so::"
msgstr ""

# 5b60029477904fdb9656c1b227b6c717
#: ../../../../1.8/docs/topics/db/queries.txt:213
msgid "With the default manager class, it is the same as::"
msgstr ""

# 55add13acca94da7989a259d66307a1e
#: ../../../../1.8/docs/topics/db/queries.txt:220
msgid "Chaining filters"
msgstr ""

# da56ff4ab02a42e3a25b986f6f0379f2
#: ../../../../1.8/docs/topics/db/queries.txt:222
msgid ""
"The result of refining a :class:`~django.db.models.query.QuerySet` is itself"
" a :class:`~django.db.models.query.QuerySet`, so it's possible to chain "
"refinements together. For example::"
msgstr ""

# ad4d4ec5e0ef4d30ba86732e32194802
#: ../../../../1.8/docs/topics/db/queries.txt:234
msgid ""
"This takes the initial :class:`~django.db.models.query.QuerySet` of all "
"entries in the database, adds a filter, then an exclusion, then another "
"filter. The final result is a :class:`~django.db.models.query.QuerySet` "
"containing all entries with a headline that starts with \"What\", that were "
"published between January 30, 2005, and the current day."
msgstr ""

# 733c4f4d774349b69944770e44799fef
#: ../../../../1.8/docs/topics/db/queries.txt:243
msgid "Filtered QuerySets are unique"
msgstr ""

# ab14d943b32841ea85bae90e9e7f79e2
#: ../../../../1.8/docs/topics/db/queries.txt:245
msgid ""
"Each time you refine a :class:`~django.db.models.query.QuerySet`, you get a "
"brand-new :class:`~django.db.models.query.QuerySet` that is in no way bound "
"to the previous :class:`~django.db.models.query.QuerySet`. Each refinement "
"creates a separate and distinct :class:`~django.db.models.query.QuerySet` "
"that can be stored, used and reused."
msgstr ""

# 8c570953ab374f19b22cf9655b717f36
#: ../../../../1.8/docs/topics/db/queries.txt:257
msgid ""
"These three ``QuerySets`` are separate. The first is a base "
":class:`~django.db.models.query.QuerySet` containing all entries that "
"contain a headline starting with \"What\". The second is a subset of the "
"first, with an additional criteria that excludes records whose ``pub_date`` "
"is today or in the future. The third is a subset of the first, with an "
"additional criteria that selects only the records whose ``pub_date`` is "
"today or in the future. The initial "
":class:`~django.db.models.query.QuerySet` (``q1``) is unaffected by the "
"refinement process."
msgstr ""

# 2bc2163cb72b4f6db6ba24e0a148eac2
#: ../../../../1.8/docs/topics/db/queries.txt:269
msgid "QuerySets are lazy"
msgstr ""

# e71dc5c4de064cff9aa917126080f650
#: ../../../../1.8/docs/topics/db/queries.txt:271
msgid ""
"``QuerySets`` are lazy -- the act of creating a "
":class:`~django.db.models.query.QuerySet` doesn't involve any database "
"activity. You can stack filters together all day long, and Django won't "
"actually run the query until the :class:`~django.db.models.query.QuerySet` "
"is *evaluated*. Take a look at this example::"
msgstr ""

# f8ac0a7a1711414f91e00d65f631d14b
#: ../../../../1.8/docs/topics/db/queries.txt:282
msgid ""
"Though this looks like three database hits, in fact it hits the database "
"only once, at the last line (``print(q)``). In general, the results of a "
":class:`~django.db.models.query.QuerySet` aren't fetched from the database "
"until you \"ask\" for them. When you do, the "
":class:`~django.db.models.query.QuerySet` is *evaluated* by accessing the "
"database. For more details on exactly when evaluation takes place, see :ref"
":`when-querysets-are-evaluated`."
msgstr ""

# 5721b9590e474b9fae8d6b0432f7b54a
#: ../../../../1.8/docs/topics/db/queries.txt:294
msgid "Retrieving a single object with get"
msgstr ""

# fc4771a07b3a4d2595666b1ce96413f8
#: ../../../../1.8/docs/topics/db/queries.txt:296
msgid ""
":meth:`~django.db.models.query.QuerySet.filter` will always give you a "
":class:`~django.db.models.query.QuerySet`, even if only a single object "
"matches the query - in this case, it will be a "
":class:`~django.db.models.query.QuerySet` containing a single element."
msgstr ""

# f5295c1b3a33476c8c60df9b0e1d2352
#: ../../../../1.8/docs/topics/db/queries.txt:301
msgid ""
"If you know there is only one object that matches your query, you can use "
"the :meth:`~django.db.models.query.QuerySet.get` method on a "
":class:`~django.db.models.Manager` which returns the object directly::"
msgstr ""

# 1444fedeef1540a39bd8a1618a33a2d3
#: ../../../../1.8/docs/topics/db/queries.txt:307
msgid ""
"You can use any query expression with "
":meth:`~django.db.models.query.QuerySet.get`, just like with "
":meth:`~django.db.models.query.QuerySet.filter` - again, see `Field "
"lookups`_ below."
msgstr ""

# 5aa6cabeb21349f0883268c5e9f1dae5
#: ../../../../1.8/docs/topics/db/queries.txt:312
msgid ""
"Note that there is a difference between using "
":meth:`~django.db.models.query.QuerySet.get`, and using "
":meth:`~django.db.models.query.QuerySet.filter` with a slice of ``[0]``. If "
"there are no results that match the query, "
":meth:`~django.db.models.query.QuerySet.get` will raise a ``DoesNotExist`` "
"exception. This exception is an attribute of the model class that the query "
"is being performed on - so in the code above, if there is no ``Entry`` "
"object with a primary key of 1, Django will raise ``Entry.DoesNotExist``."
msgstr ""

# 95edaa1c289744fbb776d9cc5a39c004
#: ../../../../1.8/docs/topics/db/queries.txt:321
msgid ""
"Similarly, Django will complain if more than one item matches the "
":meth:`~django.db.models.query.QuerySet.get` query. In this case, it will "
"raise :exc:`~django.core.exceptions.MultipleObjectsReturned`, which again is"
" an attribute of the model class itself."
msgstr ""

# 3e85e1b464a0492fa0d74ecb9e304716
#: ../../../../1.8/docs/topics/db/queries.txt:328
msgid "Other QuerySet methods"
msgstr ""

# e29b211e83794443b63d80444746fbe0
#: ../../../../1.8/docs/topics/db/queries.txt:330
msgid ""
"Most of the time you'll use :meth:`~django.db.models.query.QuerySet.all`, "
":meth:`~django.db.models.query.QuerySet.get`, "
":meth:`~django.db.models.query.QuerySet.filter` and "
":meth:`~django.db.models.query.QuerySet.exclude` when you need to look up "
"objects from the database. However, that's far from all there is; see the "
":ref:`QuerySet API Reference <queryset-api>` for a complete list of all the "
"various :class:`~django.db.models.query.QuerySet` methods."
msgstr ""

# e4ce3d2987574777929efd85af8a7beb
#: ../../../../1.8/docs/topics/db/queries.txt:341
msgid "Limiting QuerySets"
msgstr ""

# 56d3944cc40e41f0b1b88e131482a568
#: ../../../../1.8/docs/topics/db/queries.txt:343
msgid ""
"Use a subset of Python's array-slicing syntax to limit your "
":class:`~django.db.models.query.QuerySet` to a certain number of results. "
"This is the equivalent of SQL's ``LIMIT`` and ``OFFSET`` clauses."
msgstr ""

# 689f8b82559246428ce51e9be556758c
#: ../../../../1.8/docs/topics/db/queries.txt:347
msgid "For example, this returns the first 5 objects (``LIMIT 5``)::"
msgstr ""

# 0a13887850c64bbd8dda07c27c8a9867
#: ../../../../1.8/docs/topics/db/queries.txt:351
msgid "This returns the sixth through tenth objects (``OFFSET 5 LIMIT 5``)::"
msgstr ""

# c79c8b3a2a164d508e7380b155679cc5
#: ../../../../1.8/docs/topics/db/queries.txt:355
msgid "Negative indexing (i.e. ``Entry.objects.all()[-1]``) is not supported."
msgstr ""

# c9c47b9d5ce743ff849f916d242f0e63
#: ../../../../1.8/docs/topics/db/queries.txt:357
msgid ""
"Generally, slicing a :class:`~django.db.models.query.QuerySet` returns a new"
" :class:`~django.db.models.query.QuerySet` -- it doesn't evaluate the query."
" An exception is if you use the \"step\" parameter of Python slice syntax. "
"For example, this would actually execute the query in order to return a list"
" of every *second* object of the first 10::"
msgstr ""

# 39887f35f54f4d63912e7ead8e177cf3
#: ../../../../1.8/docs/topics/db/queries.txt:365
msgid ""
"To retrieve a *single* object rather than a list (e.g. ``SELECT foo FROM bar"
" LIMIT 1``), use a simple index instead of a slice. For example, this "
"returns the first ``Entry`` in the database, after ordering entries "
"alphabetically by headline::"
msgstr ""

# c2d65a71a17246918b3a6ab969252d88
#: ../../../../1.8/docs/topics/db/queries.txt:372
msgid "This is roughly equivalent to::"
msgstr ""

# ae662712351d4e3ba83308341709e3fa
#: ../../../../1.8/docs/topics/db/queries.txt:376
msgid ""
"Note, however, that the first of these will raise ``IndexError`` while the "
"second will raise ``DoesNotExist`` if no objects match the given criteria. "
"See :meth:`~django.db.models.query.QuerySet.get` for more details."
msgstr ""

# 97a06cbf494b4c4dae3e8914792a91f7
#: ../../../../1.8/docs/topics/db/queries.txt:383
msgid "Field lookups"
msgstr ""

# 9afb2849bda24164a28135381ad2f1f1
#: ../../../../1.8/docs/topics/db/queries.txt:385
msgid ""
"Field lookups are how you specify the meat of an SQL ``WHERE`` clause. "
"They're specified as keyword arguments to the "
":class:`~django.db.models.query.QuerySet` methods "
":meth:`~django.db.models.query.QuerySet.filter`, "
":meth:`~django.db.models.query.QuerySet.exclude` and "
":meth:`~django.db.models.query.QuerySet.get`."
msgstr ""

# 72db46d64d3643ba99d465fe198d2882
#: ../../../../1.8/docs/topics/db/queries.txt:391
msgid ""
"Basic lookups keyword arguments take the form ``field__lookuptype=value``. "
"(That's a double-underscore). For example::"
msgstr ""

# 1d0fe50961ba42bcaca04a1f7e8c115c
#: ../../../../1.8/docs/topics/db/queries.txt:396
msgid "translates (roughly) into the following SQL:"
msgstr ""

# cb01bc7de350490cb4a6a9d3923dd236
#: ../../../../1.8/docs/topics/db/queries.txt:402
msgid "How this is possible"
msgstr ""

# be961230072944b7b51b3616d6c05217
#: ../../../../1.8/docs/topics/db/queries.txt:404
msgid ""
"Python has the ability to define functions that accept arbitrary name-value "
"arguments whose names and values are evaluated at runtime. For more "
"information, see `Keyword Arguments`_ in the official Python tutorial."
msgstr ""

# 5ddc237847854255ae9819d01b2b1e71
#: ../../../../1.8/docs/topics/db/queries.txt:410
msgid ""
"The field specified in a lookup has to be the name of a model field. There's"
" one exception though, in case of a :class:`~django.db.models.ForeignKey` "
"you can specify the field name suffixed with ``_id``. In this case, the "
"value parameter is expected to contain the raw value of the foreign model's "
"primary key. For example:"
msgstr ""

# 29c8cacd57934e0a83256c3313195534
#: ../../../../1.8/docs/topics/db/queries.txt:418
msgid ""
"If you pass an invalid keyword argument, a lookup function will raise "
"``TypeError``."
msgstr ""

# c09865529a034bff8f53f999d80202c4
#: ../../../../1.8/docs/topics/db/queries.txt:421
msgid ""
"The database API supports about two dozen lookup types; a complete reference"
" can be found in the :ref:`field lookup reference <field-lookups>`. To give "
"you a taste of what's available, here's some of the more common lookups "
"you'll probably use:"
msgstr ""

# 77273be9534f4eb88d2986f317ab3033
#: ../../../../1.8/docs/topics/db/queries.txt:446
msgid ":lookup:`exact`"
msgstr ""

# a94172164c614b5eb9c18b5478e16e23
#: ../../../../1.8/docs/topics/db/queries.txt:427
msgid "An \"exact\" match. For example::"
msgstr ""

# 6ce19d3eeb9b4f228e44f28b713dfaf6
#: ../../../../1.8/docs/topics/db/queries.txt:431
msgid "Would generate SQL along these lines:"
msgstr ""

# ac3a282bb8a34448ba5f4a0e4344737f
#: ../../../../1.8/docs/topics/db/queries.txt:437
msgid ""
"If you don't provide a lookup type -- that is, if your keyword argument "
"doesn't contain a double underscore -- the lookup type is assumed to be "
"``exact``."
msgstr ""

# 9da789590a934d26aa186b1eceaeecae
#: ../../../../1.8/docs/topics/db/queries.txt:441
msgid "For example, the following two statements are equivalent::"
msgstr ""

# 7cfaa0c7c56d46819a079083b185d4dd
#: ../../../../1.8/docs/topics/db/queries.txt:446
msgid ""
"This is for convenience, because ``exact`` lookups are the common case."
msgstr ""

# ba95f9962ab349aea9702f381132301b
#: ../../../../1.8/docs/topics/db/queries.txt:454
msgid ":lookup:`iexact`"
msgstr ""

# 1ddceed502ad4f7a948e4691651f74fd
#: ../../../../1.8/docs/topics/db/queries.txt:449
msgid "A case-insensitive match. So, the query::"
msgstr ""

# 00079d4e926b42568d163ee74bb93914
#: ../../../../1.8/docs/topics/db/queries.txt:453
msgid ""
"Would match a ``Blog`` titled ``\"Beatles Blog\"``, ``\"beatles blog\"``, or"
" even ``\"BeAtlES blOG\"``."
msgstr ""

# b89644b2944b40e6989a2bf110e0a334
#: ../../../../1.8/docs/topics/db/queries.txt:470
msgid ":lookup:`contains`"
msgstr ""

# ac09907ebaf7489187db4a47322b7a52
#: ../../../../1.8/docs/topics/db/queries.txt:457
msgid "Case-sensitive containment test. For example::"
msgstr ""

# a0cc974c08f94aa58e2a3b76b4ea43f4
#: ../../../../1.8/docs/topics/db/queries.txt:461
msgid "Roughly translates to this SQL:"
msgstr ""

# f286d275bca74ea8b3339c2b4a2b1547
#: ../../../../1.8/docs/topics/db/queries.txt:467
msgid ""
"Note this will match the headline ``'Today Lennon honored'`` but not "
"``'today lennon honored'``."
msgstr ""

# f7a43a33c4864500b5b639d047376238
#: ../../../../1.8/docs/topics/db/queries.txt:470
msgid "There's also a case-insensitive version, :lookup:`icontains`."
msgstr ""

# 6322f6f4ad4f45e1bdd459e21f2cd942
#: ../../../../1.8/docs/topics/db/queries.txt:475
msgid ":lookup:`startswith`, :lookup:`endswith`"
msgstr ""

# 3632ac5d58624cd98a4d5e72cd3b6bbb
#: ../../../../1.8/docs/topics/db/queries.txt:473
msgid ""
"Starts-with and ends-with search, respectively. There are also case-"
"insensitive versions called :lookup:`istartswith` and :lookup:`iendswith`."
msgstr ""

# ab0d437ecbc54257bd19f1fe21f3f09b
#: ../../../../1.8/docs/topics/db/queries.txt:477
msgid ""
"Again, this only scratches the surface. A complete reference can be found in"
" the :ref:`field lookup reference <field-lookups>`."
msgstr ""

# 20698980355d4b38a6abcfa56e64b0d2
#: ../../../../1.8/docs/topics/db/queries.txt:483
msgid "Lookups that span relationships"
msgstr ""

# 3aa6f0b600c4412bad9ea428010be5cf
#: ../../../../1.8/docs/topics/db/queries.txt:485
msgid ""
"Django offers a powerful and intuitive way to \"follow\" relationships in "
"lookups, taking care of the SQL ``JOIN``\\s for you automatically, behind "
"the scenes. To span a relationship, just use the field name of related "
"fields across models, separated by double underscores, until you get to the "
"field you want."
msgstr ""

# 9387e783bd37406fa1d9bb7927b9c798
#: ../../../../1.8/docs/topics/db/queries.txt:491
msgid ""
"This example retrieves all ``Entry`` objects with a ``Blog`` whose ``name`` "
"is ``'Beatles Blog'``::"
msgstr ""

# fa6c62d7b8084626864062d2960319d7
#: ../../../../1.8/docs/topics/db/queries.txt:496
msgid "This spanning can be as deep as you'd like."
msgstr ""

# 98d054a4dbeb4b329b5e4f81b53d45f0
#: ../../../../1.8/docs/topics/db/queries.txt:498
msgid ""
"It works backwards, too. To refer to a \"reverse\" relationship, just use "
"the lowercase name of the model."
msgstr ""

# d481066aef804f9db8b7d0afa8e581e0
#: ../../../../1.8/docs/topics/db/queries.txt:501
msgid ""
"This example retrieves all ``Blog`` objects which have at least one "
"``Entry`` whose ``headline`` contains ``'Lennon'``::"
msgstr ""

# e1f0c48d34c54c258299f4a242e7fa5a
#: ../../../../1.8/docs/topics/db/queries.txt:506
msgid ""
"If you are filtering across multiple relationships and one of the "
"intermediate models doesn't have a value that meets the filter condition, "
"Django will treat it as if there is an empty (all values are ``NULL``), but "
"valid, object there. All this means is that no error will be raised. For "
"example, in this filter::"
msgstr ""

# 2b977474b0db449b8f085e25493ad224
#: ../../../../1.8/docs/topics/db/queries.txt:513
msgid ""
"(if there was a related ``Author`` model), if there was no ``author`` "
"associated with an entry, it would be treated as if there was also no "
"``name`` attached, rather than raising an error because of the missing "
"``author``. Usually this is exactly what you want to have happen. The only "
"case where it might be confusing is if you are using :lookup:`isnull`. "
"Thus::"
msgstr ""

# 6239b8dfb7474161aaa8103600ff5a3a
#: ../../../../1.8/docs/topics/db/queries.txt:521
msgid ""
"will return ``Blog`` objects that have an empty ``name`` on the ``author`` "
"and also those which have an empty ``author`` on the ``entry``. If you don't"
" want those latter objects, you could write::"
msgstr ""

# d6b4ed9b1f694643963f8138e492cf20
#: ../../../../1.8/docs/topics/db/queries.txt:529
msgid "Spanning multi-valued relationships"
msgstr ""

# 7616be39185f4c9181b63204cc5e2e25
#: ../../../../1.8/docs/topics/db/queries.txt:531
msgid ""
"When you are filtering an object based on a "
":class:`~django.db.models.ManyToManyField` or a reverse "
":class:`~django.db.models.ForeignKey`, there are two different sorts of "
"filter you may be interested in. Consider the ``Blog``/``Entry`` "
"relationship (``Blog`` to ``Entry`` is a one-to-many relation). We might be "
"interested in finding blogs that have an entry which has both *\"Lennon\"* "
"in the headline and was published in 2008. Or we might want to find blogs "
"that have an entry with *\"Lennon\"* in the headline as well as an entry "
"that was published in 2008. Since there are multiple entries associated with"
" a single ``Blog``, both of these queries are possible and make sense in "
"some situations."
msgstr ""

# 3763805db09f4df58488b49a2250e8a0
#: ../../../../1.8/docs/topics/db/queries.txt:542
msgid ""
"The same type of situation arises with a "
":class:`~django.db.models.ManyToManyField`. For example, if an ``Entry`` has"
" a :class:`~django.db.models.ManyToManyField` called ``tags``, we might want"
" to find entries linked to tags called *\"music\"* and *\"bands\"* or we "
"might want an entry that contains a tag with a name of *\"music\"* and a "
"status of *\"public\"*."
msgstr ""

# 3a2970a80c9b4fa084a99834c49663bb
#: ../../../../1.8/docs/topics/db/queries.txt:548
msgid ""
"To handle both of these situations, Django has a consistent way of "
"processing :meth:`~django.db.models.query.QuerySet.filter` calls. Everything"
" inside a single :meth:`~django.db.models.query.QuerySet.filter` call is "
"applied simultaneously to filter out items matching all those requirements. "
"Successive :meth:`~django.db.models.query.QuerySet.filter` calls further "
"restrict the set of objects, but for multi-valued relations, they apply to "
"any object linked to the primary model, not necessarily those objects that "
"were selected by an earlier :meth:`~django.db.models.query.QuerySet.filter` "
"call."
msgstr ""

# 4fe397345d3d4304b8920c0a6130fdb4
#: ../../../../1.8/docs/topics/db/queries.txt:557
msgid ""
"That may sound a bit confusing, so hopefully an example will clarify. To "
"select all blogs that contain entries with both *\"Lennon\"* in the headline"
" and that were published in 2008 (the same entry satisfying both "
"conditions), we would write::"
msgstr ""

# 143171ab9df847ceb147c7eb7a75171e
#: ../../../../1.8/docs/topics/db/queries.txt:565
msgid ""
"To select all blogs that contain an entry with *\"Lennon\"* in the headline "
"**as well as** an entry that was published in 2008, we would write::"
msgstr ""

# b735f8ea5d1b479bb5f778a556ef450c
#: ../../../../1.8/docs/topics/db/queries.txt:571
msgid ""
"Suppose there is only one blog that had both entries containing *\"Lennon\"*"
" and entries from 2008, but that none of the entries from 2008 contained "
"*\"Lennon\"*. The first query would not return any blogs, but the second "
"query would return that one blog."
msgstr ""

# f6d10c5b50a24b039eb71354429d1739
#: ../../../../1.8/docs/topics/db/queries.txt:576
msgid ""
"In the second example, the first filter restricts the queryset to all those "
"blogs linked to entries with *\"Lennon\"* in the headline. The second filter"
" restricts the set of blogs *further* to those that are also linked to "
"entries that were published in 2008. The entries selected by the second "
"filter may or may not be the same as the entries in the first filter. We are"
" filtering the ``Blog`` items with each filter statement, not the ``Entry`` "
"items."
msgstr ""

# 9abff38f8ca84238b64c66537776991a
#: ../../../../1.8/docs/topics/db/queries.txt:585
msgid ""
"The behavior of :meth:`~django.db.models.query.QuerySet.filter` for queries "
"that span multi-value relationships, as described above, is not implemented "
"equivalently for :meth:`~django.db.models.query.QuerySet.exclude`. Instead, "
"the conditions in a single :meth:`~django.db.models.query.QuerySet.exclude` "
"call will not necessarily refer to the same item."
msgstr ""

# 1aac355c39b94dc08c1743ed6091d4cc
#: ../../../../1.8/docs/topics/db/queries.txt:591
msgid ""
"For example, the following query would exclude blogs that contain *both* "
"entries with *\"Lennon\"* in the headline *and* entries published in 2008::"
msgstr ""

# e757bae0170f4a46bd69da50869f6e26
#: ../../../../1.8/docs/topics/db/queries.txt:599
msgid ""
"However, unlike the behavior when using "
":meth:`~django.db.models.query.QuerySet.filter`, this will not limit blogs "
"based on entries that satisfy both conditions. In order to do that, i.e. to "
"select all blogs that do not contain entries published with *\"Lennon\"* "
"that were published in 2008, you need to make two queries::"
msgstr ""

# 53e5d401edec4bcda04cb655c3e2bf86
#: ../../../../1.8/docs/topics/db/queries.txt:615
msgid "Filters can reference fields on the model"
msgstr ""

# 9cd19c6b8d934e15bfbb52870b16c8d9
#: ../../../../1.8/docs/topics/db/queries.txt:617
msgid ""
"In the examples given so far, we have constructed filters that compare the "
"value of a model field with a constant. But what if you want to compare the "
"value of a model field with another field on the same model?"
msgstr ""

# 95af0e00380744b883ee493a13c02e6d
#: ../../../../1.8/docs/topics/db/queries.txt:621
msgid ""
"Django provides :class:`F expressions <django.db.models.F>` to allow such "
"comparisons. Instances of ``F()`` act as a reference to a model field within"
" a query. These references can then be used in query filters to compare the "
"values of two different fields on the same model instance."
msgstr ""

# 830582b098024cf39aa9769ba79df927
#: ../../../../1.8/docs/topics/db/queries.txt:626
msgid ""
"For example, to find a list of all blog entries that have had more comments "
"than pingbacks, we construct an ``F()`` object to reference the pingback "
"count, and use that ``F()`` object in the query::"
msgstr ""

# 409f570373ba4c15bf1e8cb00be7774b
#: ../../../../1.8/docs/topics/db/queries.txt:633
msgid ""
"Django supports the use of addition, subtraction, multiplication, division, "
"modulo, and power arithmetic with ``F()`` objects, both with constants and "
"with other ``F()`` objects. To find all the blog entries with more than "
"*twice* as many comments as pingbacks, we modify the query::"
msgstr ""

# 4ab4297924574a2393eaa54f2acd5884
#: ../../../../1.8/docs/topics/db/queries.txt:642
msgid "The power operator ``**`` was added."
msgstr ""

# ef775cc5d73d4ab1a7d43eca8b1e3012
#: ../../../../1.8/docs/topics/db/queries.txt:644
msgid ""
"To find all the entries where the rating of the entry is less than the sum "
"of the pingback count and comment count, we would issue the query::"
msgstr ""

# 4285035167bd459e8aaf2fafe3b746d1
#: ../../../../1.8/docs/topics/db/queries.txt:650
msgid ""
"You can also use the double underscore notation to span relationships in an "
"``F()`` object. An ``F()`` object with a double underscore will introduce "
"any joins needed to access the related object. For example, to retrieve all "
"the entries where the author's name is the same as the blog name, we could "
"issue the query::"
msgstr ""

# 02d910a330f548c485b9bf0d4dc3967b
#: ../../../../1.8/docs/topics/db/queries.txt:658
msgid ""
"For date and date/time fields, you can add or subtract a "
":class:`~datetime.timedelta` object. The following would return all entries "
"that were modified more than 3 days after they were published::"
msgstr ""

# eb26cfee2fcf4bc08f40797f55a7e16b
#: ../../../../1.8/docs/topics/db/queries.txt:665
msgid ""
"The ``F()`` objects support bitwise operations by ``.bitand()`` and "
"``.bitor()``, for example::"
msgstr ""

# a1ba27a2d9654a98b755805f4d9fe21a
#: ../../../../1.8/docs/topics/db/queries.txt:671
msgid "The pk lookup shortcut"
msgstr ""

# bf6c97991f8544db9f439c50f804c0aa
#: ../../../../1.8/docs/topics/db/queries.txt:673
msgid ""
"For convenience, Django provides a ``pk`` lookup shortcut, which stands for "
"\"primary key\"."
msgstr ""

# 94d10966b2bb4475a8acd02632b5c40a
#: ../../../../1.8/docs/topics/db/queries.txt:676
msgid ""
"In the example ``Blog`` model, the primary key is the ``id`` field, so these"
" three statements are equivalent::"
msgstr ""

# 86ebf66698b9423ebe97340cb6bc7c6f
#: ../../../../1.8/docs/topics/db/queries.txt:683
msgid ""
"The use of ``pk`` isn't limited to ``__exact`` queries -- any query term can"
" be combined with ``pk`` to perform a query on the primary key of a model::"
msgstr ""

# bc1a07f3dd0a414795f3ea5278e8085d
#: ../../../../1.8/docs/topics/db/queries.txt:692
msgid ""
"``pk`` lookups also work across joins. For example, these three statements "
"are equivalent::"
msgstr ""

# 8e11b457973a41489b73d903ce765026
#: ../../../../1.8/docs/topics/db/queries.txt:700
msgid "Escaping percent signs and underscores in LIKE statements"
msgstr ""

# 3e63d90aab67493b8a617cf7bc3217ec
#: ../../../../1.8/docs/topics/db/queries.txt:702
msgid ""
"The field lookups that equate to ``LIKE`` SQL statements (``iexact``, "
"``contains``, ``icontains``, ``startswith``, ``istartswith``, ``endswith`` "
"and ``iendswith``) will automatically escape the two special characters used"
" in ``LIKE`` statements -- the percent sign and the underscore. (In a "
"``LIKE`` statement, the percent sign signifies a multiple-character wildcard"
" and the underscore signifies a single-character wildcard.)"
msgstr ""

# 537f979cff8d4b42b2fb2bae43e37b92
#: ../../../../1.8/docs/topics/db/queries.txt:709
msgid ""
"This means things should work intuitively, so the abstraction doesn't leak. "
"For example, to retrieve all the entries that contain a percent sign, just "
"use the percent sign as any other character::"
msgstr ""

# e59cbabbfc49440ea8fde94ff0850b44
#: ../../../../1.8/docs/topics/db/queries.txt:715
msgid ""
"Django takes care of the quoting for you; the resulting SQL will look "
"something like this:"
msgstr ""

# 7699e0b4de5047ebb57a4d53e9b9119e
#: ../../../../1.8/docs/topics/db/queries.txt:722
msgid ""
"Same goes for underscores. Both percentage signs and underscores are handled"
" for you transparently."
msgstr ""

# 23dbe932f619468b8c5d23c0931a221c
#: ../../../../1.8/docs/topics/db/queries.txt:728
msgid "Caching and QuerySets"
msgstr ""

# 912577034da548da997af8d1d0d270d7
#: ../../../../1.8/docs/topics/db/queries.txt:730
msgid ""
"Each :class:`~django.db.models.query.QuerySet` contains a cache to minimize "
"database access. Understanding how it works will allow you to write the most"
" efficient code."
msgstr ""

# cf14b5430a1f49189089c9a9a3570276
#: ../../../../1.8/docs/topics/db/queries.txt:734
msgid ""
"In a newly created :class:`~django.db.models.query.QuerySet`, the cache is "
"empty. The first time a :class:`~django.db.models.query.QuerySet` is "
"evaluated -- and, hence, a database query happens -- Django saves the query "
"results in the :class:`~django.db.models.query.QuerySet`’s cache and returns"
" the results that have been explicitly requested (e.g., the next element, if"
" the :class:`~django.db.models.query.QuerySet` is being iterated over). "
"Subsequent evaluations of the :class:`~django.db.models.query.QuerySet` "
"reuse the cached results."
msgstr ""

# 8c633cd24fbc4973a854cae2a7100bef
#: ../../../../1.8/docs/topics/db/queries.txt:743
msgid ""
"Keep this caching behavior in mind, because it may bite you if you don't use"
" your :class:`~django.db.models.query.QuerySet`\\s correctly. For example, "
"the following will create two :class:`~django.db.models.query.QuerySet`\\s, "
"evaluate them, and throw them away::"
msgstr ""

# 98073ea9fa854122837cc84ecee5f1c9
#: ../../../../1.8/docs/topics/db/queries.txt:751
msgid ""
"That means the same database query will be executed twice, effectively "
"doubling your database load. Also, there's a possibility the two lists may "
"not include the same database records, because an ``Entry`` may have been "
"added or deleted in the split second between the two requests."
msgstr ""

# 480093be802f4540a6de594a2f729c8f
#: ../../../../1.8/docs/topics/db/queries.txt:756
msgid ""
"To avoid this problem, simply save the "
":class:`~django.db.models.query.QuerySet` and reuse it::"
msgstr ""

# da9fc84e163b41988abb5f3e286d5779
#: ../../../../1.8/docs/topics/db/queries.txt:764
msgid "When querysets are not cached"
msgstr ""

# 38e1295764014c598e59ba8ffd4d0f1c
#: ../../../../1.8/docs/topics/db/queries.txt:766
msgid ""
"Querysets do not always cache their results.  When evaluating only *part* of"
" the queryset, the cache is checked, but if it is not populated then the "
"items returned by the subsequent query are not cached. Specifically, this "
"means that :ref:`limiting the queryset <limiting-querysets>` using an array "
"slice or an index will not populate the cache."
msgstr ""

# 6766aa45ea8649e885de9a21e4dc098b
#: ../../../../1.8/docs/topics/db/queries.txt:772
msgid ""
"For example, repeatedly getting a certain index in a queryset object will "
"query the database each time::"
msgstr ""

# a607285bbdc049cfaee50286282788cf
#: ../../../../1.8/docs/topics/db/queries.txt:779
msgid ""
"However, if the entire queryset has already been evaluated, the cache will "
"be checked instead::"
msgstr ""

# dee931d702c844958139147336c4a312
#: ../../../../1.8/docs/topics/db/queries.txt:787
msgid ""
"Here are some examples of other actions that will result in the entire "
"queryset being evaluated and therefore populate the cache::"
msgstr ""

# 5d710c08c8924a6983d3a92aeeb7ffbe
#: ../../../../1.8/docs/topics/db/queries.txt:797
msgid ""
"Simply printing the queryset will not populate the cache. This is because "
"the call to ``__repr__()`` only returns a slice of the entire queryset."
msgstr ""

# 096de21f38ab4175899a48228c5f0ac8
#: ../../../../1.8/docs/topics/db/queries.txt:803
msgid "Complex lookups with Q objects"
msgstr ""

# 4ecadca823df4c02ac2bdba0cec09e9e
#: ../../../../1.8/docs/topics/db/queries.txt:805
msgid ""
"Keyword argument queries -- in "
":meth:`~django.db.models.query.QuerySet.filter`, etc. -- are \"AND\"ed "
"together. If you need to execute more complex queries (for example, queries "
"with ``OR`` statements), you can use :class:`Q objects "
"<django.db.models.Q>`."
msgstr ""

# a351caa084c64556b500bdb6f5a42aba
#: ../../../../1.8/docs/topics/db/queries.txt:809
msgid ""
"A :class:`Q object <django.db.models.Q>` (``django.db.models.Q``) is an "
"object used to encapsulate a collection of keyword arguments. These keyword "
"arguments are specified as in \"Field lookups\" above."
msgstr ""

# afd8e1e9222e45fc83157f63263744c5
#: ../../../../1.8/docs/topics/db/queries.txt:813
msgid "For example, this ``Q`` object encapsulates a single ``LIKE`` query::"
msgstr ""

# d243d0e5a8de45ed8b705ce90734e4fc
#: ../../../../1.8/docs/topics/db/queries.txt:818
msgid ""
"``Q`` objects can be combined using the ``&`` and ``|`` operators. When an "
"operator is used on two ``Q`` objects, it yields a new ``Q`` object."
msgstr ""

# 0d0c5f47f48c41dda8af43b0ebf1aa7a
#: ../../../../1.8/docs/topics/db/queries.txt:821
msgid ""
"For example, this statement yields a single ``Q`` object that represents the"
" \"OR\" of two ``\"question__startswith\"`` queries::"
msgstr ""

# 4cb8aeec568e479abeb78da022f84b96
#: ../../../../1.8/docs/topics/db/queries.txt:826
msgid "This is equivalent to the following SQL ``WHERE`` clause::"
msgstr ""

# 512953ca87444a2fa2251571c771af8e
#: ../../../../1.8/docs/topics/db/queries.txt:830
msgid ""
"You can compose statements of arbitrary complexity by combining ``Q`` "
"objects with the ``&`` and ``|`` operators and use parenthetical grouping. "
"Also, ``Q`` objects can be negated using the ``~`` operator, allowing for "
"combined lookups that combine both a normal query and a negated (``NOT``) "
"query::"
msgstr ""

# 00a9b0147e604d3894331b0072fd143a
#: ../../../../1.8/docs/topics/db/queries.txt:837
msgid ""
"Each lookup function that takes keyword-arguments (e.g. "
":meth:`~django.db.models.query.QuerySet.filter`, "
":meth:`~django.db.models.query.QuerySet.exclude`, "
":meth:`~django.db.models.query.QuerySet.get`) can also be passed one or more"
" ``Q`` objects as positional (not-named) arguments. If you provide multiple "
"``Q`` object arguments to a lookup function, the arguments will be \"AND\"ed"
" together. For example::"
msgstr ""

# 87c91a2fbdfa47a9b7589b895a465bdf
#: ../../../../1.8/docs/topics/db/queries.txt:850
msgid "... roughly translates into the SQL::"
msgstr ""

# 4c493f4832a74f29be6408584f615f3b
#: ../../../../1.8/docs/topics/db/queries.txt:855
msgid ""
"Lookup functions can mix the use of ``Q`` objects and keyword arguments. All"
" arguments provided to a lookup function (be they keyword arguments or ``Q``"
" objects) are \"AND\"ed together. However, if a ``Q`` object is provided, it"
" must precede the definition of any keyword arguments. For example::"
msgstr ""

# 81b26ac425174e74b3c9b02635d64660
#: ../../../../1.8/docs/topics/db/queries.txt:864
msgid "... would be a valid query, equivalent to the previous example; but::"
msgstr ""

# 4666e251bfed482b8bbc91b83db8bbd5
#: ../../../../1.8/docs/topics/db/queries.txt:871
msgid "... would not be valid."
msgstr ""

# 11923db693894cc6a74caeac6da985ea
#: ../../../../1.8/docs/topics/db/queries.txt:875
msgid ""
"The `OR lookups examples`_ in the Django unit tests show some possible uses "
"of ``Q``."
msgstr ""

# 5c6fa8245bfb49c1b98859236fd346f9
#: ../../../../1.8/docs/topics/db/queries.txt:881
msgid "Comparing objects"
msgstr ""

# e53afea2f1674801bbbe3c412e29a594
#: ../../../../1.8/docs/topics/db/queries.txt:883
msgid ""
"To compare two model instances, just use the standard Python comparison "
"operator, the double equals sign: ``==``. Behind the scenes, that compares "
"the primary key values of two models."
msgstr ""

# 1ec0c9313b924e7e8880447642b3692c
#: ../../../../1.8/docs/topics/db/queries.txt:887
msgid ""
"Using the ``Entry`` example above, the following two statements are "
"equivalent::"
msgstr ""

# 78df2c4460bf4bb1bead37383121a10a
#: ../../../../1.8/docs/topics/db/queries.txt:892
msgid ""
"If a model's primary key isn't called ``id``, no problem. Comparisons will "
"always use the primary key, whatever it's called. For example, if a model's "
"primary key field is called ``name``, these two statements are equivalent::"
msgstr ""

# 4c7adf7b30c046bfaebd1835f1dca408
#: ../../../../1.8/docs/topics/db/queries.txt:902
msgid "Deleting objects"
msgstr ""

# 5cd0e2c96267487595d298aed26affec
#: ../../../../1.8/docs/topics/db/queries.txt:904
msgid ""
"The delete method, conveniently, is named "
":meth:`~django.db.models.Model.delete`. This method immediately deletes the "
"object and has no return value. Example::"
msgstr ""

# f0cd3882cf064ae6bb260b3e14de069d
#: ../../../../1.8/docs/topics/db/queries.txt:910
msgid ""
"You can also delete objects in bulk. Every "
":class:`~django.db.models.query.QuerySet` has a "
":meth:`~django.db.models.query.QuerySet.delete` method, which deletes all "
"members of that :class:`~django.db.models.query.QuerySet`."
msgstr ""

# d34cd0899b1f4c1899e173d4940f9c56
#: ../../../../1.8/docs/topics/db/queries.txt:915
msgid ""
"For example, this deletes all ``Entry`` objects with a ``pub_date`` year of "
"2005::"
msgstr ""

# 30130ca17f254240a20387ccabf87541
#: ../../../../1.8/docs/topics/db/queries.txt:920
msgid ""
"Keep in mind that this will, whenever possible, be executed purely in SQL, "
"and so the ``delete()`` methods of individual object instances will not "
"necessarily be called during the process. If you've provided a custom "
"``delete()`` method on a model class and want to ensure that it is called, "
"you will need to \"manually\" delete instances of that model (e.g., by "
"iterating over a :class:`~django.db.models.query.QuerySet` and calling "
"``delete()`` on each object individually) rather than using the bulk "
":meth:`~django.db.models.query.QuerySet.delete` method of a "
":class:`~django.db.models.query.QuerySet`."
msgstr ""

# 668bdd39bb27476ca9bc368a2069d6d9
#: ../../../../1.8/docs/topics/db/queries.txt:930
msgid ""
"When Django deletes an object, by default it emulates the behavior of the "
"SQL constraint ``ON DELETE CASCADE`` -- in other words, any objects which "
"had foreign keys pointing at the object to be deleted will be deleted along "
"with it. For example::"
msgstr ""

# f5a432e33308489ca86ce6817a47d34b
#: ../../../../1.8/docs/topics/db/queries.txt:939
msgid ""
"This cascade behavior is customizable via the "
":attr:`~django.db.models.ForeignKey.on_delete` argument to the "
":class:`~django.db.models.ForeignKey`."
msgstr ""

# d985cd79e1ce4f4691b55adb574024fc
#: ../../../../1.8/docs/topics/db/queries.txt:943
msgid ""
"Note that :meth:`~django.db.models.query.QuerySet.delete` is the only "
":class:`~django.db.models.query.QuerySet` method that is not exposed on a "
":class:`~django.db.models.Manager` itself. This is a safety mechanism to "
"prevent you from accidentally requesting ``Entry.objects.delete()``, and "
"deleting *all* the entries. If you *do* want to delete all the objects, then"
" you have to explicitly request a complete query set::"
msgstr ""

# 6d5039b02b824b7cb420336bf03759bb
#: ../../../../1.8/docs/topics/db/queries.txt:955
msgid "Copying model instances"
msgstr ""

# 45fafaf98c2f48d3be9783f3e1e4c1be
#: ../../../../1.8/docs/topics/db/queries.txt:957
msgid ""
"Although there is no built-in method for copying model instances, it is "
"possible to easily create new instance with all fields' values copied. In "
"the simplest case, you can just set ``pk`` to ``None``. Using our blog "
"example::"
msgstr ""

# d0f94f9663b24b9a8dd22eda235e95d1
#: ../../../../1.8/docs/topics/db/queries.txt:967
msgid ""
"Things get more complicated if you use inheritance. Consider a subclass of "
"``Blog``::"
msgstr ""

# 8f89af2045604514b0ba84f9e7f5b55c
#: ../../../../1.8/docs/topics/db/queries.txt:976
msgid ""
"Due to how inheritance works, you have to set both ``pk`` and ``id`` to "
"None::"
msgstr ""

# 6d28c3949a2741b2bd57630f6fb4dc71
#: ../../../../1.8/docs/topics/db/queries.txt:982
msgid ""
"This process does not copy related objects. If you want to copy relations, "
"you have to write a little bit more code. In our example, ``Entry`` has a "
"many to many field to ``Author``::"
msgstr ""

# 3a0632bb90f34979b409d1696feb8472
#: ../../../../1.8/docs/topics/db/queries.txt:995
msgid "Updating multiple objects at once"
msgstr ""

# 44d88e0ff4074137a7f107bbe7491eed
#: ../../../../1.8/docs/topics/db/queries.txt:997
msgid ""
"Sometimes you want to set a field to a particular value for all the objects "
"in a :class:`~django.db.models.query.QuerySet`. You can do this with the "
":meth:`~django.db.models.query.QuerySet.update` method. For example::"
msgstr ""

# 25f2a1800bac45028a9be38712f62011
#: ../../../../1.8/docs/topics/db/queries.txt:1004
msgid ""
"You can only set non-relation fields and "
":class:`~django.db.models.ForeignKey` fields using this method. To update a "
"non-relation field, provide the new value as a constant. To update "
":class:`~django.db.models.ForeignKey` fields, set the new value to be the "
"new model instance you want to point to. For example::"
msgstr ""

# f708704791e54fb18ec4e706035aba95
#: ../../../../1.8/docs/topics/db/queries.txt:1014
msgid ""
"The ``update()`` method is applied instantly and returns the number of rows "
"matched by the query (which may not be equal to the number of rows updated "
"if some rows already have the new value). The only restriction on the "
":class:`~django.db.models.query.QuerySet` being updated is that it can only "
"access one database table: the model's main table. You can filter based on "
"related fields, but you can only update columns in the model's main table. "
"Example::"
msgstr ""

# 406671d2b30e4528ac22842cc89adfde
#: ../../../../1.8/docs/topics/db/queries.txt:1027
msgid ""
"Be aware that the ``update()`` method is converted directly to an SQL "
"statement. It is a bulk operation for direct updates. It doesn't run any "
":meth:`~django.db.models.Model.save` methods on your models, or emit the "
"``pre_save`` or ``post_save`` signals (which are a consequence of calling "
":meth:`~django.db.models.Model.save`), or honor the "
":attr:`~django.db.models.DateField.auto_now` field option. If you want to "
"save every item in a :class:`~django.db.models.query.QuerySet` and make sure"
" that the :meth:`~django.db.models.Model.save` method is called on each "
"instance, you don't need any special function to handle that. Just loop over"
" them and call :meth:`~django.db.models.Model.save`::"
msgstr ""

# 52fb73c519544953b3effcf8a28cb7f5
#: ../../../../1.8/docs/topics/db/queries.txt:1041
msgid ""
"Calls to update can also use :class:`F expressions <django.db.models.F>` to "
"update one field based on the value of another field in the model. This is "
"especially useful for incrementing counters based upon their current value. "
"For example, to increment the pingback count for every entry in the blog::"
msgstr ""

# e6d51adeb2e14156a89ab7188cac0b7e
#: ../../../../1.8/docs/topics/db/queries.txt:1048
msgid ""
"However, unlike ``F()`` objects in filter and exclude clauses, you can't "
"introduce joins when you use ``F()`` objects in an update -- you can only "
"reference fields local to the model being updated. If you attempt to "
"introduce a join with an ``F()`` object, a ``FieldError`` will be raised::"
msgstr ""

# 56c92e72ef9f43578c5405cf2933b839
#: ../../../../1.8/docs/topics/db/queries.txt:1059
msgid "Related objects"
msgstr ""

# 37d88d72aaec4d0e8934f5be80121807
#: ../../../../1.8/docs/topics/db/queries.txt:1061
msgid ""
"When you define a relationship in a model (i.e., a "
":class:`~django.db.models.ForeignKey`, "
":class:`~django.db.models.OneToOneField`, or "
":class:`~django.db.models.ManyToManyField`), instances of that model will "
"have a convenient API to access the related object(s)."
msgstr ""

# 9fa9ad541274423da18e8bf42dd3764e
#: ../../../../1.8/docs/topics/db/queries.txt:1067
msgid ""
"Using the models at the top of this page, for example, an ``Entry`` object "
"``e`` can get its associated ``Blog`` object by accessing the ``blog`` "
"attribute: ``e.blog``."
msgstr ""

# 80cc8a832b64491ab5ccd3eb48406911
#: ../../../../1.8/docs/topics/db/queries.txt:1071
msgid ""
"(Behind the scenes, this functionality is implemented by Python "
"descriptors_. This shouldn't really matter to you, but we point it out here "
"for the curious.)"
msgstr ""

# 9e56820eb84f4223addbaa06e6dc6679
#: ../../../../1.8/docs/topics/db/queries.txt:1074
msgid ""
"Django also creates API accessors for the \"other\" side of the relationship"
" -- the link from the related model to the model that defines the "
"relationship. For example, a ``Blog`` object ``b`` has access to a list of "
"all related ``Entry`` objects via the ``entry_set`` attribute: "
"``b.entry_set.all()``."
msgstr ""

# 44795487b6174ee0b6fa48568704e0aa
#: ../../../../1.8/docs/topics/db/queries.txt:1079
msgid ""
"All examples in this section use the sample ``Blog``, ``Author`` and "
"``Entry`` models defined at the top of this page."
msgstr ""

# 88eb276c5f424f36ba04ba27a4405368
#: ../../../../1.8/docs/topics/db/queries.txt:1085
msgid "One-to-many relationships"
msgstr ""

# 1cb865e611154863b47f236c7ee13925
#: ../../../../1.8/docs/topics/db/queries.txt:1088
msgid "Forward"
msgstr ""

# 156210c64e39427e8887503a57d5e804
#: ../../../../1.8/docs/topics/db/queries.txt:1090
msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of that "
"model will have access to the related (foreign) object via a simple "
"attribute of the model."
msgstr ""

# 8cfcdbdf798b47b18f11213392298404
#: ../../../../1.8/docs/topics/db/queries.txt:1099
msgid ""
"You can get and set via a foreign-key attribute. As you may expect, changes "
"to the foreign key aren't saved to the database until you call "
":meth:`~django.db.models.Model.save`. Example::"
msgstr ""

# dd236c2215204e72bbfc3c12876c3116
#: ../../../../1.8/docs/topics/db/queries.txt:1107
msgid ""
"If a :class:`~django.db.models.ForeignKey` field has ``null=True`` set "
"(i.e., it allows ``NULL`` values), you can assign ``None`` to remove the "
"relation. Example::"
msgstr ""

# 02cfb9d70a9641f5b7ef2954848a0ed5
#: ../../../../1.8/docs/topics/db/queries.txt:1115
msgid ""
"Forward access to one-to-many relationships is cached the first time the "
"related object is accessed. Subsequent accesses to the foreign key on the "
"same object instance are cached. Example::"
msgstr ""

# 777df9c02cff43099e663685f5acda57
#: ../../../../1.8/docs/topics/db/queries.txt:1123
msgid ""
"Note that the :meth:`~django.db.models.query.QuerySet.select_related` "
":class:`~django.db.models.query.QuerySet` method recursively prepopulates "
"the cache of all one-to-many relationships ahead of time. Example::"
msgstr ""

# ae383d822e4546c29471cae963978eb6
#: ../../../../1.8/docs/topics/db/queries.txt:1134
msgid "Following relationships \"backward\""
msgstr ""

# 9b163e6dde644ee3a70da50cfe7709ba
#: ../../../../1.8/docs/topics/db/queries.txt:1136
msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of the "
"foreign-key model will have access to a :class:`~django.db.models.Manager` "
"that returns all instances of the first model. By default, this "
":class:`~django.db.models.Manager` is named ``FOO_set``, where ``FOO`` is "
"the source model name, lowercased. This :class:`~django.db.models.Manager` "
"returns ``QuerySets``, which can be filtered and manipulated as described in"
" the \"Retrieving objects\" section above."
msgstr ""

# 93c069d4cafd41c5a9c60eabf423e8a7
#: ../../../../1.8/docs/topics/db/queries.txt:1153
msgid ""
"You can override the ``FOO_set`` name by setting the "
":attr:`~django.db.models.ForeignKey.related_name` parameter in the "
":class:`~django.db.models.ForeignKey` definition. For example, if the "
"``Entry`` model was altered to ``blog = ForeignKey(Blog, "
"related_name='entries')``, the above example code would look like this::"
msgstr ""

# 1ad61daa5a36498da253c46de89cd1f1
#: ../../../../1.8/docs/topics/db/queries.txt:1169
msgid "Using a custom reverse manager"
msgstr ""

# 55c215206ef14e8eb73ae0816da8f637
#: ../../../../1.8/docs/topics/db/queries.txt:1173
msgid ""
"By default the :class:`~django.db.models.fields.related.RelatedManager` used"
" for reverse relations is a subclass of the :ref:`default manager <manager-"
"names>` for that model. If you would like to specify a different manager for"
" a given query you can use the following syntax::"
msgstr ""

# 1aedd52800b34e5a9379900d487b0186
#: ../../../../1.8/docs/topics/db/queries.txt:1188
msgid ""
"If ``EntryManager`` performed default filtering in its ``get_queryset()`` "
"method, that filtering would apply to the ``all()`` call."
msgstr ""

# ed0da39297f84bafa5737fe01bf7f8fa
#: ../../../../1.8/docs/topics/db/queries.txt:1191
msgid ""
"Of course, specifying a custom reverse manager also enables you to call its "
"custom methods::"
msgstr ""

# fa3741b58b844c0db48d962690a9ccf3
#: ../../../../1.8/docs/topics/db/queries.txt:1197
msgid "Additional methods to handle related objects"
msgstr ""

# 5f08863a77da46c88f69a5f469a86b9e
#: ../../../../1.8/docs/topics/db/queries.txt:1199
msgid ""
"In addition to the :class:`~django.db.models.query.QuerySet` methods defined"
" in \"Retrieving objects\" above, the :class:`~django.db.models.ForeignKey` "
":class:`~django.db.models.Manager` has additional methods used to handle the"
" set of related objects. A synopsis of each is below, and complete details "
"can be found in the :doc:`related objects reference "
"</ref/models/relations>`."
msgstr ""

# 4dce33ed40964831a4f76bcdd88fa281
#: ../../../../1.8/docs/topics/db/queries.txt:1206
msgid "``add(obj1, obj2, ...)``"
msgstr ""

# 63291e2509d5401289757e6e8d1f485f
#: ../../../../1.8/docs/topics/db/queries.txt:1206
msgid "Adds the specified model objects to the related object set."
msgstr ""

# d30e9f8babef415f86bae74c85293f1e
#: ../../../../1.8/docs/topics/db/queries.txt:1210
msgid "``create(**kwargs)``"
msgstr ""

# 4a1c62b7502e40b29a2ec70f7653434d
#: ../../../../1.8/docs/topics/db/queries.txt:1209
msgid ""
"Creates a new object, saves it and puts it in the related object set. "
"Returns the newly created object."
msgstr ""

# c932893841e94b9489aea8716dc43588
#: ../../../../1.8/docs/topics/db/queries.txt:1213
msgid "``remove(obj1, obj2, ...)``"
msgstr ""

# 642e31a560e9452883811a3633cd8e04
#: ../../../../1.8/docs/topics/db/queries.txt:1213
msgid "Removes the specified model objects from the related object set."
msgstr ""

# a0d533c8ffb446bba1af4765b920c11d
#: ../../../../1.8/docs/topics/db/queries.txt:1216
msgid "``clear()``"
msgstr ""

# 26012ecee2284f2991731fbf8af68a7c
#: ../../../../1.8/docs/topics/db/queries.txt:1216
msgid "Removes all objects from the related object set."
msgstr ""

# 08ad6635fa524027ad38645bf21bdea4
#: ../../../../1.8/docs/topics/db/queries.txt:1218
msgid ""
"To assign the members of a related set in one fell swoop, just assign to it "
"from any iterable object. The iterable can contain object instances, or just"
" a list of primary key values. For example::"
msgstr ""

# 0b5e71548370411390aaae578015d644
#: ../../../../1.8/docs/topics/db/queries.txt:1225
msgid ""
"In this example, ``e1`` and ``e2`` can be full Entry instances, or integer "
"primary key values."
msgstr ""

# fe2a539cd049455c93a0dd73bf00a2a3
#: ../../../../1.8/docs/topics/db/queries.txt:1228
msgid ""
"If the ``clear()`` method is available, any pre-existing objects will be "
"removed from the ``entry_set`` before all objects in the iterable (in this "
"case, a list) are added to the set. If the ``clear()`` method is *not* "
"available, all objects in the iterable will be added without removing any "
"existing elements."
msgstr ""

# 110dc2c3b96d4c42b12520bfc52e65ba
#: ../../../../1.8/docs/topics/db/queries.txt:1234
msgid ""
"Each \"reverse\" operation described in this section has an immediate effect"
" on the database. Every addition, creation and deletion is immediately and "
"automatically saved to the database."
msgstr ""

# bbedaec751054a8288188a0f66578be4
#: ../../../../1.8/docs/topics/db/queries.txt:1243
msgid ""
"Both ends of a many-to-many relationship get automatic API access to the "
"other end. The API works just as a \"backward\" one-to-many relationship, "
"above."
msgstr ""

# 8800909d03f64ce687c929b521d1d832
#: ../../../../1.8/docs/topics/db/queries.txt:1246
msgid ""
"The only difference is in the attribute naming: The model that defines the "
":class:`~django.db.models.ManyToManyField` uses the attribute name of that "
"field itself, whereas the \"reverse\" model uses the lowercased model name "
"of the original model, plus ``'_set'`` (just like reverse one-to-many "
"relationships)."
msgstr ""

# 55d8185ec7c34cf6b130f631c606ecc3
#: ../../../../1.8/docs/topics/db/queries.txt:1251
msgid "An example makes this easier to understand::"
msgstr ""

# e8698399d571464da91e5b0990fafcf1
#: ../../../../1.8/docs/topics/db/queries.txt:1261
msgid ""
"Like :class:`~django.db.models.ForeignKey`, "
":class:`~django.db.models.ManyToManyField` can specify "
":attr:`~django.db.models.ManyToManyField.related_name`. In the above "
"example, if the :class:`~django.db.models.ManyToManyField` in ``Entry`` had "
"specified ``related_name='entries'``, then each ``Author`` instance would "
"have an ``entries`` attribute instead of ``entry_set``."
msgstr ""

# a07d9390837f462a8f6ac1da76ddf0d5
#: ../../../../1.8/docs/topics/db/queries.txt:1271
msgid ""
"One-to-one relationships are very similar to many-to-one relationships. If "
"you define a :class:`~django.db.models.OneToOneField` on your model, "
"instances of that model will have access to the related object via a simple "
"attribute of the model."
msgstr ""

# 294c234717524aa59810f72c87c4c352
#: ../../../../1.8/docs/topics/db/queries.txt:1285
msgid ""
"The difference comes in \"reverse\" queries. The related model in a one-to-"
"one relationship also has access to a :class:`~django.db.models.Manager` "
"object, but that :class:`~django.db.models.Manager` represents a single "
"object, rather than a collection of objects::"
msgstr ""

# 4df7b9e5e4dd45d5a24efbfcb9643ae5
#: ../../../../1.8/docs/topics/db/queries.txt:1293
msgid ""
"If no object has been assigned to this relationship, Django will raise a "
"``DoesNotExist`` exception."
msgstr ""

# 5eec1259d0a04b2babdc5bf8a14054ca
#: ../../../../1.8/docs/topics/db/queries.txt:1296
msgid ""
"Instances can be assigned to the reverse relationship in the same way as you"
" would assign the forward relationship::"
msgstr ""

# 0c747790b85a497cb3d8e88bfd7312c7
#: ../../../../1.8/docs/topics/db/queries.txt:1302
msgid "How are the backward relationships possible?"
msgstr ""

# 7a72787776034b9d99de25299c94a0db
#: ../../../../1.8/docs/topics/db/queries.txt:1304
msgid ""
"Other object-relational mappers require you to define relationships on both "
"sides. The Django developers believe this is a violation of the DRY (Don't "
"Repeat Yourself) principle, so Django only requires you to define the "
"relationship on one end."
msgstr ""

# 7e9b6951abd84e0a84b0371117e6e296
#: ../../../../1.8/docs/topics/db/queries.txt:1309
msgid ""
"But how is this possible, given that a model class doesn't know which other "
"model classes are related to it until those other model classes are loaded?"
msgstr ""

# feff0203ea09410fa4ffd956b5941ac8
#: ../../../../1.8/docs/topics/db/queries.txt:1312
msgid ""
"The answer lies in the :data:`app registry <django.apps.apps>`. When Django "
"starts, it imports each application listed in :setting:`INSTALLED_APPS`, and"
" then the ``models`` module inside each application. Whenever a new model "
"class is created, Django adds backward-relationships to any related models. "
"If the related models haven't been imported yet, Django keeps tracks of the "
"relationships and adds them when the related models eventually are imported."
msgstr ""

# b04a04dca36e4e86aca9df8b30b3865a
#: ../../../../1.8/docs/topics/db/queries.txt:1319
msgid ""
"For this reason, it's particularly important that all the models you're "
"using be defined in applications listed in :setting:`INSTALLED_APPS`. "
"Otherwise, backwards relations may not work properly."
msgstr ""

# e47c612695c74065a5a6f42ab79766d4
#: ../../../../1.8/docs/topics/db/queries.txt:1324
msgid "Queries over related objects"
msgstr ""

# 112e304064314db9aae80de8dfe9aef3
#: ../../../../1.8/docs/topics/db/queries.txt:1326
msgid ""
"Queries involving related objects follow the same rules as queries involving"
" normal value fields. When specifying the value for a query to match, you "
"may use either an object instance itself, or the primary key value for the "
"object."
msgstr ""

# 4807012b892e418ea352ba02e80b7397
#: ../../../../1.8/docs/topics/db/queries.txt:1330
msgid ""
"For example, if you have a Blog object ``b`` with ``id=5``, the following "
"three queries would be identical::"
msgstr ""

# d1fb0046152742f09e1b4aaaf29e7bad
#: ../../../../1.8/docs/topics/db/queries.txt:1338
msgid "Falling back to raw SQL"
msgstr ""

# a178065ff9394e10a0d6ef6a120b0dfb
#: ../../../../1.8/docs/topics/db/queries.txt:1340
msgid ""
"If you find yourself needing to write an SQL query that is too complex for "
"Django's database-mapper to handle, you can fall back on writing SQL by "
"hand. Django has a couple of options for writing raw SQL queries; see "
":doc:`/topics/db/sql`."
msgstr ""

# 833ee4444d9d4474b8cee2987b702821
#: ../../../../1.8/docs/topics/db/queries.txt:1345
msgid ""
"Finally, it's important to note that the Django database layer is merely an "
"interface to your database. You can access your database via other tools, "
"programming languages or database frameworks; there's nothing Django-"
"specific about your database."
msgstr ""

# 691e835a4c334d308bbca33019ce95e6
#: ../../../../1.8/docs/topics/db/sql.txt:3
msgid "Performing raw SQL queries"
msgstr ""

# a7c36d5cf849424384b55b4a8ad1bbde
#: ../../../../1.8/docs/topics/db/sql.txt:7
msgid ""
"When the :doc:`model query APIs </topics/db/queries>` don't go far enough, "
"you can fall back to writing raw SQL. Django gives you two ways of "
"performing raw SQL queries: you can use :meth:`Manager.raw()` to `perform "
"raw queries and return model instances`__, or you can avoid the model layer "
"entirely and `execute custom SQL directly`__."
msgstr ""

# aeb748af14cf473389d42316fe80723e
#: ../../../../1.8/docs/topics/db/sql.txt:18
msgid ""
"You should be very careful whenever you write raw SQL. Every time you use "
"it, you should properly escape any parameters that the user can control by "
"using ``params`` in order to protect against SQL injection attacks. Please "
"read more about :ref:`SQL injection protection <sql-injection-protection>`."
msgstr ""

# 2c0569c265f54e0b83b5dc0578cb14d7
#: ../../../../1.8/docs/topics/db/sql.txt:27
msgid "Performing raw queries"
msgstr ""

# 718b586529014aeb8ebc14dcdeb11154
#: ../../../../1.8/docs/topics/db/sql.txt:29
msgid ""
"The ``raw()`` manager method can be used to perform raw SQL queries that "
"return model instances:"
msgstr ""

# 1701b53901814e11980680621458d25b
#: ../../../../1.8/docs/topics/db/sql.txt:34
msgid ""
"This method takes a raw SQL query, executes it, and returns a "
"``django.db.models.query.RawQuerySet`` instance. This ``RawQuerySet`` "
"instance can be iterated over just like a normal "
":class:`~django.db.models.query.QuerySet` to provide object instances."
msgstr ""

# 7a1a9825b41a4ee295ed2eb67136fd49
#: ../../../../1.8/docs/topics/db/sql.txt:39
msgid ""
"This is best illustrated with an example. Suppose you have the following "
"model::"
msgstr ""

# 0d4974146c9240daa1e0c4c8d2892551
#: ../../../../1.8/docs/topics/db/sql.txt:46
msgid "You could then execute custom SQL like so::"
msgstr ""

# 47dafe5eb14648229c5d4307cddd0f19
#: ../../../../1.8/docs/topics/db/sql.txt:53
msgid ""
"Of course, this example isn't very exciting -- it's exactly the same as "
"running ``Person.objects.all()``. However, ``raw()`` has a bunch of other "
"options that make it very powerful."
msgstr ""

# 7c1e29c3cc404beb920e99632482fa13
#: ../../../../1.8/docs/topics/db/sql.txt:57
msgid "Model table names"
msgstr ""

# 1ce6d4ecc5d4457fb3846e62dda3a062
#: ../../../../1.8/docs/topics/db/sql.txt:59
msgid "Where did the name of the ``Person`` table come from in that example?"
msgstr ""

# bc24525ee7d3401bac5a32a151476a85
#: ../../../../1.8/docs/topics/db/sql.txt:61
msgid ""
"By default, Django figures out a database table name by joining the model's "
"\"app label\" -- the name you used in ``manage.py startapp`` -- to the "
"model's class name, with an underscore between them. In the example we've "
"assumed that the ``Person`` model lives in an app named ``myapp``, so its "
"table would be ``myapp_person``."
msgstr ""

# 4db9ace1aa5043bd9ffe1b22794c3827
#: ../../../../1.8/docs/topics/db/sql.txt:67
msgid ""
"For more details check out the documentation for the "
":attr:`~Options.db_table` option, which also lets you manually set the "
"database table name."
msgstr ""

# 7a65a8b22ab14273b19ea4ca088f6e48
#: ../../../../1.8/docs/topics/db/sql.txt:73
msgid ""
"No checking is done on the SQL statement that is passed in to ``.raw()``. "
"Django expects that the statement will return a set of rows from the "
"database, but does nothing to enforce that. If the query does not return "
"rows, a (possibly cryptic) error will result."
msgstr ""

# fd12edd67b8645d180233f8c00b090f8
#: ../../../../1.8/docs/topics/db/sql.txt:80
msgid ""
"If you are performing queries on MySQL, note that MySQL's silent type "
"coercion may cause unexpected results when mixing types. If you query on a "
"string type column, but with an integer value, MySQL will coerce the types "
"of all values in the table to an integer before performing the comparison. "
"For example, if your table contains the values ``'abc'``, ``'def'`` and you "
"query for ``WHERE mycolumn=0``, both rows will match. To prevent this, "
"perform the correct typecasting before using the value in a query."
msgstr ""

# fcd436d809714dc983a9575473f38dad
#: ../../../../1.8/docs/topics/db/sql.txt:90
msgid ""
"While a ``RawQuerySet`` instance can be iterated over like a normal "
":class:`~django.db.models.query.QuerySet`, ``RawQuerySet`` doesn't implement"
" all methods you can use with ``QuerySet``. For example, ``__bool__()`` and "
"``__len__()`` are not defined in ``RawQuerySet``, and thus all "
"``RawQuerySet`` instances are considered ``True``. The reason these methods "
"are not implemented in ``RawQuerySet`` is that implementing them without "
"internal caching would be a performance drawback and adding such caching "
"would be backward incompatible."
msgstr ""

# 68505ca3594446d0abd12bade90b4b61
#: ../../../../1.8/docs/topics/db/sql.txt:100
msgid "Mapping query fields to model fields"
msgstr ""

# c251755484cc4055b6ac6510c2255ef9
#: ../../../../1.8/docs/topics/db/sql.txt:102
msgid ""
"``raw()`` automatically maps fields in the query to fields on the model."
msgstr ""

# 581621cd8b4c449eac351045221289f5
#: ../../../../1.8/docs/topics/db/sql.txt:104
msgid ""
"The order of fields in your query doesn't matter. In other words, both of "
"the following queries work identically::"
msgstr ""

# d8dc6c1fce4e47ee801d5c649d6e53ee
#: ../../../../1.8/docs/topics/db/sql.txt:112
msgid ""
"Matching is done by name. This means that you can use SQL's ``AS`` clauses "
"to map fields in the query to model fields. So if you had some other table "
"that had ``Person`` data in it, you could easily map it into ``Person`` "
"instances::"
msgstr ""

# a59d59d33672442192cbccd9ef52547f
#: ../../../../1.8/docs/topics/db/sql.txt:122
msgid ""
"As long as the names match, the model instances will be created correctly."
msgstr ""

# 8b2cf828501d4fe8b525a3192d653e10
#: ../../../../1.8/docs/topics/db/sql.txt:124
msgid ""
"Alternatively, you can map fields in the query to model fields using the "
"``translations`` argument to ``raw()``. This is a dictionary mapping names "
"of fields in the query to names of fields on the model. For example, the "
"above query could also be written::"
msgstr ""

# 637f17f3bffa4ce6af6eeb7c63b4fd6b
#: ../../../../1.8/docs/topics/db/sql.txt:133
msgid "Index lookups"
msgstr ""

# 2efbf0e92e874c2c9c69e08eddc5b31e
#: ../../../../1.8/docs/topics/db/sql.txt:135
msgid ""
"``raw()`` supports indexing, so if you need only the first result you can "
"write::"
msgstr ""

# 64a5f060088e40d6941adc689127685e
#: ../../../../1.8/docs/topics/db/sql.txt:140
msgid ""
"However, the indexing and slicing are not performed at the database level. "
"If you have a large number of ``Person`` objects in your database, it is "
"more efficient to limit the query at the SQL level::"
msgstr ""

# 77a5f398c66f452fadd342ed29e8e8ab
#: ../../../../1.8/docs/topics/db/sql.txt:147
msgid "Deferring model fields"
msgstr ""

# 5df2d243257c4199a0f09cf037c18a36
#: ../../../../1.8/docs/topics/db/sql.txt:149
msgid "Fields may also be left out::"
msgstr ""

# 237ce487cef8491ea8bbf56734c5f141
#: ../../../../1.8/docs/topics/db/sql.txt:153
msgid ""
"The ``Person`` objects returned by this query will be deferred model "
"instances (see :meth:`~django.db.models.query.QuerySet.defer()`). This means"
" that the fields that are omitted from the query will be loaded on demand. "
"For example::"
msgstr ""

# 118069befb8d45cb9184b78a1f0d0d7f
#: ../../../../1.8/docs/topics/db/sql.txt:164
msgid ""
"From outward appearances, this looks like the query has retrieved both the "
"first name and last name. However, this example actually issued 3 queries. "
"Only the first names were retrieved by the raw() query -- the last names "
"were both retrieved on demand when they were printed."
msgstr ""

# eb5e942f7a094bf18f96749f7dbafba5
#: ../../../../1.8/docs/topics/db/sql.txt:169
msgid ""
"There is only one field that you can't leave out - the primary key field. "
"Django uses the primary key to identify model instances, so it must always "
"be included in a raw query. An ``InvalidQuery`` exception will be raised if "
"you forget to include the primary key."
msgstr ""

# 3e66b09eacd541caa8b8ba57f5d25e01
#: ../../../../1.8/docs/topics/db/sql.txt:175
msgid "Adding annotations"
msgstr ""

# ab576a43d26d4fdb9087d2cff09f4bb4
#: ../../../../1.8/docs/topics/db/sql.txt:177
msgid ""
"You can also execute queries containing fields that aren't defined on the "
"model. For example, we could use `PostgreSQL's age() function`__ to get a "
"list of people with their ages calculated by the database::"
msgstr ""

# 03bd350cbfa2445fb0babc49c355ca98
#: ../../../../1.8/docs/topics/db/sql.txt:191
msgid "Passing parameters into ``raw()``"
msgstr ""

# 7b9ec67bb551421b94cb4fa41214a5aa
#: ../../../../1.8/docs/topics/db/sql.txt:193
msgid ""
"If you need to perform parameterized queries, you can use the ``params`` "
"argument to ``raw()``::"
msgstr ""

# 64123104a6d74688ac2230cdda5065f5
#: ../../../../1.8/docs/topics/db/sql.txt:199
msgid ""
"``params`` is a list or dictionary of parameters. You'll use ``%s`` "
"placeholders in the query string for a list, or ``%(key)s`` placeholders for"
" a dictionary (where ``key`` is replaced by a dictionary key, of course), "
"regardless of your database engine.  Such placeholders will be replaced with"
" parameters from the ``params`` argument."
msgstr ""

# 9a8b1abbed1f4b58853f10cf216e1ab1
#: ../../../../1.8/docs/topics/db/sql.txt:208
msgid ""
"Dictionary params are not supported with the SQLite backend; with this "
"backend, you must pass parameters as a list."
msgstr ""

# dd8fae51083d42399ab40047af587948
#: ../../../../1.8/docs/topics/db/sql.txt:213
msgid "**Do not use string formatting on raw queries!**"
msgstr ""

# 293efbb989034764b450f42eec5f1e83
#: ../../../../1.8/docs/topics/db/sql.txt:215
msgid "It's tempting to write the above query as::"
msgstr ""

# 618dcb3fefc047a49d1f35734b5e0d83
#: ../../../../1.8/docs/topics/db/sql.txt:220
msgid "**Don't.**"
msgstr ""

# 903320385f554809857e35633c8d75d0
#: ../../../../1.8/docs/topics/db/sql.txt:222
msgid ""
"Using the ``params`` argument completely protects you from `SQL injection "
"attacks`__, a common exploit where attackers inject arbitrary SQL into your "
"database. If you use string interpolation, sooner or later you'll fall "
"victim to SQL injection. As long as you remember to always use the "
"``params`` argument you'll be protected."
msgstr ""

# d28e2f1b0d814b6d9c5c6b8af388252f
#: ../../../../1.8/docs/topics/db/sql.txt:233
msgid "Executing custom SQL directly"
msgstr ""

# 69a321735e3e4ee8a44aae4027905f08
#: ../../../../1.8/docs/topics/db/sql.txt:235
msgid ""
"Sometimes even :meth:`Manager.raw` isn't quite enough: you might need to "
"perform queries that don't map cleanly to models, or directly execute "
"``UPDATE``, ``INSERT``, or ``DELETE`` queries."
msgstr ""

# 5fdef61fd9724bdd8f4a5c2fd49ebb98
#: ../../../../1.8/docs/topics/db/sql.txt:239
msgid ""
"In these cases, you can always access the database directly, routing around "
"the model layer entirely."
msgstr ""

# 27695daf5dfa42a0a41d7df4fc78875e
#: ../../../../1.8/docs/topics/db/sql.txt:242
msgid ""
"The object ``django.db.connection`` represents the default database "
"connection. To use the database connection, call ``connection.cursor()`` to "
"get a cursor object. Then, call ``cursor.execute(sql, [params])`` to execute"
" the SQL and ``cursor.fetchone()`` or ``cursor.fetchall()`` to return the "
"resulting rows."
msgstr ""

# 14350609db004fb3b96e9a29a37e502d
#: ../../../../1.8/docs/topics/db/sql.txt:262
msgid ""
"Note that if you want to include literal percent signs in the query, you "
"have to double them in the case you are passing parameters::"
msgstr ""

# 016cd49065ac41d394a50a31ca4f7de2
#: ../../../../1.8/docs/topics/db/sql.txt:268
msgid ""
"If you are using :doc:`more than one database </topics/db/multi-db>`, you "
"can use ``django.db.connections`` to obtain the connection (and cursor) for "
"a specific database. ``django.db.connections`` is a dictionary-like object "
"that allows you to retrieve a specific connection using its alias::"
msgstr ""

# 065596ebbde1461bbb532e6a2006b4a3
#: ../../../../1.8/docs/topics/db/sql.txt:278
msgid ""
"By default, the Python DB API will return results without their field names,"
" which means you end up with a ``list`` of values, rather than a ``dict``. "
"At a small performance cost, you can return results as a ``dict`` by using "
"something like this::"
msgstr ""

# 7df81d2a17894c0288adf114bd7e27a0
#: ../../../../1.8/docs/topics/db/sql.txt:291
msgid "Here is an example of the difference between the two::"
msgstr ""

# 6312a1636f3044e2b0da1407df4ad3c1
#: ../../../../1.8/docs/topics/db/sql.txt:302
msgid "Connections and cursors"
msgstr ""

# 8a9633f71a714ce5b60f545ecafdd1ae
#: ../../../../1.8/docs/topics/db/sql.txt:304
msgid ""
"``connection`` and ``cursor`` mostly implement the standard Python DB-API "
"described in :pep:`249` — except when it comes to :doc:`transaction handling"
" </topics/db/transactions>`."
msgstr ""

# 1b50218420014d2eb345b05f9d70006e
#: ../../../../1.8/docs/topics/db/sql.txt:308
msgid ""
"If you're not familiar with the Python DB-API, note that the SQL statement "
"in ``cursor.execute()`` uses placeholders, ``\"%s\"``, rather than adding "
"parameters directly within the SQL. If you use this technique, the "
"underlying database library will automatically escape your parameters as "
"necessary."
msgstr ""

# a1feec4e2037465ea0a1f9204711115a
#: ../../../../1.8/docs/topics/db/sql.txt:313
msgid ""
"Also note that Django expects the ``\"%s\"`` placeholder, *not* the "
"``\"?\"`` placeholder, which is used by the SQLite Python bindings. This is "
"for the sake of consistency and sanity."
msgstr ""

# b680dcfc599d4911b41c39ce0a649d2a
#: ../../../../1.8/docs/topics/db/sql.txt:319
msgid ""
":pep:`249` does not state whether a cursor should be usable as a context "
"manager. Prior to Python 2.7, a cursor was usable as a context manager due "
"an unexpected behavior in magic method lookups (`Python ticket #9220`_). "
"Django 1.7 explicitly added support to allow using a cursor as context "
"manager."
msgstr ""

# 65047fc7e57f4e92874318f8ac3402ea
#: ../../../../1.8/docs/topics/db/sql.txt:327
msgid "Using a cursor as a context manager::"
msgstr ""

# 8f42fcd1cdb4425b87b75f2f2f4e449c
#: ../../../../1.8/docs/topics/db/sql.txt:332
msgid "is equivalent to::"
msgstr ""

# 1e859ca4f9424b88a379a81a34add742
#: ../../../../1.8/docs/topics/db/tablespaces.txt:3
msgid "Tablespaces"
msgstr ""

# 87a1e69d966b4f7987d6140d774f218a
#: ../../../../1.8/docs/topics/db/tablespaces.txt:5
msgid ""
"A common paradigm for optimizing performance in database systems is the use "
"of `tablespaces`_ to organize disk layout."
msgstr ""

# df43944608a444fcb2391f9eae92111e
#: ../../../../1.8/docs/topics/db/tablespaces.txt:11
msgid ""
"Django does not create the tablespaces for you. Please refer to your "
"database engine's documentation for details on creating and managing "
"tablespaces."
msgstr ""

# 1774e2a65b9f4f9da8c96751a55e8aec
#: ../../../../1.8/docs/topics/db/tablespaces.txt:17
msgid "Declaring tablespaces for tables"
msgstr ""

# b3dd3960de7f49318d18e0541aa02430
#: ../../../../1.8/docs/topics/db/tablespaces.txt:19
msgid ""
"A tablespace can be specified for the table generated by a model by "
"supplying the :attr:`~django.db.models.Options.db_tablespace` option inside "
"the model's ``class Meta``. This option also affects tables automatically "
"created for :class:`~django.db.models.ManyToManyField`\\ s in the model."
msgstr ""

# 884b80ab8e8d4baba15d7dd78024485a
#: ../../../../1.8/docs/topics/db/tablespaces.txt:24
msgid ""
"You can use the :setting:`DEFAULT_TABLESPACE` setting to specify a default "
"value for :attr:`~django.db.models.Options.db_tablespace`. This is useful "
"for setting a tablespace for the built-in Django apps and other applications"
" whose code you cannot control."
msgstr ""

# 10a929e42d0e4ea48bc34012b04d7dfb
#: ../../../../1.8/docs/topics/db/tablespaces.txt:30
msgid "Declaring tablespaces for indexes"
msgstr ""

# b79c64fe123740b6a1cdb60774d75401
#: ../../../../1.8/docs/topics/db/tablespaces.txt:32
msgid ""
"You can pass the :attr:`~django.db.models.Field.db_tablespace` option to a "
"``Field`` constructor to specify an alternate tablespace for the ``Field``’s"
" column index. If no index would be created for the column, the option is "
"ignored."
msgstr ""

# 3fa0a559ec5544b8afc68898bcb7248c
#: ../../../../1.8/docs/topics/db/tablespaces.txt:37
msgid ""
"You can use the :setting:`DEFAULT_INDEX_TABLESPACE` setting to specify a "
"default value for :attr:`~django.db.models.Field.db_tablespace`."
msgstr ""

# bddaecb3f9ac49b381937ffb44088202
#: ../../../../1.8/docs/topics/db/tablespaces.txt:40
msgid ""
"If :attr:`~django.db.models.Field.db_tablespace` isn't specified and you "
"didn't set :setting:`DEFAULT_INDEX_TABLESPACE`, the index is created in the "
"same tablespace as the tables."
msgstr ""

# 9fc7b80e2168406bafd6c9c6ba293715
#: ../../../../1.8/docs/topics/db/tablespaces.txt:57
msgid ""
"In this example, the tables generated by the ``TablespaceExample`` model "
"(i.e. the model table and the many-to-many table) would be stored in the "
"``tables`` tablespace. The index for the name field and the indexes on the "
"many-to-many table would be stored in the ``indexes`` tablespace. The "
"``data`` field would also generate an index, but no tablespace for it is "
"specified, so it would be stored in the model tablespace ``tables`` by "
"default."
msgstr ""

# 057b2578dca34ca68b18b9f595639058
#: ../../../../1.8/docs/topics/db/tablespaces.txt:65
msgid "Database support"
msgstr ""

# d2f15927084440d782e5a3b3c1c5ba0c
#: ../../../../1.8/docs/topics/db/tablespaces.txt:67
msgid "PostgreSQL and Oracle support tablespaces. SQLite and MySQL don't."
msgstr ""

# ce3120cb94d74b6c85f8fcb886cbae8a
#: ../../../../1.8/docs/topics/db/tablespaces.txt:69
msgid ""
"When you use a backend that lacks support for tablespaces, Django ignores "
"all tablespace-related options."
msgstr ""

# 96c540783f014a608df9c6617a8d9a2e
#: ../../../../1.8/docs/topics/db/transactions.txt:3
msgid "Database transactions"
msgstr ""

# c5057e56bfce4b57a91a5df62e2c5527
#: ../../../../1.8/docs/topics/db/transactions.txt:7
msgid ""
"Django gives you a few ways to control how database transactions are "
"managed."
msgstr ""

# 3e37e2ef7bd94d93b06baf58ada7599f
#: ../../../../1.8/docs/topics/db/transactions.txt:10
msgid "Managing database transactions"
msgstr ""

# f9b964dbeee640c1a30ed72772f082b5
#: ../../../../1.8/docs/topics/db/transactions.txt:13
msgid "Django's default transaction behavior"
msgstr ""

# eb1e929d81684937a77855def4fcd2ac
#: ../../../../1.8/docs/topics/db/transactions.txt:15
msgid ""
"Django's default behavior is to run in autocommit mode. Each query is "
"immediately committed to the database, unless a transaction is active. "
":ref:`See below for details <autocommit-details>`."
msgstr ""

# 877d4d6a0c2b4af4a2813d97a76d4604
#: ../../../../1.8/docs/topics/db/transactions.txt:19
msgid ""
"Django uses transactions or savepoints automatically to guarantee the "
"integrity of ORM operations that require multiple queries, especially "
":ref:`delete() <topics-db-queries-delete>` and :ref:`update() <topics-db-"
"queries-update>` queries."
msgstr ""

# 7650448be530482ab7d6479cc39b3c42
#: ../../../../1.8/docs/topics/db/transactions.txt:24
msgid ""
"Django's :class:`~django.test.TestCase` class also wraps each test in a "
"transaction for performance reasons."
msgstr ""

# eae1a37df0984e6eb151fe2e695c159b
#: ../../../../1.8/docs/topics/db/transactions.txt:30
msgid "Tying transactions to HTTP requests"
msgstr ""

# ef56300280da46ad85323a638a7481ae
#: ../../../../1.8/docs/topics/db/transactions.txt:32
msgid ""
"A common way to handle transactions on the web is to wrap each request in a "
"transaction. Set :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` to "
"``True`` in the configuration of each database for which you want to enable "
"this behavior."
msgstr ""

# 1c5e54b2680b410f83da1f9182bfc3bc
#: ../../../../1.8/docs/topics/db/transactions.txt:37
msgid ""
"It works like this. Before calling a view function, Django starts a "
"transaction. If the response is produced without problems, Django commits "
"the transaction. If the view produces an exception, Django rolls back the "
"transaction."
msgstr ""

# 6c0388dcd91e4610bdd21bfd92ca2ee2
#: ../../../../1.8/docs/topics/db/transactions.txt:42
msgid ""
"You may perform partial commits and rollbacks in your view code, typically "
"with the :func:`atomic` context manager. However, at the end of the view, "
"either all the changes will be committed, or none of them."
msgstr ""

# 3efa2290d71d4187a2424f5dcecff3cd
#: ../../../../1.8/docs/topics/db/transactions.txt:48
msgid ""
"While the simplicity of this transaction model is appealing, it also makes "
"it inefficient when traffic increases. Opening a transaction for every view "
"has some overhead. The impact on performance depends on the query patterns "
"of your application and on how well your database handles locking."
msgstr ""

# 96082fa7d14b4283a9b71edbc29ae106
#: ../../../../1.8/docs/topics/db/transactions.txt:53
msgid "Per-request transactions and streaming responses"
msgstr ""

# 4260f3ce5ba141c09c4ffc60ea56b871
#: ../../../../1.8/docs/topics/db/transactions.txt:55
msgid ""
"When a view returns a :class:`~django.http.StreamingHttpResponse`, reading "
"the contents of the response will often execute code to generate the "
"content. Since the view has already returned, such code runs outside of the "
"transaction."
msgstr ""

# 9bda2eb7bfb74a85836a55822935a667
#: ../../../../1.8/docs/topics/db/transactions.txt:60
msgid ""
"Generally speaking, it isn't advisable to write to the database while "
"generating a streaming response, since there's no sensible way to handle "
"errors after starting to send the response."
msgstr ""

# c8914210774a49a8b08c842d2e5cb5d8
#: ../../../../1.8/docs/topics/db/transactions.txt:64
msgid ""
"In practice, this feature simply wraps every view function in the "
":func:`atomic` decorator described below."
msgstr ""

# c9f4aa8d53144d1fa25f32cf7a406d61
#: ../../../../1.8/docs/topics/db/transactions.txt:67
msgid ""
"Note that only the execution of your view is enclosed in the transactions. "
"Middleware runs outside of the transaction, and so does the rendering of "
"template responses."
msgstr ""

# 52e3c65c3abf40f08d7462a3e02b4b1d
#: ../../../../1.8/docs/topics/db/transactions.txt:71
msgid ""
"When :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` is enabled, it's "
"still possible to prevent views from running in a transaction."
msgstr ""

# 15d0fde9db4642d2bd2e2c5a0acea7dd
#: ../../../../1.8/docs/topics/db/transactions.txt:76
msgid ""
"This decorator will negate the effect of :setting:`ATOMIC_REQUESTS "
"<DATABASE-ATOMIC_REQUESTS>` for a given view::"
msgstr ""

# 93ff988da0b04addbcd61a76355aa534
#: ../../../../1.8/docs/topics/db/transactions.txt:89
msgid "It only works if it's applied to the view itself."
msgstr ""

# e734ae265bbf41f8894e8035e4a0cdff
#: ../../../../1.8/docs/topics/db/transactions.txt:92
msgid "Controlling transactions explicitly"
msgstr ""

# 9903425b86824041ac905c876a8c3fbd
#: ../../../../1.8/docs/topics/db/transactions.txt:94
msgid "Django provides a single API to control database transactions."
msgstr ""

# 90644923ba4a4009bf8a0a31e97f534a
#: ../../../../1.8/docs/topics/db/transactions.txt:98
msgid ""
"Atomicity is the defining property of database transactions. ``atomic`` "
"allows us to create a block of code within which the atomicity on the "
"database is guaranteed. If the block of code is successfully completed, the "
"changes are committed to the database. If there is an exception, the changes"
" are rolled back."
msgstr ""

# 082657ba0b944015825c42457d89d84b
#: ../../../../1.8/docs/topics/db/transactions.txt:104
msgid ""
"``atomic`` blocks can be nested. In this case, when an inner block completes"
" successfully, its effects can still be rolled back if an exception is "
"raised in the outer block at a later point."
msgstr ""

# 03ab84b588b54fb48fea5e16f7d53eef
#: ../../../../1.8/docs/topics/db/transactions.txt:108
msgid "``atomic`` is usable both as a :py:term:`decorator`::"
msgstr ""

# dda792844fce4c77bf3e46a8585c6176
#: ../../../../1.8/docs/topics/db/transactions.txt:117
msgid "and as a :py:term:`context manager`::"
msgstr ""

# 5e20046d82b0485f9801ca0f29191a35
#: ../../../../1.8/docs/topics/db/transactions.txt:129
msgid ""
"Wrapping ``atomic`` in a try/except block allows for natural handling of "
"integrity errors::"
msgstr ""

# a092e131afce41e08db0f914349fb3e5
#: ../../../../1.8/docs/topics/db/transactions.txt:146
msgid ""
"In this example, even if ``generate_relationships()`` causes a database "
"error by breaking an integrity constraint, you can execute queries in "
"``add_children()``, and the changes from ``create_parent()`` are still "
"there. Note that any operations attempted in ``generate_relationships()`` "
"will already have been rolled back safely when ``handle_exception()`` is "
"called, so the exception handler can also operate on the database if "
"necessary."
msgstr ""

# d35307dde2fa40b787f511e1b67de4af
#: ../../../../1.8/docs/topics/db/transactions.txt:154
msgid "Avoid catching exceptions inside ``atomic``!"
msgstr ""

# 93140bed798e4b4db8fb726901df6587
#: ../../../../1.8/docs/topics/db/transactions.txt:156
msgid ""
"When exiting an ``atomic`` block, Django looks at whether it's exited "
"normally or with an exception to determine whether to commit or roll back. "
"If you catch and handle exceptions inside an ``atomic`` block, you may hide "
"from Django the fact that a problem has happened. This can result in "
"unexpected behavior."
msgstr ""

# e76a5707f7a046a786c24664340feb11
#: ../../../../1.8/docs/topics/db/transactions.txt:162
msgid ""
"This is mostly a concern for :exc:`~django.db.DatabaseError` and its "
"subclasses such as :exc:`~django.db.IntegrityError`. After such an error, "
"the transaction is broken and Django will perform a rollback at the end of "
"the ``atomic`` block. If you attempt to run database queries before the "
"rollback happens, Django will raise a "
":class:`~django.db.transaction.TransactionManagementError`. You may also "
"encounter this behavior when an ORM-related signal handler raises an "
"exception."
msgstr ""

# 3a9047e4cf014645afc0b3019a2107c8
#: ../../../../1.8/docs/topics/db/transactions.txt:171
msgid ""
"The correct way to catch database errors is around an ``atomic`` block as "
"shown above. If necessary, add an extra ``atomic`` block for this purpose. "
"This pattern has another advantage: it delimits explicitly which operations "
"will be rolled back if an exception occurs."
msgstr ""

# 32cf5334ba1041e18f9842ea173db49a
#: ../../../../1.8/docs/topics/db/transactions.txt:176
msgid ""
"If you catch exceptions raised by raw SQL queries, Django's behavior is "
"unspecified and database-dependent."
msgstr ""

# 770046c06c8f44f5843fef9fe0818c99
#: ../../../../1.8/docs/topics/db/transactions.txt:179
msgid ""
"In order to guarantee atomicity, ``atomic`` disables some APIs. Attempting "
"to commit, roll back, or change the autocommit state of the database "
"connection within an ``atomic`` block will raise an exception."
msgstr ""

# d138e76b2d6e447a8a9a64e6e3d54cec
#: ../../../../1.8/docs/topics/db/transactions.txt:183
msgid ""
"``atomic`` takes a ``using`` argument which should be the name of a "
"database. If this argument isn't provided, Django uses the ``\"default\"`` "
"database."
msgstr ""

# 6e8eaf4c771847168ef5f4b53be7573a
#: ../../../../1.8/docs/topics/db/transactions.txt:187
msgid "Under the hood, Django's transaction management code:"
msgstr ""

# afce06416a614f1291bc9fe20865e94b
#: ../../../../1.8/docs/topics/db/transactions.txt:189
msgid "opens a transaction when entering the outermost ``atomic`` block;"
msgstr ""

# 7fb381e2ddbd4e1d8721732d4016f93f
#: ../../../../1.8/docs/topics/db/transactions.txt:190
msgid "creates a savepoint when entering an inner ``atomic`` block;"
msgstr ""

# 3ec6ee3e2d8e40509ba6ada093432143
#: ../../../../1.8/docs/topics/db/transactions.txt:191
msgid "releases or rolls back to the savepoint when exiting an inner block;"
msgstr ""

# 50255fd67bd6427b98f7ad0eaf14caf4
#: ../../../../1.8/docs/topics/db/transactions.txt:192
msgid ""
"commits or rolls back the transaction when exiting the outermost block."
msgstr ""

# d1d543128b394f5198d5b22beb1e0fbb
#: ../../../../1.8/docs/topics/db/transactions.txt:194
msgid ""
"You can disable the creation of savepoints for inner blocks by setting the "
"``savepoint`` argument to ``False``. If an exception occurs, Django will "
"perform the rollback when exiting the first parent block with a savepoint if"
" there is one, and the outermost block otherwise. Atomicity is still "
"guaranteed by the outer transaction. This option should only be used if the "
"overhead of savepoints is noticeable. It has the drawback of breaking the "
"error handling described above."
msgstr ""

# a310aba90b544f4aa632406d3a0e84c6
#: ../../../../1.8/docs/topics/db/transactions.txt:202
msgid ""
"You may use ``atomic`` when autocommit is turned off. It will only use "
"savepoints, even for the outermost block, and it will raise an exception if "
"the outermost block is declared with ``savepoint=False``."
msgstr ""

# 9fce24aff7ab4805a632dea7a9e928f8
#: ../../../../1.8/docs/topics/db/transactions.txt:206
msgid "Performance considerations"
msgstr ""

# 909159d4abbc41e0b2f844dec9ec0d66
#: ../../../../1.8/docs/topics/db/transactions.txt:208
msgid ""
"Open transactions have a performance cost for your database server. To "
"minimize this overhead, keep your transactions as short as possible. This is"
" especially important if you're using :func:`atomic` in long-running "
"processes, outside of Django's request / response cycle."
msgstr ""

# 185bcf28b73348f08a61eda2025197ff
# 1060ccfb812a4fe48c5098fbca884370
#: ../../../../1.8/docs/topics/db/transactions.txt:214
#: ../../../../1.8/docs/topics/db/transactions.txt:269
msgid "Autocommit"
msgstr ""

# 239794985bc041d4977ccf08371ccbde
#: ../../../../1.8/docs/topics/db/transactions.txt:219
msgid "Why Django uses autocommit"
msgstr ""

# e3186823662b40e39a9c8c884f0d89e1
#: ../../../../1.8/docs/topics/db/transactions.txt:221
msgid ""
"In the SQL standards, each SQL query starts a transaction, unless one is "
"already active. Such transactions must then be explicitly committed or "
"rolled back."
msgstr ""

# 86814ed1f5694a1cad9af833aa2962be
#: ../../../../1.8/docs/topics/db/transactions.txt:225
msgid ""
"This isn't always convenient for application developers. To alleviate this "
"problem, most databases provide an autocommit mode. When autocommit is "
"turned on and no transaction is active, each SQL query gets wrapped in its "
"own transaction. In other words, not only does each such query start a "
"transaction, but the transaction also gets automatically committed or rolled"
" back, depending on whether the query succeeded."
msgstr ""

# e9caaf39e31147d3b86dc5bd09292d26
#: ../../../../1.8/docs/topics/db/transactions.txt:232
msgid ""
":pep:`249`, the Python Database API Specification v2.0, requires autocommit "
"to be initially turned off. Django overrides this default and turns "
"autocommit on."
msgstr ""

# a71b056f3da84024822b596d80affcea
#: ../../../../1.8/docs/topics/db/transactions.txt:236
msgid ""
"To avoid this, you can :ref:`deactivate the transaction management "
"<deactivate-transaction-management>`, but it isn't recommended."
msgstr ""

# 982fe00426fa4f4f8f0f90369a1bc4ff
#: ../../../../1.8/docs/topics/db/transactions.txt:242
msgid "Deactivating transaction management"
msgstr ""

# a2c310f4d8ef4ad9b62c3227a1a5cb11
#: ../../../../1.8/docs/topics/db/transactions.txt:244
msgid ""
"You can totally disable Django's transaction management for a given database"
" by setting :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` to ``False`` in its "
"configuration. If you do this, Django won't enable autocommit, and won't "
"perform any commits. You'll get the regular behavior of the underlying "
"database library."
msgstr ""

# e22fa15c417a4924a8e9acf438d1234e
#: ../../../../1.8/docs/topics/db/transactions.txt:250
msgid ""
"This requires you to commit explicitly every transaction, even those started"
" by Django or by third-party libraries. Thus, this is best used in "
"situations where you want to run your own transaction-controlling middleware"
" or do something really strange."
msgstr ""

# 717d0f3d43564b9db85722a1e55e5902
#: ../../../../1.8/docs/topics/db/transactions.txt:256
msgid "Low-level APIs"
msgstr ""

# 9415336515bf47478fae67e6e2d90636
#: ../../../../1.8/docs/topics/db/transactions.txt:260
msgid ""
"Always prefer :func:`atomic` if possible at all. It accounts for the "
"idiosyncrasies of each database and prevents invalid operations."
msgstr ""

# 89d7a2030c234760a1bbbd256c44a94f
#: ../../../../1.8/docs/topics/db/transactions.txt:263
msgid ""
"The low level APIs are only useful if you're implementing your own "
"transaction management."
msgstr ""

# bfab4090ecee44d9813f37de48ade66a
#: ../../../../1.8/docs/topics/db/transactions.txt:271
msgid ""
"Django provides a straightforward API in the :mod:`django.db.transaction` "
"module to manage the autocommit state of each database connection."
msgstr ""

# 653d7260610f4753958183442c5547d3
# 66e031cf4eee4701956e8ee7fa50d19b
#: ../../../../1.8/docs/topics/db/transactions.txt:278
#: ../../../../1.8/docs/topics/db/transactions.txt:313
msgid ""
"These functions take a ``using`` argument which should be the name of a "
"database. If it isn't provided, Django uses the ``\"default\"`` database."
msgstr ""

# 79717558d3384a91bb105d1a657aeefe
#: ../../../../1.8/docs/topics/db/transactions.txt:281
msgid ""
"Autocommit is initially turned on. If you turn it off, it's your "
"responsibility to restore it."
msgstr ""

# f2bd8206a2bc4b29b2f0848b3e1148b4
#: ../../../../1.8/docs/topics/db/transactions.txt:284
msgid ""
"Once you turn autocommit off, you get the default behavior of your database "
"adapter, and Django won't help you. Although that behavior is specified in "
":pep:`249`, implementations of adapters aren't always consistent with one "
"another. Review the documentation of the adapter you're using carefully."
msgstr ""

# ce87f257f97f491da5aee7fc1289bdfd
#: ../../../../1.8/docs/topics/db/transactions.txt:289
msgid ""
"You must ensure that no transaction is active, usually by issuing a "
":func:`commit` or a :func:`rollback`, before turning autocommit back on."
msgstr ""

# 7898d965ff4a40e3b888c6e4ab76a35b
#: ../../../../1.8/docs/topics/db/transactions.txt:292
msgid ""
"Django will refuse to turn autocommit off when an :func:`atomic` block is "
"active, because that would break atomicity."
msgstr ""

# 83b1220499934f62b901c15b8e969956
#: ../../../../1.8/docs/topics/db/transactions.txt:296
msgid "Transactions"
msgstr ""

# 9a216081ac2b480b8bc1220f91a6e9c8
#: ../../../../1.8/docs/topics/db/transactions.txt:298
msgid ""
"A transaction is an atomic set of database queries. Even if your program "
"crashes, the database guarantees that either all the changes will be "
"applied, or none of them."
msgstr ""

# a8a808efa4e54704a4ad9a5345cae363
#: ../../../../1.8/docs/topics/db/transactions.txt:302
msgid ""
"Django doesn't provide an API to start a transaction. The expected way to "
"start a transaction is to disable autocommit with :func:`set_autocommit`."
msgstr ""

# 1f40fa0370a94e9cb5a35dd497121aa1
#: ../../../../1.8/docs/topics/db/transactions.txt:305
msgid ""
"Once you're in a transaction, you can choose either to apply the changes "
"you've performed until this point with :func:`commit`, or to cancel them "
"with :func:`rollback`. These functions are defined in "
":mod:`django.db.transaction`."
msgstr ""

# fe987c128d4144c5b22ff539e51af514
#: ../../../../1.8/docs/topics/db/transactions.txt:316
msgid ""
"Django will refuse to commit or to rollback when an :func:`atomic` block is "
"active, because that would break atomicity."
msgstr ""

# d59d12996bb94a8fa23b02e468ea45d8
#: ../../../../1.8/docs/topics/db/transactions.txt:322
msgid "Savepoints"
msgstr ""

# f5de980edb64497e90ca163462cc813c
#: ../../../../1.8/docs/topics/db/transactions.txt:324
msgid ""
"A savepoint is a marker within a transaction that enables you to roll back "
"part of a transaction, rather than the full transaction. Savepoints are "
"available with the SQLite (≥ 3.6.8), PostgreSQL, Oracle and MySQL (when "
"using the InnoDB storage engine) backends. Other backends provide the "
"savepoint functions, but they're empty operations -- they don't actually do "
"anything."
msgstr ""

# 8d2122d397114d6ab3ac9bc5c13090fc
#: ../../../../1.8/docs/topics/db/transactions.txt:330
msgid ""
"Savepoints aren't especially useful if you are using autocommit, the default"
" behavior of Django. However, once you open a transaction with "
":func:`atomic`, you build up a series of database operations awaiting a "
"commit or rollback. If you issue a rollback, the entire transaction is "
"rolled back. Savepoints provide the ability to perform a fine-grained "
"rollback, rather than the full rollback that would be performed by "
"``transaction.rollback()``."
msgstr ""

# 0e6b0ec3700c4298843fc6843823cbe3
#: ../../../../1.8/docs/topics/db/transactions.txt:337
msgid ""
"When the :func:`atomic` decorator is nested, it creates a savepoint to allow"
" partial commit or rollback. You're strongly encouraged to use "
":func:`atomic` rather than the functions described below, but they're still "
"part of the public API, and there's no plan to deprecate them."
msgstr ""

# 512e158403ce4689b5329a6fd065d1e2
#: ../../../../1.8/docs/topics/db/transactions.txt:342
msgid ""
"Each of these functions takes a ``using`` argument which should be the name "
"of a database for which the behavior applies.  If no ``using`` argument is "
"provided then the ``\"default\"`` database is used."
msgstr ""

# 3aba6b764549406a8ae1d68f6199edf1
#: ../../../../1.8/docs/topics/db/transactions.txt:346
msgid ""
"Savepoints are controlled by three functions in "
":mod:`django.db.transaction`:"
msgstr ""

# c9fba9d41dc44efe968c71ca1f5c4b1b
#: ../../../../1.8/docs/topics/db/transactions.txt:350
msgid ""
"Creates a new savepoint. This marks a point in the transaction that is known"
" to be in a \"good\" state. Returns the savepoint ID (``sid``)."
msgstr ""

# 34223f2b1e2b4f668050e826a2f1cc92
#: ../../../../1.8/docs/topics/db/transactions.txt:355
msgid ""
"Releases savepoint ``sid``. The changes performed since the savepoint was "
"created become part of the transaction."
msgstr ""

# 23bb307ee77d4bf2b99c424c479cc439
#: ../../../../1.8/docs/topics/db/transactions.txt:360
msgid "Rolls back the transaction to savepoint ``sid``."
msgstr ""

# f4ace3571bd543d98da001ae5c569cb7
#: ../../../../1.8/docs/topics/db/transactions.txt:362
msgid ""
"These functions do nothing if savepoints aren't supported or if the database"
" is in autocommit mode."
msgstr ""

# 0f12f298e6424e3cb5f0ff184efe8fc3
#: ../../../../1.8/docs/topics/db/transactions.txt:365
msgid "In addition, there's a utility function:"
msgstr ""

# 067b750e48d946b9b6af928a003f11cc
#: ../../../../1.8/docs/topics/db/transactions.txt:369
msgid "Resets the counter used to generate unique savepoint IDs."
msgstr ""

# 174a3ddf1d87448d8f4c2368996caa10
#: ../../../../1.8/docs/topics/db/transactions.txt:371
msgid "The following example demonstrates the use of savepoints::"
msgstr ""

# 34e4c5be68994ab28613c1a4532be1a7
#: ../../../../1.8/docs/topics/db/transactions.txt:394
msgid ""
"Savepoints may be used to recover from a database error by performing a "
"partial rollback. If you're doing this inside an :func:`atomic` block, the "
"entire block will still be rolled back, because it doesn't know you've "
"handled the situation at a lower level! To prevent this, you can control the"
" rollback behavior with the following functions."
msgstr ""

# 0dc1e2fe5c8448e3af180563fd3b4663
#: ../../../../1.8/docs/topics/db/transactions.txt:404
msgid ""
"Setting the rollback flag to ``True`` forces a rollback when exiting the "
"innermost atomic block. This may be useful to trigger a rollback without "
"raising an exception."
msgstr ""

# 6f6be57bc3ca4ea0a4782467ea368916
#: ../../../../1.8/docs/topics/db/transactions.txt:408
msgid ""
"Setting it to ``False`` prevents such a rollback. Before doing that, make "
"sure you've rolled back the transaction to a known-good savepoint within the"
" current atomic block! Otherwise you're breaking atomicity and data "
"corruption may occur."
msgstr ""

# aa56160e8612422b86b23046bdfea7d3
#: ../../../../1.8/docs/topics/db/transactions.txt:414
msgid "Database-specific notes"
msgstr ""

# 11f8edd6d0b448df9c26bd2192a2b32f
#: ../../../../1.8/docs/topics/db/transactions.txt:419
msgid "Savepoints in SQLite"
msgstr ""

# 6dbabe340afe42e19c99d10cd78c5304
#: ../../../../1.8/docs/topics/db/transactions.txt:421
msgid ""
"While SQLite ≥ 3.6.8 supports savepoints, a flaw in the design of the "
":mod:`sqlite3` module makes them hardly usable."
msgstr ""

# 63e4b18eb709495f9173ef5da3d4cbf5
#: ../../../../1.8/docs/topics/db/transactions.txt:424
msgid ""
"When autocommit is enabled, savepoints don't make sense. When it's disabled,"
" :mod:`sqlite3` commits implicitly before savepoint statements. (In fact, it"
" commits before any statement other than ``SELECT``, ``INSERT``, ``UPDATE``,"
" ``DELETE`` and ``REPLACE``.) This bug has two consequences:"
msgstr ""

# b3759eb18b684c5eb63a9ab8b353c3fd
#: ../../../../1.8/docs/topics/db/transactions.txt:429
msgid ""
"The low level APIs for savepoints are only usable inside a transaction ie. "
"inside an :func:`atomic` block."
msgstr ""

# 18f711fd540b404586ec75226bf1e631
#: ../../../../1.8/docs/topics/db/transactions.txt:431
msgid "It's impossible to use :func:`atomic` when autocommit is turned off."
msgstr ""

# b0ffddfdd8ee402ca255fbe27abb98eb
#: ../../../../1.8/docs/topics/db/transactions.txt:434
msgid "Transactions in MySQL"
msgstr ""

# 59c52a3463e34fdbbd23d5613567ef9d
#: ../../../../1.8/docs/topics/db/transactions.txt:436
msgid ""
"If you're using MySQL, your tables may or may not support transactions; it "
"depends on your MySQL version and the table types you're using. (By \"table "
"types,\" we mean something like \"InnoDB\" or \"MyISAM\".) MySQL transaction"
" peculiarities are outside the scope of this article, but the MySQL site has"
" `information on MySQL transactions`_."
msgstr ""

# 0e8561b0f1c441e9aea30b8da3cb12f0
#: ../../../../1.8/docs/topics/db/transactions.txt:442
msgid ""
"If your MySQL setup does *not* support transactions, then Django will always"
" function in autocommit mode: statements will be executed and committed as "
"soon as they're called. If your MySQL setup *does* support transactions, "
"Django will handle transactions as explained in this document."
msgstr ""

# 205e91c535274404b5d0d6d0e10f713f
#: ../../../../1.8/docs/topics/db/transactions.txt:450
msgid "Handling exceptions within PostgreSQL transactions"
msgstr ""

# 5dbef474b15240a48bfc712a011e3efc
#: ../../../../1.8/docs/topics/db/transactions.txt:454
msgid ""
"This section is relevant only if you're implementing your own transaction "
"management. This problem cannot occur in Django's default mode and "
":func:`atomic` handles it automatically."
msgstr ""

# 197f7cf1721f497f9a6340520e98037a
#: ../../../../1.8/docs/topics/db/transactions.txt:458
msgid ""
"Inside a transaction, when a call to a PostgreSQL cursor raises an exception"
" (typically ``IntegrityError``), all subsequent SQL in the same transaction "
"will fail with the error \"current transaction is aborted, queries ignored "
"until end of transaction block\". Whilst simple use of ``save()`` is "
"unlikely to raise an exception in PostgreSQL, there are more advanced usage "
"patterns which might, such as saving objects with unique fields, saving "
"using the force_insert/force_update flag, or invoking custom SQL."
msgstr ""

# 485673214f9a40c7b58c404b2fd0c5a7
#: ../../../../1.8/docs/topics/db/transactions.txt:466
msgid "There are several ways to recover from this sort of error."
msgstr ""

# 082bcf9f4917477fbec9428b953b4e08
#: ../../../../1.8/docs/topics/db/transactions.txt:469
msgid "Transaction rollback"
msgstr ""

# c44647fff96246d3a6a39589e9f74757
#: ../../../../1.8/docs/topics/db/transactions.txt:471
msgid "The first option is to roll back the entire transaction. For example::"
msgstr ""

# e65135c715fa413f846deffefe035e04
#: ../../../../1.8/docs/topics/db/transactions.txt:480
msgid ""
"Calling ``transaction.rollback()`` rolls back the entire transaction. Any "
"uncommitted database operations will be lost. In this example, the changes "
"made by ``a.save()`` would be lost, even though that operation raised no "
"error itself."
msgstr ""

# 4102c6d44aa04c6495f6164d60e6c3c1
#: ../../../../1.8/docs/topics/db/transactions.txt:486
msgid "Savepoint rollback"
msgstr ""

# 5a5d6f67ffaa4c338c751d6fa196c26c
#: ../../../../1.8/docs/topics/db/transactions.txt:488
msgid ""
"You can use :ref:`savepoints <topics-db-transactions-savepoints>` to control"
" the extent of a rollback. Before performing a database operation that could"
" fail, you can set or update the savepoint; that way, if the operation "
"fails, you can roll back the single offending operation, rather than the "
"entire transaction. For example::"
msgstr ""

# 967cfe5c85cd474183771833001e1506
#: ../../../../1.8/docs/topics/db/transactions.txt:503
msgid ""
"In this example, ``a.save()`` will not be undone in the case where "
"``b.save()`` raises an exception."
msgstr ""

# c0f3ba6fdc3b40308e6126657ac5bbe1
#: ../../../../1.8/docs/topics/email.txt:3
msgid "Sending email"
msgstr ""

# 16054f36742247e4b9a9b42d5e05917a
#: ../../../../1.8/docs/topics/email.txt:8
msgid ""
"Although Python makes sending email relatively easy via the :mod:`smtplib` "
"module, Django provides a couple of light wrappers over it. These wrappers "
"are provided to make sending email extra quick, to make it easy to test "
"email sending during development, and to provide support for platforms that "
"can't use SMTP."
msgstr ""

# 01043a27c4954cfea3963b3a4603a442
#: ../../../../1.8/docs/topics/email.txt:14
msgid "The code lives in the ``django.core.mail`` module."
msgstr ""

# 407be259023a4e68a9c431cc7bc45440
#: ../../../../1.8/docs/topics/email.txt:19
msgid "In two lines::"
msgstr ""

# 791abad11ff54df5bb673138174d59af
#: ../../../../1.8/docs/topics/email.txt:26
msgid ""
"Mail is sent using the SMTP host and port specified in the "
":setting:`EMAIL_HOST` and :setting:`EMAIL_PORT` settings. The "
":setting:`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD` settings, if "
"set, are used to authenticate to the SMTP server, and the "
":setting:`EMAIL_USE_TLS` and :setting:`EMAIL_USE_SSL` settings control "
"whether a secure connection is used."
msgstr ""

# 6be530b7bc434825867cdbf26b712885
#: ../../../../1.8/docs/topics/email.txt:35
msgid ""
"The character set of email sent with ``django.core.mail`` will be set to the"
" value of your :setting:`DEFAULT_CHARSET` setting."
msgstr ""

# 1ddfe18bf2f9409db0e11d9810bcb438
#: ../../../../1.8/docs/topics/email.txt:39
msgid "send_mail()"
msgstr ""

# 6cb891f5285448ca933b6bda5c25f2e7
#: ../../../../1.8/docs/topics/email.txt:43
msgid ""
"The simplest way to send email is using ``django.core.mail.send_mail()``."
msgstr ""

# 518832c91be74b0ebf5fcff2ce63b086
#: ../../../../1.8/docs/topics/email.txt:46
msgid ""
"The ``subject``, ``message``, ``from_email`` and ``recipient_list`` "
"parameters are required."
msgstr ""

# ca65d4fc6d374b438fb43ce22f76a2aa
#: ../../../../1.8/docs/topics/email.txt:49
msgid "``subject``: A string."
msgstr ""

# e9d9f68ed4f040399bc34aa79c253e52
#: ../../../../1.8/docs/topics/email.txt:50
msgid "``message``: A string."
msgstr ""

# 6eae19c2206f464184593a0199039a31
#: ../../../../1.8/docs/topics/email.txt:51
msgid "``from_email``: A string."
msgstr ""

# cd144a1f28ff482ca943eec3f7f80007
#: ../../../../1.8/docs/topics/email.txt:52
msgid ""
"``recipient_list``: A list of strings, each an email address. Each member of"
" ``recipient_list`` will see the other recipients in the \"To:\" field of "
"the email message."
msgstr ""

# cf432d07b21640949200ea6499882a6f
#: ../../../../1.8/docs/topics/email.txt:55
msgid ""
"``fail_silently``: A boolean. If it's ``False``, ``send_mail`` will raise an"
" :exc:`smtplib.SMTPException`. See the :mod:`smtplib` docs for a list of "
"possible exceptions, all of which are subclasses of "
":exc:`~smtplib.SMTPException`."
msgstr ""

# 313674184a7e41c3adbea4f405938250
#: ../../../../1.8/docs/topics/email.txt:59
msgid ""
"``auth_user``: The optional username to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the "
":setting:`EMAIL_HOST_USER` setting."
msgstr ""

# 55b82b4954e4428ea3c4a2afd5f4e0a2
#: ../../../../1.8/docs/topics/email.txt:62
msgid ""
"``auth_password``: The optional password to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the "
":setting:`EMAIL_HOST_PASSWORD` setting."
msgstr ""

# 8e92fa80963f49a3988eb6216219ba76
#: ../../../../1.8/docs/topics/email.txt:65
msgid ""
"``connection``: The optional email backend to use to send the mail. If "
"unspecified, an instance of the default backend will be used. See the "
"documentation on :ref:`Email backends <topic-email-backends>` for more "
"details."
msgstr ""

# b156e8a360024d1c86708a500861a64d
#: ../../../../1.8/docs/topics/email.txt:69
msgid ""
"``html_message``: If ``html_message`` is provided, the resulting email will "
"be a :mimetype:`multipart/alternative` email with ``message`` as the "
":mimetype:`text/plain` content type and ``html_message`` as the "
":mimetype:`text/html` content type."
msgstr ""

# 3a2aaab875884e6c8ca384c9cd220590
#: ../../../../1.8/docs/topics/email.txt:74
msgid ""
"The return value will be the number of successfully delivered messages "
"(which can be ``0`` or ``1`` since it can only send one message)."
msgstr ""

# d2aad8a34b05447f8d3a1a7b88ecc8ea
#: ../../../../1.8/docs/topics/email.txt:79
msgid "The ``html_message`` parameter was added."
msgstr ""

# 317b75d48a204d71b341e49c3abb4a6c
#: ../../../../1.8/docs/topics/email.txt:82
msgid "send_mass_mail()"
msgstr ""

# 950918a24fa64d76bb2ede86851d09b8
#: ../../../../1.8/docs/topics/email.txt:86
msgid ""
"``django.core.mail.send_mass_mail()`` is intended to handle mass emailing."
msgstr ""

# 3a0227cec3184f2a9a522c4fe6b07a3d
#: ../../../../1.8/docs/topics/email.txt:88
msgid "``datatuple`` is a tuple in which each element is in this format::"
msgstr ""

# 34be8fc91cb0416aa2d856d21600ca47
#: ../../../../1.8/docs/topics/email.txt:92
msgid ""
"``fail_silently``, ``auth_user`` and ``auth_password`` have the same "
"functions as in :meth:`~django.core.mail.send_mail()`."
msgstr ""

# 876b0306f8c64f83b5cf35ecc10a637d
#: ../../../../1.8/docs/topics/email.txt:95
msgid ""
"Each separate element of ``datatuple`` results in a separate email message. "
"As in :meth:`~django.core.mail.send_mail()`, recipients in the same "
"``recipient_list`` will all see the other addresses in the email messages' "
"\"To:\" field."
msgstr ""

# d26724c35e4b4d88b6451373bcdcb907
#: ../../../../1.8/docs/topics/email.txt:100
msgid ""
"For example, the following code would send two different messages to two "
"different sets of recipients; however, only one connection to the mail "
"server would be opened::"
msgstr ""

# 8893c9fb572149e5916db6e7d53e6943
#: ../../../../1.8/docs/topics/email.txt:108
msgid ""
"The return value will be the number of successfully delivered messages."
msgstr ""

# 1730cd066e3846aaab49496ac7bfd5ff
#: ../../../../1.8/docs/topics/email.txt:111
msgid "send_mass_mail() vs. send_mail()"
msgstr ""

# 2d04ee55b47a47308e37a79989055827
#: ../../../../1.8/docs/topics/email.txt:113
msgid ""
"The main difference between :meth:`~django.core.mail.send_mass_mail()` and "
":meth:`~django.core.mail.send_mail()` is that "
":meth:`~django.core.mail.send_mail()` opens a connection to the mail server "
"each time it's executed, while :meth:`~django.core.mail.send_mass_mail()` "
"uses a single connection for all of its messages. This makes "
":meth:`~django.core.mail.send_mass_mail()` slightly more efficient."
msgstr ""

# b1b984c4ae454478b044a4fee43b01b5
#: ../../../../1.8/docs/topics/email.txt:121
msgid "mail_admins()"
msgstr ""

# 5dc545eb24c04b8fa94b643025182fdd
#: ../../../../1.8/docs/topics/email.txt:125
msgid ""
"``django.core.mail.mail_admins()`` is a shortcut for sending an email to the"
" site admins, as defined in the :setting:`ADMINS` setting."
msgstr ""

# 518e9f86f402419b843c9cc4abd74940
#: ../../../../1.8/docs/topics/email.txt:128
msgid ""
"``mail_admins()`` prefixes the subject with the value of the "
":setting:`EMAIL_SUBJECT_PREFIX` setting, which is ``\"[Django] \"`` by "
"default."
msgstr ""

# e085e35cf3a040999bb6b80e8456b2a9
#: ../../../../1.8/docs/topics/email.txt:131
msgid ""
"The \"From:\" header of the email will be the value of the "
":setting:`SERVER_EMAIL` setting."
msgstr ""

# 29f9fbfc4cd140a597f944329f47661d
#: ../../../../1.8/docs/topics/email.txt:134
msgid "This method exists for convenience and readability."
msgstr ""

# faa57a3e20464dcc9d5fcf266832dcb2
#: ../../../../1.8/docs/topics/email.txt:136
msgid ""
"If ``html_message`` is provided, the resulting email will be a "
":mimetype:`multipart/alternative` email with ``message`` as the "
":mimetype:`text/plain` content type and ``html_message`` as the "
":mimetype:`text/html` content type."
msgstr ""

# df20a8bc16bd49fcb78293ddacc92d43
#: ../../../../1.8/docs/topics/email.txt:142
msgid "mail_managers()"
msgstr ""

# 82e4fdc4b0594daab5f1a66aaa3e28d5
#: ../../../../1.8/docs/topics/email.txt:146
msgid ""
"``django.core.mail.mail_managers()`` is just like ``mail_admins()``, except "
"it sends an email to the site managers, as defined in the "
":setting:`MANAGERS` setting."
msgstr ""

# bca44ce64604454c9acdd8eebbdfa8ce
# 02aa82a306924deeb3c1884d8ba728e3
# 73bca33211534de5917e0462bf2e102b
# dde0b4cc65974bcebbfc49a8b630b1ae
# de2ae2778fb345d4b6333e4b1001b3e0
#: ../../../../1.8/docs/topics/email.txt:151
#: ../../../../1.8/docs/topics/http/sessions.txt:413
#: ../../../../1.8/docs/topics/http/shortcuts.txt:243
#: ../../../../1.8/docs/topics/http/urls.txt:543
#: ../../../../1.8/docs/topics/logging.txt:237
msgid "Examples"
msgstr "Ejemplos"

# 02c1927ae55c45bb8d2da1ee881f94d4
#: ../../../../1.8/docs/topics/email.txt:153
msgid ""
"This sends a single email to john@example.com and jane@example.com, with "
"them both appearing in the \"To:\"::"
msgstr ""

# a6a73fd88cdb40259122c9ccc0c6b963
#: ../../../../1.8/docs/topics/email.txt:159
msgid ""
"This sends a message to john@example.com and jane@example.com, with them "
"both receiving a separate email::"
msgstr ""

# adfc8b2bca80437c94461d398b806105
#: ../../../../1.8/docs/topics/email.txt:169
msgid "Preventing header injection"
msgstr ""

# abe559dd1f904028b99be1230b3df8b5
#: ../../../../1.8/docs/topics/email.txt:171
msgid ""
"`Header injection`_ is a security exploit in which an attacker inserts extra"
" email headers to control the \"To:\" and \"From:\" in email messages that "
"your scripts generate."
msgstr ""

# 485c9f2c863843228e05f66af7236f17
#: ../../../../1.8/docs/topics/email.txt:175
msgid ""
"The Django email functions outlined above all protect against header "
"injection by forbidding newlines in header values. If any ``subject``, "
"``from_email`` or ``recipient_list`` contains a newline (in either Unix, "
"Windows or Mac style), the email function (e.g. "
":meth:`~django.core.mail.send_mail()`) will raise "
"``django.core.mail.BadHeaderError`` (a subclass of ``ValueError``) and, "
"hence, will not send the email. It's your responsibility to validate all "
"data before passing it to the email functions."
msgstr ""

# 5d737864e70141f989ce86e329555f72
#: ../../../../1.8/docs/topics/email.txt:183
msgid ""
"If a ``message`` contains headers at the start of the string, the headers "
"will simply be printed as the first bit of the email message."
msgstr ""

# a86f8d7887f64aefb61072fe8dfa89f3
#: ../../../../1.8/docs/topics/email.txt:186
msgid ""
"Here's an example view that takes a ``subject``, ``message`` and "
"``from_email`` from the request's POST data, sends that to admin@example.com"
" and redirects to \"/contact/thanks/\" when it's done::"
msgstr ""

# a81b3e713b7b4e05b1776dfb18685620
#: ../../../../1.8/docs/topics/email.txt:213
msgid "The EmailMessage class"
msgstr ""

# 1c3c4541a91d4bed951c13b2eed09a93
#: ../../../../1.8/docs/topics/email.txt:215
msgid ""
"Django's :meth:`~django.core.mail.send_mail()` and "
":meth:`~django.core.mail.send_mass_mail()` functions are actually thin "
"wrappers that make use of the :class:`~django.core.mail.EmailMessage` class."
msgstr ""

# 1f94c18570cb46ad949e23b4cf54153e
#: ../../../../1.8/docs/topics/email.txt:219
msgid ""
"Not all features of the :class:`~django.core.mail.EmailMessage` class are "
"available through the :meth:`~django.core.mail.send_mail()` and related "
"wrapper functions. If you wish to use advanced features, such as BCC'ed "
"recipients, file attachments, or multi-part email, you'll need to create "
":class:`~django.core.mail.EmailMessage` instances directly."
msgstr ""

# d3a0a80834694c36bc52eb7f839d8493
#: ../../../../1.8/docs/topics/email.txt:226
msgid ""
"This is a design feature. :meth:`~django.core.mail.send_mail()` and related "
"functions were originally the only interface Django provided. However, the "
"list of parameters they accepted was slowly growing over time. It made sense"
" to move to a more object-oriented design for email messages and retain the "
"original functions only for backwards compatibility."
msgstr ""

# ec5c64b97fc04252b0ffacbe8dd267e2
#: ../../../../1.8/docs/topics/email.txt:233
msgid ""
":class:`~django.core.mail.EmailMessage` is responsible for creating the "
"email message itself. The :ref:`email backend <topic-email-backends>` is "
"then responsible for sending the email."
msgstr ""

# fe0330736bac46c0badf40ab69098658
#: ../../../../1.8/docs/topics/email.txt:237
msgid ""
"For convenience, :class:`~django.core.mail.EmailMessage` provides a simple "
"``send()`` method for sending a single email. If you need to send multiple "
"messages, the email backend API :ref:`provides an alternative <topics-"
"sending-multiple-emails>`."
msgstr ""

# b96c07bff89b41e0a0d87ca256c584ae
#: ../../../../1.8/docs/topics/email.txt:243
msgid "EmailMessage Objects"
msgstr ""

# 71034486926b4537b15f4f737f325db4
#: ../../../../1.8/docs/topics/email.txt:247
msgid ""
"The :class:`~django.core.mail.EmailMessage` class is initialized with the "
"following parameters (in the given order, if positional arguments are used)."
" All parameters are optional and can be set at any time prior to calling the"
" ``send()`` method."
msgstr ""

# eeaa2e4d53ce4eb98b0b2ba9e0a61159
#: ../../../../1.8/docs/topics/email.txt:252
msgid "``subject``: The subject line of the email."
msgstr ""

# 134f637f981740bcad020c4a949482c2
#: ../../../../1.8/docs/topics/email.txt:254
msgid "``body``: The body text. This should be a plain text message."
msgstr ""

# af7be94512354a21998d3dd86fa199fc
#: ../../../../1.8/docs/topics/email.txt:256
msgid ""
"``from_email``: The sender's address. Both ``fred@example.com`` and ``Fred "
"<fred@example.com>`` forms are legal. If omitted, the "
":setting:`DEFAULT_FROM_EMAIL` setting is used."
msgstr ""

# 91e49b09a2df48ff95c90c6ead267798
#: ../../../../1.8/docs/topics/email.txt:260
msgid "``to``: A list or tuple of recipient addresses."
msgstr ""

# 3b95bf558c254679b71d029e35f38e89
#: ../../../../1.8/docs/topics/email.txt:262
msgid ""
"``bcc``: A list or tuple of addresses used in the \"Bcc\" header when "
"sending the email."
msgstr ""

# 99640efd50be4b5180b6e9a257bacffe
#: ../../../../1.8/docs/topics/email.txt:265
msgid ""
"``connection``: An email backend instance. Use this parameter if you want to"
" use the same connection for multiple messages. If omitted, a new connection"
" is created when ``send()`` is called."
msgstr ""

# c8c4c59ec0724efd9a21771231949fd3
#: ../../../../1.8/docs/topics/email.txt:269
msgid ""
"``attachments``: A list of attachments to put on the message. These can be "
"either ``email.MIMEBase.MIMEBase`` instances, or ``(filename, content, "
"mimetype)`` triples."
msgstr ""

# 9dfb81c682104154ad4fc4c2721d2e37
#: ../../../../1.8/docs/topics/email.txt:273
msgid ""
"``headers``: A dictionary of extra headers to put on the message. The keys "
"are the header name, values are the header values. It's up to the caller to "
"ensure header names and values are in the correct format for an email "
"message. The corresponding attribute is ``extra_headers``."
msgstr ""

# abdca450a425486d90feb42d86f48492
#: ../../../../1.8/docs/topics/email.txt:278
msgid ""
"``cc``: A list or tuple of recipient addresses used in the \"Cc\" header "
"when sending the email."
msgstr ""

# 9c4aee6337264f5c98d6f98788f5a9ae
#: ../../../../1.8/docs/topics/email.txt:281
msgid ""
"``reply_to``: A list or tuple of recipient addresses used in the \"Reply-"
"To\" header when sending the email."
msgstr ""

# 5117ead29f9345d4b12dd6a8615dcc0c
#: ../../../../1.8/docs/topics/email.txt:286
msgid "The ``reply_to`` parameter was added."
msgstr ""

# 9d9c79f33bc2475e934a89a7945cb9df
#: ../../../../1.8/docs/topics/email.txt:294
msgid "The class has the following methods:"
msgstr ""

# da996826d6674d5abefab1a705aca5e2
#: ../../../../1.8/docs/topics/email.txt:296
msgid ""
"``send(fail_silently=False)`` sends the message. If a connection was "
"specified when the email was constructed, that connection will be used. "
"Otherwise, an instance of the default backend will be instantiated and used."
" If the keyword argument ``fail_silently`` is ``True``, exceptions raised "
"while sending the message will be quashed. An empty list of recipients will "
"not raise an exception."
msgstr ""

# bfbbbb35656d407f89f211e6011cf0ec
#: ../../../../1.8/docs/topics/email.txt:303
msgid ""
"``message()`` constructs a ``django.core.mail.SafeMIMEText`` object (a "
"subclass of Python's ``email.MIMEText.MIMEText`` class) or a "
"``django.core.mail.SafeMIMEMultipart`` object holding the message to be "
"sent. If you ever need to extend the :class:`~django.core.mail.EmailMessage`"
" class, you'll probably want to override this method to put the content you "
"want into the MIME object."
msgstr ""

# 4198226e8578451c989f6752b9a49de4
#: ../../../../1.8/docs/topics/email.txt:310
msgid ""
"``recipients()`` returns a list of all the recipients of the message, "
"whether they're recorded in the ``to``, ``cc`` or ``bcc`` attributes. This "
"is another method you might need to override when subclassing, because the "
"SMTP server needs to be told the full list of recipients when the message is"
" sent. If you add another way to specify recipients in your class, they need"
" to be returned from this method as well."
msgstr ""

# 0f3648daa2eb46a698964c02b498ab7f
#: ../../../../1.8/docs/topics/email.txt:317
msgid ""
"``attach()`` creates a new file attachment and adds it to the message. There"
" are two ways to call ``attach()``:"
msgstr ""

# 660db743f7cd4800ad2ae7884485811c
#: ../../../../1.8/docs/topics/email.txt:320
msgid ""
"You can pass it a single argument that is an ``email.MIMEBase.MIMEBase`` "
"instance. This will be inserted directly into the resulting message."
msgstr ""

# 92628ca3a8a64b9b83f78e552a313216
#: ../../../../1.8/docs/topics/email.txt:324
msgid ""
"Alternatively, you can pass ``attach()`` three arguments: ``filename``, "
"``content`` and ``mimetype``. ``filename`` is the name of the file "
"attachment as it will appear in the email, ``content`` is the data that will"
" be contained inside the attachment and ``mimetype`` is the optional MIME "
"type for the attachment. If you omit ``mimetype``, the MIME content type "
"will be guessed from the filename of the attachment."
msgstr ""

# 7c3c645aa4464f6ca9fc869f27e3ae77
#: ../../../../1.8/docs/topics/email.txt:338
msgid ""
"If you specify a ``mimetype`` of ``message/rfc822``, it will also accept "
":class:`django.core.mail.EmailMessage` and "
":py:class:`email.message.Message`."
msgstr ""

# d1b084fff9f24608ac8e914045732cb8
#: ../../../../1.8/docs/topics/email.txt:341
msgid ""
"In addition, ``message/rfc822`` attachments will no longer be base64-encoded"
" in violation of :rfc:`2046#section-5.2.1`, which can cause issues with "
"displaying the attachments in `Evolution`__ and `Thunderbird`__."
msgstr ""

# 88b75e1807c44960b2bfe52a43297b74
#: ../../../../1.8/docs/topics/email.txt:348
msgid ""
"``attach_file()`` creates a new attachment using a file from your "
"filesystem. Call it with the path of the file to attach and, optionally, the"
" MIME type to use for the attachment. If the MIME type is omitted, it will "
"be guessed from the filename. The simplest use would be::"
msgstr ""

# 7837ad02395a4443a4130f65574c1ea3
#: ../../../../1.8/docs/topics/email.txt:356
msgid "Sending alternative content types"
msgstr ""

# 6b4e65df11f54d2095fc2b886bdc493e
#: ../../../../1.8/docs/topics/email.txt:358
msgid ""
"It can be useful to include multiple versions of the content in an email; "
"the classic example is to send both text and HTML versions of a message. "
"With Django's email library, you can do this using the "
"``EmailMultiAlternatives`` class. This subclass of "
":class:`~django.core.mail.EmailMessage` has an ``attach_alternative()`` "
"method for including extra versions of the message body in the email. All "
"the other methods (including the class initialization) are inherited "
"directly from :class:`~django.core.mail.EmailMessage`."
msgstr ""

# 5832c44c5f8f4c438c633a3e12ffb3fe
#: ../../../../1.8/docs/topics/email.txt:366
msgid "To send a text and HTML combination, you could write::"
msgstr ""

# ae454f736a7b421a8e6196b1c3f404f5
#: ../../../../1.8/docs/topics/email.txt:377
msgid ""
"By default, the MIME type of the ``body`` parameter in an "
":class:`~django.core.mail.EmailMessage` is ``\"text/plain\"``. It is good "
"practice to leave this alone, because it guarantees that any recipient will "
"be able to read the email, regardless of their mail client. However, if you "
"are confident that your recipients can handle an alternative content type, "
"you can use the ``content_subtype`` attribute on the "
":class:`~django.core.mail.EmailMessage` class to change the main content "
"type. The major type will always be ``\"text\"``, but you can change the "
"subtype. For example::"
msgstr ""

# 3c054ef30cd942cba28fc181aa79607c
#: ../../../../1.8/docs/topics/email.txt:394
msgid "Email backends"
msgstr ""

# 85863e26b8094d90ac1c65d8af1d941d
#: ../../../../1.8/docs/topics/email.txt:396
msgid "The actual sending of an email is handled by the email backend."
msgstr ""

# 714085426bab49b5b129e833b655e23f
#: ../../../../1.8/docs/topics/email.txt:398
msgid "The email backend class has the following methods:"
msgstr ""

# dc5ee4410617466ea969ce65f4e189da
#: ../../../../1.8/docs/topics/email.txt:400
msgid "``open()`` instantiates a long-lived email-sending connection."
msgstr ""

# 2c09f21b04de4d5380ffbc596b184ba5
#: ../../../../1.8/docs/topics/email.txt:402
msgid "``close()`` closes the current email-sending connection."
msgstr ""

# f62f889e4c1b4a45907c141460c34211
#: ../../../../1.8/docs/topics/email.txt:404
msgid ""
"``send_messages(email_messages)`` sends a list of "
":class:`~django.core.mail.EmailMessage` objects. If the connection is not "
"open, this call will implicitly open the connection, and close the "
"connection afterwards. If the connection is already open, it will be left "
"open after mail has been sent."
msgstr ""

# 5a4e2e383b96489798465de7eebca7ff
#: ../../../../1.8/docs/topics/email.txt:410
msgid ""
"It can also be used as a context manager, which will automatically call "
"``open()`` and ``close()`` as needed::"
msgstr ""

# 6f75d0326d854b95905c4e47669baf1f
#: ../../../../1.8/docs/topics/email.txt:423
msgid "The context manager protocol was added."
msgstr ""

# 729d626ba8c14d1195e889f13e9075ef
#: ../../../../1.8/docs/topics/email.txt:426
msgid "Obtaining an instance of an email backend"
msgstr ""

# 2111a29fca4f4a4e9ce114d2d3a56b52
#: ../../../../1.8/docs/topics/email.txt:428
msgid ""
"The :meth:`get_connection` function in ``django.core.mail`` returns an "
"instance of the email backend that you can use."
msgstr ""

# dc85517f61a443bea4eb0bb1680a0c68
#: ../../../../1.8/docs/topics/email.txt:435
msgid ""
"By default, a call to ``get_connection()`` will return an instance of the "
"email backend specified in :setting:`EMAIL_BACKEND`. If you specify the "
"``backend`` argument, an instance of that backend will be instantiated."
msgstr ""

# 7d371315e557415a9954018465234c5e
#: ../../../../1.8/docs/topics/email.txt:439
msgid ""
"The ``fail_silently`` argument controls how the backend should handle "
"errors. If ``fail_silently`` is True, exceptions during the email sending "
"process will be silently ignored."
msgstr ""

# afccceb0f49f456fa50a8b11fb2dbb84
#: ../../../../1.8/docs/topics/email.txt:443
msgid ""
"All other arguments are passed directly to the constructor of the email "
"backend."
msgstr ""

# 714f3536c52c426aa5dea21f21e03f43
#: ../../../../1.8/docs/topics/email.txt:446
msgid ""
"Django ships with several email sending backends. With the exception of the "
"SMTP backend (which is the default), these backends are only useful during "
"testing and development. If you have special email sending requirements, you"
" can :ref:`write your own email backend <topic-custom-email-backend>`."
msgstr ""

# fd999f6a2346467b93580a5f46efa0ea
#: ../../../../1.8/docs/topics/email.txt:454
msgid "SMTP backend"
msgstr ""

# b2fbd626a71e4ae3840b945fd4962a90
#: ../../../../1.8/docs/topics/email.txt:458
msgid "This is the default backend. Email will be sent through a SMTP server."
msgstr ""

# 07adf676488340b9949bf081ea9683db
#: ../../../../1.8/docs/topics/email.txt:460
msgid ""
"The value for each argument is retrieved from the matching setting if the "
"argument is ``None``:"
msgstr ""

# 1c5c9412f839496db00ece91432a58e6
#: ../../../../1.8/docs/topics/email.txt:463
msgid "``host``: :setting:`EMAIL_HOST`"
msgstr ""

# f2ce83be584a4fec87bffcdcf2a93eff
#: ../../../../1.8/docs/topics/email.txt:464
msgid "``port``: :setting:`EMAIL_PORT`"
msgstr ""

# f7153ac41e1f44dda3bdba644e51252f
#: ../../../../1.8/docs/topics/email.txt:465
msgid "``username``: :setting:`EMAIL_HOST_USER`"
msgstr ""

# 47bb8728f7e241ff85fa8e4ad08c02bf
#: ../../../../1.8/docs/topics/email.txt:466
msgid "``password``: :setting:`EMAIL_HOST_PASSWORD`"
msgstr ""

# d08a24bbc5464284b8163b7ee22b06b3
#: ../../../../1.8/docs/topics/email.txt:467
msgid "``use_tls``: :setting:`EMAIL_USE_TLS`"
msgstr ""

# bfaf314ee9134c0e82bbbc8977cf372a
#: ../../../../1.8/docs/topics/email.txt:468
msgid "``use_ssl``: :setting:`EMAIL_USE_SSL`"
msgstr ""

# 63fadf516f6a40ca8bd11d6db3e3d69f
#: ../../../../1.8/docs/topics/email.txt:469
msgid "``timeout``: :setting:`EMAIL_TIMEOUT`"
msgstr ""

# 0db847f826ca4142bac9d55574411f3f
#: ../../../../1.8/docs/topics/email.txt:470
msgid "``ssl_keyfile``: :setting:`EMAIL_SSL_KEYFILE`"
msgstr ""

# 3e839e1344994bfc8124a7662fe8ea1d
#: ../../../../1.8/docs/topics/email.txt:471
msgid "``ssl_certfile``: :setting:`EMAIL_SSL_CERTFILE`"
msgstr ""

# 35fa05f787604975b14ed87abe67c155
#: ../../../../1.8/docs/topics/email.txt:473
msgid ""
"The SMTP backend is the default configuration inherited by Django. If you "
"want to specify it explicitly, put the following in your settings::"
msgstr ""

# 0865d80783bb4cce920db5f4f9ed3042
#: ../../../../1.8/docs/topics/email.txt:480
msgid ""
"The ``timeout`` parameter was added. If unspecified, the default ``timeout``"
" will be the one provided by :func:`socket.getdefaulttimeout()`, which "
"defaults to ``None`` (no timeout)."
msgstr ""

# 4a8e3cf9def6406b9783fae1d083b273
#: ../../../../1.8/docs/topics/email.txt:487
msgid ""
"The ``ssl_keyfile``, and ``ssl_certfile`` parameters and corresponding "
"settings were added. The ability to customize ``timeout`` using a setting "
"(:setting:`EMAIL_TIMEOUT`) was added."
msgstr ""

# 7b8d987d518d414bbb6f953175b23f9a
#: ../../../../1.8/docs/topics/email.txt:494
msgid "Console backend"
msgstr ""

# 0cb9cf6e15684b3d884b8f402cb09a66
#: ../../../../1.8/docs/topics/email.txt:496
msgid ""
"Instead of sending out real emails the console backend just writes the "
"emails that would be sent to the standard output. By default, the console "
"backend writes to ``stdout``. You can use a different stream-like object by "
"providing the ``stream`` keyword argument when constructing the connection."
msgstr ""

# 1e03da1517af4fdbb607d87f564f8c26
# a44e41121bc54bbbbefa658b1bacc774
# 3f5be4c0a1e742f5ac32e3decc9390a1
#: ../../../../1.8/docs/topics/email.txt:501
#: ../../../../1.8/docs/topics/email.txt:519
#: ../../../../1.8/docs/topics/email.txt:538
msgid "To specify this backend, put the following in your settings::"
msgstr ""

# ecd4b0a4fd31437b9a957be61f9296d9
# 00bf379e194c45ecaf74c80e0d3cb316
# bddbc69e748040cab09729c041a8b18f
#: ../../../../1.8/docs/topics/email.txt:505
#: ../../../../1.8/docs/topics/email.txt:524
#: ../../../../1.8/docs/topics/email.txt:555
msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development."
msgstr ""

# e973e4dc068f4bf98625d736bc7f97e9
#: ../../../../1.8/docs/topics/email.txt:511
msgid "File backend"
msgstr ""

# 6b38b6aea60c4b21baec64f4b7cefecf
#: ../../../../1.8/docs/topics/email.txt:513
msgid ""
"The file backend writes emails to a file. A new file is created for each new"
" session that is opened on this backend. The directory to which the files "
"are written is either taken from the :setting:`EMAIL_FILE_PATH` setting or "
"from the ``file_path`` keyword when creating a connection with "
":meth:`~django.core.mail.get_connection`."
msgstr ""

# 424a59659f044b5ca23e645102450420
#: ../../../../1.8/docs/topics/email.txt:530
msgid "In-memory backend"
msgstr ""

# f5df1a7d22884f23a502fe36fe9a117f
#: ../../../../1.8/docs/topics/email.txt:532
msgid ""
"The ``'locmem'`` backend stores messages in a special attribute of the "
"``django.core.mail`` module. The ``outbox`` attribute is created when the "
"first message is sent. It's a list with an "
":class:`~django.core.mail.EmailMessage` instance for each message that would"
" be sent."
msgstr ""

# 7ac164607b5c47b99c29c09e21da168e
#: ../../../../1.8/docs/topics/email.txt:542
msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development and testing."
msgstr ""

# 135ee224a568467db5fbca58d2665a90
#: ../../../../1.8/docs/topics/email.txt:548
msgid "Dummy backend"
msgstr ""

# 0ad1bfa27e4c45e8893c04f87c70adb7
#: ../../../../1.8/docs/topics/email.txt:550
msgid ""
"As the name suggests the dummy backend does nothing with your messages. To "
"specify this backend, put the following in your settings::"
msgstr ""

# 766b5b4b2e354eacb53c44f147a0e1f0
#: ../../../../1.8/docs/topics/email.txt:561
msgid "Defining a custom email backend"
msgstr ""

# cfb5232ea42c4a7fb1e855c657c2abeb
#: ../../../../1.8/docs/topics/email.txt:563
msgid ""
"If you need to change how emails are sent you can write your own email "
"backend. The :setting:`EMAIL_BACKEND` setting in your settings file is then "
"the Python import path for your backend class."
msgstr ""

# 31ed28ccdaea45cdb01e81527cca0dfd
#: ../../../../1.8/docs/topics/email.txt:567
msgid ""
"Custom email backends should subclass ``BaseEmailBackend`` that is located "
"in the ``django.core.mail.backends.base`` module. A custom email backend "
"must implement the ``send_messages(email_messages)`` method. This method "
"receives a list of :class:`~django.core.mail.EmailMessage` instances and "
"returns the number of successfully delivered messages. If your backend has "
"any concept of a persistent session or connection, you should also implement"
" the ``open()`` and ``close()`` methods. Refer to ``smtp.EmailBackend`` for "
"a reference implementation."
msgstr ""

# b404681056184a5eb1547c9e2b002681
#: ../../../../1.8/docs/topics/email.txt:579
msgid "Sending multiple emails"
msgstr ""

# 4c9e1bae096f420c8f3b267ea3df93fe
#: ../../../../1.8/docs/topics/email.txt:581
msgid ""
"Establishing and closing an SMTP connection (or any other network "
"connection, for that matter) is an expensive process. If you have a lot of "
"emails to send, it makes sense to reuse an SMTP connection, rather than "
"creating and destroying a connection every time you want to send an email."
msgstr ""

# 1e08e973e64a4f87aa951f74d82b18a3
#: ../../../../1.8/docs/topics/email.txt:586
msgid "There are two ways you tell an email backend to reuse a connection."
msgstr ""

# e59e23497698473b82b53f9136608800
#: ../../../../1.8/docs/topics/email.txt:588
msgid ""
"Firstly, you can use the ``send_messages()`` method. ``send_messages()`` "
"takes a list of :class:`~django.core.mail.EmailMessage` instances (or "
"subclasses), and sends them all using a single connection."
msgstr ""

# 0032e8a158a0453b98364d8bd6186fc1
#: ../../../../1.8/docs/topics/email.txt:592
msgid ""
"For example, if you have a function called ``get_notification_email()`` that"
" returns a list of :class:`~django.core.mail.EmailMessage` objects "
"representing some periodic email you wish to send out, you could send these "
"emails using a single call to send_messages::"
msgstr ""

# 92e210caf30840bc88f6afcc38e8b97e
#: ../../../../1.8/docs/topics/email.txt:602
msgid ""
"In this example, the call to ``send_messages()`` opens a connection on the "
"backend, sends the list of messages, and then closes the connection again."
msgstr ""

# 17bde17d2ece4d3bb2e210c7a4002aba
#: ../../../../1.8/docs/topics/email.txt:605
msgid ""
"The second approach is to use the ``open()`` and ``close()`` methods on the "
"email backend to manually control the connection. ``send_messages()`` will "
"not manually open or close the connection if it is already open, so if you "
"manually open the connection, you can control when it is closed. For "
"example::"
msgstr ""

# bded160b4c12430f9d98b1cc6bdd9498
#: ../../../../1.8/docs/topics/email.txt:635
msgid "Configuring email for development"
msgstr ""

# eaa13b0b76414d998844832f28e70b02
#: ../../../../1.8/docs/topics/email.txt:637
msgid ""
"There are times when you do not want Django to send emails at all. For "
"example, while developing a Web site, you probably don't want to send out "
"thousands of emails -- but you may want to validate that emails will be sent"
" to the right people under the right conditions, and that those emails will "
"contain the correct content."
msgstr ""

# b8f3f3113a75459e91b96fdec0ff2558
#: ../../../../1.8/docs/topics/email.txt:643
msgid ""
"The easiest way to configure email for local development is to use the "
":ref:`console <topic-email-console-backend>` email backend. This backend "
"redirects all email to stdout, allowing you to inspect the content of mail."
msgstr ""

# 31baad1f829a4b47913d3462f6d65d12
#: ../../../../1.8/docs/topics/email.txt:647
msgid ""
"The :ref:`file <topic-email-file-backend>` email backend can also be useful "
"during development -- this backend dumps the contents of every SMTP "
"connection to a file that can be inspected at your leisure."
msgstr ""

# 28b44672a2ed4f2db1348c12a5ce6dac
#: ../../../../1.8/docs/topics/email.txt:651
msgid ""
"Another approach is to use a \"dumb\" SMTP server that receives the emails "
"locally and displays them to the terminal, but does not actually send "
"anything. Python has a built-in way to accomplish this with a single "
"command::"
msgstr ""

# f817bfe5d5a4494e914023aa7d42c73f
#: ../../../../1.8/docs/topics/email.txt:657
msgid ""
"This command will start a simple SMTP server listening on port 1025 of "
"localhost. This server simply prints to standard output all email headers "
"and the email body. You then only need to set the :setting:`EMAIL_HOST` and "
":setting:`EMAIL_PORT` accordingly. For a more detailed discussion of SMTP "
"server options, see the Python documentation for the :mod:`smtpd` module."
msgstr ""

# f13a3d985d2c433b9d203e0f4ef7d070
#: ../../../../1.8/docs/topics/email.txt:663
msgid ""
"For information about unit-testing the sending of emails in your "
"application, see the :ref:`topics-testing-email` section of the testing "
"documentation."
msgstr ""

# 12a0bdcaed444ca99e3201f803444475
#: ../../../../1.8/docs/topics/files.txt:3
msgid "Managing files"
msgstr ""

# dde3bafdc479401e8dfe7989c8f162e3
#: ../../../../1.8/docs/topics/files.txt:5
msgid ""
"This document describes Django's file access APIs for files such as those "
"uploaded by a user. The lower level APIs are general enough that you could "
"use them for other purposes. If you want to handle \"static files\" (JS, "
"CSS, etc), see :doc:`/howto/static-files/index`."
msgstr ""

# 8893a73de5ee4a499681741121616ed3
#: ../../../../1.8/docs/topics/files.txt:10
msgid ""
"By default, Django stores files locally, using the :setting:`MEDIA_ROOT` and"
" :setting:`MEDIA_URL` settings. The examples below assume that you're using "
"these defaults."
msgstr ""

# bd8799222727462c9d71c363186c105d
#: ../../../../1.8/docs/topics/files.txt:14
msgid ""
"However, Django provides ways to write custom `file storage systems`_ that "
"allow you to completely customize where and how Django stores files. The "
"second half of this document describes how these storage systems work."
msgstr ""

# da5d97e797214e06b75a5759131ea2b6
#: ../../../../1.8/docs/topics/files.txt:21
msgid "Using files in models"
msgstr ""

# a2252afcb98c461584f1a292119f3027
#: ../../../../1.8/docs/topics/files.txt:23
msgid ""
"When you use a :class:`~django.db.models.FileField` or "
":class:`~django.db.models.ImageField`, Django provides a set of APIs you can"
" use to deal with that file."
msgstr ""

# f7483dc2690441bc8a49f2d61d8140a0
#: ../../../../1.8/docs/topics/files.txt:27
msgid ""
"Consider the following model, using an :class:`~django.db.models.ImageField`"
" to store a photo::"
msgstr ""

# 9c423f1d55fd4560842df770514c2ff4
#: ../../../../1.8/docs/topics/files.txt:37
msgid ""
"Any ``Car`` instance will have a ``photo`` attribute that you can use to get"
" at the details of the attached photo::"
msgstr ""

# 6af761ca44a44b009e23bd9903b7674f
#: ../../../../1.8/docs/topics/files.txt:50
msgid ""
"This object -- ``car.photo`` in the example -- is a ``File`` object, which "
"means it has all the methods and attributes described below."
msgstr ""

# bcdcc71a569c438abce150b2643949c0
#: ../../../../1.8/docs/topics/files.txt:54
msgid ""
"The file is saved as part of saving the model in the database, so the actual"
" file name used on disk cannot be relied on until after the model has been "
"saved."
msgstr ""

# b945a9499f824ed79e9a0af306ef59e8
#: ../../../../1.8/docs/topics/files.txt:58
msgid ""
"For example, you can change the file name by setting the file's "
":attr:`~django.core.files.File.name` to a path relative to the file "
"storage's location (:setting:`MEDIA_ROOT` if you are using the default "
":class:`~django.core.files.storage.FileSystemStorage`)::"
msgstr ""

# 3fd6e514993c498aa9fa8d8f89a49e8f
#: ../../../../1.8/docs/topics/files.txt:77
msgid "The ``File`` object"
msgstr ""

# c93ee75af60e408196aaba92d791c942
#: ../../../../1.8/docs/topics/files.txt:79
msgid ""
"Internally, Django uses a :class:`django.core.files.File` instance any time "
"it needs to represent a file. This object is a thin wrapper around Python's "
"`built-in file object`_ with some Django-specific additions."
msgstr ""

# b9e9404ffdcc463bad83312da446ed35
#: ../../../../1.8/docs/topics/files.txt:85
msgid ""
"Most of the time you'll simply use a ``File`` that Django's given you (i.e. "
"a file attached to a model as above, or perhaps an uploaded file)."
msgstr ""

# ae0e11393f89412692e5679b03ea432a
#: ../../../../1.8/docs/topics/files.txt:88
msgid ""
"If you need to construct a ``File`` yourself, the easiest way is to create "
"one using a Python built-in ``file`` object::"
msgstr ""

# 6ed5ad0947af44a3a12a240cebef33c3
#: ../../../../1.8/docs/topics/files.txt:97
msgid ""
"Now you can use any of the documented attributes and methods of the "
":class:`~django.core.files.File` class."
msgstr ""

# e0b0060d6a8b4b529b1031beef008312
#: ../../../../1.8/docs/topics/files.txt:100
msgid ""
"Be aware that files created in this way are not automatically closed. The "
"following approach may be used to close files automatically::"
msgstr ""

# 43b7b44652434264980e806df130e778
#: ../../../../1.8/docs/topics/files.txt:115
msgid ""
"Closing files is especially important when accessing file fields in a loop "
"over a large number of objects. If files are not manually closed after "
"accessing them, the risk of running out of file descriptors may arise. This "
"may lead to the following error::"
msgstr ""

# 18a6016b9ef14d828481890ae82fad34
#: ../../../../1.8/docs/topics/files.txt:124
msgid "File storage"
msgstr ""

# f31f35fd6ca34a94980d7936e8edced9
#: ../../../../1.8/docs/topics/files.txt:126
msgid ""
"Behind the scenes, Django delegates decisions about how and where to store "
"files to a file storage system. This is the object that actually understands"
" things like file systems, opening and reading files, etc."
msgstr ""

# 0549d7e191e9488387a28ce7174e7c77
#: ../../../../1.8/docs/topics/files.txt:130
msgid ""
"Django's default file storage is given by the "
":setting:`DEFAULT_FILE_STORAGE` setting; if you don't explicitly provide a "
"storage system, this is the one that will be used."
msgstr ""

# fcf62f13ffd944008b0d9bae824402ca
#: ../../../../1.8/docs/topics/files.txt:134
msgid ""
"See below for details of the built-in default file storage system, and see "
":doc:`/howto/custom-file-storage` for information on writing your own file "
"storage system."
msgstr ""

# 853f85bfb3e44fa4b2ec45a36cf8efce
#: ../../../../1.8/docs/topics/files.txt:139
msgid "Storage objects"
msgstr ""

# cdad2938943d4f86af1857189f8dabb0
#: ../../../../1.8/docs/topics/files.txt:141
msgid ""
"Though most of the time you'll want to use a ``File`` object (which "
"delegates to the proper storage for that file), you can use file storage "
"systems directly. You can create an instance of some custom file storage "
"class, or -- often more useful -- you can use the global default storage "
"system::"
msgstr ""

# 20b7e05526e944e09053ca6db5fec4c4
#: ../../../../1.8/docs/topics/files.txt:162
msgid "See :doc:`/ref/files/storage` for the file storage API."
msgstr ""

# 655db775fe59455bb98247d4be5a2804
#: ../../../../1.8/docs/topics/files.txt:167
msgid "The built-in filesystem storage class"
msgstr ""

# df1b887e3270405489f5ca5bf4d81b57
#: ../../../../1.8/docs/topics/files.txt:169
msgid ""
"Django ships with a :class:`django.core.files.storage.FileSystemStorage` "
"class which implements basic local filesystem file storage."
msgstr ""

# 6d44de67033741378faa1f18050bebf7
#: ../../../../1.8/docs/topics/files.txt:172
msgid ""
"For example, the following code will store uploaded files under "
"``/media/photos`` regardless of what your :setting:`MEDIA_ROOT` setting is::"
msgstr ""

# f64e050dcf2c4418a776734cd16333e6
#: ../../../../1.8/docs/topics/files.txt:184
msgid ""
":doc:`Custom storage systems </howto/custom-file-storage>` work the same "
"way: you can pass them in as the ``storage`` argument to a "
":class:`~django.db.models.FileField`."
msgstr ""

# 0db8c27f4c6046eaa1b2e3df09e816bd
#: ../../../../1.8/docs/topics/forms/formsets.txt:4
msgid "Formsets"
msgstr ""

# 5e9b490696e645feb0cf1db80a1445e9
#: ../../../../1.8/docs/topics/forms/formsets.txt:11
msgid ""
"A formset is a layer of abstraction to work with multiple forms on the same "
"page. It can be best compared to a data grid. Let's say you have the "
"following form::"
msgstr ""

# ab40d7c461d5415fbb07b516398660b6
#: ../../../../1.8/docs/topics/forms/formsets.txt:20
msgid ""
"You might want to allow the user to create several articles at once. To "
"create a formset out of an ``ArticleForm`` you would do::"
msgstr ""

# 5674f78f9c3e4d6996c5a74cb7407d00
#: ../../../../1.8/docs/topics/forms/formsets.txt:26
msgid ""
"You now have created a formset named ``ArticleFormSet``. The formset gives "
"you the ability to iterate over the forms in the formset and display them as"
" you would with a regular form::"
msgstr ""

# d419b5d3023c42919bccc944d334b990
#: ../../../../1.8/docs/topics/forms/formsets.txt:36
msgid ""
"As you can see it only displayed one empty form. The number of empty forms "
"that is displayed is controlled by the ``extra`` parameter. By default, "
":func:`~django.forms.formsets.formset_factory` defines one extra form; the "
"following example will display two blank forms::"
msgstr ""

# 77c92e139c1e47c3a72db3f4f7cfcbaf
#: ../../../../1.8/docs/topics/forms/formsets.txt:43
msgid ""
"Iterating over the ``formset`` will render the forms in the order they were "
"created. You can change this order by providing an alternate implementation "
"for the ``__iter__()`` method."
msgstr ""

# ad1410896ca64a6eb04457d0b5d7ea32
#: ../../../../1.8/docs/topics/forms/formsets.txt:47
msgid ""
"Formsets can also be indexed into, which returns the corresponding form. If "
"you override ``__iter__``, you will need to also override ``__getitem__`` to"
" have matching behavior."
msgstr ""

# cbeb524857fc495e9d1d9cd5886d1579
#: ../../../../1.8/docs/topics/forms/formsets.txt:54
msgid "Using initial data with a formset"
msgstr ""

# 7e81a4f37732481d96d481f8ad8c6c87
#: ../../../../1.8/docs/topics/forms/formsets.txt:56
msgid ""
"Initial data is what drives the main usability of a formset. As shown above "
"you can define the number of extra forms. What this means is that you are "
"telling the formset how many additional forms to show in addition to the "
"number of forms it generates from the initial data. Let's take a look at an "
"example::"
msgstr ""

# 74d487716ab8447697d0a0fec0c91da5
#: ../../../../1.8/docs/topics/forms/formsets.txt:80
msgid ""
"There are now a total of three forms showing above. One for the initial data"
" that was passed in and two extra forms. Also note that we are passing in a "
"list of dictionaries as the initial data."
msgstr ""

# 69515115a04b41e89d8ab9fbda85995e
#: ../../../../1.8/docs/topics/forms/formsets.txt:86
msgid ""
":ref:`Creating formsets from models with model formsets <model-formsets>`."
msgstr ""

# b921a6f394204d4aa7057488e7fcbe59
#: ../../../../1.8/docs/topics/forms/formsets.txt:91
msgid "Limiting the maximum number of forms"
msgstr ""

# 87e49630241a402b95617d7ef09f8640
#: ../../../../1.8/docs/topics/forms/formsets.txt:93
msgid ""
"The ``max_num`` parameter to :func:`~django.forms.formsets.formset_factory` "
"gives you the ability to limit the number of forms the formset will "
"display::"
msgstr ""

# f6ab9004f49d40fb805a0a9c3a55787b
#: ../../../../1.8/docs/topics/forms/formsets.txt:105
msgid ""
"If the value of ``max_num`` is greater than the number of existing items in "
"the initial data, up to ``extra`` additional blank forms will be added to "
"the formset, so long as the total number of forms does not exceed "
"``max_num``. For example, if ``extra=2`` and ``max_num=2`` and the formset "
"is initialized with one ``initial`` item, a form for the initial item and "
"one blank form will be displayed."
msgstr ""

# ce86bcc498744bd48336df6f36391fef
#: ../../../../1.8/docs/topics/forms/formsets.txt:112
msgid ""
"If the number of items in the initial data exceeds ``max_num``, all initial "
"data forms will be displayed regardless of the value of ``max_num`` and no "
"extra forms will be displayed. For example, if ``extra=3`` and ``max_num=1``"
" and the formset is initialized with two initial items, two forms with the "
"initial data will be displayed."
msgstr ""

# 7e933f6acaff44229f4927d758b90cd6
# f8a23fccea804fcd9bd2398afe537d58
#: ../../../../1.8/docs/topics/forms/formsets.txt:118
#: ../../../../1.8/docs/topics/forms/modelforms.txt:946
msgid ""
"A ``max_num`` value of ``None`` (the default) puts a high limit on the "
"number of forms displayed (1000). In practice this is equivalent to no "
"limit."
msgstr ""

# 7fd47b8bc6fa4853952d8dbd8b354280
#: ../../../../1.8/docs/topics/forms/formsets.txt:121
msgid ""
"By default, ``max_num`` only affects how many forms are displayed and does "
"not affect validation.  If ``validate_max=True`` is passed to the "
":func:`~django.forms.formsets.formset_factory`, then ``max_num`` will affect"
" validation.  See :ref:`validate_max`."
msgstr ""

# 703b41a8efa142e6af39128a9fa21439
#: ../../../../1.8/docs/topics/forms/formsets.txt:127
msgid "Formset validation"
msgstr ""

# af620757f2784368af60efe344668e71
#: ../../../../1.8/docs/topics/forms/formsets.txt:129
msgid ""
"Validation with a formset is almost identical to a regular ``Form``. There "
"is an ``is_valid`` method on the formset to provide a convenient way to "
"validate all forms in the formset::"
msgstr ""

# dd7ca8f200624a139eb148d5e030828a
#: ../../../../1.8/docs/topics/forms/formsets.txt:145
msgid ""
"We passed in no data to the formset which is resulting in a valid form. The "
"formset is smart enough to ignore extra forms that were not changed. If we "
"provide an invalid article::"
msgstr ""

# 263c84049cba4aceb4607fe1ff5d6797
#: ../../../../1.8/docs/topics/forms/formsets.txt:164
msgid ""
"As we can see, ``formset.errors`` is a list whose entries correspond to the "
"forms in the formset. Validation was performed for each of the two forms, "
"and the expected error message appears for the second item."
msgstr ""

# 2ea2830d27af49ef99054338473661c3
#: ../../../../1.8/docs/topics/forms/formsets.txt:170
msgid ""
"To check how many errors there are in the formset, we can use the "
"``total_error_count`` method::"
msgstr ""

# 5f0e8d9e4e8646b38cce4c631e8df0d0
#: ../../../../1.8/docs/topics/forms/formsets.txt:181
msgid ""
"We can also check if form data differs from the initial data (i.e. the form "
"was sent without any data)::"
msgstr ""

# 266ac664ee1d45f0ad1e99554fbd12b2
#: ../../../../1.8/docs/topics/forms/formsets.txt:198
msgid "Understanding the ManagementForm"
msgstr ""

# da719c405ad746ed9ce7011a5295351e
#: ../../../../1.8/docs/topics/forms/formsets.txt:200
msgid ""
"You may have noticed the additional data (``form-TOTAL_FORMS``, ``form-"
"INITIAL_FORMS`` and ``form-MAX_NUM_FORMS``) that was required in the "
"formset's data above. This data is required for the ``ManagementForm``. This"
" form is used by the formset to manage the collection of forms contained in "
"the formset. If you don't provide this management data, an exception will be"
" raised::"
msgstr ""

# 1d6946895fff4fe0bf0134bdb56f6991
#: ../../../../1.8/docs/topics/forms/formsets.txt:217
msgid ""
"It is used to keep track of how many form instances are being displayed. If "
"you are adding new forms via JavaScript, you should increment the count "
"fields in this form as well. On the other hand, if you are using JavaScript "
"to allow deletion of existing objects, then you need to ensure the ones "
"being removed are properly marked for deletion by including "
"``form-#-DELETE`` in the ``POST`` data. It is expected that all forms are "
"present in the ``POST`` data regardless."
msgstr ""

# bb2c4d6078284017b780d29fd34df50d
#: ../../../../1.8/docs/topics/forms/formsets.txt:224
msgid ""
"The management form is available as an attribute of the formset itself. When"
" rendering a formset in a template, you can include all the management data "
"by rendering ``{{ my_formset.management_form }}`` (substituting the name of "
"your formset as appropriate)."
msgstr ""

# a936446b59174ae883210b776c57ef55
#: ../../../../1.8/docs/topics/forms/formsets.txt:230
msgid "``total_form_count`` and ``initial_form_count``"
msgstr ""

# 7b41e0ae372d40cdbbb3ce730d8b3c4c
#: ../../../../1.8/docs/topics/forms/formsets.txt:232
msgid ""
"``BaseFormSet`` has a couple of methods that are closely related to the "
"``ManagementForm``, ``total_form_count`` and ``initial_form_count``."
msgstr ""

# c4193654e33843d2a6f64aa82ed41a4b
#: ../../../../1.8/docs/topics/forms/formsets.txt:235
msgid ""
"``total_form_count`` returns the total number of forms in this formset. "
"``initial_form_count`` returns the number of forms in the formset that were "
"pre-filled, and is also used to determine how many forms are required. You "
"will probably never need to override either of these methods, so please be "
"sure you understand what they do before doing so."
msgstr ""

# cf295d0b5d2e4b96b5aa47517315e247
#: ../../../../1.8/docs/topics/forms/formsets.txt:242
msgid "``empty_form``"
msgstr ""

# 7113ed2104af41568367cddb8c311130
#: ../../../../1.8/docs/topics/forms/formsets.txt:244
msgid ""
"``BaseFormSet`` provides an additional attribute ``empty_form`` which "
"returns a form instance with a prefix of ``__prefix__`` for easier use in "
"dynamic forms with JavaScript."
msgstr ""

# 0e0f51c4dbc94ed68b61f1ba90eeaf66
#: ../../../../1.8/docs/topics/forms/formsets.txt:249
msgid "Custom formset validation"
msgstr ""

# 37936315299e4fee9076e532ee47bc69
#: ../../../../1.8/docs/topics/forms/formsets.txt:251
msgid ""
"A formset has a ``clean`` method similar to the one on a ``Form`` class. "
"This is where you define your own validation that works at the formset "
"level::"
msgstr ""

# b015d350cdf0401886cd921c2d26c50f
#: ../../../../1.8/docs/topics/forms/formsets.txt:289
msgid ""
"The formset ``clean`` method is called after all the ``Form.clean`` methods "
"have been called. The errors will be found using the ``non_form_errors()`` "
"method on the formset."
msgstr ""

# 034567d1f1fc4efcada59f49155f7f05
#: ../../../../1.8/docs/topics/forms/formsets.txt:296
msgid "Validating the number of forms in a formset"
msgstr ""

# dc87b2d5915d47cd90c858f040cf3234
#: ../../../../1.8/docs/topics/forms/formsets.txt:298
msgid ""
"Django provides a couple ways to validate the minimum or maximum number of "
"submitted forms. Applications which need more customizable validation of the"
" number of forms should use custom formset validation."
msgstr ""

# 1576c529f73a4cb1939bae2d992532bb
#: ../../../../1.8/docs/topics/forms/formsets.txt:303
msgid "``validate_max``"
msgstr ""

# 17547b143ac441249aafba438109cc10
#: ../../../../1.8/docs/topics/forms/formsets.txt:305
msgid ""
"If ``validate_max=True`` is passed to "
":func:`~django.forms.formsets.formset_factory`, validation will also check "
"that the number of forms in the data set, minus those marked for deletion, "
"is less than or equal to ``max_num``."
msgstr ""

# 2e79cae52dac4e59b48345218beaed57
#: ../../../../1.8/docs/topics/forms/formsets.txt:331
msgid ""
"``validate_max=True`` validates against ``max_num`` strictly even if "
"``max_num`` was exceeded because the amount of initial data supplied was "
"excessive."
msgstr ""

# d1254e51ea8f498baf5625897e3c819c
#: ../../../../1.8/docs/topics/forms/formsets.txt:337
msgid ""
"Regardless of ``validate_max``, if the number of forms in a data set exceeds"
" ``max_num`` by more than 1000, then the form will fail to validate as if "
"``validate_max`` were set, and additionally only the first 1000 forms above "
"``max_num`` will be validated.  The remainder will be truncated entirely.  "
"This is to protect against memory exhaustion attacks using forged POST "
"requests."
msgstr ""

# 3dce5b3a1529400a9b29296073ef8115
#: ../../../../1.8/docs/topics/forms/formsets.txt:345
msgid "``validate_min``"
msgstr ""

# ace0ed0851ca4ef2b097d45c268014b3
#: ../../../../1.8/docs/topics/forms/formsets.txt:349
msgid ""
"If ``validate_min=True`` is passed to "
":func:`~django.forms.formsets.formset_factory`, validation will also check "
"that the number of forms in the data set, minus those marked for deletion, "
"is greater than or equal to ``min_num``."
msgstr ""

# 4736fb8868854cbb8b4cf84b5a6ed03a
#: ../../../../1.8/docs/topics/forms/formsets.txt:377
msgid ""
"The ``min_num`` and ``validate_min`` parameters were added to "
":func:`~django.forms.formsets.formset_factory`."
msgstr ""

# 7f6a084a6ef6400bae37181059323141
#: ../../../../1.8/docs/topics/forms/formsets.txt:381
msgid "Dealing with ordering and deletion of forms"
msgstr ""

# d8f0b33f0e844c97bcf185e564061d6f
#: ../../../../1.8/docs/topics/forms/formsets.txt:383
msgid ""
"The :func:`~django.forms.formsets.formset_factory` provides two optional "
"parameters ``can_order`` and ``can_delete`` to help with ordering of forms "
"in formsets and deletion of forms from a formset."
msgstr ""

# 2fd02dee12334406bbb7aeff2f05f0bd
#: ../../../../1.8/docs/topics/forms/formsets.txt:388
msgid "``can_order``"
msgstr ""

# 4d23caa6b6c24b5395d8add97efe37bc
# 3850fdce27bf48ad9e2785ceb27ec649
#: ../../../../1.8/docs/topics/forms/formsets.txt:392
#: ../../../../1.8/docs/topics/forms/formsets.txt:452
msgid "Default: ``False``"
msgstr ""

# c42fe6bddb0241ad82f4c795d28865d4
#: ../../../../1.8/docs/topics/forms/formsets.txt:394
msgid "Lets you create a formset with the ability to order::"
msgstr ""

# 2490ad8cee7d436689f333398e60af19
#: ../../../../1.8/docs/topics/forms/formsets.txt:415
msgid ""
"This adds an additional field to each form. This new field is named "
"``ORDER`` and is an ``forms.IntegerField``. For the forms that came from the"
" initial data it automatically assigned them a numeric value. Let's look at "
"what will happen when the user changes these values::"
msgstr ""

# 8caae2e2a43b44a09ba2198ab43316cf
#: ../../../../1.8/docs/topics/forms/formsets.txt:448
msgid "``can_delete``"
msgstr ""

# b665a0c0d34a4f1f94c3bc175f42e083
#: ../../../../1.8/docs/topics/forms/formsets.txt:454
msgid ""
"Lets you create a formset with the ability to select forms for deletion::"
msgstr ""

# 4d5b9ba1302048c5997aea142d61ff85
#: ../../../../1.8/docs/topics/forms/formsets.txt:475
msgid ""
"Similar to ``can_order`` this adds a new field to each form named ``DELETE``"
" and is a ``forms.BooleanField``. When data comes through marking any of the"
" delete fields you can access them with ``deleted_forms``::"
msgstr ""

# 5f6558351e76421ca360a9763d0effc6
#: ../../../../1.8/docs/topics/forms/formsets.txt:501
msgid ""
"If you are using a "
":class:`ModelFormSet<django.forms.models.BaseModelFormSet>`, model instances"
" for deleted forms will be deleted when you call ``formset.save()``."
msgstr ""

# 5e3eb1ec93564e75aa7e28c78cbffb2f
#: ../../../../1.8/docs/topics/forms/formsets.txt:507
msgid ""
"If you call ``formset.save(commit=False)``, objects will not be deleted "
"automatically.  You'll need to call ``delete()`` on each of the "
":attr:`formset.deleted_objects "
"<django.forms.models.BaseModelFormSet.deleted_objects>` to actually delete "
"them::"
msgstr ""

# 137428a13b1f422faf129fa779621753
#: ../../../../1.8/docs/topics/forms/formsets.txt:517
msgid ""
"If you want to maintain backwards compatibility with Django 1.6 and earlier,"
" you can do something like this::"
msgstr ""

# 1cd9ef01425849cca5faa66310a0b5fb
#: ../../../../1.8/docs/topics/forms/formsets.txt:529
msgid ""
"On the other hand, if you are using a plain ``FormSet``, it's up to you to "
"handle ``formset.deleted_forms``, perhaps in your formset's ``save()`` "
"method, as there's no general notion of what it means to delete a form."
msgstr ""

# 28a41a41329147e68f2a49f6e5ea3f84
#: ../../../../1.8/docs/topics/forms/formsets.txt:534
msgid "Adding additional fields to a formset"
msgstr ""

# 78572eeab4954f0b87578d3c14ba12ec
#: ../../../../1.8/docs/topics/forms/formsets.txt:536
msgid ""
"If you need to add additional fields to the formset this can be easily "
"accomplished. The formset base class provides an ``add_fields`` method. You "
"can simply override this method to add your own fields or even redefine the "
"default fields/attributes of the order and deletion fields::"
msgstr ""

# 5623c0f2f7d043528a1ed0d04df3eaa7
#: ../../../../1.8/docs/topics/forms/formsets.txt:558
msgid "Using a formset in views and templates"
msgstr ""

# 7a0a62b1f6de4fa5a939e5605ceb1824
#: ../../../../1.8/docs/topics/forms/formsets.txt:560
msgid ""
"Using a formset inside a view is as easy as using a regular ``Form`` class. "
"The only thing you will want to be aware of is making sure to use the "
"management form inside the template. Let's look at a sample view::"
msgstr ""

# 9318c3e041cc4492b4cf161f1aada3b6
#: ../../../../1.8/docs/topics/forms/formsets.txt:579
msgid "The ``manage_articles.html`` template might look like this:"
msgstr ""

# 7cf7c2ced3f544afa63cebe30319e49a
#: ../../../../1.8/docs/topics/forms/formsets.txt:592
msgid ""
"However there's a slight shortcut for the above by letting the formset "
"itself deal with the management form:"
msgstr ""

# 93e8cccdbe684347b876f580a0d03fc9
#: ../../../../1.8/docs/topics/forms/formsets.txt:603
msgid ""
"The above ends up calling the ``as_table`` method on the formset class."
msgstr ""

# 3d3692680482479baf1229d2d6a342d6
#: ../../../../1.8/docs/topics/forms/formsets.txt:608
msgid "Manually rendered ``can_delete`` and ``can_order``"
msgstr ""

# 5e7c567a75224cc1bb67c9542cf3533b
#: ../../../../1.8/docs/topics/forms/formsets.txt:610
msgid ""
"If you manually render fields in the template, you can render ``can_delete``"
" parameter with ``{{ form.DELETE }}``:"
msgstr ""

# fe39f67dfadc49b9a36f95740ac12419
#: ../../../../1.8/docs/topics/forms/formsets.txt:629
msgid ""
"Similarly, if the formset has the ability to order (``can_order=True``), it "
"is possible to render it with ``{{ form.ORDER }}``."
msgstr ""

# 3fc8404bbdaa41f7846d728bd95699e5
#: ../../../../1.8/docs/topics/forms/formsets.txt:633
msgid "Using more than one formset in a view"
msgstr ""

# 8cceffc91e6145ce8fb8e29f308232cf
#: ../../../../1.8/docs/topics/forms/formsets.txt:635
msgid ""
"You are able to use more than one formset in a view if you like. Formsets "
"borrow much of its behavior from forms. With that said you are able to use "
"``prefix`` to prefix formset form field names with a given value to allow "
"more than one formset to be sent to a view without name clashing. Lets take "
"a look at how this might be accomplished::"
msgstr ""

# db17964ff621410bbccd58332976eda9
#: ../../../../1.8/docs/topics/forms/formsets.txt:662
msgid ""
"You would then render the formsets as normal. It is important to point out "
"that you need to pass ``prefix`` on both the POST and non-POST cases so that"
" it is rendered and processed correctly."
msgstr ""

# 8bd67859e2f647a7957859a64f1b5a11
#: ../../../../1.8/docs/topics/forms/index.txt:3
msgid "Working with forms"
msgstr ""

# 79df7a6a15d24753aacefaccd226fbd9
#: ../../../../1.8/docs/topics/forms/index.txt:7
msgid "About this document"
msgstr ""

# a164c0fa230a4c5d9083bfb1d0b007bd
#: ../../../../1.8/docs/topics/forms/index.txt:9
msgid ""
"This document provides an introduction to the basics of web forms and how "
"they are handled in Django. For a more detailed look at specific areas of "
"the forms API, see :doc:`/ref/forms/api`, :doc:`/ref/forms/fields`, and "
":doc:`/ref/forms/validation`."
msgstr ""

# c8b4ab57c74645a790093f2f5076896d
#: ../../../../1.8/docs/topics/forms/index.txt:14
msgid ""
"Unless you're planning to build Web sites and applications that do nothing "
"but publish content, and don't accept input from your visitors, you're going"
" to need to understand and use forms."
msgstr ""

# a97cccd6a4b84cba96c90b08d1cae0a3
#: ../../../../1.8/docs/topics/forms/index.txt:18
msgid ""
"Django provides a range of tools and libraries to help you build forms to "
"accept input from site visitors, and then process and respond to the input."
msgstr ""

# f313b5cf604140268a07368ce8fcf754
#: ../../../../1.8/docs/topics/forms/index.txt:22
msgid "HTML forms"
msgstr ""

# 927efbfd896b48edbff444fc3052a88d
#: ../../../../1.8/docs/topics/forms/index.txt:24
msgid ""
"In HTML, a form is a collection of elements inside ``<form>...</form>`` that"
" allow a visitor to do things like enter text, select options, manipulate "
"objects or controls, and so on, and then send that information back to the "
"server."
msgstr ""

# f6e8b257a4d245c487919a90b9cf4ed6
#: ../../../../1.8/docs/topics/forms/index.txt:29
msgid ""
"Some of these form interface elements - text input or checkboxes - are "
"fairly simple and are built into HTML itself. Others are much more complex; "
"an interface that pops up a date picker or allows you to move a slider or "
"manipulate controls will typically use JavaScript and CSS as well as HTML "
"form ``<input>`` elements to achieve these effects."
msgstr ""

# 9937cee626df4482920bbd38aefd3649
#: ../../../../1.8/docs/topics/forms/index.txt:35
msgid "As well as its ``<input>`` elements, a form must specify two things:"
msgstr ""

# 85fed38bded5404a8a610eb4d7922435
#: ../../../../1.8/docs/topics/forms/index.txt:37
msgid ""
"*where*: the URL to which the data corresponding to the user's input should "
"be returned"
msgstr ""

# 5c07a9bf26384b25afbfc85275770ddc
#: ../../../../1.8/docs/topics/forms/index.txt:40
msgid "*how*: the HTTP method the data should be returned by"
msgstr ""

# 04e24ba8b4964923869efb1b6556daa3
#: ../../../../1.8/docs/topics/forms/index.txt:42
msgid ""
"As an example, the login form for the Django admin contains several "
"``<input>`` elements: one of ``type=\"text\"`` for the username, one of "
"``type=\"password\"`` for the password, and one of ``type=\"submit\"`` for "
"the \"Log in\" button. It also contains some hidden text fields that the "
"user doesn't see, which Django uses to determine what to do next."
msgstr ""

# 028936f2dbb84aa9a9fc309ba4738e4a
#: ../../../../1.8/docs/topics/forms/index.txt:48
msgid ""
"It also tells the browser that the form data should be sent to the URL "
"specified in the ``<form>``’s ``action`` attribute - ``/admin/`` - and that "
"it should be sent using the HTTP mechanism specified by the ``method`` "
"attribute - ``post``."
msgstr ""

# 996a9c32adc24dbaacdd27954999906f
#: ../../../../1.8/docs/topics/forms/index.txt:53
msgid ""
"When the ``<input type=\"submit\" value=\"Log in\">`` element is triggered, "
"the data is returned to ``/admin/``."
msgstr ""

# 5ca4b196e9634ccd80a5478a21d6abd1
#: ../../../../1.8/docs/topics/forms/index.txt:57
msgid "``GET`` and ``POST``"
msgstr ""

# 018f4971e3fb4f7db79c299d3f9a4beb
#: ../../../../1.8/docs/topics/forms/index.txt:59
msgid ""
"``GET`` and ``POST`` are the only HTTP methods to use when dealing with "
"forms."
msgstr ""

# 336d964c0a0646a3b56d1d202f7a2d55
#: ../../../../1.8/docs/topics/forms/index.txt:61
msgid ""
"Django's login form is returned using the ``POST`` method, in which the "
"browser bundles up the form data, encodes it for transmission, sends it to "
"the server, and then receives back its response."
msgstr ""

# fd548e588d1d40d8ad019f08ab41332a
#: ../../../../1.8/docs/topics/forms/index.txt:65
msgid ""
"``GET``, by contrast, bundles the submitted data into a string, and uses "
"this to compose a URL. The URL contains the address where the data must be "
"sent, as well as the data keys and values. You can see this in action if you"
" do a search in the Django documentation, which will produce a URL of the "
"form ``https://docs.djangoproject.com/search/?q=forms&release=1``."
msgstr ""

# f096fbc0a4a04b93a625e0607a1a2def
#: ../../../../1.8/docs/topics/forms/index.txt:71
msgid "``GET`` and ``POST`` are typically used for different purposes."
msgstr ""

# 557792b4158e442884180b0834603e24
#: ../../../../1.8/docs/topics/forms/index.txt:73
msgid ""
"Any request that could be used to change the state of the system - for "
"example, a request that makes changes in the database - should use ``POST``."
" ``GET`` should be used only for requests that do not affect the state of "
"the system."
msgstr ""

# 5e5835d769984d34b9b749a71c325201
#: ../../../../1.8/docs/topics/forms/index.txt:77
msgid ""
"``GET`` would also be unsuitable for a password form, because the password "
"would appear in the URL, and thus, also in browser history and server logs, "
"all in plain text. Neither would it be suitable for large quantities of "
"data, or for binary data, such as an image. A Web application that uses "
"``GET`` requests for admin forms is a security risk: it can be easy for an "
"attacker to mimic a form's request to gain access to sensitive parts of the "
"system. ``POST``, coupled with other protections like Django's :doc:`CSRF "
"protection </ref/csrf/>` offers more control over access."
msgstr ""

# 385a919fe444415cbb002edca5642c9d
#: ../../../../1.8/docs/topics/forms/index.txt:86
msgid ""
"On the other hand, ``GET`` is suitable for things like a web search form, "
"because the URLs that represent a ``GET`` request can easily be bookmarked, "
"shared, or resubmitted."
msgstr ""

# 83a320c33908450f86aff1339ce256ab
#: ../../../../1.8/docs/topics/forms/index.txt:91
msgid "Django's role in forms"
msgstr ""

# bc9211e4cf9f4caabe8d7327a254d049
#: ../../../../1.8/docs/topics/forms/index.txt:93
msgid ""
"Handling forms is a complex business. Consider Django's admin, where "
"numerous items of data of several different types may need to be prepared "
"for display in a form, rendered as HTML, edited using a convenient "
"interface, returned to the server, validated and cleaned up, and then saved "
"or passed on for further processing."
msgstr ""

# d540534459ef47f79443e6ce23026c0e
#: ../../../../1.8/docs/topics/forms/index.txt:99
msgid ""
"Django's form functionality can simplify and automate vast portions of this "
"work, and can also do it more securely than most programmers would be able "
"to do in code they wrote themselves."
msgstr ""

# 7582351c663a4920bf6ea935e1796208
#: ../../../../1.8/docs/topics/forms/index.txt:103
msgid "Django handles three distinct parts of the work involved in forms:"
msgstr ""

# 44192874e7ec4bf0b7cdce32ef5f0190
#: ../../../../1.8/docs/topics/forms/index.txt:105
msgid "preparing and restructuring data to make it ready for rendering"
msgstr ""

# 230fb28eb7714f8fbc7555dec2b83683
#: ../../../../1.8/docs/topics/forms/index.txt:106
msgid "creating HTML forms for the data"
msgstr ""

# 31dc97a8df114ac39a51531623f0466e
#: ../../../../1.8/docs/topics/forms/index.txt:107
msgid "receiving and processing submitted forms and data from the client"
msgstr ""

# 784f4bcefbeb4a698af584c51c99f682
#: ../../../../1.8/docs/topics/forms/index.txt:109
msgid ""
"It is *possible* to write code that does all of this manually, but Django "
"can take care of it all for you."
msgstr ""

# 9e2b388c7b1547b2853960cbcd87ff57
#: ../../../../1.8/docs/topics/forms/index.txt:113
msgid "Forms in Django"
msgstr ""

# c2d8d315b4f647c7bb36e8a57a388daa
#: ../../../../1.8/docs/topics/forms/index.txt:115
msgid ""
"We've described HTML forms briefly, but an HTML ``<form>`` is just one part "
"of the machinery required."
msgstr ""

# ceb8dabe8b9e472a820bde52b0a267cb
#: ../../../../1.8/docs/topics/forms/index.txt:118
msgid ""
"In the context of a Web application, 'form' might refer to that HTML "
"``<form>``, or to the Django :class:`Form` that produces it, or to the "
"structured data returned when it is submitted, or to the end-to-end working "
"collection of these parts."
msgstr ""

# ff3b97ae74444b2881a9a6e3d68cfa73
#: ../../../../1.8/docs/topics/forms/index.txt:124
msgid "The Django :class:`Form` class"
msgstr ""

# 85b3b41b89044146b1d56769bc87b988
#: ../../../../1.8/docs/topics/forms/index.txt:126
msgid ""
"At the heart of this system of components is Django's :class:`Form` class. "
"In much the same way that a Django model describes the logical structure of "
"an object, its behavior, and the way its parts are represented to us, a "
":class:`Form` class describes a form and determines how it works and "
"appears."
msgstr ""

# 8a143f18af0244d88dc428ff14e7175c
#: ../../../../1.8/docs/topics/forms/index.txt:131
msgid ""
"In a similar way that a model class's fields map to database fields, a form "
"class's fields map to HTML form ``<input>`` elements. (A :class:`ModelForm` "
"maps a model class's fields to HTML form ``<input>`` elements via a "
":class:`Form`; this is what the Django admin is based upon.)"
msgstr ""

# 02ba8b0c93704b249329c8950730cad5
#: ../../../../1.8/docs/topics/forms/index.txt:136
msgid ""
"A form's fields are themselves classes; they manage form data and perform "
"validation when a form is submitted. A :class:`DateField` and a "
":class:`FileField` handle very different kinds of data and have to do "
"different things with it."
msgstr ""

# 1ac04b175cb24cee8e1577800acb193f
#: ../../../../1.8/docs/topics/forms/index.txt:141
msgid ""
"A form field is represented to a user in the browser as an HTML \"widget\" -"
" a piece of user interface machinery. Each field type has an appropriate "
"default :doc:`Widget class </ref/forms/widgets/>`, but these can be "
"overridden as required."
msgstr ""

# f360d7d7ab9546908227d44f4b4711f8
#: ../../../../1.8/docs/topics/forms/index.txt:147
msgid "Instantiating, processing, and rendering forms"
msgstr ""

# 5e0e777a0c6b423fa5dcf3e44aa014a3
#: ../../../../1.8/docs/topics/forms/index.txt:149
msgid "When rendering an object in Django, we generally:"
msgstr ""

# ac369bbb7a324abf933179643df3d8cf
#: ../../../../1.8/docs/topics/forms/index.txt:151
msgid "get hold of it in the view (fetch it from the database, for example)"
msgstr ""

# 3d1aa7256e4d4d3da4dcc34833246339
#: ../../../../1.8/docs/topics/forms/index.txt:152
msgid "pass it to the template context"
msgstr ""

# a560ce0b325b4d55845859f51f6e1baa
#: ../../../../1.8/docs/topics/forms/index.txt:153
msgid "expand it to HTML markup using template variables"
msgstr ""

# 5619bbd6311d4f9fab3fd01b13027482
#: ../../../../1.8/docs/topics/forms/index.txt:155
msgid ""
"Rendering a form in a template involves nearly the same work as rendering "
"any other kind of object, but there are some key differences."
msgstr ""

# d74a566d7e2947088bf22ba237a0f775
#: ../../../../1.8/docs/topics/forms/index.txt:158
msgid ""
"In the case of a model instance that contained no data, it would rarely if "
"ever be useful to do anything with it in a template. On the other hand, it "
"makes perfect sense to render an unpopulated form - that's what we do when "
"we want the user to populate it."
msgstr ""

# 2a482fb1cd0843f6a0ab2990cc35db92
#: ../../../../1.8/docs/topics/forms/index.txt:163
msgid ""
"So when we handle a model instance in a view, we typically retrieve it from "
"the database. When we're dealing with a form we typically instantiate it in "
"the view."
msgstr ""

# 38fb34b0b8e84fec8eddde9975a00214
#: ../../../../1.8/docs/topics/forms/index.txt:167
msgid ""
"When we instantiate a form, we can opt to leave it empty or pre-populate it,"
" for example with:"
msgstr ""

# 010c9b67b7d8493c81e17023e52c816a
#: ../../../../1.8/docs/topics/forms/index.txt:170
msgid ""
"data from a saved model instance (as in the case of admin forms for editing)"
msgstr ""

# e59bd8b6ca3844b9bde6573815f8af7b
#: ../../../../1.8/docs/topics/forms/index.txt:171
msgid "data that we have collated from other sources"
msgstr ""

# 0970b081e9f34fd9b3e2607336de75a7
#: ../../../../1.8/docs/topics/forms/index.txt:172
msgid "data received from a previous HTML form submission"
msgstr ""

# b3143f13107f4a43b33432568e6cd192
#: ../../../../1.8/docs/topics/forms/index.txt:174
msgid ""
"The last of these cases is the most interesting, because it's what makes it "
"possible for users not just to read a Web site, but to send information back"
" to it too."
msgstr ""

# af567d7b5c3d4508a98c6281d74c0ac8
#: ../../../../1.8/docs/topics/forms/index.txt:179
msgid "Building a form"
msgstr ""

# bf447a4583f04b67bbb31654feefed25
#: ../../../../1.8/docs/topics/forms/index.txt:182
msgid "The work that needs to be done"
msgstr ""

# d4b5d32f23954f98bb310898e9e0886a
#: ../../../../1.8/docs/topics/forms/index.txt:184
msgid ""
"Suppose you want to create a simple form on your Web site, in order to "
"obtain the user's name. You'd need something like this in your template:"
msgstr ""

# 5cec0301013f4ba2bffb6b4c319643ce
#: ../../../../1.8/docs/topics/forms/index.txt:195
msgid ""
"This tells the browser to return the form data to the URL ``/your-name/``, "
"using the ``POST`` method. It will display a text field, labeled \"Your "
"name:\", and a button marked \"OK\". If the template context contains a "
"``current_name`` variable, that will be used to pre-fill the ``your_name`` "
"field."
msgstr ""

# ed4c5e802cc74be0bfde6ab12d649151
#: ../../../../1.8/docs/topics/forms/index.txt:200
msgid ""
"You'll need a view that renders the template containing the HTML form, and "
"that can supply the ``current_name`` field as appropriate."
msgstr ""

# 437f96d78e164e569cddd55c1340aa2e
#: ../../../../1.8/docs/topics/forms/index.txt:203
msgid ""
"When the form is submitted, the ``POST`` request which is sent to the server"
" will contain the form data."
msgstr ""

# 7f5ca48684164eafb492a5dba408f0c5
#: ../../../../1.8/docs/topics/forms/index.txt:206
msgid ""
"Now you'll also need a view corresponding to that ``/your-name/`` URL which "
"will find the appropriate key/value pairs in the request, and then process "
"them."
msgstr ""

# cecf049e2a2148939515e6783cec67a1
#: ../../../../1.8/docs/topics/forms/index.txt:209
msgid ""
"This is a very simple form. In practice, a form might contain dozens or "
"hundreds of fields, many of which might need to be pre-populated, and we "
"might expect the user to work through the edit-submit cycle several times "
"before concluding the operation."
msgstr ""

# a28f4866e50e402b94e92611ecb65df6
#: ../../../../1.8/docs/topics/forms/index.txt:214
msgid ""
"We might require some validation to occur in the browser, even before the "
"form is submitted; we might want to use much more complex fields, that allow"
" the user to do things like pick dates from a calendar and so on."
msgstr ""

# 1a453b207e544282ba5dd65572fcfe01
#: ../../../../1.8/docs/topics/forms/index.txt:218
msgid ""
"At this point it's much easier to get Django to do most of this work for us."
msgstr ""

# a8302915488143e9a23963e7afb6d691
#: ../../../../1.8/docs/topics/forms/index.txt:221
msgid "Building a form in Django"
msgstr ""

# d925e289c26b4667acda541a5aa1ffbf
#: ../../../../1.8/docs/topics/forms/index.txt:224
msgid "The :class:`Form` class"
msgstr ""

# 4ebdaee436ff4cb29bc7996c45f12aab
#: ../../../../1.8/docs/topics/forms/index.txt:226
msgid ""
"We already know what we want our HTML form to look like. Our starting point "
"for it in Django is this:"
msgstr ""

# 986d759805f340dea839b7ba6787af20
#: ../../../../1.8/docs/topics/forms/index.txt:237
msgid ""
"This defines a :class:`Form` class with a single field (``your_name``). "
"We've applied a human-friendly label to the field, which will appear in the "
"``<label>`` when it's rendered (although in this case, the "
":attr:`~Field.label` we specified is actually the same one that would be "
"generated automatically if we had omitted it)."
msgstr ""

# 49d5ccc9c24540b3ad7a4bf940a77203
#: ../../../../1.8/docs/topics/forms/index.txt:243
msgid ""
"The field's maximum allowable length is defined by "
":attr:`~CharField.max_length`. This does two things. It puts a "
"``maxlength=\"100\"`` on the HTML ``<input>`` (so the browser should prevent"
" the user from entering more than that number of characters in the first "
"place). It also means that when Django receives the form back from the "
"browser, it will validate the length of the data."
msgstr ""

# 6b7caa42a3fe4d79aff43206a0a24613
#: ../../../../1.8/docs/topics/forms/index.txt:250
msgid ""
"A :class:`Form` instance has an :meth:`~Form.is_valid()` method, which runs "
"validation routines for all its fields. When this method is called, if all "
"fields contain valid data, it will:"
msgstr ""

# cb49bae2709a45ccac1abb9bd166cbaa
#: ../../../../1.8/docs/topics/forms/index.txt:254
msgid "return ``True``"
msgstr ""

# b2c71b7879504c7792bd24af124e3dca
#: ../../../../1.8/docs/topics/forms/index.txt:255
msgid "place the form's data in its :attr:`~Form.cleaned_data` attribute."
msgstr ""

# 8b40968f03c14c85b02976c1c1e17e61
#: ../../../../1.8/docs/topics/forms/index.txt:257
msgid "The whole form, when rendered for the first time, will look like:"
msgstr ""

# 5d1edffd438340898150847bf6db3e3f
#: ../../../../1.8/docs/topics/forms/index.txt:264
msgid ""
"Note that it **does not** include the ``<form>`` tags, or a submit button. "
"We'll have to provide those ourselves in the template."
msgstr ""

# fb6c9a286dc4404aa744350761ecac99
#: ../../../../1.8/docs/topics/forms/index.txt:270
msgid "The view"
msgstr ""

# 19480c823a1d41f8b98a741ddff1c91f
#: ../../../../1.8/docs/topics/forms/index.txt:272
msgid ""
"Form data sent back to a Django Web site is processed by a view, generally "
"the same view which published the form. This allows us to reuse some of the "
"same logic."
msgstr ""

# cfc6075a4b764dd893606a173c37568c
#: ../../../../1.8/docs/topics/forms/index.txt:276
msgid ""
"To handle the form we need to instantiate it in the view for the URL where "
"we want it to be published:"
msgstr ""

# 03e21a45e60e45f788a3a782011c2f05
#: ../../../../1.8/docs/topics/forms/index.txt:305
msgid ""
"If we arrive at this view with a ``GET`` request, it will create an empty "
"form instance and place it in the template context to be rendered. This is "
"what we can expect to happen the first time we visit the URL."
msgstr ""

# 1a8bcc4712994d79a36ec20f05256ac4
#: ../../../../1.8/docs/topics/forms/index.txt:309
msgid ""
"If the form is submitted using a ``POST`` request, the view will once again "
"create a form instance and populate it with data from the request: ``form = "
"NameForm(request.POST)`` This is called \"binding data to the form\" (it is "
"now a *bound* form)."
msgstr ""

# a5340f899ffe499ba32ef975e1b7c64f
#: ../../../../1.8/docs/topics/forms/index.txt:314
msgid ""
"We call the form's ``is_valid()`` method; if it's not ``True``, we go back "
"to the template with the form. This time the form is no longer empty "
"(*unbound*) so the HTML form will be populated with the data previously "
"submitted, where it can be edited and corrected as required."
msgstr ""

# c7eada66dea34ef8a1012ea34b0eb4ad
#: ../../../../1.8/docs/topics/forms/index.txt:319
msgid ""
"If ``is_valid()`` is ``True``, we'll now be able to find all the validated "
"form data in its ``cleaned_data`` attribute. We can use this data to update "
"the database or do other processing before sending an HTTP redirect to the "
"browser telling it where to go next."
msgstr ""

# deb5bcc65e2d4bdeaa17a724a9628830
#: ../../../../1.8/docs/topics/forms/index.txt:327
msgid "The template"
msgstr ""

# 5eaa8ba38735413ab4b68191e4417ea3
#: ../../../../1.8/docs/topics/forms/index.txt:329
msgid ""
"We don't need to do much in our ``name.html`` template. The simplest example"
" is:"
msgstr ""

# 4b0821752d9f435e9cb8a2a3250bb9ff
#: ../../../../1.8/docs/topics/forms/index.txt:340
msgid ""
"All the form's fields and their attributes will be unpacked into HTML markup"
" from that ``{{ form }}`` by Django's template language."
msgstr ""

# e30791d30c1c4982a8827d85e801ee40
#: ../../../../1.8/docs/topics/forms/index.txt:343
msgid "Forms and Cross Site Request Forgery protection"
msgstr ""

# 73e42503092d43759a719400fb4f2bfa
#: ../../../../1.8/docs/topics/forms/index.txt:345
msgid ""
"Django ships with an easy-to-use :doc:`protection against Cross Site Request"
" Forgeries </ref/csrf>`. When submitting a form via ``POST`` with CSRF "
"protection enabled you must use the :ttag:`csrf_token` template tag as in "
"the preceding example. However, since CSRF protection is not directly tied "
"to forms in templates, this tag is omitted from the following examples in "
"this document."
msgstr ""

# 2723a36822694cc29c29fd73a56b3d04
#: ../../../../1.8/docs/topics/forms/index.txt:352
msgid "HTML5 input types and browser validation"
msgstr ""

# 9b4ffc8905b94e67a721c6a548326a48
#: ../../../../1.8/docs/topics/forms/index.txt:354
msgid ""
"If your form includes a :class:`~django.forms.URLField`, an "
":class:`~django.forms.EmailField` or any integer field type, Django will use"
" the ``url``, ``email`` and ``number`` HTML5 input types. By default, "
"browsers may apply their own validation on these fields, which may be "
"stricter than Django's validation. If you would like to disable this "
"behavior, set the `novalidate` attribute on the ``form`` tag, or specify a "
"different widget on the field, like :class:`TextInput`."
msgstr ""

# 67cbef00f90f404e957a92a695699911
#: ../../../../1.8/docs/topics/forms/index.txt:362
msgid ""
"We now have a working web form, described by a Django :class:`Form`, "
"processed by a view, and rendered as an HTML ``<form>``."
msgstr ""

# 1ea941c046854b2585250aacbadd7e5c
#: ../../../../1.8/docs/topics/forms/index.txt:365
msgid ""
"That's all you need to get started, but the forms framework puts a lot more "
"at your fingertips. Once you understand the basics of the process described "
"above, you should be prepared to understand other features of the forms "
"system and ready to learn a bit more about the underlying machinery."
msgstr ""

# c829e511777e48e59f6f9c2ce442d7a6
#: ../../../../1.8/docs/topics/forms/index.txt:371
msgid "More about Django :class:`Form` classes"
msgstr ""

# f3800f17135e4fe89c4e339b6cbc77c0
#: ../../../../1.8/docs/topics/forms/index.txt:373
msgid ""
"All form classes are created as subclasses of :class:`django.forms.Form`, "
"including the :doc:`ModelForm </topics/forms/modelforms>`, which you "
"encounter in Django's admin."
msgstr ""

# ff53f51accf642ea8b4125be656f6a38
#: ../../../../1.8/docs/topics/forms/index.txt:377
msgid "Models and Forms"
msgstr ""

# 35cf1e0881b44a5692d99dbe8ebaa6b2
#: ../../../../1.8/docs/topics/forms/index.txt:379
msgid ""
"In fact if your form is going to be used to directly add or edit a Django "
"model, a :doc:`ModelForm </topics/forms/modelforms>` can save you a great "
"deal of time, effort, and code, because it will build a form, along with the"
" appropriate fields and their attributes, from a ``Model`` class."
msgstr ""

# a2568a03ceb349d99233978b2c43262c
#: ../../../../1.8/docs/topics/forms/index.txt:385
msgid "Bound and unbound form instances"
msgstr ""

# a7eafc72b8884032a4edcad3c64d61a6
#: ../../../../1.8/docs/topics/forms/index.txt:387
msgid ""
"The distinction between :ref:`ref-forms-api-bound-unbound` is important:"
msgstr ""

# 6e98739e3fb14a14877c649455da1bb4
#: ../../../../1.8/docs/topics/forms/index.txt:389
msgid ""
"An unbound form has no data associated with it. When rendered to the user, "
"it will be empty or will contain default values."
msgstr ""

# 26782275e2c04c758f34dadc9f64b2ac
#: ../../../../1.8/docs/topics/forms/index.txt:392
msgid ""
"A bound form has submitted data, and hence can be used to tell if that data "
"is valid. If an invalid bound form is rendered, it can include inline error "
"messages telling the user what data to correct."
msgstr ""

# 5171446142924a6e85d001eb1b4c8696
#: ../../../../1.8/docs/topics/forms/index.txt:396
msgid ""
"The form's :attr:`~Form.is_bound` attribute will tell you whether a form has"
" data bound to it or not."
msgstr ""

# 6676230a5b3c476f8f1223299ed1f48e
#: ../../../../1.8/docs/topics/forms/index.txt:400
msgid "More on fields"
msgstr ""

# 29ed6cfb62aa47baabce9318c5ea2a60
#: ../../../../1.8/docs/topics/forms/index.txt:402
msgid ""
"Consider a more useful form than our minimal example above, which we could "
"use to implement \"contact me\" functionality on a personal Web site:"
msgstr ""

# dc6b8a51d3ec43a4aab9cb9c3cc21986
#: ../../../../1.8/docs/topics/forms/index.txt:416
msgid ""
"Our earlier form used a single field, ``your_name``, a :class:`CharField`. "
"In this case, our form has four fields: ``subject``, ``message``, ``sender``"
" and ``cc_myself``. :class:`CharField`, :class:`EmailField` and "
":class:`BooleanField` are just three of the available field types; a full "
"list can be found in :doc:`/ref/forms/fields`."
msgstr ""

# 7aba455dad754776ab3c9c27c80ddb3e
#: ../../../../1.8/docs/topics/forms/index.txt:423
msgid "Widgets"
msgstr ""

# 5d4bd752f3634a72b8802659cd457cf8
#: ../../../../1.8/docs/topics/forms/index.txt:425
msgid ""
"Each form field has a corresponding :doc:`Widget class "
"</ref/forms/widgets/>`, which in turn corresponds to an HTML form widget "
"such as ``<input type=\"text\">``."
msgstr ""

# 50404401aa824dafbc05736f2e9d97d8
#: ../../../../1.8/docs/topics/forms/index.txt:429
msgid ""
"In most cases, the field will have a sensible default widget. For example, "
"by default, a :class:`CharField` will have a :class:`TextInput` widget, that"
" produces an ``<input type=\"text\">`` in the HTML. If you needed "
"``<textarea>`` instead, you'd specify the appropriate widget when defining "
"your form field, as we have done for the ``message`` field."
msgstr ""

# 227a10bbf9e643568caf5a35a27582b9
#: ../../../../1.8/docs/topics/forms/index.txt:436
msgid "Field data"
msgstr ""

# 062505e027e74865acc46fc53eaf8df5
#: ../../../../1.8/docs/topics/forms/index.txt:438
msgid ""
"Whatever the data submitted with a form, once it has been successfully "
"validated by calling ``is_valid()`` (and ``is_valid()`` has returned "
"``True``), the validated form data will be in the ``form.cleaned_data`` "
"dictionary. This data will have been nicely converted into Python types for "
"you."
msgstr ""

# 1a51c4a355654dcda280756367a26b06
#: ../../../../1.8/docs/topics/forms/index.txt:445
msgid ""
"You can still access the unvalidated data directly from ``request.POST`` at "
"this point, but the validated data is better."
msgstr ""

# 2a2bff5dc653477cadfb8c5724c8f30a
#: ../../../../1.8/docs/topics/forms/index.txt:448
msgid ""
"In the contact form example above, ``cc_myself`` will be a boolean value. "
"Likewise, fields such as :class:`IntegerField` and :class:`FloatField` "
"convert values to a Python ``int`` and ``float`` respectively."
msgstr ""

# d4900524e50c473783aebf3f0755094b
#: ../../../../1.8/docs/topics/forms/index.txt:452
msgid ""
"Here's how the form data could be processed in the view that handles this "
"form:"
msgstr ""

# 68f50f3de1b3421ab4a6b5e0f1fcf261
#: ../../../../1.8/docs/topics/forms/index.txt:474
msgid "For more on sending email from Django, see :doc:`/topics/email`."
msgstr ""

# 150bf7bf2996447b82c5596d382f1a72
#: ../../../../1.8/docs/topics/forms/index.txt:476
msgid ""
"Some field types need some extra handling. For example, files that are "
"uploaded using a form need to be handled differently (they can be retrieved "
"from ``request.FILES``, rather than ``request.POST``). For details of how to"
" handle file uploads with your form, see :ref:`binding-uploaded-files`."
msgstr ""

# ed85ff147a1b4385bda4f7cb6c4b0a1c
#: ../../../../1.8/docs/topics/forms/index.txt:482
msgid "Working with form templates"
msgstr ""

# a4204200038f43349f68f1b4344162ad
#: ../../../../1.8/docs/topics/forms/index.txt:484
msgid ""
"All you need to do to get your form into a template is to place the form "
"instance into the template context. So if your form is called ``form`` in "
"the context, ``{{ form }}`` will render its ``<label>`` and ``<input>`` "
"elements appropriately."
msgstr ""

# 549b96a4a7dd47b890ffbd06f626b2c5
#: ../../../../1.8/docs/topics/forms/index.txt:490
msgid "Form rendering options"
msgstr ""

# d3a287f01c904805be19c29a325c217d
#: ../../../../1.8/docs/topics/forms/index.txt:492
msgid "Additional form template furniture"
msgstr ""

# 7898587eaf02468484acfef45880821b
#: ../../../../1.8/docs/topics/forms/index.txt:494
msgid ""
"Don't forget that a form's output does *not* include the surrounding "
"``<form>`` tags, or the form's ``submit`` control. You will have to provide "
"these yourself."
msgstr ""

# 77ca9599d749417681408b715ffb531a
#: ../../../../1.8/docs/topics/forms/index.txt:498
msgid ""
"There are other output options though for the ``<label>``/``<input>`` pairs:"
msgstr ""

# d89273b42af84d51b278ba4fdfd91b75
#: ../../../../1.8/docs/topics/forms/index.txt:500
msgid ""
"``{{ form.as_table }}`` will render them as table cells wrapped in ``<tr>`` "
"tags"
msgstr ""

# 55902039c2d64f09877f2db2308bbde4
#: ../../../../1.8/docs/topics/forms/index.txt:503
msgid "``{{ form.as_p }}`` will render them wrapped in ``<p>`` tags"
msgstr ""

# 697a695321ed4487955a7f08b191f4b5
#: ../../../../1.8/docs/topics/forms/index.txt:505
msgid "``{{ form.as_ul }}`` will render them wrapped in ``<li>`` tags"
msgstr ""

# 02aaf694630b4cf6843fee3a721b04e0
#: ../../../../1.8/docs/topics/forms/index.txt:507
msgid ""
"Note that you'll have to provide the surrounding ``<table>`` or ``<ul>`` "
"elements yourself."
msgstr ""

# d60fc9afe7ce49cfb5e3ccc58e3e744d
#: ../../../../1.8/docs/topics/forms/index.txt:510
msgid ""
"Here's the output of ``{{ form.as_p }}`` for our ``ContactForm`` instance:"
msgstr ""

# 06ad6c7aa1804c6e955a60dc387ce227
#: ../../../../1.8/docs/topics/forms/index.txt:523
msgid ""
"Note that each form field has an ID attribute set to ``id_<field-name>``, "
"which is referenced by the accompanying label tag. This is important in "
"ensuring that forms are accessible to assistive technology such as screen "
"reader software. You can also :ref:`customize the way in which labels and "
"ids are generated <ref-forms-api-configuring-label>`."
msgstr ""

# ccba4a8d2e414353a00cf6543a27bdbf
#: ../../../../1.8/docs/topics/forms/index.txt:529
msgid "See :ref:`ref-forms-api-outputting-html` for more on this."
msgstr ""

# b17e0afbc98c45f3bcd7757baf4735ac
#: ../../../../1.8/docs/topics/forms/index.txt:532
msgid "Rendering fields manually"
msgstr ""

# 68c8b5a6be09490d833866882b101fd8
#: ../../../../1.8/docs/topics/forms/index.txt:534
msgid ""
"We don't have to let Django unpack the form's fields; we can do it manually "
"if we like (allowing us to reorder the fields, for example). Each field is "
"available as an attribute of the form using ``{{ form.name_of_field }}``, "
"and in a Django template, will be rendered appropriately. For example:"
msgstr ""

# a7eb1505ac464235a5a874f99fc4c128
#: ../../../../1.8/docs/topics/forms/index.txt:563
msgid ""
"Complete ``<label>`` elements can also be generated using the "
":meth:`~django.forms.BoundField.label_tag`. For example:"
msgstr ""

# a81dbbff938d43dca0805a10c47c6c0c
#: ../../../../1.8/docs/topics/forms/index.txt:576
msgid "Rendering form error messages"
msgstr ""

# ce5ad298e90c4ed8b174f224f17c8479
#: ../../../../1.8/docs/topics/forms/index.txt:578
msgid ""
"Of course, the price of this flexibility is more work. Until now we haven't "
"had to worry about how to display form errors, because that's taken care of "
"for us. In this example we have had to make sure we take care of any errors "
"for each field and any errors for the form as a whole. Note ``{{ "
"form.non_field_errors }}`` at the top of the form and the template lookup "
"for errors on each field."
msgstr ""

# eb361370dd094c1c9f7f07a971b820d5
#: ../../../../1.8/docs/topics/forms/index.txt:584
msgid ""
"Using ``{{ form.name_of_field.errors }}`` displays a list of form errors, "
"rendered as an unordered list. This might look like:"
msgstr ""

# a97ff8da421e4786b64d9688f784e9ae
#: ../../../../1.8/docs/topics/forms/index.txt:593
msgid ""
"The list has a CSS class of ``errorlist`` to allow you to style its "
"appearance. If you wish to further customize the display of errors you can "
"do so by looping over them:"
msgstr ""

# 1881231c5b2f4af9bc95ac969aeaee96
#: ../../../../1.8/docs/topics/forms/index.txt:607
msgid ""
"Non-field errors (and/or hidden field errors that are rendered at the top of"
" the form when using helpers like ``form.as_p()``) will be rendered with an "
"additional class of ``nonfield`` to help distinguish them from field-"
"specific errors. For example, ``{{ form.non_field_errors }}`` would look "
"like:"
msgstr ""

# 85a4c10d838c4a2d8a261245a4fa8573
#: ../../../../1.8/docs/topics/forms/index.txt:620
msgid "The ``nonfield`` class as described in the example above was added."
msgstr ""

# 0f23d942e9724e5f833c6ef570932e70
#: ../../../../1.8/docs/topics/forms/index.txt:622
msgid ""
"See :doc:`/ref/forms/api` for more on errors, styling, and working with form"
" attributes in templates."
msgstr ""

# d57bde4b19464cbba720ede01574824b
#: ../../../../1.8/docs/topics/forms/index.txt:626
msgid "Looping over the form's fields"
msgstr ""

# c8a0f004258e46949e96ee0fc9fafff9
#: ../../../../1.8/docs/topics/forms/index.txt:628
msgid ""
"If you're using the same HTML for each of your form fields, you can reduce "
"duplicate code by looping through each field in turn using a ``{% for %}`` "
"loop:"
msgstr ""

# e61facc618364b3095f0ef23186df1ff
#: ../../../../1.8/docs/topics/forms/index.txt:641
msgid "Useful attributes on ``{{ field }}`` include:"
msgstr ""

# 6fc264605ccb4dce8488d46da64ff622
#: ../../../../1.8/docs/topics/forms/index.txt:644
msgid "``{{ field.label }}``"
msgstr ""

# bbe787b490724af2b74826e08c45d24e
#: ../../../../1.8/docs/topics/forms/index.txt:644
msgid "The label of the field, e.g. ``Email address``."
msgstr ""

# 4348a4cccb2b4035b36b11685c536945
#: ../../../../1.8/docs/topics/forms/index.txt:651
msgid "``{{ field.label_tag }}``"
msgstr ""

# 2e2317b767d8446e96a672cbf3603548
#: ../../../../1.8/docs/topics/forms/index.txt:647
msgid ""
"The field's label wrapped in the appropriate HTML ``<label>`` tag. This "
"includes the form's :attr:`~django.forms.Form.label_suffix`. For example, "
"the default ``label_suffix`` is a colon::"
msgstr ""

# 6885828a10a74cf694ba0cae58bba55f
#: ../../../../1.8/docs/topics/forms/index.txt:657
msgid "``{{ field.id_for_label }}``"
msgstr ""

# 5e61b34d2a864bdb8cc4e880863ef895
#: ../../../../1.8/docs/topics/forms/index.txt:654
msgid ""
"The ID that will be used for this field (``id_email`` in the example above)."
" If you are constructing the label manually, you may want to use this in "
"lieu of ``label_tag``. It's also useful, for example, if you have some "
"inline JavaScript and want to avoid hardcoding the field's ID."
msgstr ""

# 0bc16111c36e4b358b0e6ab1669a0ee3
#: ../../../../1.8/docs/topics/forms/index.txt:660
msgid "``{{ field.value }}``"
msgstr ""

# f0b04c70fb5a48b68fd1508279729826
#: ../../../../1.8/docs/topics/forms/index.txt:660
msgid "The value of the field. e.g ``someone@example.com``."
msgstr ""

# 5edfe99f91d14287807c2afd5d2a38ed
#: ../../../../1.8/docs/topics/forms/index.txt:664
msgid "``{{ field.html_name }}``"
msgstr ""

# 0ed4cde4301f4f5b894a890ce4b3ea6e
#: ../../../../1.8/docs/topics/forms/index.txt:663
msgid ""
"The name of the field that will be used in the input element's name field. "
"This takes the form prefix into account, if it has been set."
msgstr ""

# f7956b1b6a764facbb445d56bc12673b
#: ../../../../1.8/docs/topics/forms/index.txt:667
msgid "``{{ field.help_text }}``"
msgstr ""

# 6a9b7f2ebb4f49129eb9fbf4f331e100
#: ../../../../1.8/docs/topics/forms/index.txt:667
msgid "Any help text that has been associated with the field."
msgstr ""

# 2fe45c94eb4f47b593e2b216f4e4152f
#: ../../../../1.8/docs/topics/forms/index.txt:674
msgid "``{{ field.errors }}``"
msgstr ""

# 8991f2e6332044cea6629844832ce15d
#: ../../../../1.8/docs/topics/forms/index.txt:670
msgid ""
"Outputs a ``<ul class=\"errorlist\">`` containing any validation errors "
"corresponding to this field. You can customize the presentation of the "
"errors with a ``{% for error in field.errors %}`` loop. In this case, each "
"object in the loop is a simple string containing the error message."
msgstr ""

# 64ebdb6410054ac4a68e80ff5476c047
#: ../../../../1.8/docs/topics/forms/index.txt:679
msgid "``{{ field.is_hidden }}``"
msgstr ""

# 7b18b47d53db4849ab9552a026f2e572
#: ../../../../1.8/docs/topics/forms/index.txt:677
msgid ""
"This attribute is ``True`` if the form field is a hidden field and ``False``"
" otherwise. It's not particularly useful as a template variable, but could "
"be useful in conditional tests such as:"
msgstr ""

# 2cfac1372b0b490e8e6f244a7cb9e635
#: ../../../../1.8/docs/topics/forms/index.txt:691
msgid "``{{ field.field }}``"
msgstr ""

# aefc35a6cba945aea1666a4690f5ce7f
#: ../../../../1.8/docs/topics/forms/index.txt:688
msgid ""
"The :class:`~django.forms.Field` instance from the form class that this "
":class:`~django.forms.BoundField` wraps. You can use it to access "
":class:`~django.forms.Field` attributes, e.g. ``{{ "
"char_field.field.max_length }}``."
msgstr ""

# ce6b29f1ffdf46e4a8aea74d6d9d52d6
#: ../../../../1.8/docs/topics/forms/index.txt:694
msgid "Looping over hidden and visible fields"
msgstr ""

# 1d8bc89f2bc64cd39837b189dcacf16c
#: ../../../../1.8/docs/topics/forms/index.txt:696
msgid ""
"If you're manually laying out a form in a template, as opposed to relying on"
" Django's default form layout, you might want to treat ``<input "
"type=\"hidden\">`` fields differently from non-hidden fields. For example, "
"because hidden fields don't display anything, putting error messages \"next "
"to\" the field could cause confusion for your users -- so errors for those "
"fields should be handled differently."
msgstr ""

# 90a26d8c62c94c5f97daf4cee6998a93
#: ../../../../1.8/docs/topics/forms/index.txt:703
msgid ""
"Django provides two methods on a form that allow you to loop over the hidden"
" and visible fields independently: ``hidden_fields()`` and "
"``visible_fields()``. Here's a modification of an earlier example that uses "
"these two methods:"
msgstr ""

# 329b7c19a22a4690a51059fea712fc17
#: ../../../../1.8/docs/topics/forms/index.txt:722
msgid ""
"This example does not handle any errors in the hidden fields. Usually, an "
"error in a hidden field is a sign of form tampering, since normal form "
"interaction won't alter them. However, you could easily insert some error "
"displays for those form errors, as well."
msgstr ""

# f6ea105556584282b666ac38b1a25a37
#: ../../../../1.8/docs/topics/forms/index.txt:728
msgid "Reusable form templates"
msgstr ""

# 63ffc078aa604becb61817cc80ba096d
#: ../../../../1.8/docs/topics/forms/index.txt:730
msgid ""
"If your site uses the same rendering logic for forms in multiple places, you"
" can reduce duplication by saving the form's loop in a standalone template "
"and using the :ttag:`include` tag to reuse it in other templates:"
msgstr ""

# ebc60fb2ddca4893b3ab353e8cc94c63
#: ../../../../1.8/docs/topics/forms/index.txt:747
msgid ""
"If the form object passed to a template has a different name within the "
"context, you can alias it using the ``with`` argument of the :ttag:`include`"
" tag:"
msgstr ""

# 0e3fb3a1f0604ba88512bbf33484e4e1
#: ../../../../1.8/docs/topics/forms/index.txt:755
msgid ""
"If you find yourself doing this often, you might consider creating a custom "
":ref:`inclusion tag<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

# 2750a4a6b3054504b6560c636e5ba2fd
#: ../../../../1.8/docs/topics/forms/index.txt:759
msgid "Further topics"
msgstr ""

# 245b2732aa7548bbbdbf4ec91d6b5996
#: ../../../../1.8/docs/topics/forms/index.txt:761
msgid "This covers the basics, but forms can do a whole lot more:"
msgstr ""

# 5d3ecbc50fd543afbc5c5e6ed5760055
#: ../../../../1.8/docs/topics/forms/index.txt:773
msgid ":doc:`The Forms Reference </ref/forms/index>`"
msgstr ""

# 3a539fdc2cdf4a41a4993e04a32ad287
#: ../../../../1.8/docs/topics/forms/index.txt:773
msgid ""
"Covers the full API reference, including form fields, form widgets, and form"
" and field validation."
msgstr ""

# ece0c3096d47437d8aeb4c72ea49f1c9
#: ../../../../1.8/docs/topics/forms/media.txt:2
msgid "Form Assets (the ``Media`` class)"
msgstr ""

# ade6da39d84e4150bb0f782719fcdb99
#: ../../../../1.8/docs/topics/forms/media.txt:4
msgid ""
"Rendering an attractive and easy-to-use Web form requires more than just "
"HTML - it also requires CSS stylesheets, and if you want to use fancy "
"\"Web2.0\" widgets, you may also need to include some JavaScript on each "
"page. The exact combination of CSS and JavaScript that is required for any "
"given page will depend upon the widgets that are in use on that page."
msgstr ""

# 873d292e240247f68739c36ea8cbe088
#: ../../../../1.8/docs/topics/forms/media.txt:10
msgid ""
"This is where asset definitions come in. Django allows you to associate "
"different files -- like stylesheets and scripts -- with the forms and "
"widgets that require those assets. For example, if you want to use a "
"calendar to render DateFields, you can define a custom Calendar widget. This"
" widget can then be associated with the CSS and JavaScript that is required "
"to render the calendar. When the Calendar widget is used on a form, Django "
"is able to identify the CSS and JavaScript files that are required, and "
"provide the list of file names in a form suitable for easy inclusion on your"
" Web page."
msgstr ""

# c1dabc1056684d02af9e42ac4edcabac
#: ../../../../1.8/docs/topics/forms/media.txt:20
msgid "Assets and Django Admin"
msgstr ""

# 6deba224249d43c69bb856db4740186e
#: ../../../../1.8/docs/topics/forms/media.txt:22
msgid ""
"The Django Admin application defines a number of customized widgets for "
"calendars, filtered selections, and so on. These widgets define asset "
"requirements, and the Django Admin uses the custom widgets in place of the "
"Django defaults. The Admin templates will only include those files that are "
"required to render the widgets on any given page."
msgstr ""

# 8a784d50860042d99f5310555b9a35b8
#: ../../../../1.8/docs/topics/forms/media.txt:29
msgid ""
"If you like the widgets that the Django Admin application uses, feel free to"
" use them in your own application! They're all stored in "
"``django.contrib.admin.widgets``."
msgstr ""

# 78d0b2dbf9cb4ad9b51519b6d10ba637
#: ../../../../1.8/docs/topics/forms/media.txt:33
msgid "Which JavaScript toolkit?"
msgstr ""

# 1fee7440861f41b49f665b94aeb168ff
#: ../../../../1.8/docs/topics/forms/media.txt:35
msgid ""
"Many JavaScript toolkits exist, and many of them include widgets (such as "
"calendar widgets) that can be used to enhance your application. Django has "
"deliberately avoided blessing any one JavaScript toolkit. Each toolkit has "
"its own relative strengths and weaknesses - use whichever toolkit suits your"
" requirements. Django is able to integrate with any JavaScript toolkit."
msgstr ""

# fbeb69999fc64f24828addff91eca169
#: ../../../../1.8/docs/topics/forms/media.txt:45
msgid "Assets as a static definition"
msgstr ""

# 037e80010a634d15bb4d45857ae6edae
#: ../../../../1.8/docs/topics/forms/media.txt:47
msgid ""
"The easiest way to define assets is as a static definition. Using this "
"method, the declaration is an inner ``Media`` class. The properties of the "
"inner class define the requirements."
msgstr ""

# 643e971cb23147418e89c0dd05b1ab98
#: ../../../../1.8/docs/topics/forms/media.txt:51
msgid "Here's a simple example::"
msgstr ""

# b7ad29d48a8743218eec1c70f0621a0f
#: ../../../../1.8/docs/topics/forms/media.txt:62
msgid ""
"This code defines a ``CalendarWidget``, which will be based on "
"``TextInput``. Every time the CalendarWidget is used on a form, that form "
"will be directed to include the CSS file ``pretty.css``, and the JavaScript "
"files ``animations.js`` and ``actions.js``."
msgstr ""

# c00c268676df40af86f78cf86f7bdaf6
#: ../../../../1.8/docs/topics/forms/media.txt:67
msgid ""
"This static definition is converted at runtime into a widget property named "
"``media``. The list of assets for a ``CalendarWidget`` instance can be "
"retrieved through this property::"
msgstr ""

# 89711c00cd274558b7f3cdf553db4965
#: ../../../../1.8/docs/topics/forms/media.txt:77
msgid ""
"Here's a list of all possible ``Media`` options. There are no required "
"options."
msgstr ""

# 2c42d9fca6944726abf31d14bbd1f2db
#: ../../../../1.8/docs/topics/forms/media.txt:80
msgid "``css``"
msgstr ""

# 53b61a8fe1934af5bd0bbd7fdc7eefb4
#: ../../../../1.8/docs/topics/forms/media.txt:82
msgid ""
"A dictionary describing the CSS files required for various forms of output "
"media."
msgstr ""

# 5ea634bcf96443428c968193aaf30b80
#: ../../../../1.8/docs/topics/forms/media.txt:85
msgid ""
"The values in the dictionary should be a tuple/list of file names. See "
":ref:`the section on paths <form-asset-paths>` for details of how to specify"
" paths to these files."
msgstr ""

# 12ab71c70a2a4289936af0a2fed962cb
#: ../../../../1.8/docs/topics/forms/media.txt:89
msgid ""
"The keys in the dictionary are the output media types. These are the same "
"types accepted by CSS files in media declarations: 'all', 'aural', "
"'braille', 'embossed', 'handheld', 'print', 'projection', 'screen', 'tty' "
"and 'tv'. If you need to have different stylesheets for different media "
"types, provide a list of CSS files for each output medium. The following "
"example would provide two CSS options -- one for the screen, and one for "
"print::"
msgstr ""

# 537eb61889c44d3d970fa2cc52a73759
#: ../../../../1.8/docs/topics/forms/media.txt:102
msgid ""
"If a group of CSS files are appropriate for multiple output media types, the"
" dictionary key can be a comma separated list of output media types. In the "
"following example, TV's and projectors will have the same media "
"requirements::"
msgstr ""

# 54550daf812d4771a9a3ec311730738e
#: ../../../../1.8/docs/topics/forms/media.txt:114
msgid ""
"If this last CSS definition were to be rendered, it would become the "
"following HTML::"
msgstr ""

# 0b1c8eb62c24413e8f84aeb28a34a4a1
#: ../../../../1.8/docs/topics/forms/media.txt:121
msgid "``js``"
msgstr ""

# e4c4dded97c946d5aabae47e9b9064f6
#: ../../../../1.8/docs/topics/forms/media.txt:123
msgid ""
"A tuple describing the required JavaScript files. See :ref:`the section on "
"paths <form-asset-paths>` for details of how to specify paths to these "
"files."
msgstr ""

# 0df31e14e611446fb7ee7b3df7938dec
#: ../../../../1.8/docs/topics/forms/media.txt:128
msgid "``extend``"
msgstr ""

# ff8ea44c05574f63a24b0ad4c41febb6
#: ../../../../1.8/docs/topics/forms/media.txt:130
msgid "A boolean defining inheritance behavior for ``Media`` declarations."
msgstr ""

# 3d9a203b5d2a4ac4ab73d705eeba300d
#: ../../../../1.8/docs/topics/forms/media.txt:132
msgid ""
"By default, any object using a static ``Media`` definition will inherit all "
"the assets associated with the parent widget. This occurs regardless of how "
"the parent defines its own requirements. For example, if we were to extend "
"our basic Calendar widget from the example above::"
msgstr ""

# 0ddf6ef671214ca6bb72162a4a7673aa
#: ../../../../1.8/docs/topics/forms/media.txt:153
msgid ""
"The FancyCalendar widget inherits all the assets from its parent widget. If "
"you don't want ``Media`` to be inherited in this way, add an "
"``extend=False`` declaration to the ``Media`` declaration::"
msgstr ""

# 1c5cb9a534ae4b3cb1b305e850f6778f
#: ../../../../1.8/docs/topics/forms/media.txt:170
msgid ""
"If you require even more control over inheritance, define your assets using "
"a :ref:`dynamic property <dynamic-property>`. Dynamic properties give you "
"complete control over which files are inherited, and which are not."
msgstr ""

# 85504f1e8fe04aceba8ddc8b8e6b13e6
#: ../../../../1.8/docs/topics/forms/media.txt:177
msgid "``Media`` as a dynamic property"
msgstr ""

# cdf8f463a70e48d1b7b1ceb058581abb
#: ../../../../1.8/docs/topics/forms/media.txt:179
msgid ""
"If you need to perform some more sophisticated manipulation of asset "
"requirements, you can define the ``media`` property directly. This is done "
"by defining a widget property that returns an instance of ``forms.Media``.  "
"The constructor for ``forms.Media`` accepts ``css`` and ``js`` keyword "
"arguments in the same format as that used in a static media definition."
msgstr ""

# dfa34314bcfe47648038b399feebd6de
#: ../../../../1.8/docs/topics/forms/media.txt:186
msgid ""
"For example, the static definition for our Calendar Widget could also be "
"defined in a dynamic fashion::"
msgstr ""

# f68637f32c2146e4800bdf205629471e
#: ../../../../1.8/docs/topics/forms/media.txt:195
msgid ""
"See the section on `Media objects`_ for more details on how to construct "
"return values for dynamic ``media`` properties."
msgstr ""

# 9461bb661305489a9413188306518228
#: ../../../../1.8/docs/topics/forms/media.txt:201
msgid "Paths in asset definitions"
msgstr ""

# 68cdbcd80a2f41ffab98d5a95fe4c5a8
#: ../../../../1.8/docs/topics/forms/media.txt:203
msgid ""
"Paths used to specify assets can be either relative or absolute. If a path "
"starts with ``/``, ``http://`` or ``https://``, it will be interpreted as an"
" absolute path, and left as-is. All other paths will be prepended with the "
"value of the appropriate prefix."
msgstr ""

# 70eb1c93ee5a4264aa92fbe841790fa1
#: ../../../../1.8/docs/topics/forms/media.txt:208
msgid ""
"As part of the introduction of the :doc:`staticfiles app "
"</ref/contrib/staticfiles>` two new settings were added to refer to \"static"
" files\" (images, CSS, JavaScript, etc.) that are needed to render a "
"complete web page: :setting:`STATIC_URL` and :setting:`STATIC_ROOT`."
msgstr ""

# 56d055eb9e304d12b4c5838447055e16
#: ../../../../1.8/docs/topics/forms/media.txt:213
msgid ""
"To find the appropriate prefix to use, Django will check if the "
":setting:`STATIC_URL` setting is not ``None`` and automatically fall back to"
" using :setting:`MEDIA_URL`. For example, if the :setting:`MEDIA_URL` for "
"your site was ``'http://uploads.example.com/'`` and :setting:`STATIC_URL` "
"was ``None``::"
msgstr ""

# 4f77cd01691a40b48a8612519e5c0b32
#: ../../../../1.8/docs/topics/forms/media.txt:233
msgid "But if :setting:`STATIC_URL` is ``'http://static.example.com/'``::"
msgstr ""

# 63ff1db83f7049798ed35b6cf9e8f7ff
#: ../../../../1.8/docs/topics/forms/media.txt:243
msgid "``Media`` objects"
msgstr ""

# 6e275ba5c8e04c8e866f1762311fd273
#: ../../../../1.8/docs/topics/forms/media.txt:245
msgid ""
"When you interrogate the ``media`` attribute of a widget or form, the value "
"that is returned is a ``forms.Media`` object. As we have already seen, the "
"string representation of a ``Media`` object is the HTML required to include "
"the relevant files in the ``<head>`` block of your HTML page."
msgstr ""

# a6064aea100e47579775c77fb030125f
#: ../../../../1.8/docs/topics/forms/media.txt:251
msgid "However, ``Media`` objects have some other interesting properties."
msgstr ""

# 7f2755906576430cb7d30479b3d40a39
#: ../../../../1.8/docs/topics/forms/media.txt:254
msgid "Subsets of assets"
msgstr ""

# 0646adc11f9c42d591f9797c5ff1a7cf
#: ../../../../1.8/docs/topics/forms/media.txt:256
msgid ""
"If you only want files of a particular type, you can use the subscript "
"operator to filter out a medium of interest. For example::"
msgstr ""

# daea4373c4d74231895e937374689394
#: ../../../../1.8/docs/topics/forms/media.txt:268
msgid ""
"When you use the subscript operator, the value that is returned is a new "
"``Media`` object -- but one that only contains the media of interest."
msgstr ""

# a2fc7fe397d042bcb17488e1424539bc
#: ../../../../1.8/docs/topics/forms/media.txt:272
msgid "Combining ``Media`` objects"
msgstr ""

# d4614996c0a745998d3469ad9197112d
#: ../../../../1.8/docs/topics/forms/media.txt:274
msgid ""
"``Media`` objects can also be added together. When two ``Media`` objects are"
" added, the resulting ``Media`` object contains the union of the assets "
"specified by both::"
msgstr ""

# 4dfb6a0ec0644820aa188b1b9fc765cf
#: ../../../../1.8/docs/topics/forms/media.txt:299
msgid "``Media`` on Forms"
msgstr ""

# 6a223e05653d4929a2c598fce05a3a48
#: ../../../../1.8/docs/topics/forms/media.txt:301
msgid ""
"Widgets aren't the only objects that can have ``media`` definitions -- forms"
" can also define ``media``. The rules for ``media`` definitions on forms are"
" the same as the rules for widgets: declarations can be static or dynamic; "
"path and inheritance rules for those declarations are exactly the same."
msgstr ""

# 2b26b9da45a947e4936027346ba39cff
#: ../../../../1.8/docs/topics/forms/media.txt:307
msgid ""
"Regardless of whether you define a ``media`` declaration, *all* Form objects"
" have a ``media`` property. The default value for this property is the "
"result of adding the ``media`` definitions for all widgets that are part of "
"the form::"
msgstr ""

# b9992f1b14b049e6b7a486ea7602a455
#: ../../../../1.8/docs/topics/forms/media.txt:324
msgid ""
"If you want to associate additional assets with a form -- for example, CSS "
"for form layout -- simply add a ``Media`` declaration to the form::"
msgstr ""

# b32016b3b85c4fe8851288c620b9ce4b
#: ../../../../1.8/docs/topics/forms/modelforms.txt:3
msgid "Creating forms from models"
msgstr ""

# 7b6ccc99a35a4b798c12ee240891264c
#: ../../../../1.8/docs/topics/forms/modelforms.txt:11
msgid "``ModelForm``"
msgstr ""

# b1131c3a82c84e808f0697e9427fdd9b
#: ../../../../1.8/docs/topics/forms/modelforms.txt:14
msgid ""
"If you're building a database-driven app, chances are you'll have forms that"
" map closely to Django models. For instance, you might have a "
"``BlogComment`` model, and you want to create a form that lets people submit"
" comments. In this case, it would be redundant to define the field types in "
"your form, because you've already defined the fields in your model."
msgstr ""

# b653cb9e3c084460a36b148f6f9ea9f7
#: ../../../../1.8/docs/topics/forms/modelforms.txt:20
msgid ""
"For this reason, Django provides a helper class that lets you create a "
"``Form`` class from a Django model."
msgstr ""

# 18f272a64eb04c7380547a0c19fb3920
#: ../../../../1.8/docs/topics/forms/modelforms.txt:44
msgid ""
"The generated ``Form`` class will have a form field for every model field "
"specified, in the order specified in the ``fields`` attribute."
msgstr ""

# 4e04eeb5b15e4566ad5a66a2f44d41a7
#: ../../../../1.8/docs/topics/forms/modelforms.txt:47
msgid ""
"Each model field has a corresponding default form field. For example, a "
"``CharField`` on a model is represented as a ``CharField`` on a form. A "
"model ``ManyToManyField`` is represented as a ``MultipleChoiceField``. Here "
"is the full list of conversions:"
msgstr ""

# 817142a8b61b4080812892335bfb360a
#: ../../../../1.8/docs/topics/forms/modelforms.txt:55
msgid "Model field"
msgstr ""

# 5eddde80466348009525edd21de0d7c5
#: ../../../../1.8/docs/topics/forms/modelforms.txt:55
msgid "Form field"
msgstr ""

# a3a212b127d34f0fae632060a008891c
#: ../../../../1.8/docs/topics/forms/modelforms.txt:57
msgid ":class:`AutoField`"
msgstr ""

# ea3e43a8993d4d02b28abf7b67834a13
#: ../../../../1.8/docs/topics/forms/modelforms.txt:57
msgid "Not represented in the form"
msgstr ""

# 5ed5ae57f6dc4e65b6457bbacbc9a3b4
#: ../../../../1.8/docs/topics/forms/modelforms.txt:59
msgid ":class:`BigIntegerField`"
msgstr ""

# 469a1f6c234e4eab934eaed8a0071f34
#: ../../../../1.8/docs/topics/forms/modelforms.txt:59
msgid ""
":class:`~django.forms.IntegerField` with ``min_value`` set to "
"-9223372036854775808 and ``max_value`` set to 9223372036854775807."
msgstr ""

# 74b995fc61e349cfa63c683627d92426
#: ../../../../1.8/docs/topics/forms/modelforms.txt:63
msgid ":class:`BooleanField`"
msgstr ""

# a3f934205ada49c78024f4d678ecefd8
#: ../../../../1.8/docs/topics/forms/modelforms.txt:63
msgid ":class:`~django.forms.BooleanField`"
msgstr ""

# 8042c60675b741dfab2123ae6b8bd5fa
#: ../../../../1.8/docs/topics/forms/modelforms.txt:65
msgid ":class:`CharField`"
msgstr ""

# 108fce32bdd84f698d691f6d91a9b30e
#: ../../../../1.8/docs/topics/forms/modelforms.txt:65
msgid ""
":class:`~django.forms.CharField` with ``max_length`` set to the model "
"field's ``max_length``"
msgstr ""

# 9f51d3f83c7d40feb38d7d27dbcfab12
#: ../../../../1.8/docs/topics/forms/modelforms.txt:69
msgid ":class:`CommaSeparatedIntegerField`"
msgstr ""

# b7f5ede126ce467783bcbb237bcbda5b
#: ../../../../1.8/docs/topics/forms/modelforms.txt:69
msgid ":class:`~django.forms.CharField`"
msgstr ""

# 57c7786a10da499d9198234ba5412f5a
#: ../../../../1.8/docs/topics/forms/modelforms.txt:71
msgid ":class:`DateField`"
msgstr ""

# a0e122c687f8497ca623615ff00d0d05
#: ../../../../1.8/docs/topics/forms/modelforms.txt:71
msgid ":class:`~django.forms.DateField`"
msgstr ""

# d7a4592797ce4904af70c61d5c4a2d1f
#: ../../../../1.8/docs/topics/forms/modelforms.txt:73
msgid ":class:`DateTimeField`"
msgstr ""

# 94e9518b7c3044ca9f42670cdbdb4be7
#: ../../../../1.8/docs/topics/forms/modelforms.txt:73
msgid ":class:`~django.forms.DateTimeField`"
msgstr ""

# fa870d9869454c549eba2acf411f79b4
#: ../../../../1.8/docs/topics/forms/modelforms.txt:75
msgid ":class:`DecimalField`"
msgstr ""

# f062b0bb12324cd2abec33f8f5b3a530
#: ../../../../1.8/docs/topics/forms/modelforms.txt:75
msgid ":class:`~django.forms.DecimalField`"
msgstr ""

# 7ba271d8ff7f4074a5beaa7503269ae1
#: ../../../../1.8/docs/topics/forms/modelforms.txt:77
msgid ":class:`EmailField`"
msgstr ""

# aae037168e4b42c0b98844acc56b1ea0
#: ../../../../1.8/docs/topics/forms/modelforms.txt:77
msgid ":class:`~django.forms.EmailField`"
msgstr ""

# 038c8d859bba40f6931f2ec46f066171
#: ../../../../1.8/docs/topics/forms/modelforms.txt:79
msgid ":class:`FileField`"
msgstr ""

# 90bcd2dd3d0e4556a0742cc77da706a5
#: ../../../../1.8/docs/topics/forms/modelforms.txt:79
msgid ":class:`~django.forms.FileField`"
msgstr ""

# 7c80116a9f654f4f92efed772052a9bc
#: ../../../../1.8/docs/topics/forms/modelforms.txt:81
msgid ":class:`FilePathField`"
msgstr ""

# d690c7d6f10d4b379db84320d2031d05
#: ../../../../1.8/docs/topics/forms/modelforms.txt:81
msgid ":class:`~django.forms.FilePathField`"
msgstr ""

# b80667eed2e547f3a4916e321f9f4e4f
#: ../../../../1.8/docs/topics/forms/modelforms.txt:83
msgid ":class:`FloatField`"
msgstr ""

# da18c7b12f044ecfb6da09b8636d609c
#: ../../../../1.8/docs/topics/forms/modelforms.txt:83
msgid ":class:`~django.forms.FloatField`"
msgstr ""

# d0c7d0a796f1497a8a1cf8481aaecfd4
#: ../../../../1.8/docs/topics/forms/modelforms.txt:85
msgid ":class:`ForeignKey`"
msgstr ""

# 5c01222b17d94f1ca371b74ad96310b7
#: ../../../../1.8/docs/topics/forms/modelforms.txt:85
msgid ":class:`~django.forms.ModelChoiceField` (see below)"
msgstr ""

# c98b75e3977b438ab261103f7a927da1
#: ../../../../1.8/docs/topics/forms/modelforms.txt:88
msgid "``ImageField``"
msgstr ""

# 31751fc7f5d74946b6a959d14075f9b2
#: ../../../../1.8/docs/topics/forms/modelforms.txt:88
msgid ":class:`~django.forms.ImageField`"
msgstr ""

# ce5563ec48c74073a9775fa3499969e8
#: ../../../../1.8/docs/topics/forms/modelforms.txt:90
msgid ":class:`IntegerField`"
msgstr ""

# e03710b63b8142388d3d83c79eee7c39
# b902cc545fb84551adbaeda5a585ddd6
# ea11c808f78044bf87bd24fc45d6045c
# 9fa7fb638fd4482d88bd978b8a0725f9
#: ../../../../1.8/docs/topics/forms/modelforms.txt:90
#: ../../../../1.8/docs/topics/forms/modelforms.txt:101
#: ../../../../1.8/docs/topics/forms/modelforms.txt:103
#: ../../../../1.8/docs/topics/forms/modelforms.txt:107
msgid ":class:`~django.forms.IntegerField`"
msgstr ""

# aa5f13ddf48c4a868d36cd43985993db
# d7e9a66684b3408fb08dbd814d785f46
#: ../../../../1.8/docs/topics/forms/modelforms.txt:92
#: ../../../../1.8/docs/topics/forms/modelforms.txt:92
msgid "``IPAddressField``"
msgstr ""

# 88865c8759e742e7a95d4da2fdb827ec
#: ../../../../1.8/docs/topics/forms/modelforms.txt:94
msgid ":class:`GenericIPAddressField`"
msgstr ""

# 22950867fe10414f9d876eb045cba9cf
#: ../../../../1.8/docs/topics/forms/modelforms.txt:94
msgid ":class:`~django.forms.GenericIPAddressField`"
msgstr ""

# f16ccd41afb14d0c8618917a8b9f5ee0
#: ../../../../1.8/docs/topics/forms/modelforms.txt:96
msgid ":class:`ManyToManyField`"
msgstr ""

# 689ab7aa01d540f6b613b3df47ecca92
#: ../../../../1.8/docs/topics/forms/modelforms.txt:96
msgid ":class:`~django.forms.ModelMultipleChoiceField` (see below)"
msgstr ""

# 51db255d55c040439f62e4fbe9a8b9a4
#: ../../../../1.8/docs/topics/forms/modelforms.txt:99
msgid ":class:`NullBooleanField`"
msgstr ""

# c3a70721e7e44846bd0a7039ba8036e3
#: ../../../../1.8/docs/topics/forms/modelforms.txt:99
msgid ":class:`~django.forms.NullBooleanField`"
msgstr ""

# b26dd76b78014a8ba64af72118742f7f
#: ../../../../1.8/docs/topics/forms/modelforms.txt:101
msgid ":class:`PositiveIntegerField`"
msgstr ""

# 68b183ba7f294c5a89dc65f3f530d6da
#: ../../../../1.8/docs/topics/forms/modelforms.txt:103
msgid ":class:`PositiveSmallIntegerField`"
msgstr ""

# 6ae4872e99124862b69f625dbbb173d6
#: ../../../../1.8/docs/topics/forms/modelforms.txt:105
msgid ":class:`SlugField`"
msgstr ""

# 41c08787c3664d1c81ff349a5b774da9
#: ../../../../1.8/docs/topics/forms/modelforms.txt:105
msgid ":class:`~django.forms.SlugField`"
msgstr ""

# 4d704adb9056445e988d56562d068fc1
#: ../../../../1.8/docs/topics/forms/modelforms.txt:107
msgid ":class:`SmallIntegerField`"
msgstr ""

# f808846eedc54da4b1f6d544e24bb909
#: ../../../../1.8/docs/topics/forms/modelforms.txt:109
msgid ":class:`TextField`"
msgstr ""

# 3c92a6ee5a5c4301a3c07c043ddff978
#: ../../../../1.8/docs/topics/forms/modelforms.txt:109
msgid ":class:`~django.forms.CharField` with ``widget=forms.Textarea``"
msgstr ""

# 122481f9e8574551a6b879f1c42196fc
#: ../../../../1.8/docs/topics/forms/modelforms.txt:112
msgid ":class:`TimeField`"
msgstr ""

# 756e6c493fd7459f9f74b026e3c75a98
#: ../../../../1.8/docs/topics/forms/modelforms.txt:112
msgid ":class:`~django.forms.TimeField`"
msgstr ""

# 2414abe19cd749658f30b04df83b76ba
#: ../../../../1.8/docs/topics/forms/modelforms.txt:114
msgid ":class:`URLField`"
msgstr ""

# fefdd51fa0a84f7985315664a0c931dd
#: ../../../../1.8/docs/topics/forms/modelforms.txt:114
msgid ":class:`~django.forms.URLField`"
msgstr ""

# 0235e95f277740b79c786b6dc94a2f6a
#: ../../../../1.8/docs/topics/forms/modelforms.txt:119
msgid ""
"As you might expect, the ``ForeignKey`` and ``ManyToManyField`` model field "
"types are special cases:"
msgstr ""

# 4f09b21c25cf464d923bf7da5ecd4eca
#: ../../../../1.8/docs/topics/forms/modelforms.txt:122
msgid ""
"``ForeignKey`` is represented by ``django.forms.ModelChoiceField``, which is"
" a ``ChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""

# 15b64193f2e34390a87c435190ef2642
#: ../../../../1.8/docs/topics/forms/modelforms.txt:125
msgid ""
"``ManyToManyField`` is represented by "
"``django.forms.ModelMultipleChoiceField``, which is a "
"``MultipleChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""

# 8f095371ef5640aa939f24ec2c64c528
#: ../../../../1.8/docs/topics/forms/modelforms.txt:129
msgid "In addition, each generated form field has attributes set as follows:"
msgstr ""

# 4d5f8b247d654e53bfc12d81c7fe0589
#: ../../../../1.8/docs/topics/forms/modelforms.txt:131
msgid ""
"If the model field has ``blank=True``, then ``required`` is set to ``False``"
" on the form field. Otherwise, ``required=True``."
msgstr ""

# f287565a569d431f830bbb7847023ece
#: ../../../../1.8/docs/topics/forms/modelforms.txt:134
msgid ""
"The form field's ``label`` is set to the ``verbose_name`` of the model "
"field, with the first character capitalized."
msgstr ""

# 5a94b905891f457b8d9fcd90eef3c537
#: ../../../../1.8/docs/topics/forms/modelforms.txt:137
msgid ""
"The form field's ``help_text`` is set to the ``help_text`` of the model "
"field."
msgstr ""

# 6a56bcf43e164983aa8bd4a5b18b0835
#: ../../../../1.8/docs/topics/forms/modelforms.txt:140
msgid ""
"If the model field has ``choices`` set, then the form field's ``widget`` "
"will be set to ``Select``, with choices coming from the model field's "
"``choices``. The choices will normally include the blank choice which is "
"selected by default. If the field is required, this forces the user to make "
"a selection. The blank choice will not be included if the model field has "
"``blank=False`` and an explicit ``default`` value (the ``default`` value "
"will be initially selected instead)."
msgstr ""

# f232a67e5aa44377b55a904d8cee71ed
#: ../../../../1.8/docs/topics/forms/modelforms.txt:148
msgid ""
"Finally, note that you can override the form field used for a given model "
"field. See `Overriding the default fields`_ below."
msgstr ""

# 107f450bbff94b04b829bc9e6d8ffbcd
#: ../../../../1.8/docs/topics/forms/modelforms.txt:154
msgid "Consider this set of models::"
msgstr ""

# 48e514ff114842f391c3e631578d85f9
#: ../../../../1.8/docs/topics/forms/modelforms.txt:188
msgid ""
"With these models, the ``ModelForm`` subclasses above would be roughly "
"equivalent to this (the only difference being the ``save()`` method, which "
"we'll discuss in a moment.)::"
msgstr ""

# 39fe1b8af23f40beb85d145246d6448c
#: ../../../../1.8/docs/topics/forms/modelforms.txt:207
msgid "Validation on a ``ModelForm``"
msgstr ""

# 91fa9f40b2a54242b8222495bfb68e9b
#: ../../../../1.8/docs/topics/forms/modelforms.txt:209
msgid "There are two main steps involved in validating a ``ModelForm``:"
msgstr ""

# f2bbf44ab53148fc8534ab0b57090bbe
#: ../../../../1.8/docs/topics/forms/modelforms.txt:211
msgid ":ref:`Validating the form <form-and-field-validation>`"
msgstr ""

# 9426d56c12424223bab23f2edf688ed5
#: ../../../../1.8/docs/topics/forms/modelforms.txt:212
msgid ":ref:`Validating the model instance <validating-objects>`"
msgstr ""

# d56d929d5fc8472183c4d003aceafd1b
#: ../../../../1.8/docs/topics/forms/modelforms.txt:214
msgid ""
"Just like normal form validation, model form validation is triggered "
"implicitly when calling :meth:`~django.forms.Form.is_valid()` or accessing "
"the :attr:`~django.forms.Form.errors` attribute and explicitly when calling "
"``full_clean()``, although you will typically not use the latter method in "
"practice."
msgstr ""

# b5f2e90efe7a4ebd9139357ceac5fe51
#: ../../../../1.8/docs/topics/forms/modelforms.txt:220
msgid ""
"``Model`` validation (:meth:`Model.full_clean() "
"<django.db.models.Model.full_clean()>`) is triggered from within the form "
"validation step, right after the form's ``clean()`` method is called."
msgstr ""

# 1272926c30ec41ba991bb96f2247d9ac
#: ../../../../1.8/docs/topics/forms/modelforms.txt:226
msgid ""
"The cleaning process modifies the model instance passed to the ``ModelForm``"
" constructor in various ways. For instance, any date fields on the model are"
" converted into actual date objects. Failed validation may leave the "
"underlying model instance in an inconsistent state and therefore it's not "
"recommended to reuse it."
msgstr ""

# b732097f414847f1aad5c326445077d9
#: ../../../../1.8/docs/topics/forms/modelforms.txt:235
msgid "Overriding the clean() method"
msgstr ""

# b3eb17d968b7487ba3f94f9a503d00ae
#: ../../../../1.8/docs/topics/forms/modelforms.txt:237
msgid ""
"You can override the ``clean()`` method on a model form to provide "
"additional validation in the same way you can on a normal form."
msgstr ""

# 2b62d9c7a6934fab8d05268afbaf8015
#: ../../../../1.8/docs/topics/forms/modelforms.txt:240
msgid ""
"A model form instance attached to a model object will contain an "
"``instance`` attribute that gives its methods access to that specific model "
"instance."
msgstr ""

# a3689cbc3d3e4a3486bd0d0ae9edc9f0
#: ../../../../1.8/docs/topics/forms/modelforms.txt:245
msgid ""
"The ``ModelForm.clean()`` method sets a flag that makes the :ref:`model "
"validation <validating-objects>` step validate the uniqueness of model "
"fields that are marked as ``unique``, ``unique_together`` or "
"``unique_for_date|month|year``."
msgstr ""

# dcab9ec941fa4b79aaee81c128059d0b
#: ../../../../1.8/docs/topics/forms/modelforms.txt:250
msgid ""
"If you would like to override the ``clean()`` method and maintain this "
"validation, you must call the parent class's ``clean()`` method."
msgstr ""

# 46edac41adb447a2bec8ead61844a6f0
#: ../../../../1.8/docs/topics/forms/modelforms.txt:254
msgid "Interaction with model validation"
msgstr ""

# b26973ccead64f7996b4c50bf9427fe6
#: ../../../../1.8/docs/topics/forms/modelforms.txt:256
msgid ""
"As part of the validation process, ``ModelForm`` will call the ``clean()`` "
"method of each field on your model that has a corresponding field on your "
"form. If you have excluded any model fields, validation will not be run on "
"those fields. See the :doc:`form validation </ref/forms/validation>` "
"documentation for more on how field cleaning and validation work."
msgstr ""

# 4509827c6b3246cabe56f234f5f661ba
#: ../../../../1.8/docs/topics/forms/modelforms.txt:262
msgid ""
"The model's ``clean()`` method will be called before any uniqueness checks "
"are made. See :ref:`Validating objects <validating-objects>` for more "
"information on the model's ``clean()`` hook."
msgstr ""

# 9b4a3fa78e4349f8960f90fdd80f5919
#: ../../../../1.8/docs/topics/forms/modelforms.txt:269
msgid "Considerations regarding model's ``error_messages``"
msgstr ""

# 15ddc83db45347dcb0739f903a9654c2
#: ../../../../1.8/docs/topics/forms/modelforms.txt:271
msgid ""
"Error messages defined at the :attr:`form field "
"<django.forms.Field.error_messages>` level or at the :ref:`form Meta "
"<modelforms-overriding-default-fields>` level always take precedence over "
"the error messages defined at the :attr:`model field "
"<django.db.models.Field.error_messages>` level."
msgstr ""

# b47255bfc6b04f7eac99bcd332baaab6
#: ../../../../1.8/docs/topics/forms/modelforms.txt:277
msgid ""
"Error messages  defined on :attr:`model fields "
"<django.db.models.Field.error_messages>` are only used when the "
"``ValidationError`` is raised during the :ref:`model validation <validating-"
"objects>` step and no corresponding error messages are defined at the form "
"level."
msgstr ""

# 3df01a39cd154e1ba05468bc28cf0bdf
#: ../../../../1.8/docs/topics/forms/modelforms.txt:285
msgid ""
"You can override the error messages from ``NON_FIELD_ERRORS`` raised by "
"model validation by adding the "
":data:`~django.core.exceptions.NON_FIELD_ERRORS` key to the "
"``error_messages`` dictionary of the ``ModelForm``’s inner ``Meta`` class::"
msgstr ""

# 26b5cebea6904cdda358a6e214b5363e
#: ../../../../1.8/docs/topics/forms/modelforms.txt:301
msgid "The ``save()`` method"
msgstr ""

# 32ef29ba7f4444d0b5a5b4bf21deee64
#: ../../../../1.8/docs/topics/forms/modelforms.txt:303
msgid ""
"Every ``ModelForm`` also has a ``save()`` method. This method creates and "
"saves a database object from the data bound to the form. A subclass of "
"``ModelForm`` can accept an existing model instance as the keyword argument "
"``instance``; if this is supplied, ``save()`` will update that instance. If "
"it's not supplied, ``save()`` will create a new instance of the specified "
"model:"
msgstr ""

# af127e87c52e464194cd6908f9a40c27
#: ../../../../1.8/docs/topics/forms/modelforms.txt:326
msgid ""
"Note that if the form :ref:`hasn't been validated <validation-on-"
"modelform>`, calling ``save()`` will do so by checking ``form.errors``. A "
"``ValueError`` will be raised if the data in the form doesn't validate -- "
"i.e., if ``form.errors`` evaluates to ``True``."
msgstr ""

# 3759ceda44a9478f806c3fd667ff9e26
#: ../../../../1.8/docs/topics/forms/modelforms.txt:331
msgid ""
"This ``save()`` method accepts an optional ``commit`` keyword argument, "
"which accepts either ``True`` or ``False``. If you call ``save()`` with "
"``commit=False``, then it will return an object that hasn't yet been saved "
"to the database. In this case, it's up to you to call ``save()`` on the "
"resulting model instance. This is useful if you want to do custom processing"
" on the object before saving it, or if you want to use one of the "
"specialized :ref:`model saving options <ref-models-force-insert>`. "
"``commit`` is ``True`` by default."
msgstr ""

# 12d6b295cd6442929c5444bf29592589
#: ../../../../1.8/docs/topics/forms/modelforms.txt:340
msgid ""
"Another side effect of using ``commit=False`` is seen when your model has a "
"many-to-many relation with another model. If your model has a many-to-many "
"relation and you specify ``commit=False`` when you save a form, Django "
"cannot immediately save the form data for the many-to-many relation. This is"
" because it isn't possible to save many-to-many data for an instance until "
"the instance exists in the database."
msgstr ""

# 1abfafda62f742caa973b8a1029b7515
#: ../../../../1.8/docs/topics/forms/modelforms.txt:347
msgid ""
"To work around this problem, every time you save a form using "
"``commit=False``, Django adds a ``save_m2m()`` method to your ``ModelForm`` "
"subclass. After you've manually saved the instance produced by the form, you"
" can invoke ``save_m2m()`` to save the many-to-many form data. For example:"
msgstr ""

# 667cf0a458fc4e38aba2e703a257b7ab
#: ../../../../1.8/docs/topics/forms/modelforms.txt:369
msgid ""
"Calling ``save_m2m()`` is only required if you use ``save(commit=False)``. "
"When you use a simple ``save()`` on a form, all data -- including many-to-"
"many data -- is saved without the need for any additional method calls. For "
"example:"
msgstr ""

# 1aaa75fea3e342b3acc07de059ea495d
#: ../../../../1.8/docs/topics/forms/modelforms.txt:383
msgid ""
"Other than the ``save()`` and ``save_m2m()`` methods, a ``ModelForm`` works "
"exactly the same way as any other ``forms`` form. For example, the "
"``is_valid()`` method is used to check for validity, the ``is_multipart()`` "
"method is used to determine whether a form requires multipart file upload "
"(and hence whether ``request.FILES`` must be passed to the form), etc. See "
":ref:`binding-uploaded-files` for more information."
msgstr ""

# 7046ce507ed84c8a948ef7048c40d32a
#: ../../../../1.8/docs/topics/forms/modelforms.txt:393
msgid "Selecting the fields to use"
msgstr ""

# db6d049607d948e4a145973a2bc60edf
#: ../../../../1.8/docs/topics/forms/modelforms.txt:395
msgid ""
"It is strongly recommended that you explicitly set all fields that should be"
" edited in the form using the ``fields`` attribute. Failure to do so can "
"easily lead to security problems when a form unexpectedly allows a user to "
"set certain fields, especially when new fields are added to a model. "
"Depending on how the form is rendered, the problem may not even be visible "
"on the web page."
msgstr ""

# 98e49f76494642799117992378a1687e
#: ../../../../1.8/docs/topics/forms/modelforms.txt:401
msgid ""
"The alternative approach would be to include all fields automatically, or "
"blacklist only some. This fundamental approach is known to be much less "
"secure and has led to serious exploits on major websites (e.g. `GitHub "
"<https://github.com/blog/1068-public-key-security-vulnerability-and-"
"mitigation>`_)."
msgstr ""

# cf5d05eed44f4ef3af32c85f4061fdcd
#: ../../../../1.8/docs/topics/forms/modelforms.txt:406
msgid ""
"There are, however, two shortcuts available for cases where you can "
"guarantee these security concerns do not apply to you:"
msgstr ""

# c11c4739727640799466f6003ee497dd
#: ../../../../1.8/docs/topics/forms/modelforms.txt:409
msgid ""
"Set the ``fields`` attribute to the special value ``'__all__'`` to indicate "
"that all fields in the model should be used. For example::"
msgstr ""

# 090999ac018f4e3eaa7bde60d7bca3b3
#: ../../../../1.8/docs/topics/forms/modelforms.txt:419
msgid ""
"Set the ``exclude`` attribute of the ``ModelForm``’s inner ``Meta`` class to"
" a list of fields to be excluded from the form."
msgstr ""

# ff219c413efc455d8722e17056f2de10
#: ../../../../1.8/docs/topics/forms/modelforms.txt:429
msgid ""
"Since the ``Author`` model has the 3 fields ``name``, ``title`` and "
"``birth_date``, this will result in the fields ``name`` and ``birth_date`` "
"being present on the form."
msgstr ""

# 0cbae64c20a4491fb27d2e4231bc2294
#: ../../../../1.8/docs/topics/forms/modelforms.txt:433
msgid ""
"If either of these are used, the order the fields appear in the form will be"
" the order the fields are defined in the model, with ``ManyToManyField`` "
"instances appearing last."
msgstr ""

# dc0b6911fc994054b14b5f88ef0840ca
#: ../../../../1.8/docs/topics/forms/modelforms.txt:437
msgid ""
"In addition, Django applies the following rule: if you set "
"``editable=False`` on the model field, *any* form created from the model via"
" ``ModelForm`` will not include that field."
msgstr ""

# 83085392ebc940e29d0859a00f7bb4bc
#: ../../../../1.8/docs/topics/forms/modelforms.txt:443
msgid ""
"In older versions, omitting both ``fields`` and ``exclude`` resulted in a "
"form with all the model's fields. Doing this now raises an "
":exc:`~django.core.exceptions.ImproperlyConfigured` exception."
msgstr ""

# e229ef9c0a61478b91720b26372722ea
#: ../../../../1.8/docs/topics/forms/modelforms.txt:449
msgid ""
"Any fields not included in a form by the above logic will not be set by the "
"form's ``save()`` method. Also, if you manually add the excluded fields back"
" to the form, they will not be initialized from the model instance."
msgstr ""

# d66cf35f750541aa85efbe82ed8d9623
#: ../../../../1.8/docs/topics/forms/modelforms.txt:454
msgid ""
"Django will prevent any attempt to save an incomplete model, so if the model"
" does not allow the missing fields to be empty, and does not provide a "
"default value for the missing fields, any attempt to ``save()`` a "
"``ModelForm`` with missing fields will fail.  To avoid this failure, you "
"must instantiate your model with initial values for the missing, but "
"required fields::"
msgstr ""

# 88bcdf9579f94289a77bee3630769c42
#: ../../../../1.8/docs/topics/forms/modelforms.txt:465
msgid ""
"Alternatively, you can use ``save(commit=False)`` and manually set any extra"
" required fields::"
msgstr ""

# 97eb4bd79a2a45158dbeddf5ac6a256f
#: ../../../../1.8/docs/topics/forms/modelforms.txt:473
msgid ""
"See the `section on saving forms`_ for more details on using "
"``save(commit=False)``."
msgstr ""

# cc8b4084185d435c80f2a75f2b27c5d5
#: ../../../../1.8/docs/topics/forms/modelforms.txt:481
msgid "Overriding the default fields"
msgstr ""

# 5f2d7d938192429a83811e9f1569d1d9
#: ../../../../1.8/docs/topics/forms/modelforms.txt:483
msgid ""
"The default field types, as described in the `Field types`_ table above, are"
" sensible defaults. If you have a ``DateField`` in your model, chances are "
"you'd want that to be represented as a ``DateField`` in your form. But "
"``ModelForm`` gives you the flexibility of changing the form field type and "
"widget for a given model field."
msgstr ""

# 4a93c9ab75874e0795c859ba3fa5f3cb
#: ../../../../1.8/docs/topics/forms/modelforms.txt:489
msgid ""
"To specify a custom widget for a field, use the ``widgets`` attribute of the"
" inner ``Meta`` class. This should be a dictionary mapping field names to "
"widget classes or instances."
msgstr ""

# 96ae4238b0574436849adb76456327a6
#: ../../../../1.8/docs/topics/forms/modelforms.txt:493
msgid ""
"For example, if you want the ``CharField`` for the ``name`` attribute of "
"``Author`` to be represented by a ``<textarea>`` instead of its default "
"``<input type=\"text\">``, you can override the field's widget::"
msgstr ""

# 3c9648affa3c498498bf0d43443c080a
#: ../../../../1.8/docs/topics/forms/modelforms.txt:508
msgid ""
"The ``widgets`` dictionary accepts either widget instances (e.g., "
"``Textarea(...)``) or classes (e.g., ``Textarea``)."
msgstr ""

# 75b1a4a7c8db465d8f6d6a8c1312d60c
#: ../../../../1.8/docs/topics/forms/modelforms.txt:511
msgid ""
"Similarly, you can specify the ``labels``, ``help_texts`` and "
"``error_messages`` attributes of the inner ``Meta`` class if you want to "
"further customize a field."
msgstr ""

# f6efbf77a9044924ba436546ae3c894d
#: ../../../../1.8/docs/topics/forms/modelforms.txt:514
msgid ""
"For example if you wanted to customize the wording of all user facing "
"strings for the ``name`` field::"
msgstr ""

# 084204b4a815416492c5d9ced53db4ad
#: ../../../../1.8/docs/topics/forms/modelforms.txt:535
msgid ""
"Finally, if you want complete control over of a field -- including its type,"
" validators, etc. -- you can do this by declaratively specifying fields like"
" you would in a regular ``Form``."
msgstr ""

# 968ed2458c21476999f0ad3f5e47a753
#: ../../../../1.8/docs/topics/forms/modelforms.txt:539
msgid ""
"For example, if you wanted to use ``MySlugFormField`` for the ``slug`` "
"field, you could do the following::"
msgstr ""

# 8280885d3ca149b6bf4af99fc50269e1
#: ../../../../1.8/docs/topics/forms/modelforms.txt:553
msgid ""
"If you want to specify a field's validators, you can do so by defining the "
"field declaratively and setting its ``validators`` parameter::"
msgstr ""

# 99ed1479544948f98cfa2b1c3f4338c2
#: ../../../../1.8/docs/topics/forms/modelforms.txt:568
msgid ""
"When you explicitly instantiate a form field like this, it is important to "
"understand how ``ModelForm`` and regular ``Form`` are related."
msgstr ""

# d938bde857eb4b2f8aa6f28d5cb1cf2e
#: ../../../../1.8/docs/topics/forms/modelforms.txt:571
msgid ""
"``ModelForm`` is a regular ``Form`` which can automatically generate certain"
" fields. The fields that are automatically generated depend on the content "
"of the ``Meta`` class and on which fields have already been defined "
"declaratively. Basically, ``ModelForm`` will **only** generate fields that "
"are **missing** from the form, or in other words, fields that weren't "
"defined declaratively."
msgstr ""

# 34b5ded40c354988a1459a39a6fc16d0
#: ../../../../1.8/docs/topics/forms/modelforms.txt:578
msgid ""
"Fields defined declaratively are left as-is, therefore any customizations "
"made to ``Meta`` attributes such as ``widgets``, ``labels``, ``help_texts``,"
" or ``error_messages`` are ignored; these only apply to fields that are "
"generated automatically."
msgstr ""

# 0f9aa4cd319c4ea9bb11b4aad273c073
#: ../../../../1.8/docs/topics/forms/modelforms.txt:583
msgid ""
"Similarly, fields defined declaratively do not draw their attributes like "
"``max_length`` or ``required`` from the corresponding model. If you want to "
"maintain the behavior specified in the model, you must set the relevant "
"arguments explicitly when declaring the form field."
msgstr ""

# 0e19ce54a8a6431b94e05757dc4b3c80
#: ../../../../1.8/docs/topics/forms/modelforms.txt:588
msgid "For example, if the ``Article`` model looks like this::"
msgstr ""

# 60fb5edfe18547468e17dc1e92d53a66
#: ../../../../1.8/docs/topics/forms/modelforms.txt:595
msgid ""
"and you want to do some custom validation for ``headline``, while keeping "
"the ``blank`` and ``help_text`` values as specified, you might define "
"``ArticleForm`` like this::"
msgstr ""

# c20ca851ca8740d59046b0703f5e1377
#: ../../../../1.8/docs/topics/forms/modelforms.txt:607
msgid ""
"You must ensure that the type of the form field can be used to set the "
"contents of the corresponding model field. When they are not compatible, you"
" will get a ``ValueError`` as no implicit conversion takes place."
msgstr ""

# e6509067827647d1b13d6d91e63e6979
#: ../../../../1.8/docs/topics/forms/modelforms.txt:611
msgid ""
"See the :doc:`form field documentation </ref/forms/fields>` for more "
"information on fields and their arguments."
msgstr ""

# 5359d13bbda142f39d43a52881453e6a
#: ../../../../1.8/docs/topics/forms/modelforms.txt:616
msgid "Enabling localization of fields"
msgstr ""

# 011b8a518d90491ab05cf614b8a10bb4
#: ../../../../1.8/docs/topics/forms/modelforms.txt:618
msgid ""
"By default, the fields in a ``ModelForm`` will not localize their data. To "
"enable localization for fields, you can use the ``localized_fields`` "
"attribute on the ``Meta`` class."
msgstr ""

# 582235be71314c3b98711135eb221e87
# 696360e3c3fa4f64bdea5df90285b5c6
#: ../../../../1.8/docs/topics/forms/modelforms.txt:629
#: ../../../../1.8/docs/topics/forms/modelforms.txt:852
msgid ""
"If ``localized_fields`` is set to the special value ``'__all__'``, all "
"fields will be localized."
msgstr ""

# 5afdbbe24e3b4c868614b599c441cd43
#: ../../../../1.8/docs/topics/forms/modelforms.txt:633
msgid "Form inheritance"
msgstr ""

# 9b4c8ba4c0c4434cb1ced4d6ef3643f4
#: ../../../../1.8/docs/topics/forms/modelforms.txt:635
msgid ""
"As with basic forms, you can extend and reuse ``ModelForms`` by inheriting "
"them. This is useful if you need to declare extra fields or extra methods on"
" a parent class for use in a number of forms derived from models. For "
"example, using the previous ``ArticleForm`` class::"
msgstr ""

# da1037f452e444539d10ac013e658883
#: ../../../../1.8/docs/topics/forms/modelforms.txt:644
msgid ""
"This creates a form that behaves identically to ``ArticleForm``, except "
"there's some extra validation and cleaning for the ``pub_date`` field."
msgstr ""

# 10730bd82d254b6983f2758670b68663
#: ../../../../1.8/docs/topics/forms/modelforms.txt:647
msgid ""
"You can also subclass the parent's ``Meta`` inner class if you want to "
"change the ``Meta.fields`` or ``Meta.excludes`` lists::"
msgstr ""

# 269b9bb11f4e41fc959f7dbc2792b1b4
#: ../../../../1.8/docs/topics/forms/modelforms.txt:654
msgid ""
"This adds the extra method from the ``EnhancedArticleForm`` and modifies the"
" original ``ArticleForm.Meta`` to remove one field."
msgstr ""

# 9f0757cce8054edf92b5dc61443e2775
#: ../../../../1.8/docs/topics/forms/modelforms.txt:657
msgid "There are a couple of things to note, however."
msgstr ""

# 1a90cc2f5a364ef3a60d6f7a8058be93
#: ../../../../1.8/docs/topics/forms/modelforms.txt:659
msgid ""
"Normal Python name resolution rules apply. If you have multiple base classes"
" that declare a ``Meta`` inner class, only the first one will be used. This "
"means the child's ``Meta``, if it exists, otherwise the ``Meta`` of the "
"first parent, etc."
msgstr ""

# b2c1eda16c974b738237b343ccb9cbf4
#: ../../../../1.8/docs/topics/forms/modelforms.txt:666
msgid ""
"It's possible to inherit from both ``Form`` and ``ModelForm`` "
"simultaneously, however, you must ensure that ``ModelForm`` appears first in"
" the MRO. This is because these classes rely on different metaclasses and a "
"class can only have one metaclass."
msgstr ""

# e92a7437df8e442d8eaebc838bad3e78
#: ../../../../1.8/docs/topics/forms/modelforms.txt:673
msgid ""
"It's possible to declaratively remove a ``Field`` inherited from a parent "
"class by setting the name to be ``None`` on the subclass."
msgstr ""

# cffd82f5ee5a418f9c50c3eaaac44ab5
#: ../../../../1.8/docs/topics/forms/modelforms.txt:676
msgid ""
"You can only use this technique to opt out from a field defined "
"declaratively by a parent class; it won't prevent the ``ModelForm`` "
"metaclass from generating a default field. To opt-out from default fields, "
"see :ref:`modelforms-selecting-fields`."
msgstr ""

# 44bf1cb12dc145889a9b4d0cd5da0886
# 5b6f4770a02b45c7853a4ffe4e3f4639
#: ../../../../1.8/docs/topics/forms/modelforms.txt:682
#: ../../../../1.8/docs/topics/forms/modelforms.txt:856
msgid "Providing initial values"
msgstr ""

# 7d3a29584238453382de0add06a8adfa
#: ../../../../1.8/docs/topics/forms/modelforms.txt:684
msgid ""
"As with regular forms, it's possible to specify initial data for forms by "
"specifying an ``initial`` parameter when instantiating the form. Initial "
"values provided this way will override both initial values from the form "
"field and values from an attached model instance. For example::"
msgstr ""

# a514d036a8ea49ac8a14453646e0bccd
#: ../../../../1.8/docs/topics/forms/modelforms.txt:699
msgid "ModelForm factory function"
msgstr ""

# e9f893a9072546968871e35cf2d96f96
#: ../../../../1.8/docs/topics/forms/modelforms.txt:701
msgid ""
"You can create forms from a given model using the standalone function "
":func:`~django.forms.models.modelform_factory`, instead of using a class "
"definition. This may be more convenient if you do not have many "
"customizations to make::"
msgstr ""

# 54eb4f1b489f46c09602cb73eefa335d
#: ../../../../1.8/docs/topics/forms/modelforms.txt:710
msgid ""
"This can also be used to make simple modifications to existing forms, for "
"example by specifying the widgets to be used for a given field::"
msgstr ""

# a6ddf8dc42fa4b68b65419ce7633cdf4
#: ../../../../1.8/docs/topics/forms/modelforms.txt:717
msgid ""
"The fields to include can be specified using the ``fields`` and ``exclude`` "
"keyword arguments, or the corresponding attributes on the ``ModelForm`` "
"inner ``Meta`` class. Please see the ``ModelForm`` :ref:`modelforms-"
"selecting-fields` documentation."
msgstr ""

# a6bfe9a36f884c7a8082df207787c12f
#: ../../../../1.8/docs/topics/forms/modelforms.txt:722
msgid "... or enable localization for specific fields::"
msgstr ""

# 13b1b94bbed1458b82e0d37cc5f44d16
#: ../../../../1.8/docs/topics/forms/modelforms.txt:729
msgid "Model formsets"
msgstr ""

# 1bff311472524226a75be9bef58ca428
#: ../../../../1.8/docs/topics/forms/modelforms.txt:733
msgid ""
"Like :doc:`regular formsets </topics/forms/formsets>`, Django provides a "
"couple of enhanced formset classes that make it easy to work with Django "
"models. Let's reuse the ``Author`` model from above::"
msgstr ""

# f8800adc7dca4bb8a6cfc4b0e51b6b96
#: ../../../../1.8/docs/topics/forms/modelforms.txt:741
msgid ""
"Using ``fields`` restricts the formset to use only the given fields. "
"Alternatively, you can take an \"opt-out\" approach, specifying which fields"
" to exclude::"
msgstr ""

# 3a91bc4713e74c9097e1253df18cd43e
#: ../../../../1.8/docs/topics/forms/modelforms.txt:749
msgid ""
"In older versions, omitting both ``fields`` and ``exclude`` resulted in a "
"formset with all the model's fields. Doing this now raises an "
":exc:`~django.core.exceptions.ImproperlyConfigured` exception."
msgstr ""

# 5b79f5c0c81343c38b55dc6db2714e82
#: ../../../../1.8/docs/topics/forms/modelforms.txt:753
msgid ""
"This will create a formset that is capable of working with the data "
"associated with the ``Author`` model. It works just like a regular formset::"
msgstr ""

# 41296ef7716b411eb6f6aa1b549bf33d
#: ../../../../1.8/docs/topics/forms/modelforms.txt:769
msgid ""
":func:`~django.forms.models.modelformset_factory` uses "
":func:`~django.forms.formsets.formset_factory` to generate formsets. This "
"means that a model formset is just an extension of a basic formset that "
"knows how to interact with a particular model."
msgstr ""

# 54b1bbc16ee04efcbca585c779afead3
#: ../../../../1.8/docs/topics/forms/modelforms.txt:775
msgid "Changing the queryset"
msgstr ""

# 3b933524e23347ac87e924f86bba8483
#: ../../../../1.8/docs/topics/forms/modelforms.txt:777
msgid ""
"By default, when you create a formset from a model, the formset will use a "
"queryset that includes all objects in the model (e.g., "
"``Author.objects.all()``). You can override this behavior by using the "
"``queryset`` argument::"
msgstr ""

# 0261801ca01443deb32e977090ba0cf5
#: ../../../../1.8/docs/topics/forms/modelforms.txt:784
msgid ""
"Alternatively, you can create a subclass that sets ``self.queryset`` in "
"``__init__``::"
msgstr ""

# 28886a9e498e4f4bb49ec0e4bba360e5
#: ../../../../1.8/docs/topics/forms/modelforms.txt:795
msgid "Then, pass your ``BaseAuthorFormSet`` class to the factory function::"
msgstr ""

# 295f2b0ebdb64790b7aece063aa3593d
#: ../../../../1.8/docs/topics/forms/modelforms.txt:800
msgid ""
"If you want to return a formset that doesn't include *any* pre-existing "
"instances of the model, you can specify an empty QuerySet::"
msgstr ""

# f83483dfe8bc452088d22efbdde0ac84
#: ../../../../1.8/docs/topics/forms/modelforms.txt:806
msgid "Changing the ``form``"
msgstr ""

# 10f28fb7999d495ba6b4bbe1d15cbecd
#: ../../../../1.8/docs/topics/forms/modelforms.txt:808
msgid ""
"By default, when you use ``modelformset_factory``, a model form will be "
"created using :func:`~django.forms.models.modelform_factory`. Often, it can "
"be useful to specify a custom model form. For example, you can create a "
"custom model form that has custom validation::"
msgstr ""

# b8c0d1f3b2654b0cac1629157e359992
#: ../../../../1.8/docs/topics/forms/modelforms.txt:822
msgid "Then, pass your model form to the factory function::"
msgstr ""

# cb9630bbe5634733a5299c11a4d91462
#: ../../../../1.8/docs/topics/forms/modelforms.txt:826
msgid ""
"It is not always necessary to define a custom model form. The "
"``modelformset_factory`` function has several arguments which are passed "
"through to ``modelform_factory``, which are described below."
msgstr ""

# 0b66e4d2ee22447297c5c383f7653c49
#: ../../../../1.8/docs/topics/forms/modelforms.txt:831
msgid "Specifying widgets to use in the form with ``widgets``"
msgstr ""

# 4f2d7f74ef8846bca0fbb2721be1c6a6
#: ../../../../1.8/docs/topics/forms/modelforms.txt:833
msgid ""
"Using the ``widgets`` parameter, you can specify a dictionary of values to "
"customize the ``ModelForm``’s widget class for a particular field. This "
"works the same way as the ``widgets`` dictionary on the inner ``Meta`` class"
" of a ``ModelForm`` works::"
msgstr ""

# 95aea55edd4e4031b6c74966dc2aec29
#: ../../../../1.8/docs/topics/forms/modelforms.txt:843
msgid "Enabling localization for fields with ``localized_fields``"
msgstr ""

# 53b3e83f28314c429470709152bf2dc0
#: ../../../../1.8/docs/topics/forms/modelforms.txt:845
msgid ""
"Using the ``localized_fields`` parameter, you can enable localization for "
"fields in the form."
msgstr ""

# 9beafb3e88c64d56ad489b662ef7359d
#: ../../../../1.8/docs/topics/forms/modelforms.txt:858
msgid ""
"As with regular formsets, it's possible to :ref:`specify initial data "
"<formsets-initial-data>` for forms in the formset by specifying an "
"``initial`` parameter when instantiating the model formset class returned by"
" :func:`~django.forms.models.modelformset_factory`. However, with model "
"formsets, the initial values only apply to extra forms, those that aren't "
"attached to an existing model instance. If the extra forms with initial data"
" aren't changed by the user, they won't be validated or saved."
msgstr ""

# 793806b1344b41e5a5749edbe07d5dc4
#: ../../../../1.8/docs/topics/forms/modelforms.txt:869
msgid "Saving objects in the formset"
msgstr ""

# 9c48a62299324acca8398620feb18803
#: ../../../../1.8/docs/topics/forms/modelforms.txt:871
msgid ""
"As with a ``ModelForm``, you can save the data as a model object. This is "
"done with the formset's ``save()`` method:"
msgstr ""

# f6ab67431e814a8d8d28810a704cd474
#: ../../../../1.8/docs/topics/forms/modelforms.txt:882
msgid ""
"The ``save()`` method returns the instances that have been saved to the "
"database. If a given instance's data didn't change in the bound data, the "
"instance won't be saved to the database and won't be included in the return "
"value (``instances``, in the above example)."
msgstr ""

# 71fa1a75b6214953a1a2b9bb9efdf67c
#: ../../../../1.8/docs/topics/forms/modelforms.txt:887
msgid ""
"When fields are missing from the form (for example because they have been "
"excluded), these fields will not be set by the ``save()`` method. You can "
"find more information about this restriction, which also holds for regular "
"``ModelForms``, in `Selecting the fields to use`_."
msgstr ""

# 63ddb66a23f440ca83dd55bd1938a95f
#: ../../../../1.8/docs/topics/forms/modelforms.txt:892
msgid "Pass ``commit=False`` to return the unsaved model instances:"
msgstr ""

# 98dd9b061c2b4a629c0a9c7fffae3fd8
#: ../../../../1.8/docs/topics/forms/modelforms.txt:902
msgid ""
"This gives you the ability to attach data to the instances before saving "
"them to the database. If your formset contains a ``ManyToManyField``, you'll"
" also need to call ``formset.save_m2m()`` to ensure the many-to-many "
"relationships are saved properly."
msgstr ""

# 86b882f93f0c49de85794d7e99e5c082
#: ../../../../1.8/docs/topics/forms/modelforms.txt:907
msgid ""
"After calling ``save()``, your model formset will have three new attributes "
"containing the formset's changes:"
msgstr ""

# dcd61686bb7d41c38256a3e6fb0f41c5
#: ../../../../1.8/docs/topics/forms/modelforms.txt:917
msgid "Limiting the number of editable objects"
msgstr ""

# fb29af758f754df1949425691b3ba28c
#: ../../../../1.8/docs/topics/forms/modelforms.txt:919
msgid ""
"As with regular formsets, you can use the ``max_num`` and ``extra`` "
"parameters to :func:`~django.forms.models.modelformset_factory` to limit the"
" number of extra forms displayed."
msgstr ""

# 555ae9120f1d4f1f9c7f58e270ad13d2
#: ../../../../1.8/docs/topics/forms/modelforms.txt:923
msgid "``max_num`` does not prevent existing objects from being displayed::"
msgstr ""

# 43e8da71f4b441bc9250bdd4aa1b547b
#: ../../../../1.8/docs/topics/forms/modelforms.txt:933
msgid ""
"If the value of ``max_num`` is greater than the number of existing related "
"objects, up to ``extra`` additional blank forms will be added to the "
"formset, so long as the total number of forms does not exceed ``max_num``::"
msgstr ""

# 77199e5460fd4c68aee8f8770ac536cd
#: ../../../../1.8/docs/topics/forms/modelforms.txt:950
msgid "Using a model formset in a view"
msgstr ""

# 6212a4c721dd45568fbd68507d1ec30d
#: ../../../../1.8/docs/topics/forms/modelforms.txt:952
msgid ""
"Model formsets are very similar to formsets. Let's say we want to present a "
"formset to edit ``Author`` model instances::"
msgstr ""

# 2e417f21f4ec444cb3eeaad1d7ee9d8f
#: ../../../../1.8/docs/topics/forms/modelforms.txt:972
msgid ""
"As you can see, the view logic of a model formset isn't drastically "
"different than that of a \"normal\" formset. The only difference is that we "
"call ``formset.save()`` to save the data into the database. (This was "
"described above, in :ref:`saving-objects-in-the-formset`.)"
msgstr ""

# ebdf86622e924bc98354730bc80f276d
#: ../../../../1.8/docs/topics/forms/modelforms.txt:980
msgid "Overriding ``clean()`` on a ``ModelFormSet``"
msgstr ""

# 1fde77c1e86348b899cead03ae7ae8a2
#: ../../../../1.8/docs/topics/forms/modelforms.txt:982
msgid ""
"Just like with ``ModelForms``, by default the ``clean()`` method of a "
"``ModelFormSet`` will validate that none of the items in the formset violate"
" the unique constraints on your model (either ``unique``, "
"``unique_together`` or ``unique_for_date|month|year``).  If you want to "
"override the ``clean()`` method on a ``ModelFormSet`` and maintain this "
"validation, you must call the parent class's ``clean`` method::"
msgstr ""

# 25978363004c49f196cf0a71e7e09c41
#: ../../../../1.8/docs/topics/forms/modelforms.txt:999
msgid ""
"Also note that by the time you reach this step, individual model instances "
"have already been created for each ``Form``. Modifying a value in "
"``form.cleaned_data`` is not sufficient to affect the saved value. If you "
"wish to modify a value in ``ModelFormSet.clean()`` you must modify "
"``form.instance``::"
msgstr ""

# 4dfa2c14eb6a46a0ba152e023258b6a0
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1018
msgid "Using a custom queryset"
msgstr ""

# 5db8b5f847614cfab7c63dc63e7e2291
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1020
msgid ""
"As stated earlier, you can override the default queryset used by the model "
"formset::"
msgstr ""

# 2d507e8a1e0c4b3192430f67686e8802
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1041
msgid ""
"Note that we pass the ``queryset`` argument in both the ``POST`` and ``GET``"
" cases in this example."
msgstr ""

# 1a7e3559983c43cab16b3edadec1e2be
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1045
msgid "Using the formset in the template"
msgstr ""

# 5bcad34cd5244cd6be31dcf1e2620b76
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1049
msgid "There are three ways to render a formset in a Django template."
msgstr ""

# bd9c9e14ab3346e6b64983718ed44d5d
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1051
msgid "First, you can let the formset do most of the work::"
msgstr ""

# ca542a9bef9945ee8db049c0758efa79
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1057
msgid ""
"Second, you can manually render the formset, but let the form deal with "
"itself::"
msgstr ""

# dc69ce8b46e4414c9b7292e109fa016b
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1067
msgid ""
"When you manually render the forms yourself, be sure to render the "
"management form as shown above. See the :ref:`management form documentation "
"<understanding-the-managementform>`."
msgstr ""

# d33a4b3886c54fcf99663227ba627326
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1071
msgid "Third, you can manually render each field::"
msgstr ""

# 70d034b169a148f0864e17b9e0525813
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1082
msgid ""
"If you opt to use this third method and you don't iterate over the fields "
"with a ``{% for %}`` loop, you'll need to render the primary key field. For "
"example, if you were rendering the ``name`` and ``age`` fields of a model::"
msgstr ""

# 316c262e920844a08310a6173cd7839d
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1097
msgid ""
"Notice how we need to explicitly render ``{{ form.id }}``. This ensures that"
" the model formset, in the ``POST`` case, will work correctly. (This example"
" assumes a primary key named ``id``. If you've explicitly defined your own "
"primary key that isn't called ``id``, make sure it gets rendered.)"
msgstr ""

# b80894132eda4c39bf8108867d261301
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1107
msgid "Inline formsets"
msgstr ""

# eb1b7e6219534f58aacaf73d3d54a3a0
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1111
msgid ""
"Inline formsets is a small abstraction layer on top of model formsets. These"
" simplify the case of working with related objects via a foreign key. "
"Suppose you have these two models::"
msgstr ""

# 8a9ec7ac603e4338818885380f057297
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1124
msgid ""
"If you want to create a formset that allows you to edit books belonging to a"
" particular author, you could do this::"
msgstr ""

# bda2d18ce54e4418999c379a2837fd7f
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1134
msgid ""
":func:`~django.forms.models.inlineformset_factory` uses "
":func:`~django.forms.models.modelformset_factory` and marks "
"``can_delete=True``."
msgstr ""

# b30a032b1d6d45eda0ed87f84d9c4635
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1140
msgid ""
":ref:`Manually rendered can_delete and can_order <manually-rendered-can-"
"delete-and-can-order>`."
msgstr ""

# baf7fd9c794b4370a6a2efe4f975add1
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1143
msgid "Overriding methods on an ``InlineFormSet``"
msgstr ""

# 1ca0f4ba76f84ae4bd798de446bba0c2
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1145
msgid ""
"When overriding methods on ``InlineFormSet``, you should subclass "
":class:`~models.BaseInlineFormSet` rather than "
":class:`~models.BaseModelFormSet`."
msgstr ""

# a0ef6494219442328779ca2153a2e593
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1149
msgid "For example, if you want to override ``clean()``::"
msgstr ""

# 729dacb404694fbea5f9a08fef9b87c6
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1161
msgid "See also :ref:`model-formsets-overriding-clean`."
msgstr ""

# 8eb15f734fc4423da36f4f723964e62e
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1163
msgid ""
"Then when you create your inline formset, pass in the optional argument "
"``formset``::"
msgstr ""

# 8b27eecf5f2e415e9476761439f87b9c
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1173
msgid "More than one foreign key to the same model"
msgstr ""

# 6d2d690036304e1cb86b9a2fd5241f8a
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1175
msgid ""
"If your model contains more than one foreign key to the same model, you'll "
"need to resolve the ambiguity manually using ``fk_name``. For example, "
"consider the following model::"
msgstr ""

# 3d0972a5501c46448600c7c8f4bd3e26
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1184
msgid ""
"To resolve this, you can use ``fk_name`` to "
":func:`~django.forms.models.inlineformset_factory`::"
msgstr ""

# df13ed147470422fb3f7b355ae6fe9cf
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1191
msgid "Using an inline formset in a view"
msgstr ""

# 7bd50bb43b3d450e9ae38d81e90e01f9
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1193
msgid ""
"You may want to provide a view that allows a user to edit the related "
"objects of a model. Here's how you can do that::"
msgstr ""

# 63c9a37e663e449283708f256c951de9
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1211
msgid ""
"Notice how we pass ``instance`` in both the ``POST`` and ``GET`` cases."
msgstr ""

# 85607e5fb81441278c41d1c10e2c57fc
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1214
msgid "Specifying widgets to use in the inline form"
msgstr ""

# a451b4e701f14cd585c4060cc44374f1
#: ../../../../1.8/docs/topics/forms/modelforms.txt:1217
msgid ""
"``inlineformset_factory`` uses ``modelformset_factory`` and passes most of "
"its arguments to ``modelformset_factory``. This means you can use the "
"``widgets`` parameter in much the same way as passing it to "
"``modelformset_factory``. See `Specifying widgets to use in the form with "
"widgets`_ above."
msgstr ""

# 2ab80e83fe1941beb483f0dd7192d544
#: ../../../../1.8/docs/topics/http/decorators.txt:3
msgid "View decorators"
msgstr ""

# 67b32c9b1eb6462b99b67bf6764fd6c3
#: ../../../../1.8/docs/topics/http/decorators.txt:7
msgid ""
"Django provides several decorators that can be applied to views to support "
"various HTTP features."
msgstr ""

# cb791c98d05546e4900ccb0e7c556a30
#: ../../../../1.8/docs/topics/http/decorators.txt:11
msgid "Allowed HTTP methods"
msgstr ""

# 4bbcea6fda524040923d1eddd8c30915
#: ../../../../1.8/docs/topics/http/decorators.txt:13
msgid ""
"The decorators in :mod:`django.views.decorators.http` can be used to "
"restrict access to views based on the request method. These decorators will "
"return a :class:`django.http.HttpResponseNotAllowed` if the conditions are "
"not met."
msgstr ""

# 3f89b0890532454e90478dd6bdb4dcb8
#: ../../../../1.8/docs/topics/http/decorators.txt:19
msgid ""
"Decorator to require that a view only accepts particular request methods. "
"Usage::"
msgstr ""

# 882dad4af792426380223d453c2cd96b
#: ../../../../1.8/docs/topics/http/decorators.txt:30
msgid "Note that request methods should be in uppercase."
msgstr ""

# 8dee89d7c6714c799cfcfa199096e6dd
#: ../../../../1.8/docs/topics/http/decorators.txt:34
msgid "Decorator to require that a view only accepts the GET method."
msgstr ""

# 27fff7ca2b49452da5583894d985945f
#: ../../../../1.8/docs/topics/http/decorators.txt:38
msgid "Decorator to require that a view only accepts the POST method."
msgstr ""

# e83c69a497a241e2bba26b0eba054f70
#: ../../../../1.8/docs/topics/http/decorators.txt:42
msgid ""
"Decorator to require that a view only accepts the GET and HEAD methods. "
"These methods are commonly considered \"safe\" because they should not have "
"the significance of taking an action other than retrieving the requested "
"resource."
msgstr ""

# 61a600738a494f9296552d5eb6e71bd6
#: ../../../../1.8/docs/topics/http/decorators.txt:48
msgid ""
"Django will automatically strip the content of responses to HEAD requests "
"while leaving the headers unchanged, so you may handle HEAD requests exactly"
" like GET requests in your views. Since some software, such as link "
"checkers, rely on HEAD requests, you might prefer using ``require_safe`` "
"instead of ``require_GET``."
msgstr ""

# 5e03ea01f24343dd89bb13c8851874ec
#: ../../../../1.8/docs/topics/http/decorators.txt:55
msgid "Conditional view processing"
msgstr ""

# 6c4205a02c3b4d8d9ff3cbbb0a0fd2d0
#: ../../../../1.8/docs/topics/http/decorators.txt:57
msgid ""
"The following decorators in :mod:`django.views.decorators.http` can be used "
"to control caching behavior on particular views."
msgstr ""

# 5de4a3548799404a9b83b10e045cf6a8
#: ../../../../1.8/docs/topics/http/decorators.txt:66
msgid ""
"These decorators can be used to generate ``ETag`` and ``Last-Modified`` "
"headers; see :doc:`conditional view processing </topics/conditional-view-"
"processing>`."
msgstr ""

# d385014e97a44184955c2c13a7a47c2d
#: ../../../../1.8/docs/topics/http/decorators.txt:73
msgid "GZip compression"
msgstr ""

# 1a51646082e749c2a10413c7bae8b8ea
#: ../../../../1.8/docs/topics/http/decorators.txt:75
msgid ""
"The decorators in :mod:`django.views.decorators.gzip` control content "
"compression on a per-view basis."
msgstr ""

# 400a8e8980cb4d35a82d9fef9d0e2ce9
#: ../../../../1.8/docs/topics/http/decorators.txt:80
msgid ""
"This decorator compresses content if the browser allows gzip compression. It"
" sets the ``Vary`` header accordingly, so that caches will base their "
"storage on the ``Accept-Encoding`` header."
msgstr ""

# 8ddb0c9acf1545278d963e8472ec3179
#: ../../../../1.8/docs/topics/http/decorators.txt:87
msgid "Vary headers"
msgstr ""

# 9dce90aca18e42fdbdc24af3760ea08a
#: ../../../../1.8/docs/topics/http/decorators.txt:89
msgid ""
"The decorators in :mod:`django.views.decorators.vary` can be used to control"
" caching based on specific request headers."
msgstr ""

# 89706d1b8e6245689225c4896a7c5c85
#: ../../../../1.8/docs/topics/http/decorators.txt:96
msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key."
msgstr ""

# 35f9d2436bd04473bb0cfcd2804cd22b
#: ../../../../1.8/docs/topics/http/decorators.txt:99
msgid "See :ref:`using vary headers <using-vary-headers>`."
msgstr ""

# a6d4d0f3310a41a7a75de0c336b8ee6d
#: ../../../../1.8/docs/topics/http/file-uploads.txt:3
msgid "File Uploads"
msgstr ""

# 31ab204160ee49bc881a6aa448e7c3ec
#: ../../../../1.8/docs/topics/http/file-uploads.txt:7
msgid ""
"When Django handles a file upload, the file data ends up placed in "
":attr:`request.FILES <django.http.HttpRequest.FILES>` (for more on the "
"``request`` object see the documentation for :doc:`request and response "
"objects </ref/request-response>`). This document explains how files are "
"stored on disk and in memory, and how to customize the default behavior."
msgstr ""

# bd46ba362c724c6099215885d752318b
#: ../../../../1.8/docs/topics/http/file-uploads.txt:15
msgid ""
"There are security risks if you are accepting uploaded content from "
"untrusted users! See the security guide's topic on :ref:`user-uploaded-"
"content-security` for mitigation details."
msgstr ""

# ee77a7c50894479eb596a2b22895481b
#: ../../../../1.8/docs/topics/http/file-uploads.txt:20
msgid "Basic file uploads"
msgstr ""

# 1c9a321fcf454c4ab2ae55bf4f83105a
#: ../../../../1.8/docs/topics/http/file-uploads.txt:22
msgid "Consider a simple form containing a :class:`~django.forms.FileField`::"
msgstr ""

# 2b8e1cdc51a1423f81749961e28fb803
#: ../../../../1.8/docs/topics/http/file-uploads.txt:31
msgid ""
"A view handling this form will receive the file data in :attr:`request.FILES"
" <django.http.HttpRequest.FILES>`, which is a dictionary containing a key "
"for each :class:`~django.forms.FileField` (or "
":class:`~django.forms.ImageField`, or other :class:`~django.forms.FileField`"
" subclass) in the form. So the data from the above form would be accessible "
"as ``request.FILES['file']``."
msgstr ""

# 25d94488a7c34c49b8b6614e03b92f0a
#: ../../../../1.8/docs/topics/http/file-uploads.txt:38
msgid ""
"Note that :attr:`request.FILES <django.http.HttpRequest.FILES>` will only "
"contain data if the request method was ``POST`` and the ``<form>`` that "
"posted the request has the attribute ``enctype=\"multipart/form-data\"``. "
"Otherwise, ``request.FILES`` will be empty."
msgstr ""

# 288ad50c71d041e481fcbe7265108bca
#: ../../../../1.8/docs/topics/http/file-uploads.txt:43
msgid ""
"Most of the time, you'll simply pass the file data from ``request`` into the"
" form as described in :ref:`binding-uploaded-files`. This would look "
"something like::"
msgstr ""

# 66665e9bd0ac4bbe93d1601478fe62e9
#: ../../../../1.8/docs/topics/http/file-uploads.txt:64
msgid ""
"Notice that we have to pass :attr:`request.FILES "
"<django.http.HttpRequest.FILES>` into the form's constructor; this is how "
"file data gets bound into a form."
msgstr ""

# 0ccbb554dbab40aabeef982127a8983f
#: ../../../../1.8/docs/topics/http/file-uploads.txt:67
msgid "Here's a common way you might handle an uploaded file::"
msgstr ""

# c992e4e4811a49cd88ddf5d5850532ac
#: ../../../../1.8/docs/topics/http/file-uploads.txt:74
msgid ""
"Looping over ``UploadedFile.chunks()`` instead of using ``read()`` ensures "
"that large files don't overwhelm your system's memory."
msgstr ""

# 5a75e26e8dca47b0b2a4a9ee770c25d9
#: ../../../../1.8/docs/topics/http/file-uploads.txt:77
msgid ""
"There are a few other methods and attributes available on ``UploadedFile`` "
"objects; see :class:`UploadedFile` for a complete reference."
msgstr ""

# a8145a8071f1414c86322f6cf67ef394
#: ../../../../1.8/docs/topics/http/file-uploads.txt:81
msgid "Handling uploaded files with a model"
msgstr ""

# 3949b088203c40908a6e209073b3409c
#: ../../../../1.8/docs/topics/http/file-uploads.txt:83
msgid ""
"If you're saving a file on a :class:`~django.db.models.Model` with a "
":class:`~django.db.models.FileField`, using a "
":class:`~django.forms.ModelForm` makes this process much easier. The file "
"object will be saved to the location specified by the "
":attr:`~django.db.models.FileField.upload_to` argument of the corresponding "
":class:`~django.db.models.FileField` when calling ``form.save()``::"
msgstr ""

# bcc7564ad4524207b838ba73daf2f4ed
#: ../../../../1.8/docs/topics/http/file-uploads.txt:105
msgid ""
"If you are constructing an object manually, you can simply assign the file "
"object from :attr:`request.FILES <django.http.HttpRequest.FILES>` to the "
"file field in the model::"
msgstr ""

# f6d1aaa87cba4771b27aad7c7f868b58
#: ../../../../1.8/docs/topics/http/file-uploads.txt:126
msgid "Upload Handlers"
msgstr ""

# b3602ae08b784db689fd97497cc1e4f4
#: ../../../../1.8/docs/topics/http/file-uploads.txt:130
msgid ""
"When a user uploads a file, Django passes off the file data to an *upload "
"handler* -- a small class that handles file data as it gets uploaded. Upload"
" handlers are initially defined in the :setting:`FILE_UPLOAD_HANDLERS` "
"setting, which defaults to::"
msgstr ""

# c30dd309ad2b4bdca34c56dbeb44a532
#: ../../../../1.8/docs/topics/http/file-uploads.txt:138
msgid ""
"Together :class:`MemoryFileUploadHandler` and "
":class:`TemporaryFileUploadHandler` provide Django's default file upload "
"behavior of reading small files into memory and large ones onto disk."
msgstr ""

# 46cad1f01e9d42f19c4349707af517a8
#: ../../../../1.8/docs/topics/http/file-uploads.txt:142
msgid ""
"You can write custom handlers that customize how Django handles files. You "
"could, for example, use custom handlers to enforce user-level quotas, "
"compress data on the fly, render progress bars, and even send data to "
"another storage location directly without storing it locally. See "
":ref:`custom_upload_handlers` for details on how you can customize or "
"completely replace upload behavior."
msgstr ""

# 13bd140afbe94c7c8e8546b670906de4
#: ../../../../1.8/docs/topics/http/file-uploads.txt:151
msgid "Where uploaded data is stored"
msgstr ""

# 411068ecbb6649039c8bc8e7df4dd7ff
#: ../../../../1.8/docs/topics/http/file-uploads.txt:153
msgid "Before you save uploaded files, the data needs to be stored somewhere."
msgstr ""

# 5f0d1f6c874f4b00a4c16d0ee97695a4
#: ../../../../1.8/docs/topics/http/file-uploads.txt:155
msgid ""
"By default, if an uploaded file is smaller than 2.5 megabytes, Django will "
"hold the entire contents of the upload in memory. This means that saving the"
" file involves only a read from memory and a write to disk and thus is very "
"fast."
msgstr ""

# 2d0a43e1754f4912b90b14bd212859dc
#: ../../../../1.8/docs/topics/http/file-uploads.txt:159
msgid ""
"However, if an uploaded file is too large, Django will write the uploaded "
"file to a temporary file stored in your system's temporary directory. On a "
"Unix-like platform this means you can expect Django to generate a file "
"called something like ``/tmp/tmpzfp6I6.upload``. If an upload is large "
"enough, you can watch this file grow in size as Django streams the data onto"
" disk."
msgstr ""

# 31bbc6adcfc246b3865945f51b03807d
#: ../../../../1.8/docs/topics/http/file-uploads.txt:165
msgid ""
"These specifics -- 2.5 megabytes; ``/tmp``; etc. -- are simply \"reasonable "
"defaults\" which can be customized as described in the next section."
msgstr ""

# 5279c7f53f144a6b970573be619847d5
#: ../../../../1.8/docs/topics/http/file-uploads.txt:169
msgid "Changing upload handler behavior"
msgstr ""

# bb21a98e73c74591a98606b20bfc730a
#: ../../../../1.8/docs/topics/http/file-uploads.txt:171
msgid ""
"There are a few settings which control Django's file upload behavior. See "
":ref:`File Upload Settings <file-upload-settings>` for details."
msgstr ""

# 1484c3f3343043c299375ac6ec8713b5
#: ../../../../1.8/docs/topics/http/file-uploads.txt:175
msgid "Modifying upload handlers on the fly"
msgstr ""

# a5bb7c26889b41b6862720bf96c356f2
#: ../../../../1.8/docs/topics/http/file-uploads.txt:177
msgid ""
"Sometimes particular views require different upload behavior. In these "
"cases, you can override upload handlers on a per-request basis by modifying "
"``request.upload_handlers``. By default, this list will contain the upload "
"handlers given by :setting:`FILE_UPLOAD_HANDLERS`, but you can modify the "
"list as you would any other list."
msgstr ""

# 8a81548c89524048b92f5faa210d0da9
#: ../../../../1.8/docs/topics/http/file-uploads.txt:183
msgid ""
"For instance, suppose you've written a ``ProgressBarUploadHandler`` that "
"provides feedback on upload progress to some sort of AJAX widget. You'd add "
"this handler to your upload handlers like this::"
msgstr ""

# c3832530c25447f39857477f78180721
#: ../../../../1.8/docs/topics/http/file-uploads.txt:189
msgid ""
"You'd probably want to use ``list.insert()`` in this case (instead of "
"``append()``) because a progress bar handler would need to run *before* any "
"other handlers. Remember, the upload handlers are processed in order."
msgstr ""

# d93f72f1a1b44f7ca3a1984364bf8619
#: ../../../../1.8/docs/topics/http/file-uploads.txt:193
msgid ""
"If you want to replace the upload handlers completely, you can just assign a"
" new list::"
msgstr ""

# a05119d3de3b44bc9483c7027d44be60
#: ../../../../1.8/docs/topics/http/file-uploads.txt:200
msgid ""
"You can only modify upload handlers *before* accessing ``request.POST`` or "
"``request.FILES`` -- it doesn't make sense to change upload handlers after "
"upload handling has already started. If you try to modify "
"``request.upload_handlers`` after reading from ``request.POST`` or "
"``request.FILES`` Django will throw an error."
msgstr ""

# d76b74d59e804f73ab0d99eb60116763
#: ../../../../1.8/docs/topics/http/file-uploads.txt:207
msgid ""
"Thus, you should always modify uploading handlers as early in your view as "
"possible."
msgstr ""

# d1b69fb617d54983ad3e8aabe9fb4467
#: ../../../../1.8/docs/topics/http/file-uploads.txt:210
msgid ""
"Also, ``request.POST`` is accessed by "
":class:`~django.middleware.csrf.CsrfViewMiddleware` which is enabled by "
"default. This means you will need to use "
":func:`~django.views.decorators.csrf.csrf_exempt` on your view to allow you "
"to change the upload handlers.  You will then need to use "
":func:`~django.views.decorators.csrf.csrf_protect` on the function that "
"actually processes the request.  Note that this means that the handlers may "
"start receiving the file upload before the CSRF checks have been done. "
"Example code::"
msgstr ""

# 69e108d4e8114462b4fd0e98fa2e7d5c
#: ../../../../1.8/docs/topics/http/generic-views.txt:3
msgid "Generic views"
msgstr ""

# 85ef46c8928e46aabe51b4b2cfe0932c
#: ../../../../1.8/docs/topics/http/generic-views.txt:5
msgid "See :doc:`/ref/class-based-views/index`."
msgstr ""

# 957b5795a6e541319c3b8a29af3bd3e7
#: ../../../../1.8/docs/topics/http/index.txt:2
msgid "Handling HTTP requests"
msgstr ""

# 5e3609bf7e484f7aa638e582b6533ebf
#: ../../../../1.8/docs/topics/http/index.txt:4
msgid "Information on handling HTTP requests in Django:"
msgstr ""

# 893c017ba41c478da4bcba6363a58f41
# 3b76f5ea342540f389074d8b72ef2725
#: ../../../../1.8/docs/topics/http/middleware.txt:3
#: ../../../../1.8/docs/topics/performance.txt:256
msgid "Middleware"
msgstr ""

# 6d82ff0b26d54ca3911320ba63e81ef6
#: ../../../../1.8/docs/topics/http/middleware.txt:5
msgid ""
"Middleware is a framework of hooks into Django's request/response "
"processing. It's a light, low-level \"plugin\" system for globally altering "
"Django's input or output."
msgstr ""

# b3fbae4857a847858c5230792756394a
#: ../../../../1.8/docs/topics/http/middleware.txt:9
msgid ""
"Each middleware component is responsible for doing some specific function. "
"For example, Django includes a middleware component, "
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware`, that "
"associates users with requests using sessions."
msgstr ""

# befefcc0c0ac402ab2aac1b0cde08674
#: ../../../../1.8/docs/topics/http/middleware.txt:14
msgid ""
"This document explains how middleware works, how you activate middleware, "
"and how to write your own middleware. Django ships with some built-in "
"middleware you can use right out of the box. They're documented in the :doc"
":`built-in middleware reference </ref/middleware>`."
msgstr ""

# f7c724ce640147d5902c08b82accdd6f
#: ../../../../1.8/docs/topics/http/middleware.txt:20
msgid "Activating middleware"
msgstr ""

# edebd3e382b54f558b51d766ef0472cc
#: ../../../../1.8/docs/topics/http/middleware.txt:22
msgid ""
"To activate a middleware component, add it to the "
":setting:`MIDDLEWARE_CLASSES` tuple in your Django settings."
msgstr ""

# 766b86c45fa5476cba604c9704bb3a43
#: ../../../../1.8/docs/topics/http/middleware.txt:25
msgid ""
"In :setting:`MIDDLEWARE_CLASSES`, each middleware component is represented "
"by a string: the full Python path to the middleware's class name. For "
"example, here's the default value created by :djadmin:`django-admin "
"startproject <startproject>`::"
msgstr ""

# 8a28ef2ae4a24f1b84b19e4c6796e1a1
#: ../../../../1.8/docs/topics/http/middleware.txt:41
msgid ""
"A Django installation doesn't require any middleware — "
":setting:`MIDDLEWARE_CLASSES` can be empty, if you'd like — but it's "
"strongly suggested that you at least use "
":class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

# d394b395ce8f4b32b553f76984c31f54
#: ../../../../1.8/docs/topics/http/middleware.txt:46
msgid ""
"The order in :setting:`MIDDLEWARE_CLASSES` matters because a middleware can "
"depend on other middleware. For instance, "
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` stores the"
" authenticated user in the session; therefore, it must run after "
":class:`~django.contrib.sessions.middleware.SessionMiddleware`. See :ref"
":`middleware-ordering` for some common hints about ordering of Django "
"middleware classes."
msgstr ""

# 789b0e99bcf643aa87c9426c7712385d
#: ../../../../1.8/docs/topics/http/middleware.txt:55
msgid "Hooks and application order"
msgstr ""

# 122c0b5bc65041afbf9034abdd88f74a
#: ../../../../1.8/docs/topics/http/middleware.txt:57
msgid ""
"During the request phase, before calling the view, Django applies middleware"
" in the order it's defined in :setting:`MIDDLEWARE_CLASSES`, top-down. Two "
"hooks are available:"
msgstr ""

# 0058af55e70d4d58a758309d55f29ed8
#: ../../../../1.8/docs/topics/http/middleware.txt:61
msgid ":meth:`process_request`"
msgstr ""

# b6bf7496aa8f44b7903cc2ae3b2613c4
#: ../../../../1.8/docs/topics/http/middleware.txt:62
msgid ":meth:`process_view`"
msgstr ""

# 2365e938406f4d5893cb69a04754f7e4
#: ../../../../1.8/docs/topics/http/middleware.txt:64
msgid ""
"During the response phase, after calling the view, middleware are applied in"
" reverse order, from the bottom up. Three hooks are available:"
msgstr ""

# 4714277c05c142988a6e38fcb0a91a2b
#: ../../../../1.8/docs/topics/http/middleware.txt:67
msgid ":meth:`process_exception` (only if the view raised an exception)"
msgstr ""

# e021a409b1624b25a8756829d296ae3e
#: ../../../../1.8/docs/topics/http/middleware.txt:68
msgid ":meth:`process_template_response` (only for template responses)"
msgstr ""

# ca96d5109a564b729b70beeb64a6c3fc
#: ../../../../1.8/docs/topics/http/middleware.txt:69
msgid ":meth:`process_response`"
msgstr ""

# 6f329d2540bd43f18ac8e6943906e11f
#: ../../../../1.8/docs/topics/http/middleware.txt:76
msgid ""
"If you prefer, you can also think of it like an onion: each middleware class"
" is a \"layer\" that wraps the view."
msgstr ""

# 02c65156e8b84fb38740f706725eed87
#: ../../../../1.8/docs/topics/http/middleware.txt:79
msgid "The behavior of each hook is described below."
msgstr ""

# 3a782973bbbf4693b4444b93610744c1
#: ../../../../1.8/docs/topics/http/middleware.txt:82
msgid "Writing your own middleware"
msgstr ""

# 7f47901b548d4a03b5dad094830971c6
#: ../../../../1.8/docs/topics/http/middleware.txt:84
msgid ""
"Writing your own middleware is easy. Each middleware component is a single "
"Python class that defines one or more of the following methods:"
msgstr ""

# dde81ded95854811a093bfdb1f27d875
#: ../../../../1.8/docs/topics/http/middleware.txt:90
msgid "``process_request``"
msgstr ""

# 5a8760ae6c0e4556b4c5358d3a06eac3
#: ../../../../1.8/docs/topics/http/middleware.txt:94
msgid "``request`` is an :class:`~django.http.HttpRequest` object."
msgstr ""

# 420378c15e0d46088916ec0dcbbaccc3
#: ../../../../1.8/docs/topics/http/middleware.txt:96
msgid ""
"``process_request()`` is called on each request, before Django decides which"
" view to execute."
msgstr ""

# 03a6890825e04c1191e5525dd90f2458
#: ../../../../1.8/docs/topics/http/middleware.txt:99
msgid ""
"It should return either ``None`` or an :class:`~django.http.HttpResponse` "
"object. If it returns ``None``, Django will continue processing this "
"request, executing any other ``process_request()`` middleware, then, "
"``process_view()`` middleware, and finally, the appropriate view. If it "
"returns an :class:`~django.http.HttpResponse` object, Django won't bother "
"calling any other request, view or exception middleware, or the appropriate "
"view; it'll apply response middleware to that "
":class:`~django.http.HttpResponse`, and return the result."
msgstr ""

# 6b22821d2ed64812adcfd362ea1a5574
#: ../../../../1.8/docs/topics/http/middleware.txt:111
msgid "``process_view``"
msgstr ""

# 972f2f701cbb47a69118a0ec961a9945
#: ../../../../1.8/docs/topics/http/middleware.txt:115
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``view_func`` is"
" the Python function that Django is about to use. (It's the actual function "
"object, not the name of the function as a string.) ``view_args`` is a list "
"of positional arguments that will be passed to the view, and ``view_kwargs``"
" is a dictionary of keyword arguments that will be passed to the view. "
"Neither ``view_args`` nor ``view_kwargs`` include the first view argument "
"(``request``)."
msgstr ""

# b752ae421a6047938715ecbbf5391c51
#: ../../../../1.8/docs/topics/http/middleware.txt:123
msgid "``process_view()`` is called just before Django calls the view."
msgstr ""

# f34ff9fd1d4b4b949bbb01d4eda88f37
#: ../../../../1.8/docs/topics/http/middleware.txt:125
msgid ""
"It should return either ``None`` or an :class:`~django.http.HttpResponse` "
"object. If it returns ``None``, Django will continue processing this "
"request, executing any other ``process_view()`` middleware and, then, the "
"appropriate view. If it returns an :class:`~django.http.HttpResponse` "
"object, Django won't bother calling any other view or exception middleware, "
"or the appropriate view; it'll apply response middleware to that "
":class:`~django.http.HttpResponse`, and return the result."
msgstr ""

# c539ab78906b4ffcbcb3656cc0154013
#: ../../../../1.8/docs/topics/http/middleware.txt:135
msgid ""
"Accessing :attr:`request.POST <django.http.HttpRequest.POST>` or "
":attr:`request.REQUEST <django.http.HttpRequest.REQUEST>` inside middleware "
"from ``process_request`` or ``process_view`` will prevent any view running "
"after the middleware from being able to :ref:`modify the upload handlers for"
" the request <modifying_upload_handlers_on_the_fly>`, and should normally be"
" avoided."
msgstr ""

# 8afe1ed01aec461a87e8776af5a8b7fa
#: ../../../../1.8/docs/topics/http/middleware.txt:142
msgid ""
"The :class:`~django.middleware.csrf.CsrfViewMiddleware` class can be "
"considered an exception, as it provides the "
":func:`~django.views.decorators.csrf.csrf_exempt` and "
":func:`~django.views.decorators.csrf.csrf_protect` decorators which allow "
"views to explicitly control at what point the CSRF validation should occur."
msgstr ""

# 6399bcfac2b446caa10c02887a4e2201
#: ../../../../1.8/docs/topics/http/middleware.txt:151
msgid "``process_template_response``"
msgstr ""

# 96750e8f0bdd4f5cb2956392657f8e0f
#: ../../../../1.8/docs/topics/http/middleware.txt:155
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"the :class:`~django.template.response.TemplateResponse` object (or "
"equivalent) returned by a Django view or by a middleware."
msgstr ""

# 76e00c861a7b4217a5d3b24b388edcab
#: ../../../../1.8/docs/topics/http/middleware.txt:159
msgid ""
"``process_template_response()`` is called just after the view has finished "
"executing, if the response instance has a ``render()`` method, indicating "
"that it is a :class:`~django.template.response.TemplateResponse` or "
"equivalent."
msgstr ""

# e246962ce02e4ee69ab12c10b48028ec
#: ../../../../1.8/docs/topics/http/middleware.txt:163
msgid ""
"It must return a response object that implements a ``render`` method. It "
"could alter the given ``response`` by changing ``response.template_name`` "
"and ``response.context_data``, or it could create and return a brand-new "
":class:`~django.template.response.TemplateResponse` or equivalent."
msgstr ""

# d1c133ef3b35492b84ad40d9297089aa
#: ../../../../1.8/docs/topics/http/middleware.txt:168
msgid ""
"You don't need to explicitly render responses -- responses will be "
"automatically rendered once all template response middleware has been "
"called."
msgstr ""

# fcde1bf142014a0bace2a9cb57602607
#: ../../../../1.8/docs/topics/http/middleware.txt:172
msgid ""
"Middleware are run in reverse order during the response phase, which "
"includes ``process_template_response()``."
msgstr ""

# 0e5f833c78c74dd0b55fe256b9a07f88
#: ../../../../1.8/docs/topics/http/middleware.txt:178
msgid "``process_response``"
msgstr ""

# e790df842d6d4321b9eb8944764860e5
#: ../../../../1.8/docs/topics/http/middleware.txt:182
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"the :class:`~django.http.HttpResponse` or "
":class:`~django.http.StreamingHttpResponse` object returned by a Django view"
" or by a middleware."
msgstr ""

# 65518792bddb4d379a966956b33a90ad
#: ../../../../1.8/docs/topics/http/middleware.txt:187
msgid ""
"``process_response()`` is called on all responses before they're returned to"
" the browser."
msgstr ""

# f0c1b6db53cd42fd9618439648719b58
#: ../../../../1.8/docs/topics/http/middleware.txt:190
msgid ""
"It must return an :class:`~django.http.HttpResponse` or "
":class:`~django.http.StreamingHttpResponse` object. It could alter the given"
" ``response``, or it could create and return a brand-new "
":class:`~django.http.HttpResponse` or "
":class:`~django.http.StreamingHttpResponse`."
msgstr ""

# dcac05c055cb4a2b956a1dca8c118904
#: ../../../../1.8/docs/topics/http/middleware.txt:196
msgid ""
"Unlike the ``process_request()`` and ``process_view()`` methods, the "
"``process_response()`` method is always called, even if the "
"``process_request()`` and ``process_view()`` methods of the same middleware "
"class were skipped (because an earlier middleware method returned an "
":class:`~django.http.HttpResponse`). In particular, this means that your "
"``process_response()`` method cannot rely on setup done in "
"``process_request()``."
msgstr ""

# 869f3c8a4eab44bba0b46bd949ac81ba
#: ../../../../1.8/docs/topics/http/middleware.txt:204
msgid ""
"Finally, remember that during the response phase, middleware are applied in "
"reverse order, from the bottom up. This means classes defined at the end of "
":setting:`MIDDLEWARE_CLASSES` will be run first."
msgstr ""

# 8055aa933df3414d9540ede325938b12
#: ../../../../1.8/docs/topics/http/middleware.txt:209
msgid "Dealing with streaming responses"
msgstr ""

# ee6f9e7f0095401a949497150f08884f
#: ../../../../1.8/docs/topics/http/middleware.txt:211
msgid ""
"Unlike :class:`~django.http.HttpResponse`, "
":class:`~django.http.StreamingHttpResponse` does not have a ``content`` "
"attribute. As a result, middleware can no longer assume that all responses "
"will have a ``content`` attribute. If they need access to the content, they "
"must test for streaming responses and adjust their behavior accordingly::"
msgstr ""

# 84166c2483ea46d8af5e7772404f7e7f
#: ../../../../1.8/docs/topics/http/middleware.txt:224
msgid ""
"``streaming_content`` should be assumed to be too large to hold in memory. "
"Response middleware may wrap it in a new generator, but must not consume it."
" Wrapping is typically implemented as follows::"
msgstr ""

# e286751ab477431aa6b792f6f1d20f24
#: ../../../../1.8/docs/topics/http/middleware.txt:235
msgid "``process_exception``"
msgstr ""

# b000cbdfa9ef4495a86df6cda5709cc2
#: ../../../../1.8/docs/topics/http/middleware.txt:239
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``exception`` is"
" an ``Exception`` object raised by the view function."
msgstr ""

# 275de30f6fbd4a55b60138f1f0ca18dc
#: ../../../../1.8/docs/topics/http/middleware.txt:242
msgid ""
"Django calls ``process_exception()`` when a view raises an exception. "
"``process_exception()`` should return either ``None`` or an "
":class:`~django.http.HttpResponse` object. If it returns an "
":class:`~django.http.HttpResponse` object, the template response and "
"response middleware will be applied, and the resulting response returned to "
"the browser. Otherwise, default exception handling kicks in."
msgstr ""

# a72dccd15b87434c9a8ebccd5231e933
#: ../../../../1.8/docs/topics/http/middleware.txt:249
msgid ""
"Again, middleware are run in reverse order during the response phase, which "
"includes ``process_exception``. If an exception middleware returns a "
"response, the middleware classes above that middleware will not be called at"
" all."
msgstr ""

# e190f546163c4b68aed4770f9eadae72
#: ../../../../1.8/docs/topics/http/middleware.txt:254
msgid "``__init__``"
msgstr ""

# d74e691f95ea45fab0c2d178761b772e
#: ../../../../1.8/docs/topics/http/middleware.txt:256
msgid ""
"Most middleware classes won't need an initializer since middleware classes "
"are essentially placeholders for the ``process_*`` methods. If you do need "
"some global state you may use ``__init__`` to set up. However, keep in mind "
"a couple of caveats:"
msgstr ""

# 44d6e7537ac4438d9dcf511181f4816e
#: ../../../../1.8/docs/topics/http/middleware.txt:261
msgid ""
"Django initializes your middleware without any arguments, so you can't "
"define ``__init__`` as requiring any arguments."
msgstr ""

# 91bfccf2348d4681ba346276d38931e7
#: ../../../../1.8/docs/topics/http/middleware.txt:264
msgid ""
"Unlike the ``process_*`` methods which get called once per request, "
"``__init__`` gets called only *once*, when the Web server responds to the "
"first request."
msgstr ""

# 51502b0d9b95475fb15490bd9627d409
#: ../../../../1.8/docs/topics/http/middleware.txt:269
msgid "Marking middleware as unused"
msgstr ""

# 1e091783d03343b68dd3599657c4e538
#: ../../../../1.8/docs/topics/http/middleware.txt:271
msgid ""
"It's sometimes useful to determine at run-time whether a piece of middleware"
" should be used. In these cases, your middleware's ``__init__`` method may "
"raise :exc:`django.core.exceptions.MiddlewareNotUsed`. Django will then "
"remove that piece of middleware from the middleware process and a debug "
"message will be logged to the ``django.request`` logger when "
":setting:`DEBUG` is set to ``True``."
msgstr ""

# 514a6068cbdd436880b39d547feccfd3
#: ../../../../1.8/docs/topics/http/middleware.txt:280
msgid ""
"Previously, :exc:`~django.core.exceptions.MiddlewareNotUsed` exceptions "
"weren't logged."
msgstr ""

# 9b5bd42b509547a89b035223a1892395
#: ../../../../1.8/docs/topics/http/middleware.txt:284
msgid "Guidelines"
msgstr ""

# 711eb8292ded43cfa6816be74b1a5f1a
#: ../../../../1.8/docs/topics/http/middleware.txt:286
msgid "Middleware classes don't have to subclass anything."
msgstr ""

# 217a55f58f5545b5aa3b3522101fe964
#: ../../../../1.8/docs/topics/http/middleware.txt:288
msgid ""
"The middleware class can live anywhere on your Python path. All Django cares"
" about is that the :setting:`MIDDLEWARE_CLASSES` setting includes the path "
"to it."
msgstr ""

# 71f2a552620a41e595dd6ab6e01df10c
#: ../../../../1.8/docs/topics/http/middleware.txt:292
msgid ""
"Feel free to look at :doc:`Django's available middleware </ref/middleware>` "
"for examples."
msgstr ""

# 9e7a8c39b31e43b8905c0455de1de24e
#: ../../../../1.8/docs/topics/http/middleware.txt:295
msgid ""
"If you write a middleware component that you think would be useful to other "
"people, contribute to the community! :doc:`Let us know "
"</internals/contributing/index>`, and we'll consider adding it to Django."
msgstr ""

# fdaf305905a64378bf3563ea03994194
#: ../../../../1.8/docs/topics/http/sessions.txt:3
msgid "How to use sessions"
msgstr ""

# 890125453ab14395b3644d8e34ee5dad
#: ../../../../1.8/docs/topics/http/sessions.txt:8
msgid ""
"Django provides full support for anonymous sessions. The session framework "
"lets you store and retrieve arbitrary data on a per-site-visitor basis. It "
"stores data on the server side and abstracts the sending and receiving of "
"cookies. Cookies contain a session ID -- not the data itself (unless you're "
"using the :ref:`cookie based backend<cookie-session-backend>`)."
msgstr ""

# 9a067c30ecf6453fb2d6023f53334597
#: ../../../../1.8/docs/topics/http/sessions.txt:15
msgid "Enabling sessions"
msgstr ""

# f69882acdb7c40d7ab772237bb0683eb
#: ../../../../1.8/docs/topics/http/sessions.txt:17
msgid ""
"Sessions are implemented via a piece of :doc:`middleware </ref/middleware>`."
msgstr ""

# 5ece469da68c47cbb6c0154a134d8a5b
#: ../../../../1.8/docs/topics/http/sessions.txt:19
msgid "To enable session functionality, do the following:"
msgstr ""

# 5b7a740c12954bef9bfeec14ad503ebe
#: ../../../../1.8/docs/topics/http/sessions.txt:21
msgid ""
"Edit the :setting:`MIDDLEWARE_CLASSES` setting and make sure it contains "
"``'django.contrib.sessions.middleware.SessionMiddleware'``. The default "
"``settings.py`` created by ``django-admin startproject`` has "
"``SessionMiddleware`` activated."
msgstr ""

# f51b355f865f473587951dcfbe13a629
#: ../../../../1.8/docs/topics/http/sessions.txt:26
msgid ""
"If you don't want to use sessions, you might as well remove the "
"``SessionMiddleware`` line from :setting:`MIDDLEWARE_CLASSES` and "
"``'django.contrib.sessions'`` from your :setting:`INSTALLED_APPS`. It'll "
"save you a small bit of overhead."
msgstr ""

# 3004ee04588342098dca83a37f9b6eed
#: ../../../../1.8/docs/topics/http/sessions.txt:34
msgid "Configuring the session engine"
msgstr ""

# 7b662a6c91874dce80e695fdbf502951
#: ../../../../1.8/docs/topics/http/sessions.txt:36
msgid ""
"By default, Django stores sessions in your database (using the model "
"``django.contrib.sessions.models.Session``). Though this is convenient, in "
"some setups it's faster to store session data elsewhere, so Django can be "
"configured to store session data on your filesystem or in your cache."
msgstr ""

# bfb53491a7564258ab24280ea96cbea8
#: ../../../../1.8/docs/topics/http/sessions.txt:42
msgid "Using database-backed sessions"
msgstr ""

# 9f7e4ad542354758816f35aae8efd55b
#: ../../../../1.8/docs/topics/http/sessions.txt:44
msgid ""
"If you want to use a database-backed session, you need to add "
"``'django.contrib.sessions'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

# 2d5fda344ed14375bac2ecb8148a439a
#: ../../../../1.8/docs/topics/http/sessions.txt:47
msgid ""
"Once you have configured your installation, run ``manage.py migrate`` to "
"install the single database table that stores session data."
msgstr ""

# 845b52816cee440b8d7a0dce630f836c
#: ../../../../1.8/docs/topics/http/sessions.txt:53
msgid "Using cached sessions"
msgstr ""

# c61f314e4fe44d88adc54347658a6d54
#: ../../../../1.8/docs/topics/http/sessions.txt:55
msgid ""
"For better performance, you may want to use a cache-based session backend."
msgstr ""

# befead490b1c460b8abbef58644650d6
#: ../../../../1.8/docs/topics/http/sessions.txt:57
msgid ""
"To store session data using Django's cache system, you'll first need to make"
" sure you've configured your cache; see the :doc:`cache documentation "
"</topics/cache>` for details."
msgstr ""

# ae59f1384e824479ab2ebca1eca3fb6b
#: ../../../../1.8/docs/topics/http/sessions.txt:63
msgid ""
"You should only use cache-based sessions if you're using the Memcached cache"
" backend. The local-memory cache backend doesn't retain data long enough to "
"be a good choice, and it'll be faster to use file or database sessions "
"directly instead of sending everything through the file or database cache "
"backends. Additionally, the local-memory cache backend is NOT multi-process "
"safe, therefore probably not a good choice for production environments."
msgstr ""

# b58d24a8a0704a98b31ae713a08bdc96
#: ../../../../1.8/docs/topics/http/sessions.txt:71
msgid ""
"If you have multiple caches defined in :setting:`CACHES`, Django will use "
"the default cache. To use another cache, set :setting:`SESSION_CACHE_ALIAS` "
"to the name of that cache."
msgstr ""

# 83ed6fdd961a49a79529f8a2e362a376
#: ../../../../1.8/docs/topics/http/sessions.txt:75
msgid ""
"Once your cache is configured, you've got two choices for how to store data "
"in the cache:"
msgstr ""

# 251778bd4e9240859a5c9eacae7eb525
#: ../../../../1.8/docs/topics/http/sessions.txt:78
msgid ""
"Set :setting:`SESSION_ENGINE` to "
"``\"django.contrib.sessions.backends.cache\"`` for a simple caching session "
"store. Session data will be stored directly in your cache. However, session "
"data may not be persistent: cached data can be evicted if the cache fills up"
" or if the cache server is restarted."
msgstr ""

# 5cb46910e22e443c8f997ce4d525268d
#: ../../../../1.8/docs/topics/http/sessions.txt:84
msgid ""
"For persistent, cached data, set :setting:`SESSION_ENGINE` to "
"``\"django.contrib.sessions.backends.cached_db\"``. This uses a write-"
"through cache -- every write to the cache will also be written to the "
"database. Session reads only use the database if the data is not already in "
"the cache."
msgstr ""

# c5cabbe509b1455abf035b88862db38b
#: ../../../../1.8/docs/topics/http/sessions.txt:90
msgid ""
"Both session stores are quite fast, but the simple cache is faster because "
"it disregards persistence. In most cases, the ``cached_db`` backend will be "
"fast enough, but if you need that last bit of performance, and are willing "
"to let session data be expunged from time to time, the ``cache`` backend is "
"for you."
msgstr ""

# 03ab947408f340fba15c0165b633c5be
#: ../../../../1.8/docs/topics/http/sessions.txt:95
msgid ""
"If you use the ``cached_db`` session backend, you also need to follow the "
"configuration instructions for the `using database-backed sessions`_."
msgstr ""

# 6cdcd1b3c6884e1283617d8c35d814fb
#: ../../../../1.8/docs/topics/http/sessions.txt:100
msgid ""
"Before version 1.7, the ``cached_db`` backend always used the ``default`` "
"cache rather than the :setting:`SESSION_CACHE_ALIAS`."
msgstr ""

# b082bbf843ce4d6da8560f0b077dec42
#: ../../../../1.8/docs/topics/http/sessions.txt:104
msgid "Using file-based sessions"
msgstr ""

# 1e98b553e9e94aef9e0c27d69b59775f
#: ../../../../1.8/docs/topics/http/sessions.txt:106
msgid ""
"To use file-based sessions, set the :setting:`SESSION_ENGINE` setting to "
"``\"django.contrib.sessions.backends.file\"``."
msgstr ""

# 48189a932f564467af56c4c3ac7128b0
#: ../../../../1.8/docs/topics/http/sessions.txt:109
msgid ""
"You might also want to set the :setting:`SESSION_FILE_PATH` setting (which "
"defaults to output from ``tempfile.gettempdir()``, most likely ``/tmp``) to "
"control where Django stores session files. Be sure to check that your Web "
"server has permissions to read and write to this location."
msgstr ""

# 2f1c1096d71b433fb63d5a7c3a181eff
#: ../../../../1.8/docs/topics/http/sessions.txt:117
msgid "Using cookie-based sessions"
msgstr ""

# 42199daa457b4c74bf76b835a0d2d6ba
#: ../../../../1.8/docs/topics/http/sessions.txt:119
msgid ""
"To use cookies-based sessions, set the :setting:`SESSION_ENGINE` setting to "
"``\"django.contrib.sessions.backends.signed_cookies\"``. The session data "
"will be stored using Django's tools for :doc:`cryptographic signing "
"</topics/signing>` and the :setting:`SECRET_KEY` setting."
msgstr ""

# 1aac644ab04b4182bfa3e065a6c3cda5
#: ../../../../1.8/docs/topics/http/sessions.txt:126
msgid ""
"It's recommended to leave the :setting:`SESSION_COOKIE_HTTPONLY` setting on "
"``True`` to prevent access to the stored data from JavaScript."
msgstr ""

# 22f2dd6d82804753800f1ace74f09b5e
#: ../../../../1.8/docs/topics/http/sessions.txt:131
msgid ""
"**If the SECRET_KEY is not kept secret and you are using the** "
":class:`~django.contrib.sessions.serializers.PickleSerializer`, **this can "
"lead to arbitrary remote code execution.**"
msgstr ""

# 6b1dd69187774496a74edb2bf2f718ed
#: ../../../../1.8/docs/topics/http/sessions.txt:135
msgid ""
"An attacker in possession of the :setting:`SECRET_KEY` can not only generate"
" falsified session data, which your site will trust, but also remotely "
"execute arbitrary code, as the data is serialized using pickle."
msgstr ""

# 58fd62e09e90427991540d8856c06eec
#: ../../../../1.8/docs/topics/http/sessions.txt:139
msgid ""
"If you use cookie-based sessions, pay extra care that your secret key is "
"always kept completely secret, for any system which might be remotely "
"accessible."
msgstr ""

# 58c13e9eb87240258381a449144ed120
#: ../../../../1.8/docs/topics/http/sessions.txt:143
msgid "**The session data is signed but not encrypted**"
msgstr ""

# 2a3e9f2fe6e24499b1ce31d7ee9cdfd5
#: ../../../../1.8/docs/topics/http/sessions.txt:145
msgid ""
"When using the cookies backend the session data can be read by the client."
msgstr ""

# 35d29769cf544b37b39d1805a15cd737
#: ../../../../1.8/docs/topics/http/sessions.txt:147
msgid ""
"A MAC (Message Authentication Code) is used to protect the data against "
"changes by the client, so that the session data will be invalidated when "
"being tampered with. The same invalidation happens if the client storing the"
" cookie (e.g. your user's browser) can't store all of the session cookie and"
" drops data. Even though Django compresses the data, it's still entirely "
"possible to exceed the `common limit of 4096 bytes`_ per cookie."
msgstr ""

# 1f854e75bf244a48b8dd7ce873e22945
#: ../../../../1.8/docs/topics/http/sessions.txt:154
msgid "**No freshness guarantee**"
msgstr ""

# 482abc2cd898481e934563439f4e43ac
#: ../../../../1.8/docs/topics/http/sessions.txt:156
msgid ""
"Note also that while the MAC can guarantee the authenticity of the data "
"(that it was generated by your site, and not someone else), and the "
"integrity of the data (that it is all there and correct), it cannot "
"guarantee freshness i.e. that you are being sent back the last thing you "
"sent to the client. This means that for some uses of session data, the "
"cookie backend might open you up to `replay attacks`_. Unlike other session "
"backends which keep a server-side record of each session and invalidate it "
"when a user logs out, cookie-based sessions are not invalidated when a user "
"logs out. Thus if an attacker steals a user's cookie, they can use that "
"cookie to login as that user even if the user logs out. Cookies will only be"
" detected as 'stale' if they are older than your "
":setting:`SESSION_COOKIE_AGE`."
msgstr ""

# fdab3dc73aab44a5b20a969539bb9014
#: ../../../../1.8/docs/topics/http/sessions.txt:169
msgid "**Performance**"
msgstr ""

# 959761f779b2456e9438a47fc472dd1c
#: ../../../../1.8/docs/topics/http/sessions.txt:171
msgid ""
"Finally, the size of a cookie can have an impact on the `speed of your "
"site`_."
msgstr ""

# 6429f7d7ab4746ac9f4b0ab22b4a094d
#: ../../../../1.8/docs/topics/http/sessions.txt:178
msgid "Using sessions in views"
msgstr ""

# 899bdd4372bf4cf183a52e6647a532f5
#: ../../../../1.8/docs/topics/http/sessions.txt:180
msgid ""
"When ``SessionMiddleware`` is activated, each "
":class:`~django.http.HttpRequest` object -- the first argument to any Django"
" view function -- will have a ``session`` attribute, which is a dictionary-"
"like object."
msgstr ""

# a6a75178a2964ab8b98f02260fa6d20f
#: ../../../../1.8/docs/topics/http/sessions.txt:184
msgid ""
"You can read it and write to ``request.session`` at any point in your view. "
"You can edit it multiple times."
msgstr ""

# 8cd10a1577fa41419f8af5bea26f2095
#: ../../../../1.8/docs/topics/http/sessions.txt:189
msgid ""
"This is the base class for all session objects. It has the following "
"standard dictionary methods:"
msgstr ""

# 52fde1309548419984c4581481320254
#: ../../../../1.8/docs/topics/http/sessions.txt:194
msgid "Example: ``fav_color = request.session['fav_color']``"
msgstr ""

# 1c29a280116449faba660e018d695398
#: ../../../../1.8/docs/topics/http/sessions.txt:198
msgid "Example: ``request.session['fav_color'] = 'blue'``"
msgstr ""

# 6c15055e89f1479eaddd74306a19a1cc
#: ../../../../1.8/docs/topics/http/sessions.txt:202
msgid ""
"Example: ``del request.session['fav_color']``. This raises ``KeyError`` if "
"the given ``key`` isn't already in the session."
msgstr ""

# 08c6bacc993d4c0fbd5b2d1b203a4650
#: ../../../../1.8/docs/topics/http/sessions.txt:207
msgid "Example: ``'fav_color' in request.session``"
msgstr ""

# 7573a10affde40e29befffd0ca657bb2
#: ../../../../1.8/docs/topics/http/sessions.txt:211
msgid "Example: ``fav_color = request.session.get('fav_color', 'red')``"
msgstr ""

# b0f58d05a2b14dbdbc8d1f7a588a15c8
#: ../../../../1.8/docs/topics/http/sessions.txt:215
msgid "Example: ``fav_color = request.session.pop('fav_color')``"
msgstr ""

# 1497af00ba7d4f90986eac8dbf4e2b92
#: ../../../../1.8/docs/topics/http/sessions.txt:225
msgid "It also has these methods:"
msgstr ""

# c743a7eb5a2a4dbeb0a66beee4cde3d3
#: ../../../../1.8/docs/topics/http/sessions.txt:229
msgid ""
"Deletes the current session data from the session and deletes the session "
"cookie. This is used if you want to ensure that the previous session data "
"can't be accessed again from the user's browser (for example, the "
":func:`django.contrib.auth.logout()` function calls it)."
msgstr ""

# ba33ee8f94f3415481b51cb02a4a6850
#: ../../../../1.8/docs/topics/http/sessions.txt:236
msgid ""
"Deletion of the session cookie is a behavior new in Django 1.8. Previously, "
"the behavior was to regenerate the session key value that was sent back to "
"the user in the cookie."
msgstr ""

# 51ce502ca4f043a98148340b19e2dd28
#: ../../../../1.8/docs/topics/http/sessions.txt:242
msgid ""
"Sets a test cookie to determine whether the user's browser supports cookies."
" Due to the way cookies work, you won't be able to test this until the "
"user's next page request. See `Setting test cookies`_ below for more "
"information."
msgstr ""

# 16203619bc244095b32a1f8a09ae5199
#: ../../../../1.8/docs/topics/http/sessions.txt:249
msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"browser accepted the test cookie. Due to the way cookies work, you'll have "
"to call ``set_test_cookie()`` on a previous, separate page request. See "
"`Setting test cookies`_ below for more information."
msgstr ""

# 20a77351c0284d0da79ab9dcc2e3ed70
#: ../../../../1.8/docs/topics/http/sessions.txt:256
msgid "Deletes the test cookie. Use this to clean up after yourself."
msgstr ""

# 5d447d7e33f3412eb1ab5ce1f2311cb9
#: ../../../../1.8/docs/topics/http/sessions.txt:260
msgid ""
"Sets the expiration time for the session. You can pass a number of different"
" values:"
msgstr ""

# 92d0b147094646739b8daeab55883fde
#: ../../../../1.8/docs/topics/http/sessions.txt:263
msgid ""
"If ``value`` is an integer, the session will expire after that many seconds "
"of inactivity. For example, calling ``request.session.set_expiry(300)`` "
"would make the session expire in 5 minutes."
msgstr ""

# ceed3cf1ff194fcd9cea13a98e72c340
#: ../../../../1.8/docs/topics/http/sessions.txt:268
msgid ""
"If ``value`` is a ``datetime`` or ``timedelta`` object, the session will "
"expire at that specific date/time. Note that ``datetime`` and ``timedelta`` "
"values are only serializable if you are using the "
":class:`~django.contrib.sessions.serializers.PickleSerializer`."
msgstr ""

# e7ca2625f4bb4aa8a6b8c027116e50c5
#: ../../../../1.8/docs/topics/http/sessions.txt:273
msgid ""
"If ``value`` is ``0``, the user's session cookie will expire when the user's"
" Web browser is closed."
msgstr ""

# 64a12475eb3646aca76937875d11ef00
#: ../../../../1.8/docs/topics/http/sessions.txt:276
msgid ""
"If ``value`` is ``None``, the session reverts to using the global session "
"expiry policy."
msgstr ""

# ce3356bf9765462e9fdb090c8289e66d
#: ../../../../1.8/docs/topics/http/sessions.txt:279
msgid ""
"Reading a session is not considered activity for expiration purposes. "
"Session expiration is computed from the last time the session was "
"*modified*."
msgstr ""

# 3ad1d198eea24a2d8e49fa2e6bd92453
#: ../../../../1.8/docs/topics/http/sessions.txt:285
msgid ""
"Returns the number of seconds until this session expires. For sessions with "
"no custom expiration (or those set to expire at browser close), this will "
"equal :setting:`SESSION_COOKIE_AGE`."
msgstr ""

# 07aee85d383e4dd28aef586162426be6
#: ../../../../1.8/docs/topics/http/sessions.txt:289
msgid "This function accepts two optional keyword arguments:"
msgstr ""

# d815a003c47c4b8b8a2486ef4199a5d8
#: ../../../../1.8/docs/topics/http/sessions.txt:291
msgid ""
"``modification``: last modification of the session, as a "
":class:`~datetime.datetime` object. Defaults to the current time."
msgstr ""

# b73ebe79072344f0884bdf3f9982d2fe
#: ../../../../1.8/docs/topics/http/sessions.txt:293
msgid ""
"``expiry``: expiry information for the session, as a "
":class:`~datetime.datetime` object, an :class:`int` (in seconds), or "
"``None``. Defaults to the value stored in the session by :meth:`set_expiry`,"
" if there is one, or ``None``."
msgstr ""

# 3b0f5b1e0ce64e5ebb2bc3373f77cffb
#: ../../../../1.8/docs/topics/http/sessions.txt:300
msgid ""
"Returns the date this session will expire. For sessions with no custom "
"expiration (or those set to expire at browser close), this will equal the "
"date :setting:`SESSION_COOKIE_AGE` seconds from now."
msgstr ""

# 4292ff540d4c4fe791f78db300d1949a
#: ../../../../1.8/docs/topics/http/sessions.txt:304
msgid ""
"This function accepts the same keyword arguments as :meth:`get_expiry_age`."
msgstr ""

# f160f1f0235f49bf87738d721c7b0b1b
#: ../../../../1.8/docs/topics/http/sessions.txt:308
msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"session cookie will expire when the user's Web browser is closed."
msgstr ""

# 386d01f6701740be9218673fa5a1ab46
#: ../../../../1.8/docs/topics/http/sessions.txt:313
msgid ""
"Removes expired sessions from the session store. This class method is called"
" by :djadmin:`clearsessions`."
msgstr ""

# 00585182d6c745248aa08068e41bfc34
#: ../../../../1.8/docs/topics/http/sessions.txt:318
msgid ""
"Creates a new session key while retaining the current session data. "
":func:`django.contrib.auth.login()` calls this method to mitigate against "
"session fixation."
msgstr ""

# 8cc74c49a9644589a35c749d9b63a204
#: ../../../../1.8/docs/topics/http/sessions.txt:325
msgid "Session serialization"
msgstr ""

# 51a1bc46f2c7403b85df2cd9ce35d4f4
#: ../../../../1.8/docs/topics/http/sessions.txt:327
msgid ""
"Before version 1.6, Django defaulted to using :mod:`pickle` to serialize "
"session data before storing it in the backend. If you're using the "
":ref:`signed cookie session backend<cookie-session-backend>` and "
":setting:`SECRET_KEY` is known by an attacker (there isn't an inherent "
"vulnerability in Django that would cause it to leak), the attacker could "
"insert a string into their session which, when unpickled, executes arbitrary"
" code on the server. The technique for doing so is simple and easily "
"available on the internet. Although the cookie session storage signs the "
"cookie-stored data to prevent tampering, a :setting:`SECRET_KEY` leak "
"immediately escalates to a remote code execution vulnerability."
msgstr ""

# 7405a0e1fbf7430eb147c46ae1140a5e
#: ../../../../1.8/docs/topics/http/sessions.txt:338
msgid ""
"This attack can be mitigated by serializing session data using JSON rather "
"than :mod:`pickle`. To facilitate this, Django 1.5.3 introduced a new "
"setting, :setting:`SESSION_SERIALIZER`, to customize the session "
"serialization format. For backwards compatibility, this setting defaults to "
"using :class:`django.contrib.sessions.serializers.PickleSerializer` in "
"Django 1.5.x, but, for security hardening, defaults to "
":class:`django.contrib.sessions.serializers.JSONSerializer` in Django 1.6. "
"Even with the caveats described in :ref:`custom-serializers`, we highly "
"recommend sticking with JSON serialization *especially if you are using the "
"cookie backend*."
msgstr ""

# 4f44f86fabf94a9397e1e65203bfac26
#: ../../../../1.8/docs/topics/http/sessions.txt:350
msgid "Bundled Serializers"
msgstr ""

# 1f1be476f80f45289773b8238f4308e5
#: ../../../../1.8/docs/topics/http/sessions.txt:354
msgid ""
"A wrapper around the JSON serializer from :mod:`django.core.signing`. Can "
"only serialize basic data types."
msgstr ""

# 2b7b3d8496674f5bb0d3d46762401435
#: ../../../../1.8/docs/topics/http/sessions.txt:357
msgid ""
"In addition, as JSON supports only string keys, note that using non-string "
"keys in ``request.session`` won't work as expected::"
msgstr ""

# dc061688b116464ca29daf239d6b44f7
#: ../../../../1.8/docs/topics/http/sessions.txt:368
msgid ""
"See the :ref:`custom-serializers` section for more details on limitations of"
" JSON serialization."
msgstr ""

# cd35131a3eb54005a8cb1c120fa73ee8
#: ../../../../1.8/docs/topics/http/sessions.txt:373
msgid ""
"Supports arbitrary Python objects, but, as described above, can lead to a "
"remote code execution vulnerability if :setting:`SECRET_KEY` becomes known "
"by an attacker."
msgstr ""

# 8d25f77ba8ea4905aa76c08d5eb43087
#: ../../../../1.8/docs/topics/http/sessions.txt:380
msgid "Write Your Own Serializer"
msgstr ""

# 7648011e26814345aee996e3c6df5218
#: ../../../../1.8/docs/topics/http/sessions.txt:382
msgid ""
"Note that unlike "
":class:`~django.contrib.sessions.serializers.PickleSerializer`, the "
":class:`~django.contrib.sessions.serializers.JSONSerializer` cannot handle "
"arbitrary Python data types. As is often the case, there is a trade-off "
"between convenience and security. If you wish to store more advanced data "
"types including ``datetime`` and ``Decimal`` in JSON backed sessions, you "
"will need to write a custom serializer (or convert such values to a JSON "
"serializable object before storing them in ``request.session``). While "
"serializing these values is fairly straightforward "
"(``django.core.serializers.json.DateTimeAwareJSONEncoder`` may be helpful), "
"writing a decoder that can reliably get back the same thing that you put in "
"is more fragile. For example, you run the risk of returning a ``datetime`` "
"that was actually a string that just happened to be in the same format "
"chosen for ``datetime``\\s)."
msgstr ""

# 93589237db1349599c6c386de4b6be4e
#: ../../../../1.8/docs/topics/http/sessions.txt:396
msgid ""
"Your serializer class must implement two methods, ``dumps(self, obj)`` and "
"``loads(self, data)``, to serialize and deserialize the dictionary of "
"session data, respectively."
msgstr ""

# a5bee3d515674b93949499b5da5686c3
#: ../../../../1.8/docs/topics/http/sessions.txt:401
msgid "Session object guidelines"
msgstr ""

# d37473a0bafb412593eac2d3e9c6ab8c
#: ../../../../1.8/docs/topics/http/sessions.txt:403
msgid ""
"Use normal Python strings as dictionary keys on ``request.session``. This is"
" more of a convention than a hard-and-fast rule."
msgstr ""

# 9d03e07698bd4fa5afc0c63c70687130
#: ../../../../1.8/docs/topics/http/sessions.txt:406
msgid ""
"Session dictionary keys that begin with an underscore are reserved for "
"internal use by Django."
msgstr ""

# ce1a625c3b5a40e9bddeb1feaa2ac458
#: ../../../../1.8/docs/topics/http/sessions.txt:409
msgid ""
"Don't override ``request.session`` with a new object, and don't access or "
"set its attributes. Use it like a Python dictionary."
msgstr ""

# ca5eb5d024ed4100a85e6b97fc200c40
#: ../../../../1.8/docs/topics/http/sessions.txt:415
msgid ""
"This simplistic view sets a ``has_commented`` variable to ``True`` after a "
"user posts a comment. It doesn't let a user post a comment more than once::"
msgstr ""

# 5d79558639ca4e49939f36e3636612ba
#: ../../../../1.8/docs/topics/http/sessions.txt:426
msgid "This simplistic view logs in a \"member\" of the site::"
msgstr ""

# b46d42430fd3453690c096af67ff5d44
#: ../../../../1.8/docs/topics/http/sessions.txt:436
msgid "...And this one logs a member out, according to ``login()`` above::"
msgstr ""

# 344179754598478cae98ae54ee6f59d4
#: ../../../../1.8/docs/topics/http/sessions.txt:445
msgid ""
"The standard :meth:`django.contrib.auth.logout` function actually does a bit"
" more than this to prevent inadvertent data leakage. It calls the "
":meth:`~backends.base.SessionBase.flush` method of ``request.session``. We "
"are using this example as a demonstration of how to work with session "
"objects, not as a full ``logout()`` implementation."
msgstr ""

# 4f06e77adc7b42259906b4c270426443
#: ../../../../1.8/docs/topics/http/sessions.txt:452
msgid "Setting test cookies"
msgstr ""

# 7fde9182c1db40bf8697935d8a3add8e
#: ../../../../1.8/docs/topics/http/sessions.txt:454
msgid ""
"As a convenience, Django provides an easy way to test whether the user's "
"browser accepts cookies. Just call the "
":meth:`~backends.base.SessionBase.set_test_cookie` method of "
"``request.session`` in a view, and call "
":meth:`~backends.base.SessionBase.test_cookie_worked` in a subsequent view "
"-- not in the same view call."
msgstr ""

# 68ae41d635664cadb5b27aabee7d063e
#: ../../../../1.8/docs/topics/http/sessions.txt:461
msgid ""
"This awkward split between ``set_test_cookie()`` and "
"``test_cookie_worked()`` is necessary due to the way cookies work. When you "
"set a cookie, you can't actually tell whether a browser accepted it until "
"the browser's next request."
msgstr ""

# 503daf3e7eb94d1c9a5ca0037bda7b4a
#: ../../../../1.8/docs/topics/http/sessions.txt:465
msgid ""
"It's good practice to use "
":meth:`~backends.base.SessionBase.delete_test_cookie()` to clean up after "
"yourself. Do this after you've verified that the test cookie worked."
msgstr ""

# 5f4afec3afc44742bcc1208d6bb24bdd
#: ../../../../1.8/docs/topics/http/sessions.txt:469
msgid "Here's a typical usage example::"
msgstr ""

# c7166be9093f45e688f8885a75f22c3c
#: ../../../../1.8/docs/topics/http/sessions.txt:482
msgid "Using sessions out of views"
msgstr ""

# 3d52ab11b9f143688b83adbb48e80bc8
#: ../../../../1.8/docs/topics/http/sessions.txt:486
msgid ""
"The examples in this section import the ``SessionStore`` object directly "
"from the ``django.contrib.sessions.backends.db`` backend. In your own code, "
"you should consider importing ``SessionStore`` from the session engine "
"designated by :setting:`SESSION_ENGINE`, as below:"
msgstr ""

# a1533db6a66e4374868c3c12f53a1db6
#: ../../../../1.8/docs/topics/http/sessions.txt:495
msgid "An API is available to manipulate session data outside of a view::"
msgstr ""

# ff27c87547984237a3f8d45cdeaac81e
#: ../../../../1.8/docs/topics/http/sessions.txt:509
msgid ""
"In order to mitigate session fixation attacks, sessions keys that don't "
"exist are regenerated::"
msgstr ""

# 8a49ab33ab9340bf9b6d5935c814620b
#: ../../../../1.8/docs/topics/http/sessions.txt:518
msgid ""
"If you're using the ``django.contrib.sessions.backends.db`` backend, each "
"session is just a normal Django model. The ``Session`` model is defined in "
"``django/contrib/sessions/models.py``. Because it's a normal model, you can "
"access sessions using the normal Django database API::"
msgstr ""

# e7b1b7cea03144ffa31023393bc637dc
#: ../../../../1.8/docs/topics/http/sessions.txt:528
msgid ""
"Note that you'll need to call ``get_decoded()`` to get the session "
"dictionary. This is necessary because the dictionary is stored in an encoded"
" format::"
msgstr ""

# c5053122b5ad4907b755de0716efee26
#: ../../../../1.8/docs/topics/http/sessions.txt:537
msgid "When sessions are saved"
msgstr ""

# b0189e302f484d2fb70530fc62dbb3d2
#: ../../../../1.8/docs/topics/http/sessions.txt:539
msgid ""
"By default, Django only saves to the session database when the session has "
"been modified -- that is if any of its dictionary values have been assigned "
"or deleted::"
msgstr ""

# 9584ba974494411f9d4b4962b433d997
#: ../../../../1.8/docs/topics/http/sessions.txt:556
msgid ""
"In the last case of the above example, we can tell the session object "
"explicitly that it has been modified by setting the ``modified`` attribute "
"on the session object::"
msgstr ""

# 033221752f99482b9492ca8e96c3a950
#: ../../../../1.8/docs/topics/http/sessions.txt:562
msgid ""
"To change this default behavior, set the "
":setting:`SESSION_SAVE_EVERY_REQUEST` setting to ``True``. When set to "
"``True``, Django will save the session to the database on every single "
"request."
msgstr ""

# 3d1918f47dbd40adbcd4cb94af210ba7
#: ../../../../1.8/docs/topics/http/sessions.txt:566
msgid ""
"Note that the session cookie is only sent when a session has been created or"
" modified. If :setting:`SESSION_SAVE_EVERY_REQUEST` is ``True``, the session"
" cookie will be sent on every request."
msgstr ""

# fb736622b458432d86cf19abf831a295
#: ../../../../1.8/docs/topics/http/sessions.txt:570
msgid ""
"Similarly, the ``expires`` part of a session cookie is updated each time the"
" session cookie is sent."
msgstr ""

# be86b60326294d76a576f955c46a3d08
#: ../../../../1.8/docs/topics/http/sessions.txt:573
msgid "The session is not saved if the response's status code is 500."
msgstr ""

# ab476ce71d7442328897a7eca8a7e730
#: ../../../../1.8/docs/topics/http/sessions.txt:578
msgid "Browser-length sessions vs. persistent sessions"
msgstr ""

# 7e4111170b1b4ee8acc7743b31068bdd
#: ../../../../1.8/docs/topics/http/sessions.txt:580
msgid ""
"You can control whether the session framework uses browser-length sessions "
"vs. persistent sessions with the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` "
"setting."
msgstr ""

# ad5b8e016f894686ad01ab4da171923a
#: ../../../../1.8/docs/topics/http/sessions.txt:584
msgid ""
"By default, :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``False``, "
"which means session cookies will be stored in users' browsers for as long as"
" :setting:`SESSION_COOKIE_AGE`. Use this if you don't want people to have to"
" log in every time they open a browser."
msgstr ""

# e270b75a46fb47148e45534dcdf1c38e
#: ../../../../1.8/docs/topics/http/sessions.txt:589
msgid ""
"If :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``True``, Django "
"will use browser-length cookies -- cookies that expire as soon as the user "
"closes their browser. Use this if you want people to have to log in every "
"time they open a browser."
msgstr ""

# a1071cf5c94c41be85cb7737c8430bbf
#: ../../../../1.8/docs/topics/http/sessions.txt:594
msgid ""
"This setting is a global default and can be overwritten at a per-session "
"level by explicitly calling the "
":meth:`~backends.base.SessionBase.set_expiry` method of ``request.session`` "
"as described above in `using sessions in views`_."
msgstr ""

# 50c74baa7ba446499e07b6a213196274
#: ../../../../1.8/docs/topics/http/sessions.txt:600
msgid ""
"Some browsers (Chrome, for example) provide settings that allow users to "
"continue browsing sessions after closing and re-opening the browser. In some"
" cases, this can interfere with the "
":setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting and prevent sessions from"
" expiring on browser close. Please be aware of this while testing Django "
"applications which have the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` "
"setting enabled."
msgstr ""

# e214181d89a64318be46c33c4051f4ab
#: ../../../../1.8/docs/topics/http/sessions.txt:609
msgid "Clearing the session store"
msgstr ""

# 738b7da417fa4ed0800d43d94ff73a3c
#: ../../../../1.8/docs/topics/http/sessions.txt:611
msgid ""
"As users create new sessions on your website, session data can accumulate in"
" your session store. If you're using the database backend, the "
"``django_session`` database table will grow. If you're using the file "
"backend, your temporary directory will contain an increasing number of "
"files."
msgstr ""

# ea3c5983dc47471fa51d622f4e70fbf7
#: ../../../../1.8/docs/topics/http/sessions.txt:616
msgid ""
"To understand this problem, consider what happens with the database backend."
" When a user logs in, Django adds a row to the ``django_session`` database "
"table. Django updates this row each time the session data changes. If the "
"user logs out manually, Django deletes the row. But if the user does *not* "
"log out, the row never gets deleted. A similar process happens with the file"
" backend."
msgstr ""

# d80044362d6244ac86ab100b46a11c85
#: ../../../../1.8/docs/topics/http/sessions.txt:622
msgid ""
"Django does *not* provide automatic purging of expired sessions. Therefore, "
"it's your job to purge expired sessions on a regular basis. Django provides "
"a clean-up management command for this purpose: :djadmin:`clearsessions`. "
"It's recommended to call this command on a regular basis, for example as a "
"daily cron job."
msgstr ""

# 1c5d66e504a04081b239e7d4eb3cc139
#: ../../../../1.8/docs/topics/http/sessions.txt:628
msgid ""
"Note that the cache backend isn't vulnerable to this problem, because caches"
" automatically delete stale data. Neither is the cookie backend, because the"
" session data is stored by the users' browsers."
msgstr ""

# bfa7942134ca43ccb51d8d2fcd543d31
#: ../../../../1.8/docs/topics/http/sessions.txt:633
msgid "Settings"
msgstr ""

# 9edc562e6ef040d9acaeab20ba572b39
#: ../../../../1.8/docs/topics/http/sessions.txt:635
msgid ""
"A few :ref:`Django settings <settings-sessions>` give you control over "
"session behavior:"
msgstr ""

# 80139531c0fe4d32b3018501a89dcad1
#: ../../../../1.8/docs/topics/http/sessions.txt:638
msgid ":setting:`SESSION_CACHE_ALIAS`"
msgstr ""

# dc6bda0cd72c4089ab4621cc7801be0f
#: ../../../../1.8/docs/topics/http/sessions.txt:639
msgid ":setting:`SESSION_COOKIE_AGE`"
msgstr ""

# 7333f2220a9f40f6b1485cee134902c6
#: ../../../../1.8/docs/topics/http/sessions.txt:640
msgid ":setting:`SESSION_COOKIE_DOMAIN`"
msgstr ""

# d8084264f517475987765689f59df03a
#: ../../../../1.8/docs/topics/http/sessions.txt:641
msgid ":setting:`SESSION_COOKIE_HTTPONLY`"
msgstr ""

# 365d0b1105ca4597ba1be63e5e73c713
#: ../../../../1.8/docs/topics/http/sessions.txt:642
msgid ":setting:`SESSION_COOKIE_NAME`"
msgstr ""

# c35cefd507cf474f94d969c8b111ce2c
#: ../../../../1.8/docs/topics/http/sessions.txt:643
msgid ":setting:`SESSION_COOKIE_PATH`"
msgstr ""

# 85462c906feb47e481bf06c29617c943
#: ../../../../1.8/docs/topics/http/sessions.txt:644
msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ""

# 93a5c8a1ebdf4071a54135ae76cecc6a
#: ../../../../1.8/docs/topics/http/sessions.txt:645
msgid ":setting:`SESSION_ENGINE`"
msgstr ""

# b480a4f16f244d8e81aef9f73d0894d8
#: ../../../../1.8/docs/topics/http/sessions.txt:646
msgid ":setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE`"
msgstr ""

# 6053ad98f60d4b2e96fc59075693fc66
#: ../../../../1.8/docs/topics/http/sessions.txt:647
msgid ":setting:`SESSION_FILE_PATH`"
msgstr ""

# df1578c3a6ff417da87f7a8e8f99dda2
#: ../../../../1.8/docs/topics/http/sessions.txt:648
msgid ":setting:`SESSION_SAVE_EVERY_REQUEST`"
msgstr ""

# 346ea5cd7dfe4c4d89dbaab2c0b496d9
# 06a59b5462854bb582e79234ffb0d7a2
#: ../../../../1.8/docs/topics/http/sessions.txt:653
#: ../../../../1.8/docs/topics/security.txt:200
msgid "Session security"
msgstr ""

# b8af7bf9682a4d8893523e4847ee4cc3
#: ../../../../1.8/docs/topics/http/sessions.txt:655
msgid ""
"Subdomains within a site are able to set cookies on the client for the whole"
" domain. This makes session fixation possible if cookies are permitted from "
"subdomains not controlled by trusted users."
msgstr ""

# d258f37883b44d12a88b647077866386
#: ../../../../1.8/docs/topics/http/sessions.txt:659
msgid ""
"For example, an attacker could log into ``good.example.com`` and get a valid"
" session for their account. If the attacker has control over "
"``bad.example.com``, they can use it to send their session key to you since "
"a subdomain is permitted to set cookies on ``*.example.com``. When you visit"
" ``good.example.com``, you'll be logged in as the attacker and might "
"inadvertently enter your sensitive personal data (e.g. credit card info) "
"into the attackers account."
msgstr ""

# a18c8897d98d4b0bb2f42453d1032faf
#: ../../../../1.8/docs/topics/http/sessions.txt:666
msgid ""
"Another possible attack would be if ``good.example.com`` sets its "
":setting:`SESSION_COOKIE_DOMAIN` to ``\".example.com\"`` which would cause "
"session cookies from that site to be sent to ``bad.example.com``."
msgstr ""

# 6150ab3cf4aa4c23b2acc6eec2df2dc2
#: ../../../../1.8/docs/topics/http/sessions.txt:671
msgid "Technical details"
msgstr ""

# 5de51429064d4d75b60fb6e50450f12f
#: ../../../../1.8/docs/topics/http/sessions.txt:673
msgid ""
"The session dictionary accepts any :mod:`json` serializable value when using"
" :class:`~django.contrib.sessions.serializers.JSONSerializer` or any "
"pickleable Python object when using "
":class:`~django.contrib.sessions.serializers.PickleSerializer`. See the "
":mod:`pickle` module for more information."
msgstr ""

# f9f7e1df5eb4420da7550dbf3bab5167
#: ../../../../1.8/docs/topics/http/sessions.txt:679
msgid "Session data is stored in a database table named ``django_session`` ."
msgstr ""

# cd3cbea6708a4e72993043f095ce5552
#: ../../../../1.8/docs/topics/http/sessions.txt:681
msgid ""
"Django only sends a cookie if it needs to. If you don't set any session "
"data, it won't send a session cookie."
msgstr ""

# 204d04292d9c49ed9c3c56448a605b3b
#: ../../../../1.8/docs/topics/http/sessions.txt:685
msgid "Session IDs in URLs"
msgstr ""

# b45ca86d01ed4c2c86efa4a775953a61
#: ../../../../1.8/docs/topics/http/sessions.txt:687
msgid ""
"The Django sessions framework is entirely, and solely, cookie-based. It does"
" not fall back to putting session IDs in URLs as a last resort, as PHP does."
" This is an intentional design decision. Not only does that behavior make "
"URLs ugly, it makes your site vulnerable to session-ID theft via the "
"\"Referer\" header."
msgstr ""

# 8b75d3bf15864e0398ea25685963449f
#: ../../../../1.8/docs/topics/http/shortcuts.txt:3
msgid "Django shortcut functions"
msgstr ""

# 2930e5f25c6949e4a9c4268f1dfc31dd
#: ../../../../1.8/docs/topics/http/shortcuts.txt:11
msgid ""
"The package ``django.shortcuts`` collects helper functions and classes that "
"\"span\" multiple levels of MVC. In other words, these functions/classes "
"introduce controlled coupling for convenience's sake."
msgstr ""

# 2bb08267f20241ec958dc50c1ef3b936
#: ../../../../1.8/docs/topics/http/shortcuts.txt:16
msgid "``render``"
msgstr ""

# af2ba50b75a246188395cc8e50568368
#: ../../../../1.8/docs/topics/http/shortcuts.txt:20
msgid ""
"Combines a given template with a given context dictionary and returns an "
":class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

# 700deaf7ca1c430db7216c45abb9e13d
#: ../../../../1.8/docs/topics/http/shortcuts.txt:23
msgid ""
":func:`render()` is the same as a call to :func:`render_to_response()` with "
"a ``context_instance`` argument that forces the use of a "
":class:`~django.template.RequestContext`."
msgstr ""

# ef727c02b1f74219b1615d294b21584d
#: ../../../../1.8/docs/topics/http/shortcuts.txt:27
msgid ""
"Django does not provide a shortcut function which returns a "
":class:`~django.template.response.TemplateResponse` because the constructor "
"of :class:`~django.template.response.TemplateResponse` offers the same level"
" of convenience as :func:`render()`."
msgstr ""

# 94e5610a5857408d9bc1fc6c3ebe7b09
# 252dca0de75d48949d1b80bbdb4cf6de
# 561afb25a1c14c71beae7d78d527da59
# 57e63cef0e624c5c90d4387b0a24d1c4
# c8792ee70d1a460bbef7432f934cd0c8
#: ../../../../1.8/docs/topics/http/shortcuts.txt:33
#: ../../../../1.8/docs/topics/http/shortcuts.txt:130
#: ../../../../1.8/docs/topics/http/shortcuts.txt:297
#: ../../../../1.8/docs/topics/http/shortcuts.txt:370
#: ../../../../1.8/docs/topics/pagination.txt:137
msgid "Required arguments"
msgstr ""

# f5104d274b4144cb99830149f8e3b817
# 9aa1ac307c6243de8f41877b76e34a99
#: ../../../../1.8/docs/topics/http/shortcuts.txt:36
#: ../../../../1.8/docs/topics/templates.txt:296
msgid "``request``"
msgstr ""

# cf146cd2fa5d459ea52f4ac42e6c9f81
#: ../../../../1.8/docs/topics/http/shortcuts.txt:36
msgid "The request object used to generate this response."
msgstr ""

# 1013ef8dc87f4001ae09c1ebbaa0bba2
# 139de98d81d14141968bc12c9688b415
# 80706b0cd7fa4e5ca49818e1321ad0a7
#: ../../../../1.8/docs/topics/http/shortcuts.txt:39
#: ../../../../1.8/docs/topics/http/shortcuts.txt:136
#: ../../../../1.8/docs/topics/templates.txt:268
msgid "``template_name``"
msgstr ""

# bea513fc140a453d88010787e6d9dc15
#: ../../../../1.8/docs/topics/http/shortcuts.txt:39
msgid "The full name of a template to use or sequence of template names."
msgstr ""

# 9fd47e7ed2c741d88d19ca2179dd1cb0
# 8782110ff1e244759514c2b45498bd0e
# 61ea5730374a420aa16d183215c4653b
#: ../../../../1.8/docs/topics/http/shortcuts.txt:42
#: ../../../../1.8/docs/topics/http/shortcuts.txt:139
#: ../../../../1.8/docs/topics/pagination.txt:148
msgid "Optional arguments"
msgstr ""

# e96f23c4c02a4993a2fc2d54073d3b0a
# 40159cb4e07442bc8f28211832a12706
# aaf1d97a4f124ee3ad76f548a8c0d858
#: ../../../../1.8/docs/topics/http/shortcuts.txt:52
#: ../../../../1.8/docs/topics/http/shortcuts.txt:149
#: ../../../../1.8/docs/topics/templates.txt:279
msgid "``context``"
msgstr ""

# d769d66b940a4587a67f073c77481b3d
# 7b8ad84aa02c400b91ed5cf3200377a8
#: ../../../../1.8/docs/topics/http/shortcuts.txt:45
#: ../../../../1.8/docs/topics/http/shortcuts.txt:142
msgid ""
"A dictionary of values to add to the template context. By default, this is "
"an empty dictionary. If a value in the dictionary is callable, the view will"
" call it just before rendering the template."
msgstr ""

# 3ae6409760304ab8a54a431321e37c53
# 29d275f878ee4d81b98be5a32ad3a8ee
# 0cab6454487c422e8b449beedb666497
#: ../../../../1.8/docs/topics/http/shortcuts.txt:51
#: ../../../../1.8/docs/topics/http/shortcuts.txt:148
#: ../../../../1.8/docs/topics/templates.txt:275
msgid ""
"The ``context`` argument used to be called ``dictionary``. That name is "
"deprecated in Django 1.8 and will be removed in Django 1.10."
msgstr ""

# 0f4f0740c8e94f52a5e6066091b6b801
# 82e2585ee2da47ce9e8d876425499940
# bdb2cc8e58ab44849dc76fa761079052
#: ../../../../1.8/docs/topics/http/shortcuts.txt:61
#: ../../../../1.8/docs/topics/http/shortcuts.txt:165
#: ../../../../1.8/docs/topics/templates.txt:289
msgid "``context_instance``"
msgstr ""

# db886eda12de46f9a41ad20639c76f72
#: ../../../../1.8/docs/topics/http/shortcuts.txt:55
msgid ""
"The context instance to render the template with. By default, the template "
"will be rendered with a ``RequestContext`` instance (filled with values from"
" ``request`` and ``context``)."
msgstr ""

# 4b9b55abc8d446b2a58f44cf070f2988
# ab7f599dd1784415ae53ce688ecb7b45
#: ../../../../1.8/docs/topics/http/shortcuts.txt:61
#: ../../../../1.8/docs/topics/http/shortcuts.txt:165
msgid ""
"The ``context_instance`` argument is deprecated. Simply use ``context``."
msgstr ""

# a2368e04a9404dcfb8084d7bdc3fef7f
# c9efcd11344946adad986aae9cb0347d
#: ../../../../1.8/docs/topics/http/shortcuts.txt:65
#: ../../../../1.8/docs/topics/http/shortcuts.txt:169
msgid "``content_type``"
msgstr ""

# b14b8849096841d3bea9c3c62c4ca632
# 5c46233418b7449090b6cb43238f3a84
#: ../../../../1.8/docs/topics/http/shortcuts.txt:64
#: ../../../../1.8/docs/topics/http/shortcuts.txt:168
msgid ""
"The MIME type to use for the resulting document. Defaults to the value of "
"the :setting:`DEFAULT_CONTENT_TYPE` setting."
msgstr ""

# 3c7023400d3843e9a004caf6784c8dae
# 2b15804fec674954bf78b7e4514d78dd
#: ../../../../1.8/docs/topics/http/shortcuts.txt:68
#: ../../../../1.8/docs/topics/http/shortcuts.txt:172
msgid "``status``"
msgstr ""

# e2c4c6502fc44c45b37b5d0b28cd81dc
# cec8c986434b4ee090a7bd7961519ac0
#: ../../../../1.8/docs/topics/http/shortcuts.txt:68
#: ../../../../1.8/docs/topics/http/shortcuts.txt:172
msgid "The status code for the response. Defaults to ``200``."
msgstr ""

# fb5de3a9ec9c49218ed96f7f44d19cb5
#: ../../../../1.8/docs/topics/http/shortcuts.txt:78
msgid "``current_app``"
msgstr ""

# f2c2831fcc064ac38881a1dbb2c76f20
#: ../../../../1.8/docs/topics/http/shortcuts.txt:71
msgid ""
"A hint indicating which application contains the current view. See the "
":ref:`namespaced URL resolution strategy <topics-http-reversing-url-"
"namespaces>` for more information."
msgstr ""

# 16dd4f46ceb94111a924555aa3b205aa
#: ../../../../1.8/docs/topics/http/shortcuts.txt:77
msgid ""
"The ``current_app`` argument is deprecated. Instead you should set "
"``request.current_app``."
msgstr ""

# 86c40f175d4a455aa483a208e3006cd9
# a851c4063b4044b085a453d4ae43a96e
#: ../../../../1.8/docs/topics/http/shortcuts.txt:82
#: ../../../../1.8/docs/topics/http/shortcuts.txt:176
msgid "``using``"
msgstr ""

# 04fa9071ca01401c96329bc3eb46dff1
# 4cecdf5e0698428fb3e32ffcf9a22959
#: ../../../../1.8/docs/topics/http/shortcuts.txt:81
#: ../../../../1.8/docs/topics/http/shortcuts.txt:175
msgid ""
"The :setting:`NAME <TEMPLATES-NAME>` of a template engine to use for loading"
" the template."
msgstr ""

# 90a08bce11c5473594bffd96ee002766
# 656c63c72d0e4c24823046743095aaac
# b3ffcea21426441eb2ae38136fc7c40c
#: ../../../../1.8/docs/topics/http/shortcuts.txt:86
#: ../../../../1.8/docs/topics/templates.txt:128
#: ../../../../1.8/docs/topics/templates.txt:151
msgid "The ``using`` parameter was added."
msgstr ""

# 36788b71185f4f4f850de91921f93a97
# f8f7dcd1960b4144bc9f1cc57307d0be
# f5cf3a0e977f4bc6a5f773e07d8033d3
# e63d5b3267ad4dbea228ff9ac45a2f3b
#: ../../../../1.8/docs/topics/http/shortcuts.txt:90
#: ../../../../1.8/docs/topics/http/shortcuts.txt:184
#: ../../../../1.8/docs/topics/templates.txt:120
#: ../../../../1.8/docs/topics/templates.txt:143
msgid "The ``dirs`` parameter was added."
msgstr ""

# 4df63c16dcc4473b83efd0b2809a0e4e
# 54a0384d112d4186b4e00c09cbee978b
# db6424457e494e21b65f1ac8acd2b227
# ead1a944bb754c5f8ab62b86bb85f842
#: ../../../../1.8/docs/topics/http/shortcuts.txt:94
#: ../../../../1.8/docs/topics/http/shortcuts.txt:188
#: ../../../../1.8/docs/topics/templates.txt:124
#: ../../../../1.8/docs/topics/templates.txt:147
msgid "The ``dirs`` parameter was deprecated."
msgstr ""

# 9a9d09a75e0e4e5392006dc8327c5194
# 58148b588f6a4c3aa574f0ccdf9ca396
# 09a3b8c38643401fba8d44114ca756d8
# 412f57fa63ed4a989934f7fca4092237
# d89acf7016e846d7a9151b3c98bb63ed
# aa8fdaacee374c42b6350437d162c7ae
# 9e80a1880bce46b6abf94cc6f5ade884
# 5dac7af51c6049559be579f49691a17d
# 3b017398442141e788d3c852925cd560
#: ../../../../1.8/docs/topics/http/shortcuts.txt:97
#: ../../../../1.8/docs/topics/http/shortcuts.txt:191
#: ../../../../1.8/docs/topics/http/shortcuts.txt:310
#: ../../../../1.8/docs/topics/http/shortcuts.txt:382
#: ../../../../1.8/docs/topics/http/urls.txt:71
#: ../../../../1.8/docs/topics/http/urls.txt:705
#: ../../../../1.8/docs/topics/pagination.txt:13
#: ../../../../1.8/docs/topics/testing/advanced.txt:36
#: ../../../../1.8/docs/topics/testing/tools.txt:535
msgid "Example"
msgstr ""

# 38018a870f1c462a882427b4b0f606e2
# 3d99aa8a6ace4990968a53fc67d1e91f
#: ../../../../1.8/docs/topics/http/shortcuts.txt:99
#: ../../../../1.8/docs/topics/http/shortcuts.txt:193
msgid ""
"The following example renders the template ``myapp/index.html`` with the "
"MIME type :mimetype:`application/xhtml+xml`::"
msgstr ""

# c5470714f5fc446d9ac4adedaa8b1a6c
# dd6f3eea1ce74d6c95a1c3259c444e0b
# 67711ee650dd422f9f2866a07eb1a3d5
# 7222836c44c24fc68431fd43c8dd66a3
#: ../../../../1.8/docs/topics/http/shortcuts.txt:109
#: ../../../../1.8/docs/topics/http/shortcuts.txt:203
#: ../../../../1.8/docs/topics/http/shortcuts.txt:320
#: ../../../../1.8/docs/topics/http/shortcuts.txt:391
msgid "This example is equivalent to::"
msgstr ""

# 2e446f27982743c6b70698f686b30390
#: ../../../../1.8/docs/topics/http/shortcuts.txt:122
msgid "``render_to_response``"
msgstr ""

# 565776bf9d8d4b34bc3373f37d5abbb8
#: ../../../../1.8/docs/topics/http/shortcuts.txt:126
msgid ""
"Renders a given template with a given context dictionary and returns an "
":class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

# c0d5a96696b0471db27dd54495c877dd
#: ../../../../1.8/docs/topics/http/shortcuts.txt:133
msgid ""
"The full name of a template to use or sequence of template names. If a "
"sequence is given, the first template that exists will be used. See the "
":ref:`template loading documentation <template-loading>` for more "
"information on how templates are found."
msgstr ""

# 9d692a6a1a9b4f12b08845f93e28b047
#: ../../../../1.8/docs/topics/http/shortcuts.txt:152
msgid ""
"The context instance to render the template with. By default, the template "
"will be rendered with a :class:`~django.template.Context` instance (filled "
"with values from ``context``). If you need to use :ref:`context processors "
"<subclassing-context-requestcontext>`, render the template with a "
":class:`~django.template.RequestContext` instance instead. Your code might "
"look something like this::"
msgstr ""

# 7b33f14a1f4042b9952f9271581d9951
#: ../../../../1.8/docs/topics/http/shortcuts.txt:180
msgid "The ``status`` and ``using`` parameters were added."
msgstr ""

# 526c0e41ddfc4fd392772aa0b23afde5
#: ../../../../1.8/docs/topics/http/shortcuts.txt:216
msgid "``redirect``"
msgstr ""

# d466414d18454a18b18f600377e82912
#: ../../../../1.8/docs/topics/http/shortcuts.txt:220
msgid ""
"Returns an :class:`~django.http.HttpResponseRedirect` to the appropriate URL"
" for the arguments passed."
msgstr ""

# 7275a17e15c54149947b6b2efede25f9
#: ../../../../1.8/docs/topics/http/shortcuts.txt:223
msgid "The arguments could be:"
msgstr ""

# d3f9c8f7fba44dda9db4b236671f3ad6
#: ../../../../1.8/docs/topics/http/shortcuts.txt:225
msgid ""
"A model: the model's :meth:`~django.db.models.Model.get_absolute_url()` "
"function will be called."
msgstr ""

# d55680c813b74ec6a8ed5853acc26595
#: ../../../../1.8/docs/topics/http/shortcuts.txt:228
msgid ""
"A view name, possibly with arguments: :func:`urlresolvers.reverse "
"<django.core.urlresolvers.reverse>` will be used to reverse-resolve the "
"name."
msgstr ""

# 9fc472bfca684b64bf1428df1910996d
#: ../../../../1.8/docs/topics/http/shortcuts.txt:232
msgid ""
"An absolute or relative URL, which will be used as-is for the redirect "
"location."
msgstr ""

# 0af7b35a75224e7389d0fa2005495a8f
#: ../../../../1.8/docs/topics/http/shortcuts.txt:235
msgid ""
"By default issues a temporary redirect; pass ``permanent=True`` to issue a "
"permanent redirect."
msgstr ""

# ee1e856c403e4042a233a78138a585dd
#: ../../../../1.8/docs/topics/http/shortcuts.txt:240
msgid "The ability to use relative URLs was added."
msgstr ""

# 26f3cc7315a7468abe487483bd053ec4
#: ../../../../1.8/docs/topics/http/shortcuts.txt:245
msgid "You can use the :func:`redirect` function in a number of ways."
msgstr ""

# 026e5b67c25a4a35b87787b3b6dde9a5
#: ../../../../1.8/docs/topics/http/shortcuts.txt:247
msgid ""
"By passing some object; that object's "
":meth:`~django.db.models.Model.get_absolute_url` method will be called to "
"figure out the redirect URL::"
msgstr ""

# 0ddbb3d751e345089367ee89464ad426
#: ../../../../1.8/docs/topics/http/shortcuts.txt:258
msgid ""
"By passing the name of a view and optionally some positional or keyword "
"arguments; the URL will be reverse resolved using the "
":func:`~django.core.urlresolvers.reverse` method::"
msgstr ""

# db89b647a3dc405cb6801556b7e18a84
#: ../../../../1.8/docs/topics/http/shortcuts.txt:266
msgid "By passing a hardcoded URL to redirect to::"
msgstr ""

# 467285c0090e49128b40f810d3c30fae
#: ../../../../1.8/docs/topics/http/shortcuts.txt:272
msgid "This also works with full URLs::"
msgstr ""

# a32ff9893aa240b3bd1e75285c0a5323
#: ../../../../1.8/docs/topics/http/shortcuts.txt:278
msgid ""
"By default, :func:`redirect` returns a temporary redirect. All of the above "
"forms accept a ``permanent`` argument; if set to ``True`` a permanent "
"redirect will be returned::"
msgstr ""

# a4f1a1fdafe449a2a1980f42ccd17eff
#: ../../../../1.8/docs/topics/http/shortcuts.txt:288
msgid "``get_object_or_404``"
msgstr ""

# c8e15c6dfc124acf962b914b09083368
#: ../../../../1.8/docs/topics/http/shortcuts.txt:292
msgid ""
"Calls :meth:`~django.db.models.query.QuerySet.get()` on a given model "
"manager, but it raises :class:`~django.http.Http404` instead of the model's "
":class:`~django.db.models.Model.DoesNotExist` exception."
msgstr ""

# 3a6b2ccca12c46ddb9630814ad06b43f
# 2b4a45b9424e44f7a7d653993a311754
#: ../../../../1.8/docs/topics/http/shortcuts.txt:303
#: ../../../../1.8/docs/topics/http/shortcuts.txt:375
msgid "``klass``"
msgstr ""

# fab5bee50dca420598dd158840191d85
#: ../../../../1.8/docs/topics/http/shortcuts.txt:300
msgid ""
"A :class:`~django.db.models.Model` class, a "
":class:`~django.db.models.Manager`, or a "
":class:`~django.db.models.query.QuerySet` instance from which to get the "
"object."
msgstr ""

# 528a5419c0014a19b85c086c359ab50a
# 0d031d936e47460e936ee98c81717a31
#: ../../../../1.8/docs/topics/http/shortcuts.txt:307
#: ../../../../1.8/docs/topics/http/shortcuts.txt:379
msgid "``**kwargs``"
msgstr ""

# b4f35445e3a3451298ce349409e8fef7
# 34aa9291cb0a4604b72ccfb6def6fe3c
#: ../../../../1.8/docs/topics/http/shortcuts.txt:306
#: ../../../../1.8/docs/topics/http/shortcuts.txt:378
msgid ""
"Lookup parameters, which should be in the format accepted by ``get()`` and "
"``filter()``."
msgstr ""

# 14423cd429aa4e599760b43b2705ed5b
#: ../../../../1.8/docs/topics/http/shortcuts.txt:312
msgid ""
"The following example gets the object with the primary key of 1 from "
"``MyModel``::"
msgstr ""

# da1b119f6590493e8e47f4cf46e24f57
#: ../../../../1.8/docs/topics/http/shortcuts.txt:330
msgid ""
"The most common use case is to pass a :class:`~django.db.models.Model`, as "
"shown above. However, you can also pass a "
":class:`~django.db.models.query.QuerySet` instance::"
msgstr ""

# 57da881ba6484b6d8bb1d0211616823a
#: ../../../../1.8/docs/topics/http/shortcuts.txt:337
msgid "The above example is a bit contrived since it's equivalent to doing::"
msgstr ""

# 89b01eebefcc48cfa033439514a06ced
#: ../../../../1.8/docs/topics/http/shortcuts.txt:341
msgid ""
"but it can be useful if you are passed the ``queryset`` variable from "
"somewhere else."
msgstr ""

# fba9ecc62cca4277a416fa13cf807111
#: ../../../../1.8/docs/topics/http/shortcuts.txt:344
msgid ""
"Finally, you can also use a :class:`~django.db.models.Manager`. This is "
"useful for example if you have a :ref:`custom manager<custom-managers>`::"
msgstr ""

# b95de397bf524735991088c44783a986
#: ../../../../1.8/docs/topics/http/shortcuts.txt:350
msgid ""
"You can also use :class:`related "
"managers<django.db.models.fields.related.RelatedManager>`::"
msgstr ""

# 557a36c152314fc08b2827887d3a0c67
#: ../../../../1.8/docs/topics/http/shortcuts.txt:356
msgid ""
"Note: As with ``get()``, a "
":class:`~django.core.exceptions.MultipleObjectsReturned` exception will be "
"raised if more than one object is found."
msgstr ""

# 4cddea808c7641a09a07aab06bcd1678
#: ../../../../1.8/docs/topics/http/shortcuts.txt:361
msgid "``get_list_or_404``"
msgstr ""

# 1e949877b4344efc9bc2419a721f4800
#: ../../../../1.8/docs/topics/http/shortcuts.txt:365
msgid ""
"Returns the result of :meth:`~django.db.models.query.QuerySet.filter()` on a"
" given model manager cast to a list, raising :class:`~django.http.Http404` "
"if the resulting list is empty."
msgstr ""

# 033f8dbed8594e6a9e1126537183e5d8
#: ../../../../1.8/docs/topics/http/shortcuts.txt:373
msgid ""
"A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or "
":class:`~django.db.models.query.QuerySet` instance from which to get the "
"list."
msgstr ""

# 17936e364fbb4e80bd716254b078c55a
#: ../../../../1.8/docs/topics/http/shortcuts.txt:384
msgid "The following example gets all published objects from ``MyModel``::"
msgstr ""

# c6d9a2a360c54280bedd8f99ee8f8d48
#: ../../../../1.8/docs/topics/http/shortcuts.txt:9
msgid "shortcuts"
msgstr ""

# 8945dddbd2d64d738f24547a44d7d14b
#: ../../../../1.8/docs/topics/http/urls.txt:3
msgid "URL dispatcher"
msgstr ""

# 1ebeec8c02684f7d9ce55f4747d4e1f0
#: ../../../../1.8/docs/topics/http/urls.txt:5
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django lets you design URLs however you want, with no framework"
" limitations."
msgstr ""

# b9d91c6540da4315a914d82464992373
#: ../../../../1.8/docs/topics/http/urls.txt:9
msgid ""
"There's no ``.php`` or ``.cgi`` required, and certainly none of that "
"``0,2097,1-1-1928,00`` nonsense."
msgstr ""

# 5b7e957f7e5d4553acdcf42a70a68433
#: ../../../../1.8/docs/topics/http/urls.txt:12
msgid ""
"See `Cool URIs don't change`_, by World Wide Web creator Tim Berners-Lee, "
"for excellent arguments on why URLs should be clean and usable."
msgstr ""

# 0cc43fe2475947b68fd5e9f373247e9d
#: ../../../../1.8/docs/topics/http/urls.txt:20
msgid ""
"To design URLs for an app, you create a Python module informally called a "
"**URLconf** (URL configuration). This module is pure Python code and is a "
"simple mapping between URL patterns (simple regular expressions) to Python "
"functions (your views)."
msgstr ""

# f170c8f4e68e4c37821dc5ea2ffbd567
#: ../../../../1.8/docs/topics/http/urls.txt:25
msgid ""
"This mapping can be as short or as long as needed. It can reference other "
"mappings. And, because it's pure Python code, it can be constructed "
"dynamically."
msgstr ""

# 1d7be6e151ab4445bb313de13d667c46
#: ../../../../1.8/docs/topics/http/urls.txt:29
msgid ""
"Django also provides a way to translate URLs according to the active "
"language. See the :ref:`internationalization documentation <url-"
"internationalization>` for more information."
msgstr ""

# ccc18956a17e437e96f4db04f95fa1e4
#: ../../../../1.8/docs/topics/http/urls.txt:36
msgid "How Django processes a request"
msgstr ""

# 1bf4a1eeded7423e8a1376882ccd956f
#: ../../../../1.8/docs/topics/http/urls.txt:38
msgid ""
"When a user requests a page from your Django-powered site, this is the "
"algorithm the system follows to determine which Python code to execute:"
msgstr ""

# f054ce18b69d438683b79a7816982be9
#: ../../../../1.8/docs/topics/http/urls.txt:41
msgid ""
"Django determines the root URLconf module to use. Ordinarily, this is the "
"value of the :setting:`ROOT_URLCONF` setting, but if the incoming "
"``HttpRequest`` object has an attribute called ``urlconf`` (set by "
"middleware :ref:`request processing <request-middleware>`), its value will "
"be used in place of the :setting:`ROOT_URLCONF` setting."
msgstr ""

# 9cc0455ec9254f8cb74224d43b69561a
#: ../../../../1.8/docs/topics/http/urls.txt:47
msgid ""
"Django loads that Python module and looks for the variable ``urlpatterns``. "
"This should be a Python list of :func:`django.conf.urls.url` instances."
msgstr ""

# 83339c1df5d3479caf7bbae0f6070554
#: ../../../../1.8/docs/topics/http/urls.txt:51
msgid ""
"Django runs through each URL pattern, in order, and stops at the first one "
"that matches the requested URL."
msgstr ""

# 259c3ced13084f32b026e5f5c8ddf8ed
#: ../../../../1.8/docs/topics/http/urls.txt:54
msgid ""
"Once one of the regexes matches, Django imports and calls the given view, "
"which is a simple Python function (or a :doc:`class based view </topics"
"/class-based-views/index>`). The view gets passed the following arguments:"
msgstr ""

# a1b27b369f404f0ea2cd634793415bbe
#: ../../../../1.8/docs/topics/http/urls.txt:59
msgid "An instance of :class:`~django.http.HttpRequest`."
msgstr ""

# 546507a7ba724744a0b145f5830c7181
#: ../../../../1.8/docs/topics/http/urls.txt:60
msgid ""
"If the matched regular expression returned no named groups, then the matches"
" from the regular expression are provided as positional arguments."
msgstr ""

# 96ffedbf8d0b4a1f96da0e621fe0a809
#: ../../../../1.8/docs/topics/http/urls.txt:62
msgid ""
"The keyword arguments are made up of any named groups matched by the regular"
" expression, overridden by any arguments specified in the optional "
"``kwargs`` argument to :func:`django.conf.urls.url`."
msgstr ""

# b9668d41c9534b6793de07a15dd32900
#: ../../../../1.8/docs/topics/http/urls.txt:66
msgid ""
"If no regex matches, or if an exception is raised during any point in this "
"process, Django invokes an appropriate error-handling view. See `Error "
"handling`_ below."
msgstr ""

# 6212fba642b04b429488913c4bff427a
#: ../../../../1.8/docs/topics/http/urls.txt:73
msgid "Here's a sample URLconf::"
msgstr ""

# 25fb7826e64c4077b3ada64398930b4e
#: ../../../../1.8/docs/topics/http/urls.txt:88
msgid "To capture a value from the URL, just put parenthesis around it."
msgstr ""

# 5e86acac10444df497bf1d9f540be640
#: ../../../../1.8/docs/topics/http/urls.txt:90
msgid ""
"There's no need to add a leading slash, because every URL has that. For "
"example, it's ``^articles``, not ``^/articles``."
msgstr ""

# 8edc3419c2e24a62855bca2acae6c7e3
#: ../../../../1.8/docs/topics/http/urls.txt:93
msgid ""
"The ``'r'`` in front of each regular expression string is optional but "
"recommended. It tells Python that a string is \"raw\" -- that nothing in the"
" string should be escaped. See `Dive Into Python's explanation`_."
msgstr ""

# a883895409524269b241459e4a267a78
#: ../../../../1.8/docs/topics/http/urls.txt:97
msgid "Example requests:"
msgstr ""

# 124538b553ef4e50b5671d972733de3e
#: ../../../../1.8/docs/topics/http/urls.txt:99
msgid ""
"A request to ``/articles/2005/03/`` would match the third entry in the list."
" Django would call the function ``views.month_archive(request, '2005', "
"'03')``."
msgstr ""

# 53ad2ddf81c74ad1b9d11c6b476a575f
#: ../../../../1.8/docs/topics/http/urls.txt:103
msgid ""
"``/articles/2005/3/`` would not match any URL patterns, because the third "
"entry in the list requires two digits for the month."
msgstr ""

# 717b30b962234cc39e99d2d53f55fc58
#: ../../../../1.8/docs/topics/http/urls.txt:106
msgid ""
"``/articles/2003/`` would match the first pattern in the list, not the "
"second one, because the patterns are tested in order, and the first one is "
"the first test to pass. Feel free to exploit the ordering to insert special "
"cases like this. Here, Django would call the function "
"``views.special_case_2003(request)``"
msgstr ""

# 0abade48633244b3b48c2f9969ba4ad2
#: ../../../../1.8/docs/topics/http/urls.txt:112
msgid ""
"``/articles/2003`` would not match any of these patterns, because each "
"pattern requires that the URL end with a slash."
msgstr ""

# 1b71b96f74904990bd1eb97cc944f006
#: ../../../../1.8/docs/topics/http/urls.txt:115
msgid ""
"``/articles/2003/03/03/`` would match the final pattern. Django would call "
"the function ``views.article_detail(request, '2003', '03', '03')``."
msgstr ""

# 4c2b0b8e854e456d98bdb03e63cf5ab0
#: ../../../../1.8/docs/topics/http/urls.txt:121
msgid "Named groups"
msgstr ""

# f47052481a4545879638125d0ab531e2
#: ../../../../1.8/docs/topics/http/urls.txt:123
msgid ""
"The above example used simple, *non-named* regular-expression groups (via "
"parenthesis) to capture bits of the URL and pass them as *positional* "
"arguments to a view. In more advanced usage, it's possible to use *named* "
"regular-expression groups to capture URL bits and pass them as *keyword* "
"arguments to a view."
msgstr ""

# 426a91b17e6b4f5e8e6e28897199a642
#: ../../../../1.8/docs/topics/http/urls.txt:129
msgid ""
"In Python regular expressions, the syntax for named regular-expression "
"groups is ``(?P<name>pattern)``, where ``name`` is the name of the group and"
" ``pattern`` is some pattern to match."
msgstr ""

# c7fcd6dd42f24ab08a5df6948816ed03
#: ../../../../1.8/docs/topics/http/urls.txt:133
msgid "Here's the above example URLconf, rewritten to use named groups::"
msgstr ""

# 14a48e3aca2c423da7da3a69e478aa6f
#: ../../../../1.8/docs/topics/http/urls.txt:146
msgid ""
"This accomplishes exactly the same thing as the previous example, with one "
"subtle difference: The captured values are passed to view functions as "
"keyword arguments rather than positional arguments. For example:"
msgstr ""

# ae518664f8314758b01a67c5bb9fc2f8
#: ../../../../1.8/docs/topics/http/urls.txt:150
msgid ""
"A request to ``/articles/2005/03/`` would call the function "
"``views.month_archive(request, year='2005', month='03')``, instead of "
"``views.month_archive(request, '2005', '03')``."
msgstr ""

# 6a356f850aa74ce181640544b3fd0596
#: ../../../../1.8/docs/topics/http/urls.txt:154
msgid ""
"A request to ``/articles/2003/03/03/`` would call the function "
"``views.article_detail(request, year='2003', month='03', day='03')``."
msgstr ""

# 534cf4ddbebd4b438072119d313bc7b9
#: ../../../../1.8/docs/topics/http/urls.txt:157
msgid ""
"In practice, this means your URLconfs are slightly more explicit and less "
"prone to argument-order bugs -- and you can reorder the arguments in your "
"views' function definitions. Of course, these benefits come at the cost of "
"brevity; some developers find the named-group syntax ugly and too verbose."
msgstr ""

# dc40b629764841c884c468a027642839
#: ../../../../1.8/docs/topics/http/urls.txt:163
msgid "The matching/grouping algorithm"
msgstr ""

# af1f1f91b30e47a2852b131cf3642f50
#: ../../../../1.8/docs/topics/http/urls.txt:165
msgid ""
"Here's the algorithm the URLconf parser follows, with respect to named "
"groups vs. non-named groups in a regular expression:"
msgstr ""

# a64206496a7347b1ac21415758efaf80
#: ../../../../1.8/docs/topics/http/urls.txt:168
msgid ""
"If there are any named arguments, it will use those, ignoring non-named "
"arguments."
msgstr ""

# 36f764c9af3a41f5a4ce585af59e4782
#: ../../../../1.8/docs/topics/http/urls.txt:171
msgid ""
"Otherwise, it will pass all non-named arguments as positional arguments."
msgstr ""

# e8fdb8e561544558b1b7d17596003956
#: ../../../../1.8/docs/topics/http/urls.txt:173
msgid ""
"In both cases, any extra keyword arguments that have been given as per "
"`Passing extra options to view functions`_ (below) will also be passed to "
"the view."
msgstr ""

# 7be2944626154342ac66cf14f35c97ae
#: ../../../../1.8/docs/topics/http/urls.txt:177
msgid "What the URLconf searches against"
msgstr ""

# e08fb25310334a7fb91375a412d52a90
#: ../../../../1.8/docs/topics/http/urls.txt:179
msgid ""
"The URLconf searches against the requested URL, as a normal Python string. "
"This does not include GET or POST parameters, or the domain name."
msgstr ""

# 589ddbf653b64435b0d37dfbb56a9050
#: ../../../../1.8/docs/topics/http/urls.txt:182
msgid ""
"For example, in a request to ``http://www.example.com/myapp/``, the URLconf "
"will look for ``myapp/``."
msgstr ""

# e439315b787443fa92ec0e19909aee38
#: ../../../../1.8/docs/topics/http/urls.txt:185
msgid ""
"In a request to ``http://www.example.com/myapp/?page=3``, the URLconf will "
"look for ``myapp/``."
msgstr ""

# 1b0c85b90d7040e6b103c6d00bae767c
#: ../../../../1.8/docs/topics/http/urls.txt:188
msgid ""
"The URLconf doesn't look at the request method. In other words, all request "
"methods -- ``POST``, ``GET``, ``HEAD``, etc. -- will be routed to the same "
"function for the same URL."
msgstr ""

# 1dbfc38bc45947aeba07a30c38eb5688
#: ../../../../1.8/docs/topics/http/urls.txt:193
msgid "Captured arguments are always strings"
msgstr ""

# e337e985c90248edaf7191929878a6a1
#: ../../../../1.8/docs/topics/http/urls.txt:195
msgid ""
"Each captured argument is sent to the view as a plain Python string, "
"regardless of what sort of match the regular expression makes. For example, "
"in this URLconf line::"
msgstr ""

# 4366a8c8feb74b969c91d91fde8a5540
#: ../../../../1.8/docs/topics/http/urls.txt:202
msgid ""
"...the ``year`` argument passed to ``views.year_archive()`` will be a "
"string,"
msgstr ""

# f097c8f4d11e481a834a6512fa86c8ad
#: ../../../../1.8/docs/topics/http/urls.txt:202
msgid ""
"not an integer, even though the ``[0-9]{4}`` will only match integer "
"strings."
msgstr ""

# 7205ae1880274af5a8f001a815c46e40
#: ../../../../1.8/docs/topics/http/urls.txt:205
msgid "Specifying defaults for view arguments"
msgstr ""

# 9b5e070a5cae4ea889fdd7fd1e0bc12f
#: ../../../../1.8/docs/topics/http/urls.txt:207
msgid ""
"A convenient trick is to specify default parameters for your views' "
"arguments. Here's an example URLconf and view::"
msgstr ""

# 852758c4d6b645d5a663c142263b9131
#: ../../../../1.8/docs/topics/http/urls.txt:225
msgid ""
"In the above example, both URL patterns point to the same view -- "
"``views.page`` -- but the first pattern doesn't capture anything from the "
"URL. If the first pattern matches, the ``page()`` function will use its "
"default argument for ``num``, ``\"1\"``. If the second pattern matches, "
"``page()`` will use whatever ``num`` value was captured by the regex."
msgstr ""

# 97ffb37b575b4f71a55e764902ba3768
#: ../../../../1.8/docs/topics/http/urls.txt:232
msgid "Performance"
msgstr ""

# 8ffa231dd8484576ac1e2027e23ac236
#: ../../../../1.8/docs/topics/http/urls.txt:234
msgid ""
"Each regular expression in a ``urlpatterns`` is compiled the first time it's"
" accessed. This makes the system blazingly fast."
msgstr ""

# 31103c83772245288f6d4c2b07d32bb3
#: ../../../../1.8/docs/topics/http/urls.txt:238
msgid "Syntax of the urlpatterns variable"
msgstr ""

# ae9186db7a1f46d3a7dc0af35f89de79
#: ../../../../1.8/docs/topics/http/urls.txt:240
msgid ""
"``urlpatterns`` should be a Python list of :func:`~django.conf.urls.url` "
"instances."
msgstr ""

# ad80d3e302264f459074fc683f142775
#: ../../../../1.8/docs/topics/http/urls.txt:244
msgid "Error handling"
msgstr ""

# 51884f2a2d7e415ea8248c60499fb856
#: ../../../../1.8/docs/topics/http/urls.txt:246
msgid ""
"When Django can't find a regex matching the requested URL, or when an "
"exception is raised, Django will invoke an error-handling view."
msgstr ""

# 63d18e2261d9446fb2c825f15fcf2fd3
#: ../../../../1.8/docs/topics/http/urls.txt:249
msgid ""
"The views to use for these cases are specified by four variables. Their "
"default values should suffice for most projects, but further customization "
"is possible by overriding their default values."
msgstr ""

# fd71e066453b403dba2af023267f012a
#: ../../../../1.8/docs/topics/http/urls.txt:253
msgid ""
"See the documentation on :ref:`customizing error views <customizing-error-"
"views>` for the full details."
msgstr ""

# eeae0e25b8b84c5881cfe4f1c7473fbb
#: ../../../../1.8/docs/topics/http/urls.txt:256
msgid ""
"Such values can be set in your root URLconf. Setting these variables in any "
"other URLconf will have no effect."
msgstr ""

# f2f5d5f5983e4d2ba14f229ec1beac7b
#: ../../../../1.8/docs/topics/http/urls.txt:259
msgid ""
"Values must be callables, or strings representing the full Python import "
"path to the view that should be called to handle the error condition at "
"hand."
msgstr ""

# b18ec139bc8047c38ac9e34c148da646
#: ../../../../1.8/docs/topics/http/urls.txt:262
msgid "The variables are:"
msgstr ""

# e29a81fb2bdd4ebdaa5ebd76d81fd05a
#: ../../../../1.8/docs/topics/http/urls.txt:264
msgid "``handler400`` -- See :data:`django.conf.urls.handler400`."
msgstr ""

# 47ed413149534f79bdd46745313062fd
#: ../../../../1.8/docs/topics/http/urls.txt:265
msgid "``handler403`` -- See :data:`django.conf.urls.handler403`."
msgstr ""

# dd0a0f8e49084bacbaa8de6d47cd4bad
#: ../../../../1.8/docs/topics/http/urls.txt:266
msgid "``handler404`` -- See :data:`django.conf.urls.handler404`."
msgstr ""

# 33ee29ea454d44869857fd1ace0193d9
#: ../../../../1.8/docs/topics/http/urls.txt:267
msgid "``handler500`` -- See :data:`django.conf.urls.handler500`."
msgstr ""

# ee0b6bdabce940318d873fb292526ee5
#: ../../../../1.8/docs/topics/http/urls.txt:272
msgid "Including other URLconfs"
msgstr ""

# 3df720cbcbf24137b5d1d9fa150543d7
#: ../../../../1.8/docs/topics/http/urls.txt:274
msgid ""
"At any point, your ``urlpatterns`` can \"include\" other URLconf modules. "
"This essentially \"roots\" a set of URLs below other ones."
msgstr ""

# 3694af5971cd4dffad7e7ba89f728f90
#: ../../../../1.8/docs/topics/http/urls.txt:277
msgid ""
"For example, here's an excerpt of the URLconf for the `Django Web site`_ "
"itself. It includes a number of other URLconfs::"
msgstr ""

# 2d5a823d01044571b6fb8b7321fca2fe
#: ../../../../1.8/docs/topics/http/urls.txt:289
msgid ""
"Note that the regular expressions in this example don't have a ``$`` (end-"
"of-string match character) but do include a trailing slash. Whenever Django "
"encounters ``include()`` (:func:`django.conf.urls.include()`), it chops off "
"whatever part of the URL matched up to that point and sends the remaining "
"string to the included URLconf for further processing."
msgstr ""

# bef28f1ca47843ffaa05d425ebbe614b
#: ../../../../1.8/docs/topics/http/urls.txt:295
msgid ""
"Another possibility is to include additional URL patterns by using a list of"
" :func:`~django.conf.urls.url` instances. For example, consider this "
"URLconf::"
msgstr ""

# 2f60bbfd63e64a5c95d5990a0cf16a28
#: ../../../../1.8/docs/topics/http/urls.txt:315
msgid ""
"In this example, the ``/credit/reports/`` URL will be handled by the "
"``credit_views.report()`` Django view."
msgstr ""

# 69a6d2a775254fc8841b5a9c2141ac1a
#: ../../../../1.8/docs/topics/http/urls.txt:318
msgid ""
"This can be used to remove redundancy from URLconfs where a single pattern "
"prefix is used repeatedly. For example, consider this URLconf::"
msgstr ""

# 6d949f8353a149a39dea4c4363825312
#: ../../../../1.8/docs/topics/http/urls.txt:331
msgid ""
"We can improve this by stating the common path prefix only once and grouping"
" the suffixes that differ::"
msgstr ""

# 6da9d34ca1584fefbe9ff27922b18467
#: ../../../../1.8/docs/topics/http/urls.txt:349
msgid "Captured parameters"
msgstr ""

# c181afcc90eb4145b67eeadbb57f79de
#: ../../../../1.8/docs/topics/http/urls.txt:351
msgid ""
"An included URLconf receives any captured parameters from parent URLconfs, "
"so the following example is valid::"
msgstr ""

# 6d974fc59c1f43cc975f63ba99c37dca
#: ../../../../1.8/docs/topics/http/urls.txt:370
msgid ""
"In the above example, the captured ``\"username\"`` variable is passed to "
"the included URLconf, as expected."
msgstr ""

# 47d8565d0c0347c7a1aa0d0b90ada3b6
#: ../../../../1.8/docs/topics/http/urls.txt:374
msgid "Nested arguments"
msgstr ""

# a3eb6dd988a948d2904184f703a27770
#: ../../../../1.8/docs/topics/http/urls.txt:376
msgid ""
"Regular expressions allow nested arguments, and Django will resolve them and"
" pass them to the view. When reversing, Django will try to fill in all outer"
" captured arguments, ignoring any nested captured arguments. Consider the "
"following URL patterns which optionally take a page argument::"
msgstr ""

# 30ead610b8154bb6b8ffa569f651e893
#: ../../../../1.8/docs/topics/http/urls.txt:388
msgid ""
"Both patterns use nested arguments and will resolve: for example, "
"``blog/page-2/`` will result in a match to ``blog_articles`` with two "
"positional arguments: ``page-2/`` and ``2``. The second pattern for "
"``comments`` will match ``comments/page-2/`` with keyword argument "
"``page_number`` set to 2. The outer argument in this case is a non-capturing"
" argument ``(?:...)``."
msgstr ""

# 7077ac9250764aaf904eaa544f8ccc69
#: ../../../../1.8/docs/topics/http/urls.txt:395
msgid ""
"The ``blog_articles`` view needs the outermost captured argument to be "
"reversed, ``page-2/`` or no arguments in this case, while ``comments`` can "
"be reversed with either no arguments or a value for ``page_number``."
msgstr ""

# d59f4f6299d14688898fee798bd68e92
#: ../../../../1.8/docs/topics/http/urls.txt:399
msgid ""
"Nested captured arguments create a strong coupling between the view "
"arguments and the URL as illustrated by ``blog_articles``: the view receives"
" part of the URL (``page-2/``) instead of only the value the view is "
"interested in. This coupling is even more pronounced when reversing, since "
"to reverse the view we need to pass the piece of URL instead of the page "
"number."
msgstr ""

# 8323192f428e4722830bb82c0bbf435e
#: ../../../../1.8/docs/topics/http/urls.txt:405
msgid ""
"As a rule of thumb, only capture the values the view needs to work with and "
"use non-capturing arguments when the regular expression needs an argument "
"but the view ignores it."
msgstr ""

# b2c329aa6ecb4f0c97b4ca411aaa87aa
#: ../../../../1.8/docs/topics/http/urls.txt:412
msgid "Passing extra options to view functions"
msgstr ""

# a8cb005fd13c4964a807f2856b7fab72
#: ../../../../1.8/docs/topics/http/urls.txt:414
msgid ""
"URLconfs have a hook that lets you pass extra arguments to your view "
"functions, as a Python dictionary."
msgstr ""

# 285224c8e4b849edad2ca01c782d5d75
#: ../../../../1.8/docs/topics/http/urls.txt:417
msgid ""
"The :func:`django.conf.urls.url` function can take an optional third "
"argument which should be a dictionary of extra keyword arguments to pass to "
"the view function."
msgstr ""

# 889bb9473f19476ba2b4ce86cac1e810
#: ../../../../1.8/docs/topics/http/urls.txt:430
msgid ""
"In this example, for a request to ``/blog/2005/``, Django will call "
"``views.year_archive(request, year='2005', foo='bar')``."
msgstr ""

# 2836d0091aa74884bcbc616c79e5aa76
#: ../../../../1.8/docs/topics/http/urls.txt:433
msgid ""
"This technique is used in the :doc:`syndication framework "
"</ref/contrib/syndication>` to pass metadata and options to views."
msgstr ""

# cd0b5ce2cd7342299b963a28381a4ca0
#: ../../../../1.8/docs/topics/http/urls.txt:437
msgid "Dealing with conflicts"
msgstr ""

# d139928ec3be44e5a5ae9a80b99770a9
#: ../../../../1.8/docs/topics/http/urls.txt:439
msgid ""
"It's possible to have a URL pattern which captures named keyword arguments, "
"and also passes arguments with the same names in its dictionary of extra "
"arguments. When this happens, the arguments in the dictionary will be used "
"instead of the arguments captured in the URL."
msgstr ""

# 165ada4cad724157a61d6a7dc105fb0f
#: ../../../../1.8/docs/topics/http/urls.txt:445
msgid "Passing extra options to ``include()``"
msgstr ""

# 26d0804af5e84c4ab83519da47d87904
#: ../../../../1.8/docs/topics/http/urls.txt:447
msgid ""
"Similarly, you can pass extra options to :func:`~django.conf.urls.include`. "
"When you pass extra options to ``include()``, *each* line in the included "
"URLconf will be passed the extra options."
msgstr ""

# e28e76c99b4f49ab98d6b7f1dd38a36f
#: ../../../../1.8/docs/topics/http/urls.txt:451
msgid "For example, these two URLconf sets are functionally identical:"
msgstr ""

# edfb905eac04448fa17710941e39e061
#: ../../../../1.8/docs/topics/http/urls.txt:453
msgid "Set one::"
msgstr ""

# 2479370ea979479ba7105ae866ac0185
#: ../../../../1.8/docs/topics/http/urls.txt:471
msgid "Set two::"
msgstr ""

# ce3f10248ac64d88bc4fc198fcaf4608
#: ../../../../1.8/docs/topics/http/urls.txt:489
msgid ""
"Note that extra options will *always* be passed to *every* line in the "
"included URLconf, regardless of whether the line's view actually accepts "
"those options as valid. For this reason, this technique is only useful if "
"you're certain that every view in the included URLconf accepts the extra "
"options you're passing."
msgstr ""

# dbbd8b4539904ddcaecabb4bff858c38
#: ../../../../1.8/docs/topics/http/urls.txt:495
msgid "Reverse resolution of URLs"
msgstr ""

# 2ad8521185994e34a861caf4af8112d8
#: ../../../../1.8/docs/topics/http/urls.txt:497
msgid ""
"A common need when working on a Django project is the possibility to obtain "
"URLs in their final forms either for embedding in generated content (views "
"and assets URLs, URLs shown to the user, etc.) or for handling of the "
"navigation flow on the server side (redirections, etc.)"
msgstr ""

# cea751a203154a3ca2377378716d68c1
#: ../../../../1.8/docs/topics/http/urls.txt:502
msgid ""
"It is strongly desirable to avoid hard-coding these URLs (a laborious, non-"
"scalable and error-prone strategy). Equally dangerous is devising ad-hoc "
"mechanisms to generate URLs that are parallel to the design described by the"
" URLconf, which can result in the production of URLs that become stale over "
"time."
msgstr ""

# 52b92f6374c844b5bac5161492074fce
#: ../../../../1.8/docs/topics/http/urls.txt:507
msgid ""
"In other words, what's needed is a DRY mechanism. Among other advantages it "
"would allow evolution of the URL design without having to go over all the "
"project source code to search and replace outdated URLs."
msgstr ""

# 36bfa76d39cf45eea6f4a6a43eaff9d3
#: ../../../../1.8/docs/topics/http/urls.txt:511
msgid ""
"The primary piece of information we have available to get a URL is an "
"identification (e.g. the name) of the view in charge of handling it. Other "
"pieces of information that necessarily must participate in the lookup of the"
" right URL are the types (positional, keyword) and values of the view "
"arguments."
msgstr ""

# a9ae2404cd044bdb8175ad3ec8ec5010
#: ../../../../1.8/docs/topics/http/urls.txt:516
msgid ""
"Django provides a solution such that the URL mapper is the only repository "
"of the URL design. You feed it with your URLconf and then it can be used in "
"both directions:"
msgstr ""

# 9a7a414419844920a7f5588ca3cf478c
#: ../../../../1.8/docs/topics/http/urls.txt:520
msgid ""
"Starting with a URL requested by the user/browser, it calls the right Django"
" view providing any arguments it might need with their values as extracted "
"from the URL."
msgstr ""

# a5e8f497f8644b81a3728e1c81b10e2e
#: ../../../../1.8/docs/topics/http/urls.txt:524
msgid ""
"Starting with the identification of the corresponding Django view plus the "
"values of arguments that would be passed to it, obtain the associated URL."
msgstr ""

# 467af94045a7414aaf946f7593332f68
#: ../../../../1.8/docs/topics/http/urls.txt:527
msgid ""
"The first one is the usage we've been discussing in the previous sections. "
"The second one is what is known as *reverse resolution of URLs*, *reverse "
"URL matching*, *reverse URL lookup*, or simply *URL reversing*."
msgstr ""

# 79f54fe09e6943509289719ed5b4433b
#: ../../../../1.8/docs/topics/http/urls.txt:531
msgid ""
"Django provides tools for performing URL reversing that match the different "
"layers where URLs are needed:"
msgstr ""

# af3f930d4e564c22b587db7646c0650e
#: ../../../../1.8/docs/topics/http/urls.txt:534
msgid "In templates: Using the :ttag:`url` template tag."
msgstr ""

# 1cbafd29ce1548b5963562f5202f7fd4
#: ../../../../1.8/docs/topics/http/urls.txt:536
msgid ""
"In Python code: Using the :func:`django.core.urlresolvers.reverse` function."
msgstr ""

# 0f7eb6649204411ebc9572b0d0497309
#: ../../../../1.8/docs/topics/http/urls.txt:539
msgid ""
"In higher level code related to handling of URLs of Django model instances: "
"The :meth:`~django.db.models.Model.get_absolute_url` method."
msgstr ""

# 98023bf910b5438ba6738e20c232d9f7
#: ../../../../1.8/docs/topics/http/urls.txt:545
msgid "Consider again this URLconf entry::"
msgstr ""

# 7ef73d33065c45b3bcbecde11f5ee45d
#: ../../../../1.8/docs/topics/http/urls.txt:557
msgid ""
"According to this design, the URL for the archive corresponding to year "
"*nnnn* is ``/articles/nnnn/``."
msgstr ""

# 8891d953823c48708a1bfc5a80bef151
#: ../../../../1.8/docs/topics/http/urls.txt:560
msgid "You can obtain these in template code by using:"
msgstr ""

# 036e6bcaa63448f1803245217fcb8241
#: ../../../../1.8/docs/topics/http/urls.txt:572
msgid "Or in Python code::"
msgstr ""

# ac8f6fd3e00f44ba9267d08082f2913c
#: ../../../../1.8/docs/topics/http/urls.txt:583
msgid ""
"If, for some reason, it was decided that the URLs where content for yearly "
"article archives are published at should be changed then you would only need"
" to change the entry in the URLconf."
msgstr ""

# e6c41f756fef423999cba4d845287f5b
#: ../../../../1.8/docs/topics/http/urls.txt:587
msgid ""
"In some scenarios where views are of a generic nature, a many-to-one "
"relationship might exist between URLs and views. For these cases the view "
"name isn't a good enough identifier for it when comes the time of reversing "
"URLs. Read the next section to know about the solution Django provides for "
"this."
msgstr ""

# 2e918373c59e47c2b7578d041eed13c7
#: ../../../../1.8/docs/topics/http/urls.txt:595
msgid "Naming URL patterns"
msgstr ""

# 65e69113dcd44a12b3f07f8f7218d869
#: ../../../../1.8/docs/topics/http/urls.txt:597
msgid ""
"In order to perform URL reversing, you'll need to use **named URL patterns**"
" as done in the examples above. The string used for the URL name can contain"
" any characters you like. You are not restricted to valid Python names."
msgstr ""

# ea4e3061fceb47a5b65aa9f81af5debc
#: ../../../../1.8/docs/topics/http/urls.txt:601
msgid ""
"When you name your URL patterns, make sure you use names that are unlikely "
"to clash with any other application's choice of names. If you call your URL "
"pattern ``comment``, and another application does the same thing, there's no"
" guarantee which URL will be inserted into your template when you use this "
"name."
msgstr ""

# b47649a0b1c74a05ab39cdfa654107a0
#: ../../../../1.8/docs/topics/http/urls.txt:607
msgid ""
"Putting a prefix on your URL names, perhaps derived from the application "
"name, will decrease the chances of collision. We recommend something like "
"``myapp-comment`` instead of ``comment``."
msgstr ""

# c4c487c26078402f91192b405e3fa728
#: ../../../../1.8/docs/topics/http/urls.txt:614
msgid "URL namespaces"
msgstr ""

# a8710ec729ab4af58287b7e9a2231cd1
# 8eb9d80b04d049acab918345a018f859
#: ../../../../1.8/docs/topics/http/urls.txt:617
#: ../../../../1.8/docs/topics/performance.txt:10
msgid "Introduction"
msgstr "Introducción"

# 9b7f56d9187c48869b76b085dcbf39e8
#: ../../../../1.8/docs/topics/http/urls.txt:619
msgid ""
"URL namespaces allow you to uniquely reverse :ref:`named URL patterns "
"<naming-url-patterns>` even if different applications use the same URL "
"names. It's a good practice for third-party apps to always use namespaced "
"URLs (as we did in the tutorial). Similarly, it also allows you to reverse "
"URLs if multiple instances of an application are deployed. In other words, "
"since multiple instances of a single application will share named URLs, "
"namespaces provide a way to tell these named URLs apart."
msgstr ""

# a33cdd9d268946c090bfbfd9db6d7d0d
#: ../../../../1.8/docs/topics/http/urls.txt:627
msgid ""
"Django applications that make proper use of URL namespacing can be deployed "
"more than once for a particular site. For example "
":mod:`django.contrib.admin` has an :class:`~django.contrib.admin.AdminSite` "
"class which allows you to easily :ref:`deploy more than once instance of the"
" admin <multiple-admin-sites>`. In a later example, we'll discuss the idea "
"of deploying the polls application from the tutorial in two different "
"locations so we can serve the same functionality to two different audiences "
"(authors and publishers)."
msgstr ""

# 1a342f3119564416abaf7c1b5e62ec8e
#: ../../../../1.8/docs/topics/http/urls.txt:635
msgid "A URL namespace comes in two parts, both of which are strings:"
msgstr ""

# 94ce64f0c6484aa59002eb81d1ec86b9
#: ../../../../1.8/docs/topics/http/urls.txt:638
msgid "application namespace"
msgstr ""

# 201512c61f044eb1b58a278281d1cb24
#: ../../../../1.8/docs/topics/http/urls.txt:640
msgid ""
"This describes the name of the application that is being deployed. Every "
"instance of a single application will have the same application namespace. "
"For example, Django's admin application has the somewhat predictable "
"application namespace of ``'admin'``."
msgstr ""

# 9fa71f44f1314c4bbaef1e317d57e0f4
#: ../../../../1.8/docs/topics/http/urls.txt:644
msgid "instance namespace"
msgstr ""

# 94704523ba1e427c87b0da37eff544d1
#: ../../../../1.8/docs/topics/http/urls.txt:646
msgid ""
"This identifies a specific instance of an application. Instance namespaces "
"should be unique across your entire project. However, an instance namespace "
"can be the same as the application namespace. This is used to specify a "
"default instance of an application. For example, the default Django admin "
"instance has an instance namespace of ``'admin'``."
msgstr ""

# 6319b73c1db4429b88bfbcf148790f4c
#: ../../../../1.8/docs/topics/http/urls.txt:652
msgid ""
"Namespaced URLs are specified using the ``':'`` operator. For example, the "
"main index page of the admin application is referenced using "
"``'admin:index'``. This indicates a namespace of ``'admin'``, and a named "
"URL of ``'index'``."
msgstr ""

# 3589dceb4d834669989a9fe805564d2b
#: ../../../../1.8/docs/topics/http/urls.txt:656
msgid ""
"Namespaces can also be nested. The named URL ``'sports:polls:index'`` would "
"look for a pattern named ``'index'`` in the namespace ``'polls'`` that is "
"itself defined within the top-level namespace ``'sports'``."
msgstr ""

# 2e2af722bf9044938f15e751ef62e58e
#: ../../../../1.8/docs/topics/http/urls.txt:663
msgid "Reversing namespaced URLs"
msgstr ""

# f36657aac76a4a48a1c01344a88ff831
#: ../../../../1.8/docs/topics/http/urls.txt:665
msgid ""
"When given a namespaced URL (e.g. ``'polls:index'``) to resolve, Django "
"splits the fully qualified name into parts and then tries the following "
"lookup:"
msgstr ""

# f5a1d1cac89a44c9b42dc3febec9fbc8
#: ../../../../1.8/docs/topics/http/urls.txt:668
msgid ""
"First, Django looks for a matching :term:`application namespace` (in this "
"example, ``'polls'``). This will yield a list of instances of that "
"application."
msgstr ""

# 2a6034f1ff0348fbb541a906aaf5b23a
#: ../../../../1.8/docs/topics/http/urls.txt:672
msgid ""
"If there is a *current* application defined, Django finds and returns the "
"URL resolver for that instance. The *current* application can be specified "
"as an attribute on the request. Applications that expect to have multiple "
"deployments should set the ``current_app`` attribute on the ``request`` "
"being processed."
msgstr ""

# 29fb1ceb735841c2aaed3e936ecfb213
#: ../../../../1.8/docs/topics/http/urls.txt:680
msgid ""
"In previous versions of Django, you had to set the ``current_app`` attribute"
" on any :class:`~django.template.Context` or "
":class:`~django.template.RequestContext` that is used to render a template."
msgstr ""

# c1705fe112c44ade9bda474737a22292
#: ../../../../1.8/docs/topics/http/urls.txt:685
msgid ""
"The current application can also be specified manually as an argument to the"
" :func:`~django.core.urlresolvers.reverse` function."
msgstr ""

# 8cdaeaadf0c74467980653c9e1052e09
#: ../../../../1.8/docs/topics/http/urls.txt:688
msgid ""
"If there is no current application. Django looks for a default application "
"instance. The default application instance is the instance that has an "
":term:`instance namespace` matching the :term:`application namespace` (in "
"this example, an instance of ``polls`` called ``'polls'``)."
msgstr ""

# dc91836c853d4a84b87d413350f8a78d
#: ../../../../1.8/docs/topics/http/urls.txt:693
msgid ""
"If there is no default application instance, Django will pick the last "
"deployed instance of the application, whatever its instance name may be."
msgstr ""

# 75ed6483260a4c59ab17bb7adb126ebf
#: ../../../../1.8/docs/topics/http/urls.txt:696
msgid ""
"If the provided namespace doesn't match an :term:`application namespace` in "
"step 1, Django will attempt a direct lookup of the namespace as an "
":term:`instance namespace`."
msgstr ""

# 07ff389772ab43db94635a29cde036a0
#: ../../../../1.8/docs/topics/http/urls.txt:700
msgid ""
"If there are nested namespaces, these steps are repeated for each part of "
"the namespace until only the view name is unresolved. The view name will "
"then be resolved into a URL in the namespace that has been found."
msgstr ""

# 15ccd45a5929442c93759376861254ec
#: ../../../../1.8/docs/topics/http/urls.txt:707
msgid ""
"To show this resolution strategy in action, consider an example of two "
"instances of the ``polls`` application from the tutorial: one called "
"``'author-polls'`` and one called ``'publisher-polls'``. Assume we have "
"enhanced that application so that it takes the instance namespace into "
"consideration when creating and displaying polls."
msgstr ""

# e27fcdbe3f7f4639a264f4732f0b6d04
#: ../../../../1.8/docs/topics/http/urls.txt:736
msgid "Using this setup, the following lookups are possible:"
msgstr ""

# 99c2b567040b4c6d9577d454feb078dc
#: ../../../../1.8/docs/topics/http/urls.txt:738
msgid ""
"If one of the instances is current - say, if we were rendering the detail "
"page in the instance ``'author-polls'`` - ``'polls:index'`` will resolve to "
"the index page of the ``'author-polls'`` instance; i.e. both of the "
"following will result in ``\"/author-polls/\"``."
msgstr ""

# 56bfbafbafb647ebb1d6b269c4be7f69
#: ../../../../1.8/docs/topics/http/urls.txt:743
msgid "In the method of a class-based view::"
msgstr ""

# b34930adae294539a958b0690603c41a
#: ../../../../1.8/docs/topics/http/urls.txt:747
msgid "and in the template:"
msgstr ""

# c2c8c7a170894d3789fa53021f17b2de
#: ../../../../1.8/docs/topics/http/urls.txt:753
msgid ""
"Note that reversing in the template requires the ``current_app`` be added as"
" an attribute to the ``request`` like this::"
msgstr ""

# 7e599a82288949f9959d886a9bd19b01
#: ../../../../1.8/docs/topics/http/urls.txt:760
msgid ""
"If there is no current instance - say, if we were rendering a page somewhere"
" else on the site - ``'polls:index'`` will resolve to the last registered "
"instance of ``polls``. Since there is no default instance (instance "
"namespace of ``'polls'``), the last instance of ``polls`` that is registered"
" will be used. This would be ``'publisher-polls'`` since it's declared last "
"in the ``urlpatterns``."
msgstr ""

# cf60aea853e144198a25511496445b51
#: ../../../../1.8/docs/topics/http/urls.txt:767
msgid ""
"``'author-polls:index'`` will always resolve to the index page of the "
"instance ``'author-polls'`` (and likewise for ``'publisher-polls'``) ."
msgstr ""

# b7c4bd3e991a4716b3639f6a005a3d27
#: ../../../../1.8/docs/topics/http/urls.txt:770
msgid ""
"If there were also a default instance - i.e., an instance named ``'polls'`` "
"- the only change from above would be in the case where there is no current "
"instance (the second item in the list above). In this case ``'polls:index'``"
" would resolve to the index page of the default instance instead of the "
"instance declared last in ``urlpatterns``."
msgstr ""

# 94681c34c8e64c29aab76999fa0e0aa5
#: ../../../../1.8/docs/topics/http/urls.txt:779
msgid "URL namespaces and included URLconfs"
msgstr ""

# a60fb902cf784d67bc44625c886d62c1
#: ../../../../1.8/docs/topics/http/urls.txt:781
msgid "URL namespaces of included URLconfs can be specified in two ways."
msgstr ""

# 0b887f828f464d73a12469a94a4a1160
#: ../../../../1.8/docs/topics/http/urls.txt:783
msgid ""
"Firstly, you can provide the :term:`application <application namespace>` and"
" :term:`instance <instance namespace>` namespaces as arguments to "
":func:`~django.conf.urls.include()` when you construct your URL patterns. "
"For example,::"
msgstr ""

# c5ced5d3b7a34cca8fcc48c07aca881c
#: ../../../../1.8/docs/topics/http/urls.txt:790
msgid ""
"This will include the URLs defined in ``polls.urls`` into the "
":term:`application namespace` ``'polls'``, with the :term:`instance "
"namespace` ``'author-polls'``."
msgstr ""

# 23f4133e186e4aaf994cf08900fd6f2d
#: ../../../../1.8/docs/topics/http/urls.txt:794
msgid ""
"Secondly, you can include an object that contains embedded namespace data. "
"If you ``include()`` a list of :func:`~django.conf.urls.url` instances, the "
"URLs contained in that object will be added to the global namespace. "
"However, you can also ``include()`` a 3-tuple containing::"
msgstr ""

# 0fc41909bfd447018424adde61c79b97
#: ../../../../1.8/docs/topics/http/urls.txt:814
msgid ""
"This will include the nominated URL patterns into the given application and "
"instance namespace."
msgstr ""

# 2f61d4bc4ae54b01b47b55ef2ac0cdfc
#: ../../../../1.8/docs/topics/http/urls.txt:817
msgid ""
"For example, the Django admin is deployed as instances of "
":class:`~django.contrib.admin.AdminSite`.  ``AdminSite`` objects have a "
"``urls`` attribute: A 3-tuple that contains all the patterns in the "
"corresponding admin site, plus the application namespace ``'admin'``, and "
"the name of the admin instance. It is this ``urls`` attribute that you "
"``include()`` into your projects ``urlpatterns`` when you deploy an admin "
"instance."
msgstr ""

# dfc3621ebbc84096b1cdfc35a44ee80a
#: ../../../../1.8/docs/topics/http/urls.txt:824
msgid ""
"Be sure to pass a tuple to ``include()``. If you simply pass three "
"arguments: ``include(polls_patterns, 'polls', 'author-polls')``, Django "
"won't throw an error but due to the signature of ``include()``, ``'polls'`` "
"will be the instance namespace and ``'author-polls'`` will be the "
"application namespace instead of vice versa."
msgstr ""

# 9376220cba0947798e900b722094cf65
#: ../../../../1.8/docs/topics/http/views.txt:3
msgid "Writing views"
msgstr ""

# f9644bbc42f146a2b57b2ef81c9a5750
#: ../../../../1.8/docs/topics/http/views.txt:5
msgid ""
"A view function, or *view* for short, is simply a Python function that takes"
" a Web request and returns a Web response. This response can be the HTML "
"contents of a Web page, or a redirect, or a 404 error, or an XML document, "
"or an image . . . or anything, really. The view itself contains whatever "
"arbitrary logic is necessary to return that response. This code can live "
"anywhere you want, as long as it's on your Python path. There's no other "
"requirement--no \"magic,\" so to speak. For the sake of putting the code "
"*somewhere*, the convention is to put views in a file called ``views.py``, "
"placed in your project or application directory."
msgstr ""

# 2b1dbecc966841ea8389bafcb766b53b
#: ../../../../1.8/docs/topics/http/views.txt:16
msgid "A simple view"
msgstr ""

# 3ea346c8a5dd4c6abb70df52fcb373bc
#: ../../../../1.8/docs/topics/http/views.txt:18
msgid ""
"Here's a view that returns the current date and time, as an HTML document::"
msgstr ""

# c9250232a96d432bbfb6f518bf982be8
#: ../../../../1.8/docs/topics/http/views.txt:28
msgid "Let's step through this code one line at a time:"
msgstr ""

# 1edb97a4f3f44a88ac8551b16fe67fd0
#: ../../../../1.8/docs/topics/http/views.txt:30
msgid ""
"First, we import the class :class:`~django.http.HttpResponse` from the "
":mod:`django.http` module, along with Python's ``datetime`` library."
msgstr ""

# 6242951dc71f481aba8efb70427d0c92
#: ../../../../1.8/docs/topics/http/views.txt:33
msgid ""
"Next, we define a function called ``current_datetime``. This is the view "
"function. Each view function takes an :class:`~django.http.HttpRequest` "
"object as its first parameter, which is typically named ``request``."
msgstr ""

# dd60baedfdbc4c7187c9cd5cdfb7f3bc
#: ../../../../1.8/docs/topics/http/views.txt:37
msgid ""
"Note that the name of the view function doesn't matter; it doesn't have to "
"be named in a certain way in order for Django to recognize it. We're calling"
" it ``current_datetime`` here, because that name clearly indicates what it "
"does."
msgstr ""

# 82c34913d10e41cdb7fda32c86b08450
#: ../../../../1.8/docs/topics/http/views.txt:42
msgid ""
"The view returns an :class:`~django.http.HttpResponse` object that contains "
"the generated response. Each view function is responsible for returning an "
":class:`~django.http.HttpResponse` object. (There are exceptions, but we'll "
"get to those later.)"
msgstr ""

# 455a7517ef3f4940beaf58d4d2e04c4f
#: ../../../../1.8/docs/topics/http/views.txt:47
msgid "Django's Time Zone"
msgstr ""

# 316354b1175f473bbf76a44d183bcf4e
#: ../../../../1.8/docs/topics/http/views.txt:49
msgid ""
"Django includes a :setting:`TIME_ZONE` setting that defaults to "
"``America/Chicago``. This probably isn't where you live, so you might want "
"to change it in your settings file."
msgstr ""

# 17b5cd9ede644424aba464a8db471c4b
#: ../../../../1.8/docs/topics/http/views.txt:54
msgid "Mapping URLs to views"
msgstr ""

# ed5fcd41764548c9bb15c220fe8cf4b5
#: ../../../../1.8/docs/topics/http/views.txt:56
msgid ""
"So, to recap, this view function returns an HTML page that includes the "
"current date and time. To display this view at a particular URL, you'll need"
" to create a *URLconf*; see :doc:`/topics/http/urls` for instructions."
msgstr ""

# 06c4e2c028924969a7b1f2f10593763a
#: ../../../../1.8/docs/topics/http/views.txt:61
msgid "Returning errors"
msgstr ""

# 36760e1456b944229f10c3ba0455d8a6
#: ../../../../1.8/docs/topics/http/views.txt:63
msgid ""
"Returning HTTP error codes in Django is easy. There are subclasses of "
":class:`~django.http.HttpResponse` for a number of common HTTP status codes "
"other than 200 (which means *\"OK\"*). You can find the full list of "
"available subclasses in the :ref:`request/response <ref-httpresponse-"
"subclasses>` documentation.  Just return an instance of one of those "
"subclasses instead of a normal :class:`~django.http.HttpResponse` in order "
"to signify an error. For example::"
msgstr ""

# e71d7775d3334ee0aa8224aa78a09c7d
#: ../../../../1.8/docs/topics/http/views.txt:80
msgid ""
"There isn't a specialized subclass for every possible HTTP response code, "
"since many of them aren't going to be that common. However, as documented in"
" the :class:`~django.http.HttpResponse` documentation, you can also pass the"
" HTTP status code into the constructor for "
":class:`~django.http.HttpResponse` to create a return class for any status "
"code you like. For example::"
msgstr ""

# e14afa77ce4e4e77bf6d483712c703e1
#: ../../../../1.8/docs/topics/http/views.txt:94
msgid ""
"Because 404 errors are by far the most common HTTP error, there's an easier "
"way to handle those errors."
msgstr ""

# 88a9a94ed3e64b0795110a3610286592
#: ../../../../1.8/docs/topics/http/views.txt:98
msgid "The Http404 exception"
msgstr ""

# 269281bd706c4152bb9b9a4e3aec4b53
#: ../../../../1.8/docs/topics/http/views.txt:102
msgid ""
"When you return an error such as :class:`~django.http.HttpResponseNotFound`,"
" you're responsible for defining the HTML of the resulting error page::"
msgstr ""

# ca203653db99460ab71702e53736db82
#: ../../../../1.8/docs/topics/http/views.txt:107
msgid ""
"For convenience, and because it's a good idea to have a consistent 404 error"
" page across your site, Django provides an ``Http404`` exception. If you "
"raise ``Http404`` at any point in a view function, Django will catch it and "
"return the standard error page for your application, along with an HTTP "
"error code 404."
msgstr ""

# a94e988f47fd48f7927501e42638c45b
#: ../../../../1.8/docs/topics/http/views.txt:112
msgid "Example usage::"
msgstr ""

# 36e7a32788bb4f33aea7a4725653b466
#: ../../../../1.8/docs/topics/http/views.txt:125
msgid ""
"In order to use the ``Http404`` exception to its fullest, you should create "
"a template that is displayed when a 404 error is raised. This template "
"should be called ``404.html`` and located in the top level of your template "
"tree."
msgstr ""

# c8476b07df874a17a82a4c559f8fdfe2
#: ../../../../1.8/docs/topics/http/views.txt:129
msgid ""
"If you provide a message when raising an ``Http404`` exception, it will "
"appear in the standard 404 template displayed when :setting:`DEBUG` is "
"``True``. Use these messages for debugging purposes; they generally aren't "
"suitable for use in a production 404 template."
msgstr ""

# 54176e3c280941aba7c6dab42399bf43
#: ../../../../1.8/docs/topics/http/views.txt:137
msgid "Customizing error views"
msgstr ""

# 71c53b0fe4bc497b887248efd82b1344
#: ../../../../1.8/docs/topics/http/views.txt:139
msgid ""
"The default error views in Django should suffice for most Web applications, "
"but can easily be overridden if you need any custom behavior. Simply specify"
" the handlers as seen below in your URLconf (setting them anywhere else will"
" have no effect)."
msgstr ""

# f27cee42ca664e5bbfff2b1352cddfbb
#: ../../../../1.8/docs/topics/http/views.txt:144
msgid ""
"The :func:`~django.views.defaults.page_not_found` view is overridden by "
":data:`~django.conf.urls.handler404`::"
msgstr ""

# 94f01c1af49346b982f4d116203a490a
#: ../../../../1.8/docs/topics/http/views.txt:149
msgid ""
"The :func:`~django.views.defaults.server_error` view is overridden by "
":data:`~django.conf.urls.handler500`::"
msgstr ""

# 8a69424531434e4d94f537733c94aa2a
#: ../../../../1.8/docs/topics/http/views.txt:154
msgid ""
"The :func:`~django.views.defaults.permission_denied` view is overridden by "
":data:`~django.conf.urls.handler403`::"
msgstr ""

# dfa4509aa3e44cfe8e567e4e8e774a78
#: ../../../../1.8/docs/topics/http/views.txt:159
msgid ""
"The :func:`~django.views.defaults.bad_request` view is overridden by "
":data:`~django.conf.urls.handler400`::"
msgstr ""

# 510e26d58fb2433296a0b73f0390ab88
#: ../../../../1.8/docs/topics/i18n/formatting.txt:5
msgid "Format localization"
msgstr ""

# 77625827d3e24c18a91568e197048b83
#: ../../../../1.8/docs/topics/i18n/formatting.txt:10
msgid ""
"Django's formatting system is capable of displaying dates, times and numbers"
" in templates using the format specified for the current :term:`locale "
"<locale name>`. It also handles localized input in forms."
msgstr ""

# add62d35719b414296499dca8209487f
#: ../../../../1.8/docs/topics/i18n/formatting.txt:14
msgid ""
"When it's enabled, two users accessing the same content may see dates, times"
" and numbers formatted in different ways, depending on the formats for their"
" current locale."
msgstr ""

# e3028cc0f4224647a44869f660ea6d52
#: ../../../../1.8/docs/topics/i18n/formatting.txt:18
msgid ""
"The formatting system is disabled by default. To enable it, it's necessary "
"to set :setting:`USE_L10N = True <USE_L10N>` in your settings file."
msgstr ""

# b02f758940fa4bee8a24f019a7fb3fc7
#: ../../../../1.8/docs/topics/i18n/formatting.txt:23
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` includes :setting:`USE_L10N = True <USE_L10N>` "
"for convenience.  Note, however, that to enable number formatting with "
"thousand separators it is necessary to set :setting:`USE_THOUSAND_SEPARATOR "
"= True <USE_THOUSAND_SEPARATOR>` in your settings file. Alternatively, you "
"could use :tfilter:`intcomma` to format numbers in your template."
msgstr ""

# 411cef78f8c54243809fd48c8c739711
#: ../../../../1.8/docs/topics/i18n/formatting.txt:32
msgid ""
"There is also an independent but related :setting:`USE_I18N` setting that "
"controls if Django should activate translation. See "
":doc:`/topics/i18n/translation` for more details."
msgstr ""

# 0641d8bf797a4277ae3f76cf892014df
#: ../../../../1.8/docs/topics/i18n/formatting.txt:37
msgid "Locale aware input in forms"
msgstr ""

# 3788ad9d44da42dbbad358bbf92b08d5
#: ../../../../1.8/docs/topics/i18n/formatting.txt:39
msgid ""
"When formatting is enabled, Django can use localized formats when parsing "
"dates, times and numbers in forms. That means it tries different formats for"
" different locales when guessing the format used by the user when inputting "
"data on forms."
msgstr ""

# 9437ae503935407da00164d828f8ba64
#: ../../../../1.8/docs/topics/i18n/formatting.txt:44
msgid ""
"Django uses different formats for displaying data to those it uses for "
"parsing data. Most notably, the formats for parsing dates can't use the "
"``%a`` (abbreviated weekday name), ``%A`` (full weekday name), ``%b`` "
"(abbreviated month name), ``%B`` (full month name), or ``%p`` (AM/PM)."
msgstr ""

# 57e4079bef8b4424ab1fe4f51eb6a54f
#: ../../../../1.8/docs/topics/i18n/formatting.txt:50
msgid ""
"To enable a form field to localize input and output data simply use its "
"``localize`` argument::"
msgstr ""

# d06e6ec117334c3997737d30cd9a9a1d
#: ../../../../1.8/docs/topics/i18n/formatting.txt:60
msgid "Controlling localization in templates"
msgstr ""

# 3d8a2838fb4c4bc4b35899180433d6ce
#: ../../../../1.8/docs/topics/i18n/formatting.txt:62
msgid ""
"When you have enabled formatting with :setting:`USE_L10N`, Django will try "
"to use a locale specific format whenever it outputs a value in a template."
msgstr ""

# 1ef9b84a7d344cecbe17202ecbe4e2e6
#: ../../../../1.8/docs/topics/i18n/formatting.txt:66
msgid ""
"However, it may not always be appropriate to use localized values -- for "
"example, if you're outputting JavaScript or XML that is designed to be "
"machine-readable, you will always want unlocalized values. You may also want"
" to use localization in selected templates, rather than using localization "
"everywhere."
msgstr ""

# bd5ae688384f4ac9b38a6e8f642af48f
#: ../../../../1.8/docs/topics/i18n/formatting.txt:72
msgid ""
"To allow for fine control over the use of localization, Django provides the "
"``l10n`` template library that contains the following tags and filters."
msgstr ""

# c16e3d9aeb9445489bc5e5afd9219c03
# 11db1f4d94f54489a4709105e69d4b0f
#: ../../../../1.8/docs/topics/i18n/formatting.txt:77
#: ../../../../1.8/docs/topics/i18n/timezones.txt:259
msgid "Template tags"
msgstr "Etiquetas de plantilla"

# e4230f4369644cd0848fbad6391ac1b6
# f0fad730a44f43508604b9e09c370b3e
#: ../../../../1.8/docs/topics/i18n/formatting.txt:82
#: ../../../../1.8/docs/topics/i18n/formatting.txt:116
msgid "localize"
msgstr ""

# 4404394405ed4048acafe0b8aa790f78
#: ../../../../1.8/docs/topics/i18n/formatting.txt:84
msgid ""
"Enables or disables localization of template variables in the contained "
"block."
msgstr ""

# 7aec1ed299da41a9a9e81dcad8fbc5b6
#: ../../../../1.8/docs/topics/i18n/formatting.txt:87
msgid ""
"This tag allows a more fine grained control of localization than "
":setting:`USE_L10N`."
msgstr ""

# 696a7980e8c14fa2b44a80726b34a81a
#: ../../../../1.8/docs/topics/i18n/formatting.txt:90
msgid "To activate or deactivate localization for a template block, use::"
msgstr ""

# ecf8f5ba00ab4dfda99367cdb8cf22ad
#: ../../../../1.8/docs/topics/i18n/formatting.txt:104
msgid ""
"The value of :setting:`USE_L10N` isn't respected inside of a ``{% localize "
"%}`` block."
msgstr ""

# d103ea4883114eab9753b925e4f8b462
#: ../../../../1.8/docs/topics/i18n/formatting.txt:107
msgid ""
"See :tfilter:`localize` and :tfilter:`unlocalize` for template filters that "
"will do the same job on a per-variable basis."
msgstr ""

# 350152e2de734d7cafccfa0aeb418b61
# 127f8676fb85493185167f7c41b12172
# 2c4129e0809745419c786aa52078ef65
#: ../../../../1.8/docs/topics/i18n/formatting.txt:111
#: ../../../../1.8/docs/topics/i18n/timezones.txt:325
#: ../../../../1.8/docs/topics/i18n/translation.txt:909
msgid "Template filters"
msgstr "Filtros de plantilla"

# 524a8a2eedcb4460a7f5e55f99dc9e55
#: ../../../../1.8/docs/topics/i18n/formatting.txt:118
msgid "Forces localization of a single value."
msgstr ""

# 4fe9cb33ac1745848aa5ca8e62c0f0c6
#: ../../../../1.8/docs/topics/i18n/formatting.txt:126
msgid ""
"To disable localization on a single value, use :tfilter:`unlocalize`. To "
"control localization over a large section of a template, use the "
":ttag:`localize` template tag."
msgstr ""

# 83322aae764b48cea81bf099368494c1
#: ../../../../1.8/docs/topics/i18n/formatting.txt:134
msgid "unlocalize"
msgstr ""

# 5415cade47f84b6f92207b1258e63386
#: ../../../../1.8/docs/topics/i18n/formatting.txt:136
msgid "Forces a single value to be printed without localization."
msgstr ""

# 5f2cbeca3a294f7faefe3ac32b02414a
#: ../../../../1.8/docs/topics/i18n/formatting.txt:144
msgid ""
"To force localization of a single value, use :tfilter:`localize`. To control"
" localization over a large section of a template, use the :ttag:`localize` "
"template tag."
msgstr ""

# a054bac8d0ca498a87a5f9de2beede31
#: ../../../../1.8/docs/topics/i18n/formatting.txt:151
msgid "Creating custom format files"
msgstr ""

# 530c5a98a3b24562a56b280925ba0a1f
#: ../../../../1.8/docs/topics/i18n/formatting.txt:153
msgid ""
"Django provides format definitions for many locales, but sometimes you might"
" want to create your own, because a format files doesn't exist for your "
"locale, or because you want to overwrite some of the values."
msgstr ""

# e39fc638253c44c290a0217f86de78ba
#: ../../../../1.8/docs/topics/i18n/formatting.txt:160
msgid ""
"The ability to specify :setting:`FORMAT_MODULE_PATH` as a list was added. "
"Previously, only a single string value was supported."
msgstr ""

# 62fdb4aa209641929ef3740c0e0a132b
#: ../../../../1.8/docs/topics/i18n/formatting.txt:163
msgid ""
"To use custom formats, specify the path where you'll place format files "
"first. To do that, just set your :setting:`FORMAT_MODULE_PATH` setting to "
"the package where format files will exist, for instance::"
msgstr ""

# 23b8f219ab55485bb0a61b73e5950342
#: ../../../../1.8/docs/topics/i18n/formatting.txt:172
msgid ""
"Files are not placed directly in this directory, but in a directory named as"
" the locale, and must be named ``formats.py``."
msgstr ""

# 112fbb796afb4a7b927a7e3620facac8
#: ../../../../1.8/docs/topics/i18n/formatting.txt:175
msgid ""
"To customize the English formats, a structure like this would be needed::"
msgstr ""

# f1e02b1286fc40878616d74f921c3200
#: ../../../../1.8/docs/topics/i18n/formatting.txt:184
msgid ""
"where :file:`formats.py` contains custom format definitions. For example::"
msgstr ""

# d6939099800840d7a44fde28b54e401e
#: ../../../../1.8/docs/topics/i18n/formatting.txt:190
msgid ""
"to use a non-breaking space (Unicode ``00A0``) as a thousand separator, "
"instead of the default for English, a comma."
msgstr ""

# 6e2a9c3e2ace4576b5931ebec66837e1
#: ../../../../1.8/docs/topics/i18n/formatting.txt:194
msgid "Limitations of the provided locale formats"
msgstr ""

# 492e1d5813f94db29b3bcf4ab234e828
#: ../../../../1.8/docs/topics/i18n/formatting.txt:196
msgid ""
"Some locales use context-sensitive formats for numbers, which Django's "
"localization system cannot handle automatically."
msgstr ""

# 3d7c47ac1c2f4c0d88d2cf2c06d5a0a9
#: ../../../../1.8/docs/topics/i18n/formatting.txt:200
msgid "Switzerland (German)"
msgstr ""

# e36ca18788ec4d8795e641f2af68c1e8
#: ../../../../1.8/docs/topics/i18n/formatting.txt:202
msgid ""
"The Swiss number formatting depends on the type of number that is being "
"formatted. For monetary values, a comma is used as the thousand separator "
"and a decimal point for the decimal separator. For all other numbers, a "
"comma is used as decimal separator and a space as thousand separator. The "
"locale format provided by Django uses the generic separators, a comma for "
"decimal and a space for thousand separators."
msgstr ""

# 41ad402316cd42a5b730e42b90b0df53
#: ../../../../1.8/docs/topics/i18n/index.txt:3
msgid "Internationalization and localization"
msgstr "Internacionalización y localización"

# 40e5df71be1f44b59661010d45366205
#: ../../../../1.8/docs/topics/i18n/index.txt:16
msgid ""
"The goal of internationalization and localization is to allow a single Web "
"application to offer its content in languages and formats tailored to the "
"audience."
msgstr ""

# 69be645209c143e786f1c60a9d29e7e2
#: ../../../../1.8/docs/topics/i18n/index.txt:20
msgid ""
"Django has full support for :doc:`translation of text "
"</topics/i18n/translation>`, :doc:`formatting of dates, times and numbers "
"</topics/i18n/formatting>`, and :doc:`time zones </topics/i18n/timezones>`."
msgstr ""

# 56b889c48f404ca4833e9db3e2fc0871
#: ../../../../1.8/docs/topics/i18n/index.txt:24
msgid "Essentially, Django does two things:"
msgstr ""

# 1437f63432454734a83f8400af621b28
#: ../../../../1.8/docs/topics/i18n/index.txt:26
msgid ""
"It allows developers and template authors to specify which parts of their "
"apps should be translated or formatted for local languages and cultures."
msgstr ""

# 50983c426b01431db28e4249593d3074
#: ../../../../1.8/docs/topics/i18n/index.txt:28
msgid ""
"It uses these hooks to localize Web apps for particular users according to "
"their preferences."
msgstr ""

# e7db5964d139451aa357bebd5bc0b95c
#: ../../../../1.8/docs/topics/i18n/index.txt:31
msgid ""
"Obviously, translation depends on the target language, and formatting "
"usually depends on the target country. This information is provided by "
"browsers in the ``Accept-Language`` header. However, the time zone isn't "
"readily available."
msgstr ""

# 13863f5f059e4d498284c1c089909162
#: ../../../../1.8/docs/topics/i18n/index.txt:36
msgid "Definitions"
msgstr ""

# c1901ad309c8478b8f6fe6ad58a1a308
#: ../../../../1.8/docs/topics/i18n/index.txt:38
msgid ""
"The words \"internationalization\" and \"localization\" often cause "
"confusion; here's a simplified definition:"
msgstr ""

# b65c524a533145f98cf0142e2e21aba2
#: ../../../../1.8/docs/topics/i18n/index.txt:42
msgid "internationalization"
msgstr ""

# 372075ca3032465cbe0e264e42277a16
#: ../../../../1.8/docs/topics/i18n/index.txt:44
msgid "Preparing the software for localization. Usually done by developers."
msgstr ""

# 9c8c359e59024083a73266bad747d254
#: ../../../../1.8/docs/topics/i18n/index.txt:45
msgid "localization"
msgstr ""

# ad5c092e707042e5a92de944cf317876
#: ../../../../1.8/docs/topics/i18n/index.txt:47
msgid ""
"Writing the translations and local formats. Usually done by translators."
msgstr ""

# 82d9bbecff684f8b879e6aa5585bc421
#: ../../../../1.8/docs/topics/i18n/index.txt:49
msgid ""
"More details can be found in the `W3C Web Internationalization FAQ`_, the "
"`Wikipedia article`_ or the `GNU gettext documentation`_."
msgstr ""

# eadf39425b854af98b9114689ea93bb2
#: ../../../../1.8/docs/topics/i18n/index.txt:57
msgid ""
"Translation and formatting are controlled by :setting:`USE_I18N` and "
":setting:`USE_L10N` settings respectively. However, both features involve "
"internationalization and localization. The names of the settings are an "
"unfortunate result of Django's history."
msgstr ""

# 492bdbb724d94a1e8b74c7ef5b0e9cb0
#: ../../../../1.8/docs/topics/i18n/index.txt:62
msgid ""
"Here are some other terms that will help us to handle a common language:"
msgstr ""

# 48af4181ebdb44a88bf6a42b1bffee7b
#: ../../../../1.8/docs/topics/i18n/index.txt:65
msgid "locale name"
msgstr ""

# 5ca278e37c4948ef88f2fc860ba2fb37
#: ../../../../1.8/docs/topics/i18n/index.txt:67
msgid ""
"A locale name, either a language specification of the form ``ll`` or a "
"combined language and country specification of the form ``ll_CC``. Examples:"
" ``it``, ``de_AT``, ``es``, ``pt_BR``. The language part is always in lower "
"case and the country part in upper case. The separator is an underscore."
msgstr ""

# 327746348b3946b99d746589a8f6ce98
#: ../../../../1.8/docs/topics/i18n/index.txt:72
msgid "language code"
msgstr ""

# 4a3dd5ed7c244a92aeaa9fbbdbd74d4e
#: ../../../../1.8/docs/topics/i18n/index.txt:74
msgid ""
"Represents the name of a language. Browsers send the names of the languages "
"they accept in the ``Accept-Language`` HTTP header using this format. "
"Examples: ``it``, ``de-at``, ``es``, ``pt-br``. Language codes are generally"
" represented in lower-case, but the HTTP ``Accept-Language`` header is case-"
"insensitive. The separator is a dash."
msgstr ""

# 30a820e9fb114068a13db6dd7d7f8f6c
#: ../../../../1.8/docs/topics/i18n/index.txt:79
msgid "message file"
msgstr ""

# 6de1411c9bec49e396165d5ebca0bfce
#: ../../../../1.8/docs/topics/i18n/index.txt:81
msgid ""
"A message file is a plain-text file, representing a single language, that "
"contains all available :term:`translation strings <translation string>` and "
"how they should be represented in the given language. Message files have a "
"``.po`` file extension."
msgstr ""

# 8efeb4e61b834f828a77d20768f87a41
#: ../../../../1.8/docs/topics/i18n/index.txt:85
msgid "translation string"
msgstr ""

# 7c49ca138d1c41cba0430d967708a650
#: ../../../../1.8/docs/topics/i18n/index.txt:87
msgid "A literal that can be translated."
msgstr ""

# a0ced855b62c46258abcc2e4bab5d592
#: ../../../../1.8/docs/topics/i18n/index.txt:88
msgid "format file"
msgstr ""

# d04987c48db147079d30daf63b87aa63
#: ../../../../1.8/docs/topics/i18n/index.txt:90
msgid ""
"A format file is a Python module that defines the data formats for a given "
"locale."
msgstr ""

# e61300d5ef464f148d114819bb84564f
#: ../../../../1.8/docs/topics/i18n/timezones.txt:5
msgid "Time zones"
msgstr ""

# 839c2ce021ad46a593c0ea6678fce6c7
#: ../../../../1.8/docs/topics/i18n/timezones.txt:12
msgid ""
"When support for time zones is enabled, Django stores datetime information "
"in UTC in the database, uses time-zone-aware datetime objects internally, "
"and translates them to the end user's time zone in templates and forms."
msgstr ""

# 4057d200901340d8b628f8fad1799bdf
#: ../../../../1.8/docs/topics/i18n/timezones.txt:17
msgid ""
"This is handy if your users live in more than one time zone and you want to "
"display datetime information according to each user's wall clock."
msgstr ""

# 4be0eaf94ece4e78bff5cc7ea9d05dc8
#: ../../../../1.8/docs/topics/i18n/timezones.txt:20
msgid ""
"Even if your Web site is available in only one time zone, it's still good "
"practice to store data in UTC in your database. One main reason is Daylight "
"Saving Time (DST). Many countries have a system of DST, where clocks are "
"moved forward in spring and backward in autumn. If you're working in local "
"time, you're likely to encounter errors twice a year, when the transitions "
"happen. (The pytz_ documentation discusses `these issues`_ in greater "
"detail.) This probably doesn't matter for your blog, but it's a problem if "
"you over-bill or under-bill your customers by one hour, twice a year, every "
"year. The solution to this problem is to use UTC in the code and use local "
"time only when interacting with end users."
msgstr ""

# f033381b54c84989bd644e67e2c4e42c
#: ../../../../1.8/docs/topics/i18n/timezones.txt:31
msgid ""
"Time zone support is disabled by default. To enable it, set :setting:`USE_TZ"
" = True <USE_TZ>` in your settings file. Installing pytz_ is highly "
"recommended, but may not be mandatory depending on your particular database "
"backend, operating system and time zone. If you encounter an exception "
"querying dates or times, please try installing it before filing a bug. It's "
"as simple as:"
msgstr ""

# 1afc1908584c43cca5e9f255bb7d1125
#: ../../../../1.8/docs/topics/i18n/timezones.txt:43
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` includes :setting:`USE_TZ = True <USE_TZ>` for "
"convenience."
msgstr ""

# 0fa6db40d4f74c31a8511091e40e453c
#: ../../../../1.8/docs/topics/i18n/timezones.txt:49
msgid ""
"There is also an independent but related :setting:`USE_L10N` setting that "
"controls whether Django should activate format localization. See "
":doc:`/topics/i18n/formatting` for more details."
msgstr ""

# acfaf8ad31aa4828b7c6c068b071d360
#: ../../../../1.8/docs/topics/i18n/timezones.txt:53
msgid ""
"If you're wrestling with a particular problem, start with the :ref:`time "
"zone FAQ <time-zones-faq>`."
msgstr ""

# 4601467453624f1480b70ac85403a7a0
#: ../../../../1.8/docs/topics/i18n/timezones.txt:57
msgid "Concepts"
msgstr ""

# 779f1cc3a85044088d55e3a8eecfa765
#: ../../../../1.8/docs/topics/i18n/timezones.txt:62
msgid "Naive and aware datetime objects"
msgstr ""

# 6d21cf8025bf4eddaf769e66b3c857ab
#: ../../../../1.8/docs/topics/i18n/timezones.txt:64
msgid ""
"Python's :class:`datetime.datetime` objects have a ``tzinfo`` attribute that"
" can be used to store time zone information, represented as an instance of a"
" subclass of :class:`datetime.tzinfo`. When this attribute is set and "
"describes an offset, a datetime object is **aware**. Otherwise, it's "
"**naive**."
msgstr ""

# 8488aeac8c69406a86820e5b7981a87a
#: ../../../../1.8/docs/topics/i18n/timezones.txt:69
msgid ""
"You can use :func:`~django.utils.timezone.is_aware` and "
":func:`~django.utils.timezone.is_naive` to determine whether datetimes are "
"aware or naive."
msgstr ""

# e4acad3ca9054cf885360f64cb14c99a
#: ../../../../1.8/docs/topics/i18n/timezones.txt:73
msgid ""
"When time zone support is disabled, Django uses naive datetime objects in "
"local time. This is simple and sufficient for many use cases. In this mode, "
"to obtain the current time, you would write::"
msgstr ""

# 6fbeb4f8bf7a4f95b83fa2a3fd77bac4
#: ../../../../1.8/docs/topics/i18n/timezones.txt:81
msgid ""
"When time zone support is enabled (:setting:`USE_TZ=True <USE_TZ>`), Django "
"uses time-zone-aware datetime objects. If your code creates datetime "
"objects, they should be aware too. In this mode, the example above becomes::"
msgstr ""

# 78d14cb53ddf4eccb2e6fa6fff5328d0
#: ../../../../1.8/docs/topics/i18n/timezones.txt:91
msgid ""
"Dealing with aware datetime objects isn't always intuitive. For instance, "
"the ``tzinfo`` argument of the standard datetime constructor doesn't work "
"reliably for time zones with DST. Using UTC is generally safe; if you're "
"using other time zones, you should review the `pytz`_ documentation "
"carefully."
msgstr ""

# e40f3631c81946d78668d62e28f9281d
#: ../../../../1.8/docs/topics/i18n/timezones.txt:99
msgid ""
"Python's :class:`datetime.time` objects also feature a ``tzinfo`` attribute,"
" and PostgreSQL has a matching ``time with time zone`` type. However, as "
"PostgreSQL's docs put it, this type \"exhibits properties which lead to "
"questionable usefulness\"."
msgstr ""

# d7a2accade87406399f87ff96a57fa3c
#: ../../../../1.8/docs/topics/i18n/timezones.txt:104
msgid ""
"Django only supports naive time objects and will raise an exception if you "
"attempt to save an aware time object, as a timezone for a time with no "
"associated date does not make sense."
msgstr ""

# 44385317cc3c4d35af001fe9d1c80081
#: ../../../../1.8/docs/topics/i18n/timezones.txt:111
msgid "Interpretation of naive datetime objects"
msgstr ""

# 305ba1ed309e4130a46df65aaffaf31c
#: ../../../../1.8/docs/topics/i18n/timezones.txt:113
msgid ""
"When :setting:`USE_TZ` is ``True``, Django still accepts naive datetime "
"objects, in order to preserve backwards-compatibility. When the database "
"layer receives one, it attempts to make it aware by interpreting it in the "
":ref:`default time zone <default-current-time-zone>` and raises a warning."
msgstr ""

# 25597e15438d4ac2be5d2e91ad7efdc7
#: ../../../../1.8/docs/topics/i18n/timezones.txt:118
msgid ""
"Unfortunately, during DST transitions, some datetimes don't exist or are "
"ambiguous. In such situations, pytz_ raises an exception. Other "
":class:`~datetime.tzinfo` implementations, such as the local time zone used "
"as a fallback when pytz_ isn't installed, may raise an exception or return "
"inaccurate results. That's why you should always create aware datetime "
"objects when time zone support is enabled."
msgstr ""

# 4c2d2ada528340db95b9471e3890d96e
#: ../../../../1.8/docs/topics/i18n/timezones.txt:125
msgid ""
"In practice, this is rarely an issue. Django gives you aware datetime "
"objects in the models and forms, and most often, new datetime objects are "
"created from existing ones through :class:`~datetime.timedelta` arithmetic. "
"The only datetime that's often created in application code is the current "
"time, and :func:`timezone.now() <django.utils.timezone.now>` automatically "
"does the right thing."
msgstr ""

# c972588626374cb78862a08345db7c4a
#: ../../../../1.8/docs/topics/i18n/timezones.txt:135
msgid "Default time zone and current time zone"
msgstr ""

# 038e53d6c4a8464d8739b2841490aff5
#: ../../../../1.8/docs/topics/i18n/timezones.txt:137
msgid ""
"The **default time zone** is the time zone defined by the "
":setting:`TIME_ZONE` setting."
msgstr ""

# edd22b58f3fb48b2b6fc790b636f710a
#: ../../../../1.8/docs/topics/i18n/timezones.txt:140
msgid "The **current time zone** is the time zone that's used for rendering."
msgstr ""

# 0eef5127886a4a6d92f6f78cd595f4b2
#: ../../../../1.8/docs/topics/i18n/timezones.txt:142
msgid ""
"You should set the current time zone to the end user's actual time zone with"
" :func:`~django.utils.timezone.activate`. Otherwise, the default time zone "
"is used."
msgstr ""

# def868a599aa475f9a9f9a7963209ea7
#: ../../../../1.8/docs/topics/i18n/timezones.txt:148
msgid ""
"As explained in the documentation of :setting:`TIME_ZONE`, Django sets "
"environment variables so that its process runs in the default time zone. "
"This happens regardless of the value of :setting:`USE_TZ` and of the current"
" time zone."
msgstr ""

# 53d85e07f4144c14827bf86b272e6be0
#: ../../../../1.8/docs/topics/i18n/timezones.txt:153
msgid ""
"When :setting:`USE_TZ` is ``True``, this is useful to preserve backwards-"
"compatibility with applications that still rely on local time. However, "
":ref:`as explained above <naive-datetime-objects>`, this isn't entirely "
"reliable, and you should always work with aware datetimes in UTC in your own"
" code. For instance, use :meth:`~datetime.datetime.utcfromtimestamp` instead"
" of :meth:`~datetime.datetime.fromtimestamp` -- and don't forget to set "
"``tzinfo`` to :data:`~django.utils.timezone.utc`."
msgstr ""

# 4033cac9ca344559b1835006717c85fa
#: ../../../../1.8/docs/topics/i18n/timezones.txt:163
msgid "Selecting the current time zone"
msgstr ""

# be694ed3ca374128ab0e91616838e6c8
#: ../../../../1.8/docs/topics/i18n/timezones.txt:165
msgid ""
"The current time zone is the equivalent of the current :term:`locale <locale"
" name>` for translations. However, there's no equivalent of the ``Accept-"
"Language`` HTTP header that Django could use to determine the user's time "
"zone automatically. Instead, Django provides :ref:`time zone selection "
"functions <time-zone-selection-functions>`. Use them to build the time zone "
"selection logic that makes sense for you."
msgstr ""

# b3f7460d14bc461e9ef436144d1a6b1a
#: ../../../../1.8/docs/topics/i18n/timezones.txt:172
msgid ""
"Most Web sites that care about time zones just ask users in which time zone "
"they live and store this information in the user's profile. For anonymous "
"users, they use the time zone of their primary audience or UTC. pytz_ "
"provides helpers_, like a list of time zones per country, that you can use "
"to pre-select the most likely choices."
msgstr ""

# 58288e31c89a484988a13aed69965e29
#: ../../../../1.8/docs/topics/i18n/timezones.txt:178
msgid ""
"Here's an example that stores the current timezone in the session. (It skips"
" error handling entirely for the sake of simplicity.)"
msgstr ""

# 1b680cc6533b43b7b8c6d39121bcb1b5
#: ../../../../1.8/docs/topics/i18n/timezones.txt:181
msgid "Add the following middleware to :setting:`MIDDLEWARE_CLASSES`::"
msgstr ""

# be16f68d5a534012b02783b9febc46fe
#: ../../../../1.8/docs/topics/i18n/timezones.txt:195
msgid "Create a view that can set the current timezone::"
msgstr ""

# b6e5913f3ad2419c8cd5d894f3da1433
#: ../../../../1.8/docs/topics/i18n/timezones.txt:206
msgid "Include a form in ``template.html`` that will ``POST`` to this view:"
msgstr ""

# 7f52385cea924b2ea66e160dc11eb042
#: ../../../../1.8/docs/topics/i18n/timezones.txt:226
msgid "Time zone aware input in forms"
msgstr ""

# a1416457cb8e40d3b61af47a10015f78
#: ../../../../1.8/docs/topics/i18n/timezones.txt:228
msgid ""
"When you enable time zone support, Django interprets datetimes entered in "
"forms in the :ref:`current time zone <default-current-time-zone>` and "
"returns aware datetime objects in ``cleaned_data``."
msgstr ""

# 79f6418d92d64e2085fa38b907e10626
#: ../../../../1.8/docs/topics/i18n/timezones.txt:232
msgid ""
"If the current time zone raises an exception for datetimes that don't exist "
"or are ambiguous because they fall in a DST transition (the timezones "
"provided by pytz_ do this), such datetimes will be reported as invalid "
"values."
msgstr ""

# f524cd5c863543c09632d29450f73f13
#: ../../../../1.8/docs/topics/i18n/timezones.txt:239
msgid "Time zone aware output in templates"
msgstr ""

# 340983896e234a9383b42e5dc1397207
#: ../../../../1.8/docs/topics/i18n/timezones.txt:241
msgid ""
"When you enable time zone support, Django converts aware datetime objects to"
" the :ref:`current time zone <default-current-time-zone>` when they're "
"rendered in templates. This behaves very much like :doc:`format localization"
" </topics/i18n/formatting>`."
msgstr ""

# eeb0e40c8e09483b8b3642dc3f18ae74
#: ../../../../1.8/docs/topics/i18n/timezones.txt:248
msgid ""
"Django doesn't convert naive datetime objects, because they could be "
"ambiguous, and because your code should never produce naive datetimes when "
"time zone support is enabled. However, you can force conversion with the "
"template filters described below."
msgstr ""

# 6496237606ad460fabf897ef66d51616
#: ../../../../1.8/docs/topics/i18n/timezones.txt:253
msgid ""
"Conversion to local time isn't always appropriate -- you may be generating "
"output for computers rather than for humans. The following filters and tags,"
" provided by the ``tz`` template tag library, allow you to control the time "
"zone conversions."
msgstr ""

# 56b70e99fc76416fb96cd1d0fab99b9e
# 67336125ce1345f280d3bd70ff0f3cae
#: ../../../../1.8/docs/topics/i18n/timezones.txt:264
#: ../../../../1.8/docs/topics/i18n/timezones.txt:334
msgid "localtime"
msgstr ""

# 84e1f6a5e205491fa511380824cc03e8
#: ../../../../1.8/docs/topics/i18n/timezones.txt:266
msgid ""
"Enables or disables conversion of aware datetime objects to the current time"
" zone in the contained block."
msgstr ""

# 721100d424dd4f399e4ae6fc0b1cee0b
#: ../../../../1.8/docs/topics/i18n/timezones.txt:269
msgid ""
"This tag has exactly the same effects as the :setting:`USE_TZ` setting as "
"far as the template engine is concerned. It allows a more fine grained "
"control of conversion."
msgstr ""

# 6f9da97a28ae4bab82dfae0f918f9b13
#: ../../../../1.8/docs/topics/i18n/timezones.txt:273
msgid "To activate or deactivate conversion for a template block, use::"
msgstr ""

# b74d2d8aeae84bbf90f0da5ef92024c6
#: ../../../../1.8/docs/topics/i18n/timezones.txt:287
msgid ""
"The value of :setting:`USE_TZ` isn't respected inside of a ``{% localtime "
"%}`` block."
msgstr ""

# 00346711dcc743fcab7bfdcf4e10529a
# f35a16708f9b47d6bc73b3397136dec7
#: ../../../../1.8/docs/topics/i18n/timezones.txt:293
#: ../../../../1.8/docs/topics/i18n/timezones.txt:360
msgid "timezone"
msgstr ""

# 3652774ba672439192c60fbed4ed2ff3
#: ../../../../1.8/docs/topics/i18n/timezones.txt:295
msgid ""
"Sets or unsets the current time zone in the contained block. When the "
"current time zone is unset, the default time zone applies."
msgstr ""

# 8689a30389c14806b97877b82972f03f
#: ../../../../1.8/docs/topics/i18n/timezones.txt:313
msgid "get_current_timezone"
msgstr ""

# b75103f282794c47a25021720f9155e2
#: ../../../../1.8/docs/topics/i18n/timezones.txt:315
msgid ""
"You can get the name of the current time zone using the "
"``get_current_timezone`` tag::"
msgstr ""

# b05d35fd9dec43d8bc7bf5a4464be380
#: ../../../../1.8/docs/topics/i18n/timezones.txt:320
msgid ""
"If you enable the ``django.template.context_processors.tz`` context "
"processor, each :class:`~django.template.RequestContext` will contain a "
"``TIME_ZONE`` variable with the value of ``get_current_timezone()``."
msgstr ""

# 5b772b86bfb9469bbe3b6d5f8c59e707
#: ../../../../1.8/docs/topics/i18n/timezones.txt:327
msgid ""
"These filters accept both aware and naive datetimes. For conversion "
"purposes, they assume that naive datetimes are in the default time zone. "
"They always return aware datetimes."
msgstr ""

# 3a79948e42dc4d9cb8c30fda628ff104
#: ../../../../1.8/docs/topics/i18n/timezones.txt:336
msgid "Forces conversion of a single value to the current time zone."
msgstr ""

# adb379584b9d416d93fbe4448848f79e
#: ../../../../1.8/docs/topics/i18n/timezones.txt:347
msgid "utc"
msgstr ""

# b60544bfe3ff4112af51af7a3c497395
#: ../../../../1.8/docs/topics/i18n/timezones.txt:349
msgid "Forces conversion of a single value to UTC."
msgstr ""

# 221d19afde7c4d4ca50618184c502618
#: ../../../../1.8/docs/topics/i18n/timezones.txt:362
msgid "Forces conversion of a single value to an arbitrary timezone."
msgstr ""

# f1493c6b032b40e2a6ff0a969fe29e8f
#: ../../../../1.8/docs/topics/i18n/timezones.txt:364
msgid ""
"The argument must be an instance of a :class:`~datetime.tzinfo` subclass or "
"a time zone name. If it is a time zone name, pytz_ is required."
msgstr ""

# f3c93565cc4c4c4d833ef931570685f8
#: ../../../../1.8/docs/topics/i18n/timezones.txt:376
msgid "Migration guide"
msgstr ""

# 6013887fb419436aafc7949ba651fb1b
#: ../../../../1.8/docs/topics/i18n/timezones.txt:378
msgid ""
"Here's how to migrate a project that was started before Django supported "
"time zones."
msgstr ""

# 3f59513cde0f456c8962bde6a10fc072
#: ../../../../1.8/docs/topics/i18n/timezones.txt:382
msgid "Database"
msgstr "Base de Datos"

# b3fbc220821249159f28b7dab06edd8c
# 0477a12fb4774fbd96933a065b1daf23
#: ../../../../1.8/docs/topics/i18n/timezones.txt:385
#: ../../../../1.8/docs/topics/migrations.txt:82
msgid "PostgreSQL"
msgstr ""

# 077dccaf7c0f459987fcbafac922899d
#: ../../../../1.8/docs/topics/i18n/timezones.txt:387
msgid ""
"The PostgreSQL backend stores datetimes as ``timestamp with time zone``. In "
"practice, this means it converts datetimes from the connection's time zone "
"to UTC on storage, and from UTC to the connection's time zone on retrieval."
msgstr ""

# 156579ad16bb416aac7dfb6dbe8cea10
#: ../../../../1.8/docs/topics/i18n/timezones.txt:391
msgid ""
"As a consequence, if you're using PostgreSQL, you can switch between "
"``USE_TZ = False`` and ``USE_TZ = True`` freely. The database connection's "
"time zone will be set to :setting:`TIME_ZONE` or ``UTC`` respectively, so "
"that Django obtains correct datetimes in all cases. You don't need to "
"perform any data conversions."
msgstr ""

# 8425734e06b24a35b64ab78450b1388f
#: ../../../../1.8/docs/topics/i18n/timezones.txt:398
msgid "Other databases"
msgstr ""

# 55c042661746489989daeaf041b0b0b1
#: ../../../../1.8/docs/topics/i18n/timezones.txt:400
msgid ""
"Other backends store datetimes without time zone information. If you switch "
"from ``USE_TZ = False`` to ``USE_TZ = True``, you must convert your data "
"from local time to UTC -- which isn't deterministic if your local time has "
"DST."
msgstr ""

# dbf5ca77beef450f83516a5a54685a2d
#: ../../../../1.8/docs/topics/i18n/timezones.txt:405
msgid "Code"
msgstr "Código"

# a1a47572dc34441a96da86f812c9d5f9
#: ../../../../1.8/docs/topics/i18n/timezones.txt:407
msgid ""
"The first step is to add :setting:`USE_TZ = True <USE_TZ>` to your settings "
"file and install pytz_ (if possible). At this point, things should mostly "
"work. If you create naive datetime objects in your code, Django makes them "
"aware when necessary."
msgstr ""

# 362f2828046f4cfb8b5ac5524986fc99
#: ../../../../1.8/docs/topics/i18n/timezones.txt:412
msgid ""
"However, these conversions may fail around DST transitions, which means you "
"aren't getting the full benefits of time zone support yet. Also, you're "
"likely to run into a few problems because it's impossible to compare a naive"
" datetime with an aware datetime. Since Django now gives you aware "
"datetimes, you'll get exceptions wherever you compare a datetime that comes "
"from a model or a form with a naive datetime that you've created in your "
"code."
msgstr ""

# 5f06cd5138494872b7638d3605e91b8f
#: ../../../../1.8/docs/topics/i18n/timezones.txt:419
msgid ""
"So the second step is to refactor your code wherever you instantiate "
"datetime objects to make them aware. This can be done incrementally. "
":mod:`django.utils.timezone` defines some handy helpers for compatibility "
"code: :func:`~django.utils.timezone.now`, "
":func:`~django.utils.timezone.is_aware`, "
":func:`~django.utils.timezone.is_naive`, "
":func:`~django.utils.timezone.make_aware`, and "
":func:`~django.utils.timezone.make_naive`."
msgstr ""

# 7459f780d1a546069a0dd7b810a2cd8c
#: ../../../../1.8/docs/topics/i18n/timezones.txt:428
msgid ""
"Finally, in order to help you locate code that needs upgrading, Django "
"raises a warning when you attempt to save a naive datetime to the database::"
msgstr ""

# 3465c97f052243948a8ca54c5c9aa72c
#: ../../../../1.8/docs/topics/i18n/timezones.txt:434
msgid ""
"During development, you can turn such warnings into exceptions and get a "
"traceback by adding the following to your settings file::"
msgstr ""

# bfb0fae3d89e4b4ca15aff492a22eb91
#: ../../../../1.8/docs/topics/i18n/timezones.txt:443
msgid "Fixtures"
msgstr ""

# c23ec828145a4033b7deb578dee73931
#: ../../../../1.8/docs/topics/i18n/timezones.txt:445
msgid ""
"When serializing an aware datetime, the UTC offset is included, like this::"
msgstr ""

# cfee4b0a62f84f579d456d946014aae2
#: ../../../../1.8/docs/topics/i18n/timezones.txt:449
msgid "For a naive datetime, it obviously isn't::"
msgstr ""

# 1d7ac5fc508845fabe2958ba3419b30e
#: ../../../../1.8/docs/topics/i18n/timezones.txt:453
msgid ""
"For models with :class:`~django.db.models.DateTimeField`\\ s, this "
"difference makes it impossible to write a fixture that works both with and "
"without time zone support."
msgstr ""

# ecfe8ab726df4ae4829a88115a1c88b2
#: ../../../../1.8/docs/topics/i18n/timezones.txt:457
msgid ""
"Fixtures generated with ``USE_TZ = False``, or before Django 1.4, use the "
"\"naive\" format. If your project contains such fixtures, after you enable "
"time zone support, you'll see :exc:`RuntimeWarning`\\ s when you load them. "
"To get rid of the warnings, you must convert your fixtures to the \"aware\" "
"format."
msgstr ""

# 925d2141ed30451296eba33320a32793
#: ../../../../1.8/docs/topics/i18n/timezones.txt:462
msgid ""
"You can regenerate fixtures with :djadmin:`loaddata` then "
":djadmin:`dumpdata`. Or, if they're small enough, you can simply edit them "
"to add the UTC offset that matches your :setting:`TIME_ZONE` to each "
"serialized datetime."
msgstr ""

# 1db089f7ab1e485780b5197989edc594
#: ../../../../1.8/docs/topics/i18n/timezones.txt:469
msgid "FAQ"
msgstr ""

# 9551199fdd9d4275b556982e6b03696e
#: ../../../../1.8/docs/topics/i18n/timezones.txt:472
msgid "Setup"
msgstr "Configuración"

# 8d5ea780138f4c7583b8e5446e42ef5e
#: ../../../../1.8/docs/topics/i18n/timezones.txt:474
msgid ""
"**I don't need multiple time zones. Should I enable time zone support?**"
msgstr ""

# 245de08739fe431c9aac7edf83b6a575
#: ../../../../1.8/docs/topics/i18n/timezones.txt:476
msgid ""
"Yes. When time zone support is enabled, Django uses a more accurate model of"
" local time. This shields you from subtle and unreproducible bugs around "
"Daylight Saving Time (DST) transitions."
msgstr ""

# 9ab2f76cd1f043cca229da0035204f3e
#: ../../../../1.8/docs/topics/i18n/timezones.txt:480
msgid ""
"In this regard, time zones are comparable to ``unicode`` in Python. At first"
" it's hard. You get encoding and decoding errors. Then you learn the rules. "
"And some problems disappear -- you never get mangled output again when your "
"application receives non-ASCII input."
msgstr ""

# e68caf8d4d9b41f187a4d58f2c935919
#: ../../../../1.8/docs/topics/i18n/timezones.txt:485
msgid ""
"When you enable time zone support, you'll encounter some errors because "
"you're using naive datetimes where Django expects aware datetimes. Such "
"errors show up when running tests and they're easy to fix. You'll quickly "
"learn how to avoid invalid operations."
msgstr ""

# 94f1dfd0a12248d199119a450485536c
#: ../../../../1.8/docs/topics/i18n/timezones.txt:490
msgid ""
"On the other hand, bugs caused by the lack of time zone support are much "
"harder to prevent, diagnose and fix. Anything that involves scheduled tasks "
"or datetime arithmetic is a candidate for subtle bugs that will bite you "
"only once or twice a year."
msgstr ""

# 4a7bd2fa212c41e3916b3bdca8640e6a
#: ../../../../1.8/docs/topics/i18n/timezones.txt:495
msgid ""
"For these reasons, time zone support is enabled by default in new projects, "
"and you should keep it unless you have a very good reason not to."
msgstr ""

# 3b13857097a24e299c1756409e9b91d5
#: ../../../../1.8/docs/topics/i18n/timezones.txt:498
msgid "**I've enabled time zone support. Am I safe?**"
msgstr ""

# 52c3b06d80f8409aa0503a8590e31987
#: ../../../../1.8/docs/topics/i18n/timezones.txt:500
msgid ""
"Maybe. You're better protected from DST-related bugs, but you can still "
"shoot yourself in the foot by carelessly turning naive datetimes into aware "
"datetimes, and vice-versa."
msgstr ""

# 644d45e567cf40719902febc2a2a3539
#: ../../../../1.8/docs/topics/i18n/timezones.txt:504
msgid ""
"If your application connects to other systems -- for instance, if it queries"
" a Web service -- make sure datetimes are properly specified. To transmit "
"datetimes safely, their representation should include the UTC offset, or "
"their values should be in UTC (or both!)."
msgstr ""

# b05ca82b7df3441280458bd710a216c4
#: ../../../../1.8/docs/topics/i18n/timezones.txt:509
msgid ""
"Finally, our calendar system contains interesting traps for computers::"
msgstr ""

# b14f3ef25aa648aa910f011cd67bb1b3
#: ../../../../1.8/docs/topics/i18n/timezones.txt:521
msgid ""
"(To implement this function, you must decide whether 2012-02-29 minus one "
"year is 2011-02-28 or 2011-03-01, which depends on your business "
"requirements.)"
msgstr ""

# 03033f9951bb4c6394ef062d0dc0f104
#: ../../../../1.8/docs/topics/i18n/timezones.txt:525
msgid "**Should I install pytz?**"
msgstr ""

# ef7bc9ce331441059a35fb9801f4f2b2
#: ../../../../1.8/docs/topics/i18n/timezones.txt:527
msgid ""
"Yes. Django has a policy of not requiring external dependencies, and for "
"this reason pytz_ is optional. However, it's much safer to install it."
msgstr ""

# 0bcb5981258445f29b25953182b93701
#: ../../../../1.8/docs/topics/i18n/timezones.txt:530
msgid ""
"As soon as you activate time zone support, Django needs a definition of the "
"default time zone. When pytz is available, Django loads this definition from"
" the `tz database`_. This is the most accurate solution. Otherwise, it "
"relies on the difference between local time and UTC, as reported by the "
"operating system, to compute conversions. This is less reliable, especially "
"around DST transitions."
msgstr ""

# 205f935fa4634c12b80b0b906ad5c1e3
#: ../../../../1.8/docs/topics/i18n/timezones.txt:537
msgid ""
"Furthermore, if you want to support users in more than one time zone, pytz "
"is the reference for time zone definitions."
msgstr ""

# 63c51c8f5eb244e68ef4cd8ab8b779e9
#: ../../../../1.8/docs/topics/i18n/timezones.txt:541
msgid "Troubleshooting"
msgstr "Solución de problemas"

# 2e9a344f93884b8b9b9ecbafadb99c1c
#: ../../../../1.8/docs/topics/i18n/timezones.txt:543
msgid ""
"**My application crashes with** ``TypeError: can't compare offset-naive`` "
"``and offset-aware datetimes`` **-- what's wrong?**"
msgstr ""

# af3780bae3dc4ce3b81d9f4da24ea01f
#: ../../../../1.8/docs/topics/i18n/timezones.txt:546
msgid ""
"Let's reproduce this error by comparing a naive and an aware datetime::"
msgstr ""

# e39e36888823404aac9ecb284b805d9d
#: ../../../../1.8/docs/topics/i18n/timezones.txt:557
msgid ""
"If you encounter this error, most likely your code is comparing these two "
"things:"
msgstr ""

# 644b38821cee49f5b745c21e09f321c7
#: ../../../../1.8/docs/topics/i18n/timezones.txt:560
msgid ""
"a datetime provided by Django -- for instance, a value read from a form or a"
" model field. Since you enabled time zone support, it's aware."
msgstr ""

# f1446244ba4148e1a82c93bb8dfe2c23
#: ../../../../1.8/docs/topics/i18n/timezones.txt:562
msgid ""
"a datetime generated by your code, which is naive (or you wouldn't be "
"reading this)."
msgstr ""

# 54bd23073f694c53b203b9f55d499346
#: ../../../../1.8/docs/topics/i18n/timezones.txt:565
msgid ""
"Generally, the correct solution is to change your code to use an aware "
"datetime instead."
msgstr ""

# 786a6d5f3c3542c388f780a5b8667838
#: ../../../../1.8/docs/topics/i18n/timezones.txt:568
msgid ""
"If you're writing a pluggable application that's expected to work "
"independently of the value of :setting:`USE_TZ`, you may find "
":func:`django.utils.timezone.now` useful. This function returns the current "
"date and time as a naive datetime when ``USE_TZ = False`` and as an aware "
"datetime when ``USE_TZ = True``. You can add or subtract "
":class:`datetime.timedelta` as needed."
msgstr ""

# b0387640d5214b449bd6c99e364d89de
#: ../../../../1.8/docs/topics/i18n/timezones.txt:575
msgid ""
"**I see lots of** ``RuntimeWarning: DateTimeField received a naive "
"datetime`` ``(YYYY-MM-DD HH:MM:SS)`` ``while time zone support is active`` "
"**-- is that bad?**"
msgstr ""

# 7e4554cbb9494ef29c1112fe52a36f04
#: ../../../../1.8/docs/topics/i18n/timezones.txt:579
msgid ""
"When time zone support is enabled, the database layer expects to receive "
"only aware datetimes from your code. This warning occurs when it receives a "
"naive datetime. This indicates that you haven't finished porting your code "
"for time zone support. Please refer to the :ref:`migration guide <time-"
"zones-migration-guide>` for tips on this process."
msgstr ""

# 0b99f9337eb545489b0f5ead1c7ed585
#: ../../../../1.8/docs/topics/i18n/timezones.txt:585
msgid ""
"In the meantime, for backwards compatibility, the datetime is considered to "
"be in the default time zone, which is generally what you expect."
msgstr ""

# d9d6de71e8824145b439e811d16572b3
#: ../../../../1.8/docs/topics/i18n/timezones.txt:588
msgid "``now.date()`` **is yesterday! (or tomorrow)**"
msgstr ""

# 625a773a975b4082bfcabd0627831029
#: ../../../../1.8/docs/topics/i18n/timezones.txt:590
msgid ""
"If you've always used naive datetimes, you probably believe that you can "
"convert a datetime to a date by calling its :meth:`~datetime.datetime.date` "
"method. You also consider that a :class:`~datetime.date` is a lot like a "
":class:`~datetime.datetime`, except that it's less accurate."
msgstr ""

# 2bfaf25bc9fa468fa50b9933a52849e0
#: ../../../../1.8/docs/topics/i18n/timezones.txt:595
msgid "None of this is true in a time zone aware environment::"
msgstr ""

# f8695b05723e4df1b02f456f3e3a3d1f
#: ../../../../1.8/docs/topics/i18n/timezones.txt:613
msgid ""
"As this example shows, the same datetime has a different date, depending on "
"the time zone in which it is represented. But the real problem is more "
"fundamental."
msgstr ""

# 917600cd55084469af8b7fe0221c7cfb
#: ../../../../1.8/docs/topics/i18n/timezones.txt:617
msgid ""
"A datetime represents a **point in time**. It's absolute: it doesn't depend "
"on anything. On the contrary, a date is a **calendaring concept**. It's a "
"period of time whose bounds depend on the time zone in which the date is "
"considered. As you can see, these two concepts are fundamentally different, "
"and converting a datetime to a date isn't a deterministic operation."
msgstr ""

# e8c73662c039494c89d12887799331b9
#: ../../../../1.8/docs/topics/i18n/timezones.txt:623
msgid "What does this mean in practice?"
msgstr ""

# 4f1a3edd131d48fea87f828a5420dc8c
#: ../../../../1.8/docs/topics/i18n/timezones.txt:625
msgid ""
"Generally, you should avoid converting a :class:`~datetime.datetime` to "
":class:`~datetime.date`. For instance, you can use the :tfilter:`date` "
"template filter to only show the date part of a datetime. This filter will "
"convert the datetime into the current time zone before formatting it, "
"ensuring the results appear correctly."
msgstr ""

# 339da588aaba4519bdc1b507e5e49942
#: ../../../../1.8/docs/topics/i18n/timezones.txt:631
msgid ""
"If you really need to do the conversion yourself, you must ensure the "
"datetime is converted to the appropriate time zone first. Usually, this will"
" be the current timezone::"
msgstr ""

# 80469baf5b2749188db8fff606f0c8be
#: ../../../../1.8/docs/topics/i18n/timezones.txt:647
msgid ""
"**I get an error** \"``Are time zone definitions for your database and pytz "
"installed?``\" **pytz is installed, so I guess the problem is my database?**"
msgstr ""

# 375c88d552054fd1ac6019e68d83756a
#: ../../../../1.8/docs/topics/i18n/timezones.txt:650
msgid ""
"If you are using MySQL, see the :ref:`mysql-time-zone-definitions` section "
"of the MySQL notes for instructions on loading time zone definitions."
msgstr ""

# bf99378e0b2146e09c127d5d52cfcd71
#: ../../../../1.8/docs/topics/i18n/timezones.txt:656
msgid ""
"**I have a string** ``\"2012-02-21 10:28:45\"`` **and I know it's in the** "
"``\"Europe/Helsinki\"`` **time zone. How do I turn that into an aware "
"datetime?**"
msgstr ""

# 10bfe07e1ad344409ad1fc01864eb251
#: ../../../../1.8/docs/topics/i18n/timezones.txt:660
msgid "This is exactly what pytz_ is for."
msgstr ""

# 4b9874e6cfc5489cab27c86d208c5f57
#: ../../../../1.8/docs/topics/i18n/timezones.txt:668
msgid ""
"Note that ``localize`` is a pytz extension to the :class:`~datetime.tzinfo` "
"API. Also, you may want to catch ``pytz.InvalidTimeError``. The "
"documentation of pytz contains `more examples`_. You should review it before"
" attempting to manipulate aware datetimes."
msgstr ""

# 6f7de44dd9644a47a8d68057d49bb6fc
#: ../../../../1.8/docs/topics/i18n/timezones.txt:673
msgid "**How can I obtain the local time in the current time zone?**"
msgstr ""

# 751f068aa2bc4e208efc5bef3dea19ef
#: ../../../../1.8/docs/topics/i18n/timezones.txt:675
msgid "Well, the first question is, do you really need to?"
msgstr ""

# 07fb6e8568df4c4e862666f73f9e595a
#: ../../../../1.8/docs/topics/i18n/timezones.txt:677
msgid ""
"You should only use local time when you're interacting with humans, and the "
"template layer provides :ref:`filters and tags <time-zones-in-templates>` to"
" convert datetimes to the time zone of your choice."
msgstr ""

# be15d81022ad4f3c98aa343ec5177568
#: ../../../../1.8/docs/topics/i18n/timezones.txt:681
msgid ""
"Furthermore, Python knows how to compare aware datetimes, taking into "
"account UTC offsets when necessary. It's much easier (and possibly faster) "
"to write all your model and view code in UTC. So, in most circumstances, the"
" datetime in UTC returned by :func:`django.utils.timezone.now` will be "
"sufficient."
msgstr ""

# e36021494c254d099fed50545e0b7584
#: ../../../../1.8/docs/topics/i18n/timezones.txt:687
msgid ""
"For the sake of completeness, though, if you really want the local time in "
"the current time zone, here's how you can obtain it::"
msgstr ""

# 0b4af0890e5d4a2da2409c1f972e8e06
#: ../../../../1.8/docs/topics/i18n/timezones.txt:694
msgid ""
"In this example, pytz_ is installed and the current time zone is "
"``\"Europe/Paris\"``."
msgstr ""

# 69c918921c1a452899276491f44cb0e5
#: ../../../../1.8/docs/topics/i18n/timezones.txt:697
msgid "**How can I see all available time zones?**"
msgstr ""

# 4e66addf28d14e02a88ac0dc8d899168
#: ../../../../1.8/docs/topics/i18n/timezones.txt:699
msgid ""
"pytz_ provides helpers_, including a list of current time zones and a list "
"of all available time zones -- some of which are only of historical "
"interest."
msgstr ""

# 9d6933e843084e7fb36b6f9b37e3611c
#: ../../../../1.8/docs/topics/i18n/translation.txt:3
msgid "Translation"
msgstr ""

# ab490f5d7cff4685b571700ece284151
#: ../../../../1.8/docs/topics/i18n/translation.txt:10
msgid ""
"In order to make a Django project translatable, you have to add a minimal "
"number of hooks to your Python code and templates. These hooks are called "
":term:`translation strings <translation string>`. They tell Django: \"This "
"text should be translated into the end user's language, if a translation for"
" this text is available in that language.\" It's your responsibility to mark"
" translatable strings; the system can only translate strings it knows about."
msgstr ""

# 1c49a925c9eb4f19b763a84efcc54522
#: ../../../../1.8/docs/topics/i18n/translation.txt:17
msgid ""
"Django then provides utilities to extract the translation strings into a "
":term:`message file`. This file is a convenient way for translators to "
"provide the equivalent of the translation strings in the target language. "
"Once the translators have filled in the message file, it must be compiled. "
"This process relies on the GNU gettext toolset."
msgstr ""

# 093409f6b2f74332af1a47340b53aff2
#: ../../../../1.8/docs/topics/i18n/translation.txt:23
msgid ""
"Once this is done, Django takes care of translating Web apps on the fly in "
"each available language, according to users' language preferences."
msgstr ""

# 43e18a4085b44408adb5626965bda089
#: ../../../../1.8/docs/topics/i18n/translation.txt:26
msgid ""
"Django's internationalization hooks are on by default, and that means "
"there's a bit of i18n-related overhead in certain places of the framework. "
"If you don't use internationalization, you should take the two seconds to "
"set :setting:`USE_I18N = False <USE_I18N>` in your settings file. Then "
"Django will make some optimizations so as not to load the "
"internationalization machinery."
msgstr ""

# b64cb15bbdcd4079983a96fe72081ad1
#: ../../../../1.8/docs/topics/i18n/translation.txt:34
msgid ""
"There is also an independent but related :setting:`USE_L10N` setting that "
"controls if Django should implement format localization. See "
":doc:`/topics/i18n/formatting` for more details."
msgstr ""

# 68a8ff5465e840b3a41b263d70c84790
#: ../../../../1.8/docs/topics/i18n/translation.txt:40
msgid ""
"Make sure you've activated translation for your project (the fastest way is "
"to check if :setting:`MIDDLEWARE_CLASSES` includes "
":mod:`django.middleware.locale.LocaleMiddleware`). If you haven't yet, see "
":ref:`how-django-discovers-language-preference`."
msgstr ""

# 71f47220cfb74c29a79a4abab2487f62
#: ../../../../1.8/docs/topics/i18n/translation.txt:46
msgid "Internationalization: in Python code"
msgstr ""

# 8ac6b315505a4eee901f44ed08d4f260
#: ../../../../1.8/docs/topics/i18n/translation.txt:49
msgid "Standard translation"
msgstr ""

# c80635f0f10b412b92bad9ff82c942d3
#: ../../../../1.8/docs/topics/i18n/translation.txt:51
msgid ""
"Specify a translation string by using the function "
":func:`~django.utils.translation.ugettext`. It's convention to import this "
"as a shorter alias, ``_``, to save typing."
msgstr ""

# 170f050925374e7dbba2ddb65d5da199
#: ../../../../1.8/docs/topics/i18n/translation.txt:56
msgid ""
"Python's standard library ``gettext`` module installs ``_()`` into the "
"global namespace, as an alias for ``gettext()``. In Django, we have chosen "
"not to follow this practice, for a couple of reasons:"
msgstr ""

# 105f2bfa739d47e89f1dc5386c67d0d1
#: ../../../../1.8/docs/topics/i18n/translation.txt:60
msgid ""
"For international character set (Unicode) support, "
":func:`~django.utils.translation.ugettext` is more useful than "
"``gettext()``. Sometimes, you should be using "
":func:`~django.utils.translation.ugettext_lazy` as the default translation "
"method for a particular file. Without ``_()`` in the global namespace, the "
"developer has to think about which is the most appropriate translation "
"function."
msgstr ""

# 2586540415fc41f18e33512326d5cf71
#: ../../../../1.8/docs/topics/i18n/translation.txt:68
msgid ""
"The underscore character (``_``) is used to represent \"the previous "
"result\" in Python's interactive shell and doctest tests. Installing a "
"global ``_()`` function causes interference. Explicitly importing "
"``ugettext()`` as ``_()`` avoids this problem."
msgstr ""

# 320809650abb496cb5a02803449cd8fc
#: ../../../../1.8/docs/topics/i18n/translation.txt:75
msgid ""
"In this example, the text ``\"Welcome to my site.\"`` is marked as a "
"translation string::"
msgstr ""

# 04ddeed65235419190cf6d64e179b8cc
#: ../../../../1.8/docs/topics/i18n/translation.txt:85
msgid ""
"Obviously, you could code this without using the alias. This example is "
"identical to the previous one::"
msgstr ""

# 23fceab8b0b74f2b9a21580af2f24b15
#: ../../../../1.8/docs/topics/i18n/translation.txt:95
msgid ""
"Translation works on computed values. This example is identical to the "
"previous two::"
msgstr ""

# aac2e36722424893a02a55839bfbbf67
#: ../../../../1.8/docs/topics/i18n/translation.txt:103
msgid "Translation works on variables. Again, here's an identical example::"
msgstr ""

# 59539ecf10a842809b181b827c4f875a
#: ../../../../1.8/docs/topics/i18n/translation.txt:110
msgid ""
"(The caveat with using variables or computed values, as in the previous two "
"examples, is that Django's translation-string-detecting utility, :djadmin"
":`django-admin makemessages <makemessages>`, won't be able to find these "
"strings. More on :djadmin:`makemessages` later.)"
msgstr ""

# 6e57036fc52b4682b223a90998a49a8b
#: ../../../../1.8/docs/topics/i18n/translation.txt:115
msgid ""
"The strings you pass to ``_()`` or ``ugettext()`` can take placeholders, "
"specified with Python's standard named-string interpolation syntax. "
"Example::"
msgstr ""

# d4b8e446d9354304a311700f872e53c8
#: ../../../../1.8/docs/topics/i18n/translation.txt:122
msgid ""
"This technique lets language-specific translations reorder the placeholder "
"text. For example, an English translation may be ``\"Today is November "
"26.\"``, while a Spanish translation may be ``\"Hoy es 26 de Noviembre.\"`` "
"-- with the month and the day placeholders swapped."
msgstr ""

# b6e403015c804287a46fd49ac31200de
#: ../../../../1.8/docs/topics/i18n/translation.txt:127
msgid ""
"For this reason, you should use named-string interpolation (e.g., "
"``%(day)s``) instead of positional interpolation (e.g., ``%s`` or ``%d``) "
"whenever you have more than a single parameter. If you used positional "
"interpolation, translations wouldn't be able to reorder placeholder text."
msgstr ""

# 6f8b76229355431581ab12d9aacac9b6
#: ../../../../1.8/docs/topics/i18n/translation.txt:135
msgid "Comments for translators"
msgstr ""

# a6880a5de2d94370b09167920c598076
#: ../../../../1.8/docs/topics/i18n/translation.txt:137
msgid ""
"If you would like to give translators hints about a translatable string, you"
" can add a comment prefixed with the ``Translators`` keyword on the line "
"preceding the string, e.g.::"
msgstr ""

# 61e69637715a42b39427936acd9a3908
#: ../../../../1.8/docs/topics/i18n/translation.txt:145
msgid ""
"The comment will then appear in the resulting ``.po`` file associated with "
"the translatable construct located below it and should also be displayed by "
"most translation tools."
msgstr ""

# 7700d8ed1f0a4e8fa1f8b9c122b1f458
#: ../../../../1.8/docs/topics/i18n/translation.txt:149
msgid ""
"Just for completeness, this is the corresponding fragment of the resulting "
"``.po`` file:"
msgstr ""

# 8df7fbe6d1b84b739d1fc2d6a6967af0
#: ../../../../1.8/docs/topics/i18n/translation.txt:159
msgid ""
"This also works in templates. See :ref:`translator-comments-in-templates` "
"for more details."
msgstr ""

# 08dc83a6a40d4b25a5e9ebc98452c92c
#: ../../../../1.8/docs/topics/i18n/translation.txt:163
msgid "Marking strings as no-op"
msgstr ""

# 5f96471834fe463098d68c60796aaf06
#: ../../../../1.8/docs/topics/i18n/translation.txt:165
msgid ""
"Use the function :func:`django.utils.translation.ugettext_noop()` to mark a "
"string as a translation string without translating it. The string is later "
"translated from a variable."
msgstr ""

# c7fe63db13f04020a59e583aa8878755
#: ../../../../1.8/docs/topics/i18n/translation.txt:169
msgid ""
"Use this if you have constant strings that should be stored in the source "
"language because they are exchanged over systems or users -- such as strings"
" in a database -- but should be translated at the last possible point in "
"time, such as when the string is presented to the user."
msgstr ""

# 399b743d0ceb4b4ab966ad437cf81849
#: ../../../../1.8/docs/topics/i18n/translation.txt:175
msgid "Pluralization"
msgstr ""

# 0af953dc86cf45068ed284be9b0e0a9e
#: ../../../../1.8/docs/topics/i18n/translation.txt:177
msgid ""
"Use the function :func:`django.utils.translation.ungettext()` to specify "
"pluralized messages."
msgstr ""

# 2e6d591f0a414820b29dd8820b021475
#: ../../../../1.8/docs/topics/i18n/translation.txt:180
msgid ""
"``ungettext`` takes three arguments: the singular translation string, the "
"plural translation string and the number of objects."
msgstr ""

# fe44e4da541544c393244c7ebab6bc25
#: ../../../../1.8/docs/topics/i18n/translation.txt:183
msgid ""
"This function is useful when you need your Django application to be "
"localizable to languages where the number and complexity of `plural forms "
"<http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_ is "
"greater than the two forms used in English ('object' for the singular and "
"'objects' for all the cases where ``count`` is different from one, "
"irrespective of its value.)"
msgstr ""

# 0c1caea27f6a4fc2af114f72d3059a04
#: ../../../../1.8/docs/topics/i18n/translation.txt:204
msgid ""
"In this example the number of objects is passed to the translation languages"
" as the ``count`` variable."
msgstr ""

# a59976a1e3d94810bd1a563f1e5f7bc2
#: ../../../../1.8/docs/topics/i18n/translation.txt:207
msgid ""
"Note that pluralization is complicated and works differently in each "
"language. Comparing ``count`` to 1 isn't always the correct rule. This code "
"looks sophisticated, but will produce incorrect results for some languages::"
msgstr ""

# 3171c5b0a2d84330a46d98fea9979794
#: ../../../../1.8/docs/topics/i18n/translation.txt:229
msgid ""
"Don't try to implement your own singular-or-plural logic, it won't be "
"correct. In a case like this, consider something like the following::"
msgstr ""

# cf8907d9ba024e8f96734ba9c3175543
#: ../../../../1.8/docs/topics/i18n/translation.txt:245
msgid ""
"When using ``ungettext()``, make sure you use a single name for every "
"extrapolated variable included in the literal. In the examples above, note "
"how we used the ``name`` Python variable in both translation strings. This "
"example, besides being incorrect in some languages as noted above, would "
"fail::"
msgstr ""

# 99723f4cbfa44cbcaf54b6de9a2ffc63
#: ../../../../1.8/docs/topics/i18n/translation.txt:261
msgid ""
"You would get an error when running :djadmin:`django-admin compilemessages "
"<compilemessages>`::"
msgstr ""

# c96ca57c233840d09089e55ee63c2bc9
#: ../../../../1.8/docs/topics/i18n/translation.txt:266
msgid "Plural form and po files"
msgstr ""

# 4737ced239de40c1bb19d6e1704f4eee
#: ../../../../1.8/docs/topics/i18n/translation.txt:268
msgid ""
"Django does not support custom plural equations in po files. As all "
"translation catalogs are merged, only the plural form for the main Django po"
" file (in ``django/conf/locale/<lang_code>/LC_MESSAGES/django.po``) is "
"considered. Plural forms in all other po files are ignored. Therefore, you "
"should not use different plural equations in your project or application po "
"files."
msgstr ""

# bea0d75bab944bc7a1552833ecf2bad2
#: ../../../../1.8/docs/topics/i18n/translation.txt:278
msgid "Contextual markers"
msgstr ""

# 168b1e07a0fd4039bab2d7e74977859c
#: ../../../../1.8/docs/topics/i18n/translation.txt:280
msgid ""
"Sometimes words have several meanings, such as ``\"May\"`` in English, which"
" refers to a month name and to a verb. To enable translators to translate "
"these words correctly in different contexts, you can use the "
":func:`django.utils.translation.pgettext()` function, or the "
":func:`django.utils.translation.npgettext()` function if the string needs "
"pluralization. Both take a context string as the first variable."
msgstr ""

# d30a297175034df4a8e06664788e5aaf
#: ../../../../1.8/docs/topics/i18n/translation.txt:287
msgid ""
"In the resulting ``.po`` file, the string will then appear as often as there"
" are different contextual markers for the same string (the context will "
"appear on the ``msgctxt`` line), allowing the translator to give a different"
" translation for each of them."
msgstr ""

# 1077c0bfecff48c2aba2ea782b224fde
#: ../../../../1.8/docs/topics/i18n/translation.txt:298
msgid "or::"
msgstr ""

# 3b69eafdff3446c98b05f3490fb47328
#: ../../../../1.8/docs/topics/i18n/translation.txt:307
msgid "will appear in the ``.po`` file as:"
msgstr ""

# d06dfd51f4284ac4ab98e05d235be1eb
#: ../../../../1.8/docs/topics/i18n/translation.txt:315
msgid ""
"Contextual markers are also supported by the :ttag:`trans` and "
":ttag:`blocktrans` template tags."
msgstr ""

# d37cdce60961484eb6e5edf8b4d6bed3
#: ../../../../1.8/docs/topics/i18n/translation.txt:321
msgid "Lazy translation"
msgstr ""

# 2da91664899548d28e40d6db0889ecf0
#: ../../../../1.8/docs/topics/i18n/translation.txt:323
msgid ""
"Use the lazy versions of translation functions in "
":mod:`django.utils.translation` (easily recognizable by the ``lazy`` suffix "
"in their names) to translate strings lazily -- when the value is accessed "
"rather than when they're called."
msgstr ""

# 6daf0caeeeb14f66a748163782b96054
#: ../../../../1.8/docs/topics/i18n/translation.txt:328
msgid ""
"These functions store a lazy reference to the string -- not the actual "
"translation. The translation itself will be done when the string is used in "
"a string context, such as in template rendering."
msgstr ""

# 1ba6ad489a5b48bc987aecfff7ffa6f9
#: ../../../../1.8/docs/topics/i18n/translation.txt:332
msgid ""
"This is essential when calls to these functions are located in code paths "
"that are executed at module load time."
msgstr ""

# fcee4526287c46e69a833ce2f897b3fa
#: ../../../../1.8/docs/topics/i18n/translation.txt:335
msgid ""
"This is something that can easily happen when defining models, forms and "
"model forms, because Django implements these such that their fields are "
"actually class-level attributes. For that reason, make sure to use lazy "
"translations in the following cases:"
msgstr ""

# e9e8e5aadef44579a989d3df9d6bdb26
#: ../../../../1.8/docs/topics/i18n/translation.txt:341
msgid ""
"Model fields and relationships ``verbose_name`` and ``help_text`` option "
"values"
msgstr ""

# 8d37d1b363ee470ea252e4066498f737
#: ../../../../1.8/docs/topics/i18n/translation.txt:343
msgid ""
"For example, to translate the help text of the *name* field in the following"
" model, do the following::"
msgstr ""

# 57bf039c9651426a83574409d5d4d4e5
#: ../../../../1.8/docs/topics/i18n/translation.txt:352
msgid ""
"You can mark names of :class:`~django.db.models.ForeignKey`, "
":class:`~django.db.models.ManyToManyField` or "
":class:`~django.db.models.OneToOneField` relationship as translatable by "
"using their :attr:`~django.db.models.Options.verbose_name` options::"
msgstr ""

# b429753916d741a086da99d5341a1829
#: ../../../../1.8/docs/topics/i18n/translation.txt:361
msgid ""
"Just like you would do in :attr:`~django.db.models.Options.verbose_name` you"
" should provide a lowercase verbose name text for the relation as Django "
"will automatically titlecase it when required."
msgstr ""

# c13534da9be4486baaacdc7ceffc2704
#: ../../../../1.8/docs/topics/i18n/translation.txt:366
msgid "Model verbose names values"
msgstr ""

# 31da7b0252ae45d1bd4c9208bdd8827d
#: ../../../../1.8/docs/topics/i18n/translation.txt:368
msgid ""
"It is recommended to always provide explicit "
":attr:`~django.db.models.Options.verbose_name` and "
":attr:`~django.db.models.Options.verbose_name_plural` options rather than "
"relying on the fallback English-centric and somewhat naïve determination of "
"verbose names Django performs by looking at the model's class name::"
msgstr ""

# 3ae3f8240dd64911ab77fea92b9b8f8b
#: ../../../../1.8/docs/topics/i18n/translation.txt:385
msgid "Model methods ``short_description`` attribute values"
msgstr ""

# 3db86a6706f047f4ab712264948699d2
#: ../../../../1.8/docs/topics/i18n/translation.txt:387
msgid ""
"For model methods, you can provide translations to Django and the admin site"
" with the ``short_description`` attribute::"
msgstr ""

# 516165f7da7244e5a4bb50036adc0fc6
#: ../../../../1.8/docs/topics/i18n/translation.txt:402
msgid "Working with lazy translation objects"
msgstr ""

# b792897684fd460fa2bb6b42274abd93
#: ../../../../1.8/docs/topics/i18n/translation.txt:404
msgid ""
"The result of a ``ugettext_lazy()`` call can be used wherever you would use "
"a unicode string (an object with type ``unicode``) in Python. If you try to "
"use it where a bytestring (a ``str`` object) is expected, things will not "
"work as expected, since a ``ugettext_lazy()`` object doesn't know how to "
"convert itself to a bytestring. You can't use a unicode string inside a "
"bytestring, either, so this is consistent with normal Python behavior. For "
"example::"
msgstr ""

# 2666820498cc4f348877006658589b4a
#: ../../../../1.8/docs/topics/i18n/translation.txt:418
msgid ""
"If you ever see output that looks like ``\"hello "
"<django.utils.functional...>\"``, you have tried to insert the result of "
"``ugettext_lazy()`` into a bytestring. That's a bug in your code."
msgstr ""

# 993f4c09aea64cf280f4c4a606e41087
#: ../../../../1.8/docs/topics/i18n/translation.txt:422
msgid ""
"If you don't like the long ``ugettext_lazy`` name, you can just alias it as "
"``_`` (underscore), like so::"
msgstr ""

# cffa5186861f4321a90a3b6e144c28fd
#: ../../../../1.8/docs/topics/i18n/translation.txt:431
msgid ""
"Using ``ugettext_lazy()`` and ``ungettext_lazy()`` to mark strings in models"
" and utility functions is a common operation. When you're working with these"
" objects elsewhere in your code, you should ensure that you don't "
"accidentally convert them to strings, because they should be converted as "
"late as possible (so that the correct locale is in effect). This "
"necessitates the use of the helper function described next."
msgstr ""

# 6e386df3fc1a42d985048f2e04c761dc
#: ../../../../1.8/docs/topics/i18n/translation.txt:441
msgid "Lazy translations and plural"
msgstr ""

# fb8d6389dda54e1d83a50b1e139fbe55
#: ../../../../1.8/docs/topics/i18n/translation.txt:443
msgid ""
"When using lazy translation for a plural string (``[u]n[p]gettext_lazy``), "
"you generally don't know the ``number`` argument at the time of the string "
"definition. Therefore, you are authorized to pass a key name instead of an "
"integer as the ``number`` argument. Then ``number`` will be looked up in the"
" dictionary under that key during string interpolation. Here's example::"
msgstr ""

# 8821ae0851ca4cd892754439c5a8691a
#: ../../../../1.8/docs/topics/i18n/translation.txt:461
msgid ""
"If the string contains exactly one unnamed placeholder, you can interpolate "
"directly with the ``number`` argument::"
msgstr ""

# c212df0f07724fcab65964d92e48d4b4
#: ../../../../1.8/docs/topics/i18n/translation.txt:475
msgid "Joining strings: string_concat()"
msgstr ""

# 911d942de939401b9bb8af82bc3716d8
#: ../../../../1.8/docs/topics/i18n/translation.txt:477
msgid ""
"Standard Python string joins (``''.join([...])``) will not work on lists "
"containing lazy translation objects. Instead, you can use "
":func:`django.utils.translation.string_concat()`, which creates a lazy "
"object that concatenates its contents *and* converts them to strings only "
"when the result is included in a string. For example::"
msgstr ""

# 999918325dd9477fa52d6509666ddaf9
#: ../../../../1.8/docs/topics/i18n/translation.txt:490
msgid ""
"In this case, the lazy translations in ``result`` will only be converted to "
"strings when ``result`` itself is used in a string (usually at template "
"rendering time)."
msgstr ""

# 2d6fc148c60b4f0e9b4fa35bda3171b3
#: ../../../../1.8/docs/topics/i18n/translation.txt:495
msgid "Other uses of lazy in delayed translations"
msgstr ""

# 68ddbc80d523482f90fe7b9563ecd50a
#: ../../../../1.8/docs/topics/i18n/translation.txt:497
msgid ""
"For any other case where you would like to delay the translation, but have "
"to pass the translatable string as argument to another function, you can "
"wrap this function inside a lazy call yourself. For example::"
msgstr ""

# 1c7f645e3e0547b9ae80447ba9a61a71
#: ../../../../1.8/docs/topics/i18n/translation.txt:508
msgid "And then later::"
msgstr ""

# ae14a686a4c34839a96b765f1b947326
#: ../../../../1.8/docs/topics/i18n/translation.txt:513
msgid "Localized names of languages"
msgstr ""

# d5537b7d38f84aa68c1b217fdb8abdb3
#: ../../../../1.8/docs/topics/i18n/translation.txt:517
msgid ""
"The ``get_language_info()`` function provides detailed information about "
"languages::"
msgstr ""

# 129fcbea040c42558a87cbe61314b5b3
#: ../../../../1.8/docs/topics/i18n/translation.txt:525
msgid ""
"The ``name`` and ``name_local`` attributes of the dictionary contain the "
"name of the language in English and in the language itself, respectively.  "
"The ``bidi`` attribute is True only for bi-directional languages."
msgstr ""

# 51cb2054fb8a42f891d047af0a75f6c7
#: ../../../../1.8/docs/topics/i18n/translation.txt:529
msgid ""
"The source of the language information is the ``django.conf.locale`` module."
" Similar access to this information is available for template code. See "
"below."
msgstr ""

# fb34483a4c984acca736c6b039f31541
#: ../../../../1.8/docs/topics/i18n/translation.txt:535
msgid "Internationalization: in template code"
msgstr ""

# 22dd52c8dd4e4cfd92b1e72823500c65
#: ../../../../1.8/docs/topics/i18n/translation.txt:539
msgid ""
"Translations in :doc:`Django templates </ref/templates/language>` uses two "
"template tags and a slightly different syntax than in Python code. To give "
"your template access to these tags, put ``{% load i18n %}`` toward the top "
"of your template. As with all template tags, this tag needs to be loaded in "
"all templates which use translations, even those templates that extend from "
"other templates which have already loaded the ``i18n`` tag."
msgstr ""

# f0287c92bfe84204be13ce832b49ac47
#: ../../../../1.8/docs/topics/i18n/translation.txt:549
msgid "``trans`` template tag"
msgstr ""

# 419b11cf5a544dcdbd37e08c81ca148f
#: ../../../../1.8/docs/topics/i18n/translation.txt:551
msgid ""
"The ``{% trans %}`` template tag translates either a constant string "
"(enclosed in single or double quotes) or variable content::"
msgstr ""

# a2558eb0482c4a8a8648e72963086fa1
#: ../../../../1.8/docs/topics/i18n/translation.txt:557
msgid ""
"If the ``noop`` option is present, variable lookup still takes place but the"
" translation is skipped. This is useful when \"stubbing out\" content that "
"will require translation in the future::"
msgstr ""

# fe86c33236b546258e71e34d09ae3364
#: ../../../../1.8/docs/topics/i18n/translation.txt:563
msgid ""
"Internally, inline translations use an "
":func:`~django.utils.translation.ugettext` call."
msgstr ""

# e0f79e17bdbe4e3f90597ea63f8481de
#: ../../../../1.8/docs/topics/i18n/translation.txt:566
msgid ""
"In case a template var (``myvar`` above) is passed to the tag, the tag will "
"first resolve such variable to a string at run-time and then look up that "
"string in the message catalogs."
msgstr ""

# 13775544b5e140f587b8021db26782f4
#: ../../../../1.8/docs/topics/i18n/translation.txt:570
msgid ""
"It's not possible to mix a template variable inside a string within ``{% "
"trans %}``. If your translations require strings with variables "
"(placeholders), use :ttag:`{% blocktrans %}<blocktrans>` instead."
msgstr ""

# 2ee0decef41d4d98869636e6d51c122b
#: ../../../../1.8/docs/topics/i18n/translation.txt:575
msgid ""
"If you'd like to retrieve a translated string without displaying it, you can"
" use the following syntax::"
msgstr ""

# d83b0421ce8c41a0bcd443d0ae765b06
#: ../../../../1.8/docs/topics/i18n/translation.txt:583
msgid ""
"In practice you'll use this to get strings that are used in multiple places "
"or should be used as arguments for other template tags or filters::"
msgstr ""

# 4c568c84f664443e92e73cf78ec33b96
#: ../../../../1.8/docs/topics/i18n/translation.txt:599
msgid ""
"``{% trans %}`` also supports :ref:`contextual markers<contextual-markers>` "
"using the ``context`` keyword:"
msgstr ""

# 095c4bf79c1e4115aa299a8a4f296242
#: ../../../../1.8/docs/topics/i18n/translation.txt:609
msgid "``blocktrans`` template tag"
msgstr ""

# 06bf08e1f8b44b6e86b6ad7318c95bc3
#: ../../../../1.8/docs/topics/i18n/translation.txt:611
msgid ""
"Contrarily to the :ttag:`trans` tag, the ``blocktrans`` tag allows you to "
"mark complex sentences consisting of literals and variable content for "
"translation by making use of placeholders::"
msgstr ""

# e5dfbb2fe4b746b6a5c0e3562f1aa59e
#: ../../../../1.8/docs/topics/i18n/translation.txt:617
msgid ""
"To translate a template expression -- say, accessing object attributes or "
"using template filters -- you need to bind the expression to a local "
"variable for use within the translation block. Examples::"
msgstr ""

# 132bf4a8fa0045aeb1ad2c0e723047ce
#: ../../../../1.8/docs/topics/i18n/translation.txt:629
msgid "You can use multiple expressions inside a single ``blocktrans`` tag::"
msgstr ""

# d8574f6afbe241f5ad64a1d2946fc70b
#: ../../../../1.8/docs/topics/i18n/translation.txt:635
msgid ""
"The previous more verbose format is still supported: ``{% blocktrans with "
"book|title as book_t and author|title as author_t %}``"
msgstr ""

# 30c0ed1b3fa746b8b8db69c767b817ce
#: ../../../../1.8/docs/topics/i18n/translation.txt:638
msgid ""
"Other block tags (for example ``{% for %}`` or ``{% if %}``) are not allowed"
" inside a ``blocktrans`` tag."
msgstr ""

# af82b63f4a6d431984130e660e2517f6
#: ../../../../1.8/docs/topics/i18n/translation.txt:641
msgid ""
"If resolving one of the block arguments fails, blocktrans will fall back to "
"the default language by deactivating the currently active language "
"temporarily with the :func:`~django.utils.translation.deactivate_all` "
"function."
msgstr ""

# 356933f14c9f4732b0fc028af75fcded
#: ../../../../1.8/docs/topics/i18n/translation.txt:646
msgid "This tag also provides for pluralization. To use it:"
msgstr ""

# b198ed934c9e44e6950fb93560d49127
#: ../../../../1.8/docs/topics/i18n/translation.txt:648
msgid ""
"Designate and bind a counter value with the name ``count``. This value will "
"be the one used to select the right plural form."
msgstr ""

# ed375980e03841c9b829e1ba052417f7
#: ../../../../1.8/docs/topics/i18n/translation.txt:651
msgid ""
"Specify both the singular and plural forms separating them with the ``{% "
"plural %}`` tag within the ``{% blocktrans %}`` and ``{% endblocktrans %}`` "
"tags."
msgstr ""

# 3ed327552f6e49c39c8275854c3bdee5
#: ../../../../1.8/docs/topics/i18n/translation.txt:663
msgid "A more complex example::"
msgstr ""

# 145fcfc12c054af7983ce63cf8848a3b
#: ../../../../1.8/docs/topics/i18n/translation.txt:671
msgid ""
"When you use both the pluralization feature and bind values to local "
"variables in addition to the counter value, keep in mind that the "
"``blocktrans`` construct is internally converted to an ``ungettext`` call. "
"This means the same :ref:`notes regarding ungettext variables "
"<pluralization-var-notes>` apply."
msgstr ""

# d3d652211fc64f049085f15f7e4c75c8
#: ../../../../1.8/docs/topics/i18n/translation.txt:677
msgid ""
"Reverse URL lookups cannot be carried out within the ``blocktrans`` and "
"should be retrieved (and stored) beforehand::"
msgstr ""

# 52db9d0f863e44e88e2f46b1d1a2ba08
#: ../../../../1.8/docs/topics/i18n/translation.txt:685
msgid ""
"``{% blocktrans %}`` also supports :ref:`contextual markers<contextual-"
"markers>` using the ``context`` keyword:"
msgstr ""

# 79c62d2e054f4b57a0e3139d3c1b3325
#: ../../../../1.8/docs/topics/i18n/translation.txt:692
msgid ""
"Another feature ``{% blocktrans %}`` supports is the ``trimmed`` option. "
"This option will remove newline characters from the beginning and the end of"
" the content of the ``{% blocktrans %}`` tag, replace any whitespace at the "
"beginning and end of a line and merge all lines into one using a space "
"character to separate them. This is quite useful for indenting the content "
"of a ``{% blocktrans %}`` tag without having the indentation characters end "
"up in the corresponding entry in the PO file, which makes the translation "
"process easier."
msgstr ""

# d9b234f21768477b8cece02921a198fe
#: ../../../../1.8/docs/topics/i18n/translation.txt:700
msgid "For instance, the following ``{% blocktrans %}`` tag::"
msgstr ""

# b9fb6d292a93423699bb6bd13b2e652d
#: ../../../../1.8/docs/topics/i18n/translation.txt:707
msgid ""
"will result in the entry ``\"First sentence. Second paragraph.\"`` in the PO"
" file, compared to ``\"\\n  First sentence.\\n  Second sentence.\\n\"``, if "
"the ``trimmed`` option had not been specified."
msgstr ""

# 76595807333f42b08a7cac0ac5948ee9
#: ../../../../1.8/docs/topics/i18n/translation.txt:713
msgid "The ``trimmed`` option was added."
msgstr ""

# f60cf6bbbd30472986bda2060608c213
#: ../../../../1.8/docs/topics/i18n/translation.txt:717
msgid "String literals passed to tags and filters"
msgstr ""

# 52fcf9da4c594e348705e50ff8e9432e
#: ../../../../1.8/docs/topics/i18n/translation.txt:719
msgid ""
"You can translate string literals passed as arguments to tags and filters by"
" using the familiar ``_()`` syntax::"
msgstr ""

# 1c55166362dd4484b54a40c82c3bb04b
#: ../../../../1.8/docs/topics/i18n/translation.txt:724
msgid ""
"In this case, both the tag and the filter will see the translated string, so"
" they don't need to be aware of translations."
msgstr ""

# 9082bcd65bf040d2b2366c669adef97f
#: ../../../../1.8/docs/topics/i18n/translation.txt:728
msgid ""
"In this example, the translation infrastructure will be passed the string "
"``\"yes,no\"``, not the individual strings ``\"yes\"`` and ``\"no\"``. The "
"translated string will need to contain the comma so that the filter parsing "
"code knows how to split up the arguments. For example, a German translator "
"might translate the string ``\"yes,no\"`` as ``\"ja,nein\"`` (keeping the "
"comma intact)."
msgstr ""

# a69ad9ae8b494dda9144561dea71da5f
#: ../../../../1.8/docs/topics/i18n/translation.txt:738
msgid "Comments for translators in templates"
msgstr ""

# 9a34c71aedef4ad6876360747d54cf6e
#: ../../../../1.8/docs/topics/i18n/translation.txt:740
msgid ""
"Just like with :ref:`Python code <translator-comments>`, these notes for "
"translators can be specified using comments, either with the :ttag:`comment`"
" tag:"
msgstr ""

# ad8e29dc509840e09dfa90ad2085dca7
#: ../../../../1.8/docs/topics/i18n/translation.txt:753
msgid ""
"or with the ``{#`` ... ``#}`` :ref:`one-line comment constructs <template-"
"comments>`:"
msgstr ""

# 95652c7e43e14134aca8e682068f52f1
#: ../../../../1.8/docs/topics/i18n/translation.txt:763
msgid ""
"Just for completeness, these are the corresponding fragments of the "
"resulting ``.po`` file:"
msgstr ""

# 202cce0cae1e4f18b273f211213ca630
#: ../../../../1.8/docs/topics/i18n/translation.txt:795
msgid "Switching language in templates"
msgstr ""

# 60d8f6e616cf4e999e602a7a6f1acb81
#: ../../../../1.8/docs/topics/i18n/translation.txt:797
msgid ""
"If you want to select a language within a template, you can use the "
"``language`` template tag:"
msgstr ""

# feb7a13ce212490e9b3f4ccae3158100
#: ../../../../1.8/docs/topics/i18n/translation.txt:814
msgid ""
"While the first occurrence of \"Welcome to our page\" uses the current "
"language, the second will always be in English."
msgstr ""

# 61192298d811475ab11fd9e8cff2c152
#: ../../../../1.8/docs/topics/i18n/translation.txt:820
msgid "Other tags"
msgstr ""

# fdcf6879c76746df9064ac951f185875
#: ../../../../1.8/docs/topics/i18n/translation.txt:822
msgid "These tags also require a ``{% load i18n %}``."
msgstr ""

# 57c66c280c4a4fab8699de993262dc0e
#: ../../../../1.8/docs/topics/i18n/translation.txt:827
msgid "``get_available_languages``"
msgstr ""

# e757b4406579481bb2d93f0d5b22fb7f
#: ../../../../1.8/docs/topics/i18n/translation.txt:829
msgid ""
"``{% get_available_languages as LANGUAGES %}`` returns a list of tuples in "
"which the first element is the :term:`language code` and the second is the "
"language name (translated into the currently active locale)."
msgstr ""

# 683fc20e57884ebb925cce43d52837dd
#: ../../../../1.8/docs/topics/i18n/translation.txt:836
msgid "``get_current_languages``"
msgstr ""

# 304f70063f434920a883f19382c6a4c6
#: ../../../../1.8/docs/topics/i18n/translation.txt:838
msgid ""
"``{% get_current_language as LANGUAGE_CODE %}`` returns the current user's "
"preferred language as a string. Example: ``en-us``. See :ref:`how-django-"
"discovers-language-preference`."
msgstr ""

# 1d0c4c7567e84b7d89bf1603d42365be
#: ../../../../1.8/docs/topics/i18n/translation.txt:845
msgid "``get_current_language_bidi``"
msgstr ""

# d24180f1b29a4100a2ab929a679b7ffe
#: ../../../../1.8/docs/topics/i18n/translation.txt:847
msgid ""
"``{% get_current_language_bidi as LANGUAGE_BIDI %}`` returns the current "
"locale's direction. If ``True``, it's a right-to-left language, e.g. Hebrew,"
" Arabic. If ``False`` it's a left-to-right language, e.g. English, French, "
"German, etc."
msgstr ""

# 1683bc65fe644f1c8ca16e3ee8b3cba7
#: ../../../../1.8/docs/topics/i18n/translation.txt:852
msgid ""
"If you enable the ``django.template.context_processors.i18n`` context "
"processor then each ``RequestContext`` will have access to ``LANGUAGES``, "
"``LANGUAGE_CODE``, and ``LANGUAGE_BIDI`` as defined above."
msgstr ""

# edde3714b2e64400a613a441a06be6d3
#: ../../../../1.8/docs/topics/i18n/translation.txt:858
msgid ""
"The ``i18n`` context processor is not enabled by default for new projects."
msgstr ""

# bae091cb266d49b98c46b5b2af90b385
#: ../../../../1.8/docs/topics/i18n/translation.txt:863
msgid "``get_language_info``"
msgstr ""

# a38f5d1d8ed347d6ade9a35c418d7a01
#: ../../../../1.8/docs/topics/i18n/translation.txt:865
msgid ""
"You can also retrieve information about any of the available languages using"
" provided template tags and filters. To get information about a single "
"language, use the ``{% get_language_info %}`` tag::"
msgstr ""

# 9223c9f4e1d343e686f428f3b374c3d3
#: ../../../../1.8/docs/topics/i18n/translation.txt:872
msgid "You can then access the information::"
msgstr ""

# 2f22550ade1940d1bd170f45b9dddbb1
#: ../../../../1.8/docs/topics/i18n/translation.txt:882
msgid "``get_language_info_list``"
msgstr ""

# af9619958c114bfcadf0f2e4d7d79311
#: ../../../../1.8/docs/topics/i18n/translation.txt:884
msgid ""
"You can also use the ``{% get_language_info_list %}`` template tag to "
"retrieve information for a list of languages (e.g. active languages as "
"specified in :setting:`LANGUAGES`). See :ref:`the section about the "
"set_language redirect view <set_language-redirect-view>` for an example of "
"how to display a language selector using ``{% get_language_info_list %}``."
msgstr ""

# 8170e3d317a74887b033387a3fb85c6d
#: ../../../../1.8/docs/topics/i18n/translation.txt:890
msgid ""
"In addition to :setting:`LANGUAGES` style nested tuples, ``{% "
"get_language_info_list %}`` supports simple lists of language codes. If you "
"do this in your view:"
msgstr ""

# b6fe84d76b1a445a82d96f4b58a627d3
#: ../../../../1.8/docs/topics/i18n/translation.txt:899
msgid "you can iterate over those languages in the template::"
msgstr ""

# ab4f80fc3b884044958cc5bbba97951d
#: ../../../../1.8/docs/topics/i18n/translation.txt:911
msgid "There are also simple filters available for convenience:"
msgstr ""

# b68b78c0b1304c4e939bfb3fc493d83f
#: ../../../../1.8/docs/topics/i18n/translation.txt:913
msgid "``{{ LANGUAGE_CODE|language_name }}`` (\"German\")"
msgstr ""

# 24c24044574b4ec7b06ed5072b6f27e4
#: ../../../../1.8/docs/topics/i18n/translation.txt:914
msgid "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"
msgstr ""

# 50d4d56a632f4ab19532bf5f727cea64
#: ../../../../1.8/docs/topics/i18n/translation.txt:915
msgid "``{{ LANGUAGE_CODE|language_bidi }}`` (False)"
msgstr ""

# 9306ff4acf6a4118a1f102ae3f7a900d
#: ../../../../1.8/docs/topics/i18n/translation.txt:920
msgid "Internationalization: in JavaScript code"
msgstr ""

# 53e98a1573a7422aaf84c36cd9fbc6db
#: ../../../../1.8/docs/topics/i18n/translation.txt:924
msgid "Adding translations to JavaScript poses some problems:"
msgstr ""

# cdf37d9f8d6145a6bbce34d05020c67b
#: ../../../../1.8/docs/topics/i18n/translation.txt:926
msgid "JavaScript code doesn't have access to a ``gettext`` implementation."
msgstr ""

# d3ad4fff7401415cb224e3d7fe151174
#: ../../../../1.8/docs/topics/i18n/translation.txt:928
msgid ""
"JavaScript code doesn't have access to ``.po`` or ``.mo`` files; they need "
"to be delivered by the server."
msgstr ""

# ac431b8bf3b3437bbb87a2507697e2d8
#: ../../../../1.8/docs/topics/i18n/translation.txt:931
msgid ""
"The translation catalogs for JavaScript should be kept as small as possible."
msgstr ""

# bbb8bd594f3249cb8ec98478a808737a
#: ../../../../1.8/docs/topics/i18n/translation.txt:934
msgid ""
"Django provides an integrated solution for these problems: It passes the "
"translations into JavaScript, so you can call ``gettext``, etc., from within"
" JavaScript."
msgstr ""

# 2d40dcbec3d947e6b77b8befac5cabd3
#: ../../../../1.8/docs/topics/i18n/translation.txt:941
msgid "The ``javascript_catalog`` view"
msgstr ""

# ac594968b6ef4a3bb4686637ea3f83ea
#: ../../../../1.8/docs/topics/i18n/translation.txt:947
msgid ""
"The main solution to these problems is the "
":meth:`django.views.i18n.javascript_catalog` view, which sends out a "
"JavaScript code library with functions that mimic the ``gettext`` interface,"
" plus an array of translation strings. Those translation strings are taken "
"from applications or Django core, according to what you specify in either "
"the ``info_dict`` or the URL. Paths listed in :setting:`LOCALE_PATHS` are "
"also included."
msgstr ""

# 45508562bb6342548f330310059403fc
#: ../../../../1.8/docs/topics/i18n/translation.txt:954
msgid "You hook it up like this::"
msgstr ""

# a517be595fc84e94adc9b036498be853
#: ../../../../1.8/docs/topics/i18n/translation.txt:966
msgid ""
"Each string in ``packages`` should be in Python dotted-package syntax (the "
"same format as the strings in :setting:`INSTALLED_APPS`) and should refer to"
" a package that contains a ``locale`` directory. If you specify multiple "
"packages, all those catalogs are merged into one catalog. This is useful if "
"you have JavaScript that uses strings from different applications."
msgstr ""

# 3a857b29dbc14bac90fb385a1cde9745
#: ../../../../1.8/docs/topics/i18n/translation.txt:972
msgid ""
"The precedence of translations is such that the packages appearing later in "
"the ``packages`` argument have higher precedence than the ones appearing at "
"the beginning, this is important in the case of clashing translations for "
"the same literal."
msgstr ""

# 4c2a4e0d3b7a47898a09a10f9da550bc
#: ../../../../1.8/docs/topics/i18n/translation.txt:977
msgid ""
"By default, the view uses the ``djangojs`` gettext domain. This can be "
"changed by altering the ``domain`` argument."
msgstr ""

# db61123f1d4d4ab3ab69faa8af5866b4
#: ../../../../1.8/docs/topics/i18n/translation.txt:980
msgid ""
"You can make the view dynamic by putting the packages into the URL pattern::"
msgstr ""

# 5435983da65345f39205162225b27111
#: ../../../../1.8/docs/topics/i18n/translation.txt:986
msgid ""
"With this, you specify the packages as a list of package names delimited by "
"'+' signs in the URL. This is especially useful if your pages use code from "
"different apps and this changes often and you don't want to pull in one big "
"catalog file. As a security measure, these values can only be either "
"``django.conf`` or any package from the :setting:`INSTALLED_APPS` setting."
msgstr ""

# 92fd7f200f874c61ae3b26be638b3729
#: ../../../../1.8/docs/topics/i18n/translation.txt:992
msgid ""
"The JavaScript translations found in the paths listed in the "
":setting:`LOCALE_PATHS` setting are also always included. To keep "
"consistency with the translations lookup order algorithm used for Python and"
" templates, the directories listed in :setting:`LOCALE_PATHS` have the "
"highest precedence with the ones appearing first having higher precedence "
"than the ones appearing later."
msgstr ""

# f33d0178ba034ca7b8ba3c4599d74cfc
#: ../../../../1.8/docs/topics/i18n/translation.txt:1000
msgid "Using the JavaScript translation catalog"
msgstr ""

# 7f6928effd47431cbd357d317c821ea5
#: ../../../../1.8/docs/topics/i18n/translation.txt:1004
msgid ""
"To use the catalog, just pull in the dynamically generated script like this:"
msgstr ""

# ce003ce672c64ef38136af07e2b291d2
#: ../../../../1.8/docs/topics/i18n/translation.txt:1010
msgid ""
"This uses reverse URL lookup to find the URL of the JavaScript catalog view."
" When the catalog is loaded, your JavaScript code can use the following "
"methods:"
msgstr ""

# 0494706ec2934971b1ad1496ad9c0131
# e6b78035845142b28309130bc07df08f
#: ../../../../1.8/docs/topics/i18n/translation.txt:1013
#: ../../../../1.8/docs/topics/i18n/translation.txt:1023
msgid "``gettext``"
msgstr ""

# f055d1264c98476a801868006873cf86
# cc84f63847a74bb591a63b08dcf49288
#: ../../../../1.8/docs/topics/i18n/translation.txt:1014
#: ../../../../1.8/docs/topics/i18n/translation.txt:1031
msgid "``ngettext``"
msgstr ""

# 5ce1c37a261b4f52899337541faf180c
# 5c6f5fcc76ec4741a7a43f74131cad3c
#: ../../../../1.8/docs/topics/i18n/translation.txt:1015
#: ../../../../1.8/docs/topics/i18n/translation.txt:1041
msgid "``interpolate``"
msgstr ""

# 7279c99f9b9b44e5970cc80bad7f345e
# 6b18ee3f760c4b56bd16308aed86ca88
#: ../../../../1.8/docs/topics/i18n/translation.txt:1016
#: ../../../../1.8/docs/topics/i18n/translation.txt:1077
msgid "``get_format``"
msgstr ""

# 4d1c5e9a060c486fa7ddb03c1f39aa24
# e27e777ab7ef41d5838dfd2fbfd34462
#: ../../../../1.8/docs/topics/i18n/translation.txt:1017
#: ../../../../1.8/docs/topics/i18n/translation.txt:1106
msgid "``gettext_noop``"
msgstr ""

# 5615e854e0454c65bfc0e502c8636cac
# 1fb54e31f06d4e1f8a2977dec00fffe5
#: ../../../../1.8/docs/topics/i18n/translation.txt:1018
#: ../../../../1.8/docs/topics/i18n/translation.txt:1117
msgid "``pgettext``"
msgstr ""

# 493272dae9f44975b809d69829c25378
# d27a6786c4404d6f8c54a6f3121d7231
#: ../../../../1.8/docs/topics/i18n/translation.txt:1019
#: ../../../../1.8/docs/topics/i18n/translation.txt:1126
msgid "``npgettext``"
msgstr ""

# 8e5c3e3f06d44019961a9b37649a9cff
# b4925c4b3e034077a643c9b82608e2d6
#: ../../../../1.8/docs/topics/i18n/translation.txt:1020
#: ../../../../1.8/docs/topics/i18n/translation.txt:1138
msgid "``pluralidx``"
msgstr ""

# a773a053b10446729c0f8b0db011cfdb
#: ../../../../1.8/docs/topics/i18n/translation.txt:1025
msgid ""
"The ``gettext`` function behaves similarly to the standard ``gettext`` "
"interface within your Python code::"
msgstr ""

# 857fb26d507c43a38001414ed8b02d7f
#: ../../../../1.8/docs/topics/i18n/translation.txt:1033
msgid ""
"The ``ngettext`` function provides an interface to pluralize words and "
"phrases::"
msgstr ""

# 2569973aaa1f43be81aabc3075df9906
#: ../../../../1.8/docs/topics/i18n/translation.txt:1043
msgid ""
"The ``interpolate`` function supports dynamically populating a format "
"string. The interpolation syntax is borrowed from Python, so the "
"``interpolate`` function supports both positional and named interpolation:"
msgstr ""

# 734eda55119c42e9be888f5d6c6ddfd5
#: ../../../../1.8/docs/topics/i18n/translation.txt:1047
msgid ""
"Positional interpolation: ``obj`` contains a JavaScript Array object whose "
"elements values are then sequentially interpolated in their corresponding "
"``fmt`` placeholders in the same order they appear. For example::"
msgstr ""

# f0d18ca07814429cb38c68bde6aca98e
#: ../../../../1.8/docs/topics/i18n/translation.txt:1057
msgid ""
"Named interpolation: This mode is selected by passing the optional boolean "
"``named`` parameter as ``true``. ``obj`` contains a JavaScript object or "
"associative array. For example::"
msgstr ""

# 5c3ce58e7c4d4709b35f8cae3034890a
#: ../../../../1.8/docs/topics/i18n/translation.txt:1070
msgid ""
"You shouldn't go over the top with string interpolation, though: this is "
"still JavaScript, so the code has to make repeated regular-expression "
"substitutions. This isn't as fast as string interpolation in Python, so keep"
" it to those cases where you really need it (for example, in conjunction "
"with ``ngettext`` to produce proper pluralizations)."
msgstr ""

# 5524b0c5d6ad461387516b3f191dc32d
#: ../../../../1.8/docs/topics/i18n/translation.txt:1079
msgid ""
"The ``get_format`` function has access to the configured i18n formatting "
"settings and can retrieve the format string for a given setting name::"
msgstr ""

# 7d422dd291214f2d98f67aea0f09f59a
#: ../../../../1.8/docs/topics/i18n/translation.txt:1085
msgid "It has access to the following settings:"
msgstr ""

# 8cf03b844ca9419fafd43cb9b038e7e9
#: ../../../../1.8/docs/topics/i18n/translation.txt:1087
msgid ":setting:`DATE_FORMAT`"
msgstr ""

# 84d23081b899488a8c3ca15b677c2fca
#: ../../../../1.8/docs/topics/i18n/translation.txt:1088
msgid ":setting:`DATE_INPUT_FORMATS`"
msgstr ""

# 2bb0fc8485a64026b8c28cc95520911a
#: ../../../../1.8/docs/topics/i18n/translation.txt:1089
msgid ":setting:`DATETIME_FORMAT`"
msgstr ""

# 45f21ef4853b4cd39160fd1c88f3ee5d
#: ../../../../1.8/docs/topics/i18n/translation.txt:1090
msgid ":setting:`DATETIME_INPUT_FORMATS`"
msgstr ""

# 60fdfe9d520444fbb141d53009de9177
#: ../../../../1.8/docs/topics/i18n/translation.txt:1091
msgid ":setting:`DECIMAL_SEPARATOR`"
msgstr ""

# a99fdc639df24074b5ff70ce8dfe72c9
#: ../../../../1.8/docs/topics/i18n/translation.txt:1092
msgid ":setting:`FIRST_DAY_OF_WEEK`"
msgstr ""

# 7907b3811ead4a6eb49ced4b83f7ebc7
#: ../../../../1.8/docs/topics/i18n/translation.txt:1093
msgid ":setting:`MONTH_DAY_FORMAT`"
msgstr ""

# ea8a7f6da6d7467ab828dbeb2e52771f
#: ../../../../1.8/docs/topics/i18n/translation.txt:1094
msgid ":setting:`NUMBER_GROUPING`"
msgstr ""

# b5cad754c8044c9ba25e226561e2e40c
#: ../../../../1.8/docs/topics/i18n/translation.txt:1095
msgid ":setting:`SHORT_DATE_FORMAT`"
msgstr ""

# bfee9ccb3c7a447fb82b278c399c1c80
#: ../../../../1.8/docs/topics/i18n/translation.txt:1096
msgid ":setting:`SHORT_DATETIME_FORMAT`"
msgstr ""

# e8e5777b6d914c698440cec64c6ee2e0
#: ../../../../1.8/docs/topics/i18n/translation.txt:1097
msgid ":setting:`THOUSAND_SEPARATOR`"
msgstr ""

# 3ddfc3cd2da64f3085af90755e9b627e
#: ../../../../1.8/docs/topics/i18n/translation.txt:1098
msgid ":setting:`TIME_FORMAT`"
msgstr ""

# e0c3eb9b0c0b42a0ac4c8649a5f203f0
#: ../../../../1.8/docs/topics/i18n/translation.txt:1099
msgid ":setting:`TIME_INPUT_FORMATS`"
msgstr ""

# 85333bdc274e4a01b830362d3f2ce54d
#: ../../../../1.8/docs/topics/i18n/translation.txt:1100
msgid ":setting:`YEAR_MONTH_FORMAT`"
msgstr ""

# 23ab419aa63c46e4831ad3d662614e07
#: ../../../../1.8/docs/topics/i18n/translation.txt:1102
msgid ""
"This is useful for maintaining formatting consistency with the Python-"
"rendered values."
msgstr ""

# 4ae23b0d9324472e97cd4b5212c2150e
#: ../../../../1.8/docs/topics/i18n/translation.txt:1108
msgid ""
"This emulates the ``gettext`` function but does nothing, returning whatever "
"is passed to it::"
msgstr ""

# 5c0e38a939754470bb443b5db94a58d8
#: ../../../../1.8/docs/topics/i18n/translation.txt:1113
msgid ""
"This is useful for stubbing out portions of the code that will need "
"translation in the future."
msgstr ""

# abccf51267a544ca8940dc478b8374a0
#: ../../../../1.8/docs/topics/i18n/translation.txt:1119
msgid ""
"The ``pgettext`` function behaves like the Python variant "
"(:func:`~django.utils.translation.pgettext()`), providing a contextually "
"translated word::"
msgstr ""

# 1c98f7b5a1c74530894cb03aa5f6ba5b
#: ../../../../1.8/docs/topics/i18n/translation.txt:1128
msgid ""
"The ``npgettext`` function also behaves like the Python variant "
"(:func:`~django.utils.translation.npgettext()`), providing a **pluralized** "
"contextually translated word::"
msgstr ""

# 5c3d04c7a13843728f4c42ad13a05b9b
#: ../../../../1.8/docs/topics/i18n/translation.txt:1140
msgid ""
"The ``pluralidx`` function works in a similar way to the "
":tfilter:`pluralize` template filter, determining if a given ``count`` "
"should use a plural form of a word or not::"
msgstr ""

# bf522c71c38647a4be9a14400297b63c
#: ../../../../1.8/docs/topics/i18n/translation.txt:1151
msgid ""
"In the simplest case, if no custom pluralization is needed, this returns "
"``false`` for the integer ``1`` and ``true`` for all other numbers."
msgstr ""

# cd5107524c064f2b8a15b95125c5ebd6
#: ../../../../1.8/docs/topics/i18n/translation.txt:1154
msgid ""
"However, pluralization is not this simple in all languages. If the language "
"does not support pluralization, an empty value is provided."
msgstr ""

# 81577cf06fcd4fc3b87e82b4e8e3a176
#: ../../../../1.8/docs/topics/i18n/translation.txt:1157
msgid ""
"Additionally, if there are complex rules around pluralization, the catalog "
"view will render a conditional expression. This will evaluate to either a "
"``true`` (should pluralize) or ``false`` (should **not** pluralize) value."
msgstr ""

# 2a2d0491bd574cc0a2f458dfb2e98361
#: ../../../../1.8/docs/topics/i18n/translation.txt:1162
msgid "Note on performance"
msgstr ""

# 6de43e05e4d341bfb6f2b4476fcb54ef
#: ../../../../1.8/docs/topics/i18n/translation.txt:1164
msgid ""
"The :func:`~django.views.i18n.javascript_catalog` view generates the catalog"
" from ``.mo`` files on every request. Since its output is constant — at "
"least for a given version of a site — it's a good candidate for caching."
msgstr ""

# 4161e58631564379b836aff99a87d0a1
#: ../../../../1.8/docs/topics/i18n/translation.txt:1168
msgid ""
"Server-side caching will reduce CPU load. It's easily implemented with the "
":func:`~django.views.decorators.cache.cache_page` decorator. To trigger "
"cache invalidation when your translations change, provide a version-"
"dependent key prefix, as shown in the example below, or map the view at a "
"version-dependent URL."
msgstr ""

# 7129abc847944d3fb4aefbdb59ee2c07
#: ../../../../1.8/docs/topics/i18n/translation.txt:1184
msgid ""
"Client-side caching will save bandwidth and make your site load faster. If "
"you're using ETags (:setting:`USE_ETAGS = True <USE_ETAGS>`), you're already"
" covered. Otherwise, you can apply :ref:`conditional decorators "
"<conditional-decorators>`. In the following example, the cache is "
"invalidated whenever you restart your application server."
msgstr ""

# adad84f1fc254f3191fb774b81549f5a
#: ../../../../1.8/docs/topics/i18n/translation.txt:1202
msgid ""
"You can even pre-generate the JavaScript catalog as part of your deployment "
"procedure and serve it as a static file. This radical technique is "
"implemented in django-statici18n_."
msgstr ""

# 29db4e4f76b54648b75afb9a92ac8704
#: ../../../../1.8/docs/topics/i18n/translation.txt:1211
msgid "Internationalization: in URL patterns"
msgstr ""

# c088bce81f1d4eaeb8448c9e28305b9d
#: ../../../../1.8/docs/topics/i18n/translation.txt:1215
msgid "Django provides two mechanisms to internationalize URL patterns:"
msgstr ""

# a1e6e64caac049788b3e7524a8cab9ae
#: ../../../../1.8/docs/topics/i18n/translation.txt:1217
msgid ""
"Adding the language prefix to the root of the URL patterns to make it "
"possible for :class:`~django.middleware.locale.LocaleMiddleware` to detect "
"the language to activate from the requested URL."
msgstr ""

# 7c26886f0e524163920e3a59ef76bca2
#: ../../../../1.8/docs/topics/i18n/translation.txt:1221
msgid ""
"Making URL patterns themselves translatable via the "
":func:`django.utils.translation.ugettext_lazy()` function."
msgstr ""

# a2fa134c0e4c46e09f90169a413425bc
#: ../../../../1.8/docs/topics/i18n/translation.txt:1226
msgid ""
"Using either one of these features requires that an active language be set "
"for each request; in other words, you need to have "
":class:`django.middleware.locale.LocaleMiddleware` in your "
":setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

# 256af60260f948dcb7ea316ed47058b2
#: ../../../../1.8/docs/topics/i18n/translation.txt:1232
msgid "Language prefix in URL patterns"
msgstr ""

# 52212960f27a483db6c1b6db193e1664
#: ../../../../1.8/docs/topics/i18n/translation.txt:1238
msgid ""
"The ``prefix`` argument to ``i18n_patterns()`` has been deprecated and will "
"not be supported in Django 1.10. Simply pass a list of "
":func:`django.conf.urls.url` instances instead."
msgstr ""

# 06730c9b8a894e4ab2bceefeecb85312
#: ../../../../1.8/docs/topics/i18n/translation.txt:1242
msgid ""
"This function can be used in your root URLconf and Django will automatically"
" prepend the current active language code to all url patterns defined within"
" :func:`~django.conf.urls.i18n.i18n_patterns`. Example URL patterns::"
msgstr ""

# 6516c99dbd204ed78372125497d0d622
#: ../../../../1.8/docs/topics/i18n/translation.txt:1268
msgid ""
"After defining these URL patterns, Django will automatically add the "
"language prefix to the URL patterns that were added by the ``i18n_patterns``"
" function. Example::"
msgstr ""

# df826cd1ef7c42d8adafb3d363748c0b
#: ../../../../1.8/docs/topics/i18n/translation.txt:1287
msgid ""
":func:`~django.conf.urls.i18n.i18n_patterns` is only allowed in your root "
"URLconf. Using it within an included URLconf will throw an "
":exc:`~django.core.exceptions.ImproperlyConfigured` exception."
msgstr ""

# cdaee5f9028e4f8ea6ffac6de2d8af66
#: ../../../../1.8/docs/topics/i18n/translation.txt:1293
msgid ""
"Ensure that you don't have non-prefixed URL patterns that might collide with"
" an automatically-added language prefix."
msgstr ""

# 1cf7cc329c814089949999890153cee1
#: ../../../../1.8/docs/topics/i18n/translation.txt:1298
msgid "Translating URL patterns"
msgstr ""

# 62884124f14b42458fe980687bc60983
#: ../../../../1.8/docs/topics/i18n/translation.txt:1300
msgid ""
"URL patterns can also be marked translatable using the "
":func:`~django.utils.translation.ugettext_lazy` function. Example::"
msgstr ""

# e363469a773343a28f176fabeb6e315c
#: ../../../../1.8/docs/topics/i18n/translation.txt:1326
msgid ""
"After you've created the translations, the "
":func:`~django.core.urlresolvers.reverse` function will return the URL in "
"the active language. Example::"
msgstr ""

# 8e445eacf1b344bc823f96fe83aea4b5
#: ../../../../1.8/docs/topics/i18n/translation.txt:1343
msgid ""
"In most cases, it's best to use translated URLs only within a language-code-"
"prefixed block of patterns (using "
":func:`~django.conf.urls.i18n.i18n_patterns`), to avoid the possibility that"
" a carelessly translated URL causes a collision with a non-translated URL "
"pattern."
msgstr ""

# 93a5032343644b4a862a0d8046617806
#: ../../../../1.8/docs/topics/i18n/translation.txt:1352
msgid "Reversing in templates"
msgstr ""

# fdea43a583464f5086347e0ca145ae8d
#: ../../../../1.8/docs/topics/i18n/translation.txt:1354
msgid ""
"If localized URLs get reversed in templates they always use the current "
"language. To link to a URL in another language use the :ttag:`language` "
"template tag. It enables the given language in the enclosed template "
"section:"
msgstr ""

# f937e51a99c948c5b5ca750cf40da3f9
#: ../../../../1.8/docs/topics/i18n/translation.txt:1371
msgid ""
"The :ttag:`language` tag expects the language code as the only argument."
msgstr ""

# c492cc8e70d94ba9bbb833ea39792155
#: ../../../../1.8/docs/topics/i18n/translation.txt:1376
msgid "Localization: how to create language files"
msgstr ""

# 8e349c3bcb9143c2bc525cf09d83e03c
#: ../../../../1.8/docs/topics/i18n/translation.txt:1378
msgid ""
"Once the string literals of an application have been tagged for later "
"translation, the translation themselves need to be written (or obtained). "
"Here's how that works."
msgstr ""

# 2e2a29ced70a4368be6d9650fffdc489
#: ../../../../1.8/docs/topics/i18n/translation.txt:1383
msgid "Message files"
msgstr ""

# c6f0dedb776a4b1ab48ac089f4289741
#: ../../../../1.8/docs/topics/i18n/translation.txt:1385
msgid ""
"The first step is to create a :term:`message file` for a new language. A "
"message file is a plain-text file, representing a single language, that "
"contains all available translation strings and how they should be "
"represented in the given language. Message files have a ``.po`` file "
"extension."
msgstr ""

# b2fb34e417f54a97ad3cc5ecee26b729
#: ../../../../1.8/docs/topics/i18n/translation.txt:1390
msgid ""
"Django comes with a tool, :djadmin:`django-admin makemessages "
"<makemessages>`, that automates the creation and upkeep of these files."
msgstr ""

# 33ab3e68b2bf47bfb75d84b13a9af3c9
#: ../../../../1.8/docs/topics/i18n/translation.txt:1393
msgid "Gettext utilities"
msgstr ""

# f738a8d4caa845e69b9916ffe1d4f002
#: ../../../../1.8/docs/topics/i18n/translation.txt:1395
msgid ""
"The ``makemessages`` command (and ``compilemessages`` discussed later) use "
"commands from the GNU gettext toolset: ``xgettext``, ``msgfmt``, "
"``msgmerge`` and ``msguniq``."
msgstr ""

# 21a8a95937194e7fb8cca564a606f284
#: ../../../../1.8/docs/topics/i18n/translation.txt:1399
msgid "The minimum version of the ``gettext`` utilities supported is 0.15."
msgstr ""

# 4e45becdfcac40b891ff05717c106bca
#: ../../../../1.8/docs/topics/i18n/translation.txt:1401
msgid "To create or update a message file, run this command::"
msgstr ""

# 2b673afaac1a4c948d1c908bc79908f2
#: ../../../../1.8/docs/topics/i18n/translation.txt:1405
msgid ""
"...where ``de`` is the :term:`locale name` for the message file you want to "
"create. For example, ``pt_BR`` for Brazilian Portuguese, ``de_AT`` for "
"Austrian German or ``id`` for Indonesian."
msgstr ""

# 3c651c91ddb046b5ab27e8b4f5848149
#: ../../../../1.8/docs/topics/i18n/translation.txt:1409
msgid "The script should be run from one of two places:"
msgstr ""

# 0ca87c55adc94582aab6fe1303478974
#: ../../../../1.8/docs/topics/i18n/translation.txt:1411
msgid ""
"The root directory of your Django project (the one that contains "
"``manage.py``)."
msgstr ""

# be983cfb72734cd7b8a41ff393ec1489
#: ../../../../1.8/docs/topics/i18n/translation.txt:1413
msgid "The root directory of one of your Django apps."
msgstr ""

# a2785c09233f437bb9c2ddccd76f9c08
#: ../../../../1.8/docs/topics/i18n/translation.txt:1415
msgid ""
"The script runs over your project source tree or your application source "
"tree and pulls out all strings marked for translation (see :ref:`how-django-"
"discovers-translations` and be sure :setting:`LOCALE_PATHS` is configured "
"correctly). It creates (or updates) a message file in the directory "
"``locale/LANG/LC_MESSAGES``. In the ``de`` example, the file will be "
"``locale/de/LC_MESSAGES/django.po``."
msgstr ""

# 4250d70d31e34d0d97c3af58164cbca6
#: ../../../../1.8/docs/topics/i18n/translation.txt:1424
msgid ""
"When you run ``makemessages`` from the root directory of your project, the "
"extracted strings will be automatically distributed to the proper message "
"files. That is, a string extracted from a file of an app containing a "
"``locale`` directory will go in a message file under that directory. A "
"string extracted from a file of an app without any ``locale`` directory will"
" either go in a message file under the directory listed first in "
":setting:`LOCALE_PATHS` or will generate an error if :setting:`LOCALE_PATHS`"
" is empty."
msgstr ""

# b3e11adb44154e49b1bc535f0a4cf609
#: ../../../../1.8/docs/topics/i18n/translation.txt:1433
msgid ""
"By default :djadmin:`django-admin makemessages <makemessages>` examines "
"every file that has the ``.html`` or ``.txt`` file extension. In case you "
"want to override that default, use the ``--extension`` or ``-e`` option to "
"specify the file extensions to examine::"
msgstr ""

# 059483484a254f5c9281c5d40bb7ff94
#: ../../../../1.8/docs/topics/i18n/translation.txt:1440
msgid ""
"Separate multiple extensions with commas and/or use ``-e`` or "
"``--extension`` multiple times::"
msgstr ""

# 7c38fda8398d4344803bd93c613d3efc
#: ../../../../1.8/docs/topics/i18n/translation.txt:1447
msgid ""
"When :ref:`creating message files from JavaScript source code <creating-"
"message-files-from-js-code>` you need to use the special 'djangojs' domain, "
"**not** ``-e js``."
msgstr ""

# 28f0a23bb3334ba3bd138b14427ece00
#: ../../../../1.8/docs/topics/i18n/translation.txt:1451
msgid "Using Jinja2 templates?"
msgstr ""

# 521d5af998de48688862d3f983357c72
#: ../../../../1.8/docs/topics/i18n/translation.txt:1453
msgid ""
":djadmin:`makemessages` doesn't understand the syntax of Jinja2 templates. "
"To extract strings from a project containing Jinja2 templates, use Babel_ "
"instead."
msgstr ""

# 680bdfe180d94fb5a6c7550701871f25
#: ../../../../1.8/docs/topics/i18n/translation.txt:1457
msgid "Here's an example ``babel.cfg`` configuration file::"
msgstr ""

# 632a0d6a76b942f3b7d6db8801d6afcc
#: ../../../../1.8/docs/topics/i18n/translation.txt:1466
msgid ""
"Make sure you list all extensions you're using! Otherwise Babel won't "
"recognize the tags defined by these extensions and will ignore Jinja2 "
"templates containing them entirely."
msgstr ""

# 436a98fabdfc4745b4140bd15c09a47e
#: ../../../../1.8/docs/topics/i18n/translation.txt:1470
msgid ""
"Babel provides similar features to :djadmin:`makemessages`, can replace it "
"in general, and doesn't depend on ``gettext``. For more information, read "
"its documentation about `working with message catalogs`_."
msgstr ""

# 4a1b3a605ac143789839a666740ec4a9
#: ../../../../1.8/docs/topics/i18n/translation.txt:1477
msgid "No gettext?"
msgstr ""

# 83bcf1cbd99b42b2b95534afa95d45ed
#: ../../../../1.8/docs/topics/i18n/translation.txt:1479
msgid ""
"If you don't have the ``gettext`` utilities installed, "
":djadmin:`makemessages` will create empty files. If that's the case, either "
"install the ``gettext`` utilities or just copy the English message file "
"(``locale/en/LC_MESSAGES/django.po``) if available and use it as a starting "
"point; it's just an empty translation file."
msgstr ""

# 8b9ff292af7048ca8b7b4fceaf6ca238
# 503ef6d38fc14dae88a743f889e19f0d
#: ../../../../1.8/docs/topics/i18n/translation.txt:1485
#: ../../../../1.8/docs/topics/i18n/translation.txt:1558
msgid "Working on Windows?"
msgstr ""

# 20f99303481a476c8b0343610657407c
#: ../../../../1.8/docs/topics/i18n/translation.txt:1487
msgid ""
"If you're using Windows and need to install the GNU gettext utilities so "
":djadmin:`makemessages` works, see :ref:`gettext_on_windows` for more "
"information."
msgstr ""

# 692dd434b385487ca5d13c0691e0bb50
#: ../../../../1.8/docs/topics/i18n/translation.txt:1491
msgid ""
"The format of ``.po`` files is straightforward. Each ``.po`` file contains a"
" small bit of metadata, such as the translation maintainer's contact "
"information, but the bulk of the file is a list of **messages** -- simple "
"mappings between translation strings and the actual translated text for the "
"particular language."
msgstr ""

# 6a2b01c60e45458e82e9138054f55d60
#: ../../../../1.8/docs/topics/i18n/translation.txt:1497
msgid ""
"For example, if your Django app contained a translation string for the text "
"``\"Welcome to my site.\"``, like so::"
msgstr ""

# 0b1c4cf8864b41eea1c5210f62b974d2
#: ../../../../1.8/docs/topics/i18n/translation.txt:1502
msgid ""
"...then :djadmin:`django-admin makemessages <makemessages>` will have "
"created a ``.po`` file containing the following snippet -- a message:"
msgstr ""

# 627eca4fb270437ab7990f1e958a1889
#: ../../../../1.8/docs/topics/i18n/translation.txt:1511
msgid "A quick explanation:"
msgstr ""

# b7853922cc7449738e94852c2edf6d39
#: ../../../../1.8/docs/topics/i18n/translation.txt:1513
msgid ""
"``msgid`` is the translation string, which appears in the source. Don't "
"change it."
msgstr ""

# 9d9c08a690cb4928bb1b1a7870dbb771
#: ../../../../1.8/docs/topics/i18n/translation.txt:1515
msgid ""
"``msgstr`` is where you put the language-specific translation. It starts out"
" empty, so it's your responsibility to change it. Make sure you keep the "
"quotes around your translation."
msgstr ""

# a5a8b6c8c2ac486b8e101bd695a0fca8
#: ../../../../1.8/docs/topics/i18n/translation.txt:1518
msgid ""
"As a convenience, each message includes, in the form of a comment line "
"prefixed with ``#`` and located above the ``msgid`` line, the filename and "
"line number from which the translation string was gleaned."
msgstr ""

# 74c3ab3451b44e699b3bd92660eaf0d3
#: ../../../../1.8/docs/topics/i18n/translation.txt:1522
msgid ""
"Long messages are a special case. There, the first string directly after the"
" ``msgstr`` (or ``msgid``) is an empty string. Then the content itself will "
"be written over the next few lines as one string per line. Those strings are"
" directly concatenated. Don't forget trailing spaces within the strings; "
"otherwise, they'll be tacked together without whitespace!"
msgstr ""

# f9cffe045f50459f9669a8defddb0761
#: ../../../../1.8/docs/topics/i18n/translation.txt:1528
msgid "Mind your charset"
msgstr ""

# 82124407e90a4b1ca8e8998c0aa70c42
#: ../../../../1.8/docs/topics/i18n/translation.txt:1530
msgid ""
"Due to the way the ``gettext`` tools work internally and because we want to "
"allow non-ASCII source strings in Django's core and your applications, you "
"**must** use UTF-8 as the encoding for your PO files (the default when PO "
"files are created).  This means that everybody will be using the same "
"encoding, which is important when Django processes the PO files."
msgstr ""

# c684d2eacb1b45168e2cab4ee272c91d
#: ../../../../1.8/docs/topics/i18n/translation.txt:1536
msgid ""
"To reexamine all source code and templates for new translation strings and "
"update all message files for **all** languages, run this::"
msgstr ""

# d62ad7037e9a4609b9f36bff192a2c04
#: ../../../../1.8/docs/topics/i18n/translation.txt:1542
msgid "Compiling message files"
msgstr ""

# aa196bfb0d8f40d2bb3ff722e5fe1ada
#: ../../../../1.8/docs/topics/i18n/translation.txt:1544
msgid ""
"After you create your message file -- and each time you make changes to it "
"-- you'll need to compile it into a more efficient form, for use by "
"``gettext``. Do this with the :djadmin:`django-admin compilemessages "
"<compilemessages>` utility."
msgstr ""

# 931fafd01b5644549a35f194750641aa
#: ../../../../1.8/docs/topics/i18n/translation.txt:1549
msgid ""
"This tool runs over all available ``.po`` files and creates ``.mo`` files, "
"which are binary files optimized for use by ``gettext``. In the same "
"directory from which you ran :djadmin:`django-admin makemessages "
"<makemessages>`, run :djadmin:`django-admin compilemessages "
"<compilemessages>` like this::"
msgstr ""

# 86547098023f44f2a2df7787ceccc704
#: ../../../../1.8/docs/topics/i18n/translation.txt:1556
msgid "That's it. Your translations are ready for use."
msgstr ""

# 6e6fe3387ea64acf9a01e021e8ddc49c
#: ../../../../1.8/docs/topics/i18n/translation.txt:1560
msgid ""
"If you're using Windows and need to install the GNU gettext utilities so "
":djadmin:`django-admin compilemessages <compilemessages>` works see "
":ref:`gettext_on_windows` for more information."
msgstr ""

# 5c44695426b9485cbf644335b5c853d4
#: ../../../../1.8/docs/topics/i18n/translation.txt:1564
msgid ".po files: Encoding and BOM usage."
msgstr ""

# e36a4597db1949f3876f925834f84121
#: ../../../../1.8/docs/topics/i18n/translation.txt:1566
msgid ""
"Django only supports ``.po`` files encoded in UTF-8 and without any BOM "
"(Byte Order Mark) so if your text editor adds such marks to the beginning of"
" files by default then you will need to reconfigure it."
msgstr ""

# cdf3b381e5114aada421a87db6925be5
#: ../../../../1.8/docs/topics/i18n/translation.txt:1573
msgid "Creating message files from JavaScript source code"
msgstr ""

# 10e72db34e76468a8268684699e924a1
#: ../../../../1.8/docs/topics/i18n/translation.txt:1575
msgid ""
"You create and update the message files the same way as the other Django "
"message files -- with the :djadmin:`django-admin makemessages "
"<makemessages>` tool. The only difference is you need to explicitly specify "
"what in gettext parlance is known as a domain in this case the ``djangojs`` "
"domain, by providing a ``-d djangojs`` parameter, like this::"
msgstr ""

# 30d3dbb9ca314775ab74e846ca59181b
#: ../../../../1.8/docs/topics/i18n/translation.txt:1583
msgid ""
"This would create or update the message file for JavaScript for German. "
"After updating message files, just run :djadmin:`django-admin "
"compilemessages <compilemessages>` the same way as you do with normal Django"
" message files."
msgstr ""

# f348c84a43e7428987c4f0f2ccae8193
#: ../../../../1.8/docs/topics/i18n/translation.txt:1590
msgid "``gettext`` on Windows"
msgstr ""

# 6aea28f5c002484a9511a55dc5c0b837
#: ../../../../1.8/docs/topics/i18n/translation.txt:1592
msgid ""
"This is only needed for people who either want to extract message IDs or "
"compile message files (``.po``). Translation work itself just involves "
"editing existing files of this type, but if you want to create your own "
"message files, or want to test or compile a changed message file, you will "
"need the ``gettext`` utilities:"
msgstr ""

# d157176e29064abea2e711acd6653c9b
#: ../../../../1.8/docs/topics/i18n/translation.txt:1597
msgid ""
"Download the following zip files from the GNOME servers "
"https://download.gnome.org/binaries/win32/dependencies/"
msgstr ""

# c9e6c21e66dd4995ae5fd0208bb5cd8b
#: ../../../../1.8/docs/topics/i18n/translation.txt:1600
msgid "``gettext-runtime-X.zip``"
msgstr ""

# d8a7791b0b694e348d801f546ddffd36
#: ../../../../1.8/docs/topics/i18n/translation.txt:1601
msgid "``gettext-tools-X.zip``"
msgstr ""

# c47949269a8c4d328116a02d6563f748
#: ../../../../1.8/docs/topics/i18n/translation.txt:1603
msgid "``X`` is the version number, we are requiring ``0.15`` or higher."
msgstr ""

# 9ade11812775493d94dab464d1c87d2e
#: ../../../../1.8/docs/topics/i18n/translation.txt:1605
msgid ""
"Extract the contents of the ``bin\\`` directories in both files to the same "
"folder on your system (i.e. ``C:\\Program Files\\gettext-utils``)"
msgstr ""

# 98d27045a724450391c237a91e67b3a5
#: ../../../../1.8/docs/topics/i18n/translation.txt:1608
msgid "Update the system PATH:"
msgstr ""

# dac9cf8fd73946b4ae4a2df7ef4ef550
#: ../../../../1.8/docs/topics/i18n/translation.txt:1610
msgid "``Control Panel > System > Advanced > Environment Variables``."
msgstr ""

# 4c405d3e24df45b787bea6dbbed67c49
#: ../../../../1.8/docs/topics/i18n/translation.txt:1611
msgid "In the ``System variables`` list, click ``Path``, click ``Edit``."
msgstr ""

# 4e7cf37e2dd44283b0f05b5178c6c63a
#: ../../../../1.8/docs/topics/i18n/translation.txt:1612
msgid ""
"Add ``;C:\\Program Files\\gettext-utils\\bin`` at the end of the ``Variable "
"value`` field."
msgstr ""

# 1b897e0fb5d445a6a9f5ffcf6db2d627
#: ../../../../1.8/docs/topics/i18n/translation.txt:1615
msgid ""
"You may also use ``gettext`` binaries you have obtained elsewhere, so long "
"as the ``xgettext --version`` command works properly. Do not attempt to use "
"Django translation utilities with a ``gettext`` package if the command "
"``xgettext --version`` entered at a Windows command prompt causes a popup "
"window saying \"xgettext.exe has generated errors and will be closed by "
"Windows\"."
msgstr ""

# b83e5351eb6f4942b951df23fb430840
#: ../../../../1.8/docs/topics/i18n/translation.txt:1624
msgid "Customizing the ``makemessages`` command"
msgstr ""

# 32e6a25986684fcea6a05125d8f0d9e3
#: ../../../../1.8/docs/topics/i18n/translation.txt:1628
msgid ""
"If you want to pass additional parameters to ``xgettext``, you need to "
"create a custom :djadmin:`makemessages` command and override its "
"``xgettext_options`` attribute::"
msgstr ""

# bb416aedd4864c3781af7ca1b20f68fd
#: ../../../../1.8/docs/topics/i18n/translation.txt:1637
msgid ""
"If you need more flexibility, you could also add a new argument to your "
"custom :djadmin:`makemessages` command::"
msgstr ""

# 80b477812d8f48da861b8e0bf3387027
#: ../../../../1.8/docs/topics/i18n/translation.txt:1659
msgid "Miscellaneous"
msgstr ""

# d1a9154a11b94aa79bb79f7874f8c4dd
#: ../../../../1.8/docs/topics/i18n/translation.txt:1664
msgid "The ``set_language`` redirect view"
msgstr ""

# 5067eefa02314a4abb65043ce97941ea
#: ../../../../1.8/docs/topics/i18n/translation.txt:1672
msgid ""
"As a convenience, Django comes with a view, "
":func:`django.views.i18n.set_language`, that sets a user's language "
"preference and redirects to a given URL or, by default, back to the previous"
" page."
msgstr ""

# e900b7a14d5a4d8a865587527f71553a
#: ../../../../1.8/docs/topics/i18n/translation.txt:1676
msgid "Activate this view by adding the following line to your URLconf::"
msgstr ""

# 0ae7158a7191432c834711f651100725
#: ../../../../1.8/docs/topics/i18n/translation.txt:1680
msgid ""
"(Note that this example makes the view available at ``/i18n/setlang/``.)"
msgstr ""

# faf3be69f8cb497584d0fac10f35ba2b
#: ../../../../1.8/docs/topics/i18n/translation.txt:1684
msgid ""
"Make sure that you don't include the above URL within "
":func:`~django.conf.urls.i18n.i18n_patterns` - it needs to be language-"
"independent itself to work correctly."
msgstr ""

# 4ddaf086cf144a57a643637f94d1fed6
#: ../../../../1.8/docs/topics/i18n/translation.txt:1688
msgid ""
"The view expects to be called via the ``POST`` method, with a ``language`` "
"parameter set in request. If session support is enabled, the view saves the "
"language choice in the user's session. Otherwise, it saves the language "
"choice in a cookie that is by default named ``django_language``. (The name "
"can be changed through the :setting:`LANGUAGE_COOKIE_NAME` setting.)"
msgstr ""

# 76d2902e98fe43ffbf79c9afbf1352a8
#: ../../../../1.8/docs/topics/i18n/translation.txt:1694
msgid ""
"After setting the language choice, Django redirects the user, following this"
" algorithm:"
msgstr ""

# d6483649903844d19eec95029bd7fe09
#: ../../../../1.8/docs/topics/i18n/translation.txt:1697
msgid "Django looks for a ``next`` parameter in the ``POST`` data."
msgstr ""

# ac053a0aef654c73b9b690b211a92f4c
#: ../../../../1.8/docs/topics/i18n/translation.txt:1698
msgid ""
"If that doesn't exist, or is empty, Django tries the URL in the ``Referrer``"
" header."
msgstr ""

# e4eaae4c63594b1a9a69e7f9f0ebd8ce
#: ../../../../1.8/docs/topics/i18n/translation.txt:1700
msgid ""
"If that's empty -- say, if a user's browser suppresses that header -- then "
"the user will be redirected to ``/`` (the site root) as a fallback."
msgstr ""

# b49c442ec06e4f88beb79013b9cc8eb9
#: ../../../../1.8/docs/topics/i18n/translation.txt:1703
msgid "Here's example HTML template code:"
msgstr ""

# f1f57f9201034de595bab2f29fabbad1
#: ../../../../1.8/docs/topics/i18n/translation.txt:1724
msgid ""
"In this example, Django looks up the URL of the page to which the user will "
"be redirected in the ``redirect_to`` context variable."
msgstr ""

# feaef84f35c647c3bb1509dd58a3aa16
#: ../../../../1.8/docs/topics/i18n/translation.txt:1728
msgid "Explicitly setting the active language"
msgstr ""

# 0ce122889f964fba9e6b1969f43a1dbc
#: ../../../../1.8/docs/topics/i18n/translation.txt:1732
msgid ""
"You may want to set the active language for the current session explicitly. "
"Perhaps a user's language preference is retrieved from another system, for "
"example. You've already been introduced to "
":func:`django.utils.translation.activate()`. That applies to the current "
"thread only. To persist the language for the entire session, also modify "
":data:`~django.utils.translation.LANGUAGE_SESSION_KEY` in the session::"
msgstr ""

# 8601bf55dcb147ee8003c569f5b33389
#: ../../../../1.8/docs/topics/i18n/translation.txt:1744
msgid ""
"You would typically want to use both: "
":func:`django.utils.translation.activate()` will change the language for "
"this thread, and modifying the session makes this preference persist in "
"future requests."
msgstr ""

# 39cdbc676a274a3782c21a0d9799ad0e
#: ../../../../1.8/docs/topics/i18n/translation.txt:1748
msgid ""
"If you are not using sessions, the language will persist in a cookie, whose "
"name is configured in :setting:`LANGUAGE_COOKIE_NAME`. For example::"
msgstr ""

# aa79e24df6904807804fdf8c794f2ee8
#: ../../../../1.8/docs/topics/i18n/translation.txt:1760
msgid "Using translations outside views and templates"
msgstr ""

# da45caacf17d401eb46369c6eafe8592
#: ../../../../1.8/docs/topics/i18n/translation.txt:1762
msgid ""
"While Django provides a rich set of i18n tools for use in views and "
"templates, it does not restrict the usage to Django-specific code. The "
"Django translation mechanisms can be used to translate arbitrary texts to "
"any language that is supported by Django (as long as an appropriate "
"translation catalog exists, of course). You can load a translation catalog, "
"activate it and translate text to language of your choice, but remember to "
"switch back to original language, as activating a translation catalog is "
"done on per-thread basis and such change will affect code running in the "
"same thread."
msgstr ""

# 5ccb386106d1444095bf40e762ad4f01
#: ../../../../1.8/docs/topics/i18n/translation.txt:1784
msgid ""
"Calling this function with the value 'de' will give you ``\"Willkommen\"``, "
"regardless of :setting:`LANGUAGE_CODE` and language set by middleware."
msgstr ""

# 3fe2739249b049adb8cd954daff5aacf
#: ../../../../1.8/docs/topics/i18n/translation.txt:1787
msgid ""
"Functions of particular interest are "
"``django.utils.translation.get_language()`` which returns the language used "
"in the current thread, ``django.utils.translation.activate()`` which "
"activates a translation catalog for the current thread, and "
"``django.utils.translation.check_for_language()`` which checks if the given "
"language is supported by Django."
msgstr ""

# 5b6bbdc7c463412ca0519e6ac0218ee6
#: ../../../../1.8/docs/topics/i18n/translation.txt:1793
msgid ""
"To help write more concise code, there is also a context manager "
"``django.utils.translation.override()`` that stores the current language on "
"enter and restores it on exit. With it, the above example becomes::"
msgstr ""

# b1912a97b36d4a6d99625e50b0ad36c1
#: ../../../../1.8/docs/topics/i18n/translation.txt:1804
msgid "Language cookie"
msgstr ""

# 018c4c7dbdd342d18efa252b00bd909a
#: ../../../../1.8/docs/topics/i18n/translation.txt:1806
msgid "A number of settings can be used to adjust language cookie options:"
msgstr ""

# 4b1f4f2a7ef74a26a2e8c95ae77ff309
#: ../../../../1.8/docs/topics/i18n/translation.txt:1808
msgid ":setting:`LANGUAGE_COOKIE_NAME`"
msgstr ""

# 7b2aa1f22ea74f0c9c9d271c6cb996ac
#: ../../../../1.8/docs/topics/i18n/translation.txt:1812
msgid ":setting:`LANGUAGE_COOKIE_AGE`"
msgstr ""

# 6d5225b96deb4e7ca0daa8f6a89e4475
#: ../../../../1.8/docs/topics/i18n/translation.txt:1813
msgid ":setting:`LANGUAGE_COOKIE_DOMAIN`"
msgstr ""

# e72c65d314eb431abd07f9d7f977fa44
#: ../../../../1.8/docs/topics/i18n/translation.txt:1814
msgid ":setting:`LANGUAGE_COOKIE_PATH`"
msgstr ""

# 9a0134fa33a141e2bb90c4c0816a6cf0
#: ../../../../1.8/docs/topics/i18n/translation.txt:1818
msgid "Implementation notes"
msgstr ""

# 2a7510273a244a10ad2d143c549ad533
#: ../../../../1.8/docs/topics/i18n/translation.txt:1823
msgid "Specialties of Django translation"
msgstr ""

# 159067dd78d6412180181e1778848f57
#: ../../../../1.8/docs/topics/i18n/translation.txt:1825
msgid ""
"Django's translation machinery uses the standard ``gettext`` module that "
"comes with Python. If you know ``gettext``, you might note these specialties"
" in the way Django does translation:"
msgstr ""

# b4ba0670e31b49acaa66b740c83f3f99
#: ../../../../1.8/docs/topics/i18n/translation.txt:1829
msgid ""
"The string domain is ``django`` or ``djangojs``. This string domain is used "
"to differentiate between different programs that store their data in a "
"common message-file library (usually ``/usr/share/locale/``). The ``django``"
" domain is used for Python and template translation strings and is loaded "
"into the global translation catalogs. The ``djangojs`` domain is only used "
"for JavaScript translation catalogs to make sure that those are as small as "
"possible."
msgstr ""

# 22994defef164b83b7e5d7c6119e8c75
#: ../../../../1.8/docs/topics/i18n/translation.txt:1836
msgid ""
"Django doesn't use ``xgettext`` alone. It uses Python wrappers around "
"``xgettext`` and ``msgfmt``. This is mostly for convenience."
msgstr ""

# 9cda9e1d3991496482db71de192a3495
#: ../../../../1.8/docs/topics/i18n/translation.txt:1842
msgid "How Django discovers language preference"
msgstr ""

# d0774175636b475ebc3be6d645e0012b
#: ../../../../1.8/docs/topics/i18n/translation.txt:1844
msgid ""
"Once you've prepared your translations -- or, if you just want to use the "
"translations that come with Django -- you'll just need to activate "
"translation for your app."
msgstr ""

# 0dbfffc2eadc4ac2982c3655bfe31074
#: ../../../../1.8/docs/topics/i18n/translation.txt:1848
msgid ""
"Behind the scenes, Django has a very flexible model of deciding which "
"language should be used -- installation-wide, for a particular user, or "
"both."
msgstr ""

# b6ccc08bb1dc470990fcb509bedd8667
#: ../../../../1.8/docs/topics/i18n/translation.txt:1851
msgid ""
"To set an installation-wide language preference, set "
":setting:`LANGUAGE_CODE`. Django uses this language as the default "
"translation -- the final attempt if no better matching translation is found "
"through one of the methods employed by the locale middleware (see below)."
msgstr ""

# ff27904293fe45a49a5c964b88dd4566
#: ../../../../1.8/docs/topics/i18n/translation.txt:1856
msgid ""
"If all you want is to run Django with your native language all you need to "
"do is set :setting:`LANGUAGE_CODE` and make sure the corresponding "
":term:`message files <message file>` and their compiled versions (``.mo``) "
"exist."
msgstr ""

# 98cfc88df5b04121ae52e4486892439d
#: ../../../../1.8/docs/topics/i18n/translation.txt:1860
msgid ""
"If you want to let each individual user specify which language they prefer, "
"then you also need to use the ``LocaleMiddleware``. ``LocaleMiddleware`` "
"enables language selection based on data from the request. It customizes "
"content for each user."
msgstr ""

# 6b53f88d79dd428ea18aaa6904c2cc55
#: ../../../../1.8/docs/topics/i18n/translation.txt:1865
msgid ""
"To use ``LocaleMiddleware``, add "
"``'django.middleware.locale.LocaleMiddleware'`` to your "
":setting:`MIDDLEWARE_CLASSES` setting. Because middleware order matters, you"
" should follow these guidelines:"
msgstr ""

# 98e0e5c3ca2646a896c54e6415c20319
#: ../../../../1.8/docs/topics/i18n/translation.txt:1869
msgid "Make sure it's one of the first middlewares installed."
msgstr ""

# 08b2dfdd65204693994b31bffeeb4a50
#: ../../../../1.8/docs/topics/i18n/translation.txt:1870
msgid ""
"It should come after ``SessionMiddleware``, because ``LocaleMiddleware`` "
"makes use of session data. And it should come before ``CommonMiddleware`` "
"because ``CommonMiddleware`` needs an activated language in order to resolve"
" the requested URL."
msgstr ""

# 8703a27597df4ed7ab8e6c336ca0cd85
#: ../../../../1.8/docs/topics/i18n/translation.txt:1874
msgid "If you use ``CacheMiddleware``, put ``LocaleMiddleware`` after it."
msgstr ""

# 7669db9fbcd1441cae955dddea071e1c
#: ../../../../1.8/docs/topics/i18n/translation.txt:1876
msgid "For example, your :setting:`MIDDLEWARE_CLASSES` might look like this::"
msgstr ""

# 63f276aee6af478e82d962a77b798735
#: ../../../../1.8/docs/topics/i18n/translation.txt:1884
msgid ""
"(For more on middleware, see the :doc:`middleware documentation "
"</topics/http/middleware>`.)"
msgstr ""

# 7463e24bca4b4f9aa6fb8c92feaf614c
#: ../../../../1.8/docs/topics/i18n/translation.txt:1887
msgid ""
"``LocaleMiddleware`` tries to determine the user's language preference by "
"following this algorithm:"
msgstr ""

# 4db2614f31ab42b1b2913850d2a49793
#: ../../../../1.8/docs/topics/i18n/translation.txt:1890
msgid ""
"First, it looks for the language prefix in the requested URL.  This is only "
"performed when you are using the ``i18n_patterns`` function in your root "
"URLconf. See :ref:`url-internationalization` for more information about the "
"language prefix and how to internationalize URL patterns."
msgstr ""

# abb07700b78a44f0b72aa8f4d5471fab
#: ../../../../1.8/docs/topics/i18n/translation.txt:1895
msgid ""
"Failing that, it looks for the "
":data:`~django.utils.translation.LANGUAGE_SESSION_KEY` key in the current "
"user's session."
msgstr ""

# 2556761f186c4735ae6ce6e91cb1152c
#: ../../../../1.8/docs/topics/i18n/translation.txt:1900
msgid ""
"In previous versions, the key was named ``django_language``, and the "
"``LANGUAGE_SESSION_KEY`` constant did not exist."
msgstr ""

# 5f48503c932640e98694225331fcdff9
#: ../../../../1.8/docs/topics/i18n/translation.txt:1903
msgid "Failing that, it looks for a cookie."
msgstr ""

# 6a7ba411a2cd4dbcb9cf2f879c82950c
#: ../../../../1.8/docs/topics/i18n/translation.txt:1905
msgid ""
"The name of the cookie used is set by the :setting:`LANGUAGE_COOKIE_NAME` "
"setting. (The default name is ``django_language``.)"
msgstr ""

# 5b1584cf6fbb46abb52166ee4d6019c3
#: ../../../../1.8/docs/topics/i18n/translation.txt:1908
msgid ""
"Failing that, it looks at the ``Accept-Language`` HTTP header. This header "
"is sent by your browser and tells the server which language(s) you prefer, "
"in order by priority. Django tries each language in the header until it "
"finds one with available translations."
msgstr ""

# 1f6fdf7e3afb4a7b9a236b1525cd88db
#: ../../../../1.8/docs/topics/i18n/translation.txt:1913
msgid "Failing that, it uses the global :setting:`LANGUAGE_CODE` setting."
msgstr ""

# 51db4bf9b4164359ace426314fd9b791
#: ../../../../1.8/docs/topics/i18n/translation.txt:1919
msgid ""
"In each of these places, the language preference is expected to be in the "
"standard :term:`language format<language code>`, as a string. For example, "
"Brazilian Portuguese is ``pt-br``."
msgstr ""

# ab3b38af88d148b8931ce7d8e09d799b
#: ../../../../1.8/docs/topics/i18n/translation.txt:1923
msgid ""
"If a base language is available but the sublanguage specified is not, Django"
" uses the base language. For example, if a user specifies ``de-at`` "
"(Austrian German) but Django only has ``de`` available, Django uses ``de``."
msgstr ""

# 4f400c2f967e443f8683531f78500689
#: ../../../../1.8/docs/topics/i18n/translation.txt:1928
msgid ""
"Only languages listed in the :setting:`LANGUAGES` setting can be selected. "
"If you want to restrict the language selection to a subset of provided "
"languages (because your application doesn't provide all those languages), "
"set :setting:`LANGUAGES` to a list of languages. For example::"
msgstr ""

# a420a99b60974ff0b3e74d44996a11bd
#: ../../../../1.8/docs/topics/i18n/translation.txt:1938
msgid ""
"This example restricts languages that are available for automatic selection "
"to German and English (and any sublanguage, like de-ch or en-us)."
msgstr ""

# 5c4dd0864f85443880fa32f0907344f0
#: ../../../../1.8/docs/topics/i18n/translation.txt:1942
msgid ""
"If you define a custom :setting:`LANGUAGES` setting, as explained in the "
"previous bullet, you can mark the language names as translation strings -- "
"but use :func:`~django.utils.translation.ugettext_lazy` instead of "
":func:`~django.utils.translation.ugettext` to avoid a circular import."
msgstr ""

# 0fddc244463e404c9d9deabfdf6de99b
#: ../../../../1.8/docs/topics/i18n/translation.txt:1947
msgid "Here's a sample settings file::"
msgstr ""

# bf92f9c22dd74763ab3ae9e2fc704918
#: ../../../../1.8/docs/topics/i18n/translation.txt:1956
msgid ""
"Once ``LocaleMiddleware`` determines the user's preference, it makes this "
"preference available as ``request.LANGUAGE_CODE`` for each "
":class:`~django.http.HttpRequest`. Feel free to read this value in your view"
" code. Here's a simple example::"
msgstr ""

# fde0239c97594ddcb819b4768c108b6b
#: ../../../../1.8/docs/topics/i18n/translation.txt:1969
msgid ""
"Note that, with static (middleware-less) translation, the language is in "
"``settings.LANGUAGE_CODE``, while with dynamic (middleware) translation, "
"it's in ``request.LANGUAGE_CODE``."
msgstr ""

# 9af115c903ca4d208f4a8f8e5b3548b4
#: ../../../../1.8/docs/topics/i18n/translation.txt:1981
msgid "How Django discovers translations"
msgstr ""

# 0e8d6553d9404138b47ccd237e4bcd93
#: ../../../../1.8/docs/topics/i18n/translation.txt:1983
msgid ""
"At runtime, Django builds an in-memory unified catalog of literals-"
"translations. To achieve this it looks for translations by following this "
"algorithm regarding the order in which it examines the different file paths "
"to load the compiled :term:`message files <message file>` (``.mo``) and the "
"precedence of multiple translations for the same literal:"
msgstr ""

# c3bba04ae80c4a078610e8a58863eda9
#: ../../../../1.8/docs/topics/i18n/translation.txt:1989
msgid ""
"The directories listed in :setting:`LOCALE_PATHS` have the highest "
"precedence, with the ones appearing first having higher precedence than the "
"ones appearing later."
msgstr ""

# 24871bf824984d4fb25bc27a718b328b
#: ../../../../1.8/docs/topics/i18n/translation.txt:1992
msgid ""
"Then, it looks for and uses if it exists a ``locale`` directory in each of "
"the installed apps listed in :setting:`INSTALLED_APPS`.  The ones appearing "
"first have higher precedence than the ones appearing later."
msgstr ""

# ba5e51254cbe4c628f14b77c952d868d
#: ../../../../1.8/docs/topics/i18n/translation.txt:1995
msgid ""
"Finally, the Django-provided base translation in ``django/conf/locale`` is "
"used as a fallback."
msgstr ""

# 0beceb84ef3f4ec8b438af35a3427d02
#: ../../../../1.8/docs/topics/i18n/translation.txt:2000
msgid ""
"The translations for literals included in JavaScript assets are looked up "
"following a similar but not identical algorithm. See the "
":ref:`javascript_catalog view documentation <javascript_catalog-view>` for "
"more details."
msgstr ""

# 524d2ffb43164462bc1abac689a54c3b
#: ../../../../1.8/docs/topics/i18n/translation.txt:2005
msgid ""
"In all cases the name of the directory containing the translation is "
"expected to be named using :term:`locale name` notation. E.g. ``de``, "
"``pt_BR``, ``es_AR``, etc."
msgstr ""

# dc5fb4a5c98341ecb4e220669e0e1741
#: ../../../../1.8/docs/topics/i18n/translation.txt:2009
msgid ""
"This way, you can write applications that include their own translations, "
"and you can override base translations in your project. Or, you can just "
"build a big project out of several apps and put all translations into one "
"big common message file specific to the project you are composing. The "
"choice is yours."
msgstr ""

# 8732ce1b35d84e2f80d7f8980a21ac3a
#: ../../../../1.8/docs/topics/i18n/translation.txt:2014
msgid "All message file repositories are structured the same way. They are:"
msgstr ""

# bb37d2e8f6bb484d90b6a942615bedd1
#: ../../../../1.8/docs/topics/i18n/translation.txt:2016
msgid ""
"All paths listed in :setting:`LOCALE_PATHS` in your settings file are "
"searched for ``<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

# e18b7b2befa940ae99e9439d6fffe835
#: ../../../../1.8/docs/topics/i18n/translation.txt:2018
msgid "``$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

# cc12bb5462bd4228809fceedcc676477
#: ../../../../1.8/docs/topics/i18n/translation.txt:2019
msgid ""
"``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

# f893bdfe764142a08b3ab1db4733c7e0
#: ../../../../1.8/docs/topics/i18n/translation.txt:2021
msgid ""
"To create message files, you use the :djadmin:`django-admin makemessages "
"<makemessages>` tool. And you use :djadmin:`django-admin compilemessages "
"<compilemessages>` to produce the binary ``.mo`` files that are used by "
"``gettext``."
msgstr ""

# f86fcdbd0aac416eb31cc6f07c19c41d
#: ../../../../1.8/docs/topics/i18n/translation.txt:2025
msgid ""
"You can also run :djadmin:`django-admin compilemessages "
"--settings=path.to.settings <compilemessages>` to make the compiler process "
"all the directories in your :setting:`LOCALE_PATHS` setting."
msgstr ""

# 7f3a7b9976ea4a92ac18f6e14417835d
#: ../../../../1.8/docs/topics/index.txt:2
msgid "Using Django"
msgstr ""

# 3a45ca1339c3442e80655782f08e4ed1
#: ../../../../1.8/docs/topics/index.txt:4
msgid "Introductions to all the key parts of Django you'll need to know:"
msgstr ""

# e40b97f91d6d4c0e94915313c8a88f46
#: ../../../../1.8/docs/topics/install.txt:3
msgid "How to install Django"
msgstr ""

# 0894b27cac214a9c82a4ec9049a24415
#: ../../../../1.8/docs/topics/install.txt:5
msgid "This document will get you up and running with Django."
msgstr ""

# 4aee948fceb64b549546cbe77a9aa444
#: ../../../../1.8/docs/topics/install.txt:8
msgid "Install Python"
msgstr ""

# 777f8c6a86994b3d81f432e64f38e936
#: ../../../../1.8/docs/topics/install.txt:10
msgid ""
"Being a Python Web framework, Django requires Python. See :ref:`faq-python-"
"version-support` for details."
msgstr ""

# 4662261990a2458e95b11e5ae5b8e416
#: ../../../../1.8/docs/topics/install.txt:13
msgid ""
"Get the latest version of Python at https://www.python.org/download/ or with"
" your operating system's package manager."
msgstr ""

# ed2e12e4fd2d42c99252a41d534ab86d
#: ../../../../1.8/docs/topics/install.txt:16
msgid "Django on Jython"
msgstr ""

# 86c273a49d3a4438a164f5540b6998a4
#: ../../../../1.8/docs/topics/install.txt:18
msgid ""
"If you use Jython_ (a Python implementation for the Java platform), you'll "
"need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""

# a5da00ab598f43eb9180754683ea91e9
#: ../../../../1.8/docs/topics/install.txt:23
msgid "Python on Windows"
msgstr ""

# 5804a15bb26c4b2699456c3d7ce066d2
#: ../../../../1.8/docs/topics/install.txt:25
msgid ""
"If you are just starting with Django and using Windows, you may find "
":doc:`/howto/windows` useful."
msgstr ""

# 008c630345ec41ce91905fdad745f461
#: ../../../../1.8/docs/topics/install.txt:29
msgid "Install Apache and mod_wsgi"
msgstr ""

# 3c0c864282b34391a6b004c0d60fc01e
#: ../../../../1.8/docs/topics/install.txt:31
msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight web server you can use for testing, so you "
"won't need to set up Apache until you're ready to deploy Django in "
"production."
msgstr ""

# 34f243029c4244608ddf6bed33dbf146
#: ../../../../1.8/docs/topics/install.txt:36
msgid ""
"If you want to use Django on a production site, use `Apache`_ with "
"`mod_wsgi`_. mod_wsgi can operate in one of two modes: an embedded mode and "
"a daemon mode. In embedded mode, mod_wsgi is similar to mod_perl -- it "
"embeds Python within Apache and loads Python code into memory when the "
"server starts. Code stays in memory throughout the life of an Apache "
"process, which leads to significant performance gains over other server "
"arrangements. In daemon mode, mod_wsgi spawns an independent daemon process "
"that handles requests. The daemon process can run as a different user than "
"the Web server, possibly leading to improved security, and the daemon "
"process can be restarted without restarting the entire Apache Web server, "
"possibly making refreshing your codebase more seamless. Consult the mod_wsgi"
" documentation to determine which mode is right for your setup. Make sure "
"you have Apache installed, with the mod_wsgi module activated. Django will "
"work with any version of Apache that supports mod_wsgi."
msgstr ""

# c0f9085af25b431798305e4c96f22318
#: ../../../../1.8/docs/topics/install.txt:52
msgid ""
"See :doc:`How to use Django with mod_wsgi </howto/deployment/wsgi/modwsgi>` "
"for information on how to configure mod_wsgi once you have it installed."
msgstr ""

# 30a2f90521dd4a56a030c149a3757315
#: ../../../../1.8/docs/topics/install.txt:56
msgid ""
"If you can't use mod_wsgi for some reason, fear not: Django supports many "
"other deployment options. One is :doc:`uWSGI "
"</howto/deployment/wsgi/uwsgi>`; it works very well with `nginx`_. "
"Additionally, Django follows the WSGI spec (:pep:`3333`), which allows it to"
" run on a variety of server platforms."
msgstr ""

# 34fcc0f204d04973912e52c8140206d5
#: ../../../../1.8/docs/topics/install.txt:68
msgid "Get your database running"
msgstr ""

# 8e2142c0ebcd44c9a11351d900d31a4a
#: ../../../../1.8/docs/topics/install.txt:70
msgid ""
"If you plan to use Django's database API functionality, you'll need to make "
"sure a database server is running. Django supports many different database "
"servers and is officially supported with PostgreSQL_, MySQL_, Oracle_ and "
"SQLite_."
msgstr ""

# 7a296b2938be4b9a9c93df679706dcf3
#: ../../../../1.8/docs/topics/install.txt:75
msgid ""
"If you are developing a simple project or something you don't plan to deploy"
" in a production environment, SQLite is generally the simplest option as it "
"doesn't require running a separate server. However, SQLite has many "
"differences from other databases, so if you are working on something "
"substantial, it's recommended to develop with the same database as you plan "
"on using in production."
msgstr ""

# b92979bb1e9844fa85fa7e27514e8606
#: ../../../../1.8/docs/topics/install.txt:82
msgid ""
"In addition to the officially supported databases, there are :ref:`backends "
"provided by 3rd parties <third-party-notes>` that allow you to use other "
"databases with Django."
msgstr ""

# ddf71c5e299d4c41853f39940230f392
#: ../../../../1.8/docs/topics/install.txt:86
msgid ""
"In addition to a database backend, you'll need to make sure your Python "
"database bindings are installed."
msgstr ""

# ec0af72364164fbc9b2522c9eaeea327
#: ../../../../1.8/docs/topics/install.txt:89
msgid ""
"If you're using PostgreSQL, you'll need the `psycopg2`_ package. Refer to "
"the :ref:`PostgreSQL notes <postgresql-notes>` for further details."
msgstr ""

# 6224b3dc827b4036ad017f96b7984f88
#: ../../../../1.8/docs/topics/install.txt:92
msgid ""
"If you're using MySQL, you'll need a :ref:`DB API driver <mysql-db-api-"
"drivers>` like ``mysqlclient``. See :ref:`notes for the MySQL backend "
"<mysql-notes>` for details."
msgstr ""

# 2f9e5d1da9f6445593030df0b769eff0
#: ../../../../1.8/docs/topics/install.txt:96
msgid ""
"If you're using SQLite you might want to read the :ref:`SQLite backend notes"
" <sqlite-notes>`."
msgstr ""

# 0ef389431ceb4c119251b1b9dffda7fc
#: ../../../../1.8/docs/topics/install.txt:99
msgid ""
"If you're using Oracle, you'll need a copy of cx_Oracle_, but please read "
"the :ref:`notes for the Oracle backend <oracle-notes>` for details regarding"
" supported versions of both Oracle and ``cx_Oracle``."
msgstr ""

# bc405ad377c5419b8a1ff7c380a4ec8e
#: ../../../../1.8/docs/topics/install.txt:103
msgid ""
"If you're using an unofficial 3rd party backend, please consult the "
"documentation provided for any additional requirements."
msgstr ""

# ea3baa564f9e44eb99d38856cd6f5e24
#: ../../../../1.8/docs/topics/install.txt:106
msgid ""
"If you plan to use Django's ``manage.py migrate`` command to automatically "
"create database tables for your models (after first installing Django and "
"creating a project), you'll need to ensure that Django has permission to "
"create and alter tables in the database you're using; if you plan to "
"manually create the tables, you can simply grant Django ``SELECT``, "
"``INSERT``, ``UPDATE`` and ``DELETE`` permissions. After creating a database"
" user with these permissions, you'll specify the details in your project's "
"settings file, see :setting:`DATABASES` for details."
msgstr ""

# 230bbfba38014b6e984f9b49d2c6bcd9
#: ../../../../1.8/docs/topics/install.txt:115
msgid ""
"If you're using Django's :doc:`testing framework</topics/testing/index>` to "
"test database queries, Django will need permission to create a test "
"database."
msgstr ""

# fc0e11b30b3b47d1b0309a9f885289de
#: ../../../../1.8/docs/topics/install.txt:128
msgid "Remove any old versions of Django"
msgstr ""

# c3d57034d68947c5ba3da4eeddded60e
#: ../../../../1.8/docs/topics/install.txt:130
msgid ""
"If you are upgrading your installation of Django from a previous version, "
"you will need to uninstall the old Django version before installing the new "
"version."
msgstr ""

# e798d7c33d4947529954da43b5b4f180
#: ../../../../1.8/docs/topics/install.txt:134
msgid ""
"If you installed Django using pip_ or ``easy_install`` previously, "
"installing with pip_ or ``easy_install`` again will automatically take care "
"of the old version, so you don't need to do it yourself."
msgstr ""

# b7ff2e6deabd4e3e80d2b7ded6caef6e
#: ../../../../1.8/docs/topics/install.txt:138
msgid ""
"If you previously installed Django using ``python setup.py install``, "
"uninstalling is as simple as deleting the ``django`` directory from your "
"Python ``site-packages``. To find the directory you need to remove, you can "
"run the following at your shell prompt (not the interactive Python prompt):"
msgstr ""

# 8d277c8e6c3e44e8b570ecb516b3be0f
#: ../../../../1.8/docs/topics/install.txt:151
msgid "Install the Django code"
msgstr ""

# 08c429f2eb554150b893e94548c383a6
#: ../../../../1.8/docs/topics/install.txt:153
msgid ""
"Installation instructions are slightly different depending on whether you're"
" installing a distribution-specific package, downloading the latest official"
" release, or fetching the latest development version."
msgstr ""

# 8756eaa7e85c43108be18ad61c09f279
#: ../../../../1.8/docs/topics/install.txt:157
msgid "It's easy, no matter which way you choose."
msgstr ""

# 13335c65909b46cb96d5a84048fe8422
#: ../../../../1.8/docs/topics/install.txt:162
msgid "Installing an official release with ``pip``"
msgstr ""

# 9e0feb6eb1c34f36bd2d2a8cff501643
#: ../../../../1.8/docs/topics/install.txt:164
msgid "This is the recommended way to install Django."
msgstr ""

# 703b0742fa244968801d42d4f5cecd9a
#: ../../../../1.8/docs/topics/install.txt:166
msgid ""
"Install pip_. The easiest is to use the `standalone pip installer`_. If your"
" distribution already has ``pip`` installed, you might need to update it if "
"it's outdated. (If it's outdated, you'll know because installation won't "
"work.)"
msgstr ""

# cde21dd8b35a440689924fddfe14e052
#: ../../../../1.8/docs/topics/install.txt:171
msgid ""
"(optional) Take a look at virtualenv_ and virtualenvwrapper_. These tools "
"provide isolated Python environments, which are more practical than "
"installing packages systemwide. They also allow installing packages without "
"administrator privileges. It's up to you to decide if you want to learn and "
"use them."
msgstr ""

# 2b23f905813c4a53bd084c825094e311
#: ../../../../1.8/docs/topics/install.txt:177
msgid ""
"If you're using Linux, Mac OS X or some other flavor of Unix, enter the "
"command ``sudo pip install Django`` at the shell prompt. If you're using "
"Windows, start a command shell with administrator privileges and run the "
"command ``pip install Django``. This will install Django in your Python "
"installation's ``site-packages`` directory."
msgstr ""

# c26e3fdd774d462fab25aa23ab6f6554
#: ../../../../1.8/docs/topics/install.txt:183
msgid ""
"If you're using a virtualenv, you don't need ``sudo`` or administrator "
"privileges, and this will install Django in the virtualenv's ``site-"
"packages`` directory."
msgstr ""

# 0e53571cadaf45fe984b3f9e95cbfc47
#: ../../../../1.8/docs/topics/install.txt:193
msgid "Installing an official release manually"
msgstr ""

# f81f3a56c72849f885d78cf967fba808
#: ../../../../1.8/docs/topics/install.txt:195
msgid "Download the latest release from our `download page`_."
msgstr ""

# 68efb41782d54d45abb0902cd64399f3
#: ../../../../1.8/docs/topics/install.txt:197
msgid ""
"Untar the downloaded file (e.g. ``tar xzvf Django-X.Y.tar.gz``, where "
"``X.Y`` is the version number of the latest release). If you're using "
"Windows, you can download the command-line tool bsdtar_ to do this, or you "
"can use a GUI-based tool such as 7-zip_."
msgstr ""

# ce527e67a31841988c1daebe88d216d2
#: ../../../../1.8/docs/topics/install.txt:202
msgid "Change into the directory created in step 2 (e.g. ``cd Django-X.Y``)."
msgstr ""

# 49576d630c7744bcbb1c76b4554f1bbc
#: ../../../../1.8/docs/topics/install.txt:204
msgid ""
"If you're using Linux, Mac OS X or some other flavor of Unix, enter the "
"command ``sudo python setup.py install`` at the shell prompt. If you're "
"using Windows, start a command shell with administrator privileges and run "
"the command ``python setup.py install``. This will install Django in your "
"Python installation's ``site-packages`` directory."
msgstr ""

# b2e0ba9c47f44de8b1c4da3c59d3f56a
#: ../../../../1.8/docs/topics/install.txt:210
msgid "Removing an old version"
msgstr ""

# 8cb74708045443dfa56af29dac51e3e6
#: ../../../../1.8/docs/topics/install.txt:212
msgid ""
"If you use this installation technique, it is particularly important that "
"you :ref:`remove any existing installations<removing-old-versions-of-"
"django>` of Django first. Otherwise, you can end up with a broken "
"installation that includes files from previous versions that have since been"
" removed from Django."
msgstr ""

# 250869f8e96d43238ea81e8862e35d09
#: ../../../../1.8/docs/topics/install.txt:224
msgid "Installing a distribution-specific package"
msgstr ""

# 1e37ebee1473406b97f8e996b5659e39
#: ../../../../1.8/docs/topics/install.txt:226
msgid ""
"Check the :doc:`distribution specific notes </misc/distributions>` to see if"
" your platform/distribution provides official Django packages/installers. "
"Distribution-provided packages will typically allow for automatic "
"installation of dependencies and easy upgrade paths; however, these packages"
" will rarely contain the latest release of Django."
msgstr ""

# 0bc4317c2a9040809c671f377f19064e
#: ../../../../1.8/docs/topics/install.txt:235
msgid "Installing the development version"
msgstr ""

# d522d8beb7b84dc3b80530383c65f8a3
#: ../../../../1.8/docs/topics/install.txt:237
msgid "Tracking Django development"
msgstr ""

# 337b4094bd8541ebbffbb70524e22d14
#: ../../../../1.8/docs/topics/install.txt:239
msgid ""
"If you decide to use the latest development version of Django, you'll want "
"to pay close attention to `the development timeline`_, and you'll want to "
"keep an eye on the :ref:`release notes for the upcoming release "
"<development_release_notes>`. This will help you stay on top of any new "
"features you might want to use, as well as any changes you'll need to make "
"to your code when updating your copy of Django. (For stable releases, any "
"necessary changes are documented in the release notes.)"
msgstr ""

# dc5955cec7b444f68c83485b59e9d004
#: ../../../../1.8/docs/topics/install.txt:250
msgid ""
"If you'd like to be able to update your Django code occasionally with the "
"latest bug fixes and improvements, follow these instructions:"
msgstr ""

# 4f1856ee3c02451f9a8d0a01365dd067
#: ../../../../1.8/docs/topics/install.txt:253
msgid ""
"Make sure that you have Git_ installed and that you can run its commands "
"from a shell. (Enter ``git help`` at a shell prompt to test this.)"
msgstr ""

# 2fc92e1174d44e799cf1f71a3a343027
#: ../../../../1.8/docs/topics/install.txt:256
msgid ""
"Check out Django's main development branch (the 'trunk' or 'master') like "
"so:"
msgstr ""

# b5085fe271714fa1b50aecb878d7bc96
#: ../../../../1.8/docs/topics/install.txt:263
msgid ""
"This will create a directory ``django-trunk`` in your current directory."
msgstr ""

# d0e9643a15a94c99b63597fbef371d3c
#: ../../../../1.8/docs/topics/install.txt:265
msgid ""
"Make sure that the Python interpreter can load Django's code. The most "
"convenient way to do this is via pip_. Run the following command:"
msgstr ""

# d54686c1c1c34e08b95dd5f693538aca
#: ../../../../1.8/docs/topics/install.txt:272
msgid "(If using a virtualenv_ you can omit ``sudo``.)"
msgstr ""

# 777d3683e1ad45d8a1e384455b9a2615
#: ../../../../1.8/docs/topics/install.txt:274
msgid ""
"This will make Django's code importable, and will also make the ``django-"
"admin`` utility command available. In other words, you're all set!"
msgstr ""

# 0c4164966af34e3b86ffd5b89c09f365
#: ../../../../1.8/docs/topics/install.txt:278
msgid ""
"If you don't have pip_ available, see the alternative instructions for "
"`installing the development version without pip`_."
msgstr ""

# 0e461fa36a374611aae93bb658159abf
#: ../../../../1.8/docs/topics/install.txt:283
msgid ""
"Don't run ``sudo python setup.py install``, because you've already carried "
"out the equivalent actions in step 3."
msgstr ""

# 71720f912b4a4224a3476d9b89d5746d
#: ../../../../1.8/docs/topics/install.txt:286
msgid ""
"When you want to update your copy of the Django source code, just run the "
"command ``git pull`` from within the ``django-trunk`` directory. When you do"
" this, Git will automatically download any changes."
msgstr ""

# 8e726b16f3de4c01ad9952fd4db42c21
#: ../../../../1.8/docs/topics/install.txt:295
msgid "Installing the development version without pip"
msgstr ""

# 2d317f1f27c24bc5bcb2ecf74904a7d6
#: ../../../../1.8/docs/topics/install.txt:297
msgid ""
"If you don't have pip_, you can instead manually `modify Python's search "
"path`_."
msgstr ""

# 680a3436cbec46359795a945d8c8be92
#: ../../../../1.8/docs/topics/install.txt:300
msgid ""
"First follow steps 1 and 2 above, so that you have a ``django-trunk`` "
"directory with a checkout of Django's latest code in it. Then add a ``.pth``"
" file containing the full path to the ``django-trunk`` directory to your "
"system's ``site-packages`` directory. For example, on a Unix-like system:"
msgstr ""

# a1ba7484456d49c885bc839f55f7988f
#: ../../../../1.8/docs/topics/install.txt:309
msgid ""
"In the above line, change ``WORKING-DIR/django-trunk`` to match the full "
"path to your new ``django-trunk`` directory, and change ``SITE-PACKAGES-"
"DIR`` to match the location of your system's ``site-packages`` directory."
msgstr ""

# 4f1390096c7e4e3aa2b26710fea470d3
#: ../../../../1.8/docs/topics/install.txt:313
msgid ""
"The location of the ``site-packages`` directory depends on the operating "
"system, and the location in which Python was installed. To find your "
"system's ``site-packages`` location, execute the following:"
msgstr ""

# f6defd8ad9ea47d7a37eb6411ae4571f
#: ../../../../1.8/docs/topics/install.txt:321
msgid ""
"(Note that this should be run from a shell prompt, not a Python interactive "
"prompt.)"
msgstr ""

# cc85ab4f1bc84ef9a5b52f567d553b98
#: ../../../../1.8/docs/topics/install.txt:324
msgid ""
"Some Debian-based Linux distributions have separate ``site-packages`` "
"directories for user-installed packages, such as when installing Django from"
" a downloaded tarball. The command listed above will give you the system's "
"``site-packages``, the user's directory can be found in ``/usr/local/lib/`` "
"instead of ``/usr/lib/``."
msgstr ""

# 71938c2453cc49fd85c4a409dc70b285
#: ../../../../1.8/docs/topics/install.txt:330
msgid ""
"Next you need to make the ``django-admin.py`` utility available in your "
"shell PATH."
msgstr ""

# 914066a4085549318971d98a925b338c
#: ../../../../1.8/docs/topics/install.txt:333
msgid ""
"On Unix-like systems, create a symbolic link to the file ``django-"
"trunk/django/bin/django-admin`` in a directory on your system path, such as "
"``/usr/local/bin``. For example:"
msgstr ""

# 069825d605fb49e1b6b3537d0464db0b
#: ../../../../1.8/docs/topics/install.txt:341
msgid ""
"(In the above line, change WORKING-DIR to match the full path to your new "
"``django-trunk`` directory.)"
msgstr ""

# 7da5a52e77644896871e2635f92e84c4
#: ../../../../1.8/docs/topics/install.txt:344
msgid ""
"This simply lets you type ``django-admin.py`` from within any directory, "
"rather than having to qualify the command with the full path to the file."
msgstr ""

# c6bb4137af9f43548a02347f8c615352
#: ../../../../1.8/docs/topics/install.txt:347
msgid ""
"On Windows systems, the same result can be achieved by copying the file "
"``django-trunk/django/bin/django-admin.py`` to somewhere on your system "
"path, for example ``C:\\Python27\\Scripts``."
msgstr ""

# e6dea50bab654d2681933d7a4d1f810c
#: ../../../../1.8/docs/topics/install.txt:351
msgid ""
"Note that the rest of the documentation assumes this utility is installed as"
" ``django-admin``. You'll have to substitute ``django-admin.py`` if you use "
"this method."
msgstr ""

# d8f934738a1445439191ff7f7cf3e631
#: ../../../../1.8/docs/topics/localflavor.txt:3
msgid "The \"local flavor\" add-ons"
msgstr ""

# 6e11c2a12c5a4399bcec5ef3efc8689d
#: ../../../../1.8/docs/topics/localflavor.txt:5
msgid ""
"Historically, Django has shipped with ``django.contrib.localflavor`` -- "
"assorted pieces of code that are useful for particular countries or "
"cultures. This code is now distributed separately from Django, for easier "
"maintenance and to trim the size of Django's codebase."
msgstr ""

# 75feab4077934460a89e141cb8d7bc74
#: ../../../../1.8/docs/topics/localflavor.txt:10
msgid "See the official documentation for more information:"
msgstr ""

# 06befda4d7d04dd0964ae2610b92c865
#: ../../../../1.8/docs/topics/localflavor.txt:12
msgid "https://django-localflavor.readthedocs.org/"
msgstr ""

# aa1e64e2142a448a87a9ab14b01295a2
#: ../../../../1.8/docs/topics/localflavor.txt:16
msgid ""
"Code is hosted on github at https://github.com/django/django-localflavor."
msgstr ""

# 4966e901027246238aac049763e0456d
#: ../../../../1.8/docs/topics/localflavor.txt:21
msgid "How to migrate"
msgstr ""

# 3d52918ba98146e2a4001b637b0057c6
#: ../../../../1.8/docs/topics/localflavor.txt:23
msgid ""
"If you've used the old ``django.contrib.localflavor`` package or one of the "
"temporary ``django-localflavor-*`` releases, follow these two easy steps to "
"update your code:"
msgstr ""

# 89c04864dd0d4630a1fd4248b4b49935
#: ../../../../1.8/docs/topics/localflavor.txt:27
msgid "Install the third-party ``django-localflavor`` package from PyPI."
msgstr ""

# 54cb7bcd39c34b79b18379ab39937346
#: ../../../../1.8/docs/topics/localflavor.txt:29
msgid "Change your app's import statements to reference the new package."
msgstr ""

# ad925998318b4e7f9571bc710a2af8dc
#: ../../../../1.8/docs/topics/localflavor.txt:31
msgid "For example, change this::"
msgstr ""

# a7d148f6d7454bc98fb58eb79950a236
#: ../../../../1.8/docs/topics/localflavor.txt:35
msgid "...to this::"
msgstr ""

# 5833c8f9ace64793b6f7b50049cc4d5e
#: ../../../../1.8/docs/topics/localflavor.txt:39
msgid ""
"The code in the new package is the same (it was copied directly from "
"Django), so you don't have to worry about backwards compatibility in terms "
"of functionality. Only the imports have changed."
msgstr ""

# ee1cbc8f3ef7400a86f56048e7bd9e87
#: ../../../../1.8/docs/topics/localflavor.txt:46
msgid "Deprecation policy"
msgstr ""

# e55edd7229c34371939231d38b0303c5
#: ../../../../1.8/docs/topics/localflavor.txt:48
msgid ""
"In Django 1.5, importing from ``django.contrib.localflavor`` will result in "
"a ``DeprecationWarning``. This means your code will still work, but you "
"should change it as soon as possible."
msgstr ""

# 045e079fc12c4e4d9b2dc894c28515df
#: ../../../../1.8/docs/topics/localflavor.txt:52
msgid ""
"In Django 1.6, importing from ``django.contrib.localflavor`` will no longer "
"work."
msgstr ""

# 4f40d5b56f1f4d9c99f61d19d59a7ffd
#: ../../../../1.8/docs/topics/logging.txt:3
msgid "Logging"
msgstr ""

# 705ae031c7514a33bfad21a6369161fb
#: ../../../../1.8/docs/topics/logging.txt:9
msgid "A quick logging primer"
msgstr ""

# bda307461ec543fc96c87037a99af0c6
#: ../../../../1.8/docs/topics/logging.txt:11
msgid ""
"Django uses Python's builtin :mod:`logging` module to perform system "
"logging. The usage of this module is discussed in detail in Python's own "
"documentation. However, if you've never used Python's logging framework (or "
"even if you have), here's a quick primer."
msgstr ""

# cc2d6d47a6d5401cb929994b4061def0
#: ../../../../1.8/docs/topics/logging.txt:17
msgid "The cast of players"
msgstr ""

# d36993241c194fae89e64ef6efa571ac
#: ../../../../1.8/docs/topics/logging.txt:19
msgid "A Python logging configuration consists of four parts:"
msgstr ""

# 9bdc5fa296ab474ab18a19feffc03161
#: ../../../../1.8/docs/topics/logging.txt:21
msgid ":ref:`topic-logging-parts-loggers`"
msgstr ""

# 6fd1ef337c8e4e6e9d27efa15d90d30a
#: ../../../../1.8/docs/topics/logging.txt:22
msgid ":ref:`topic-logging-parts-handlers`"
msgstr ""

# f45bbffb6d5d4708ae76e883adeb7b8d
#: ../../../../1.8/docs/topics/logging.txt:23
msgid ":ref:`topic-logging-parts-filters`"
msgstr ""

# 35bd7a0601744e9bb0cea39d7b028cd1
#: ../../../../1.8/docs/topics/logging.txt:24
msgid ":ref:`topic-logging-parts-formatters`"
msgstr ""

# 5f16fb25b9f94122a0facbd1b8932675
# 03367e6844514fbeb9c0facd5f3f92c8
#: ../../../../1.8/docs/topics/logging.txt:29
#: ../../../../1.8/docs/topics/logging.txt:454
msgid "Loggers"
msgstr ""

# c31e035a74e44627beae7edfd4022c77
#: ../../../../1.8/docs/topics/logging.txt:31
msgid ""
"A logger is the entry point into the logging system. Each logger is a named "
"bucket to which messages can be written for processing."
msgstr ""

# 4388f910a71a4722b4120899665a22c2
#: ../../../../1.8/docs/topics/logging.txt:34
msgid ""
"A logger is configured to have a *log level*. This log level describes the "
"severity of the messages that the logger will handle. Python defines the "
"following log levels:"
msgstr ""

# bb3b8d17d5204ac08d5f292b3adb595a
#: ../../../../1.8/docs/topics/logging.txt:38
msgid "``DEBUG``: Low level system information for debugging purposes"
msgstr ""

# bc7282399b4f4b30a76d511a3096eed3
#: ../../../../1.8/docs/topics/logging.txt:40
msgid "``INFO``: General system information"
msgstr ""

# fd93e94f80a84e66af60dcef7707b19e
#: ../../../../1.8/docs/topics/logging.txt:42
msgid "``WARNING``: Information describing a minor problem that has occurred."
msgstr ""

# 60713b500f864e81945cc89f89c0a406
#: ../../../../1.8/docs/topics/logging.txt:45
msgid "``ERROR``: Information describing a major problem that has occurred."
msgstr ""

# 1b6e7367aadc4f3aa3b0ba09a58b760e
#: ../../../../1.8/docs/topics/logging.txt:48
msgid ""
"``CRITICAL``: Information describing a critical problem that has occurred."
msgstr ""

# 3b9363c44b34442788e0f859da6e3f1c
#: ../../../../1.8/docs/topics/logging.txt:51
msgid ""
"Each message that is written to the logger is a *Log Record*. Each log "
"record also has a *log level* indicating the severity of that specific "
"message. A log record can also contain useful metadata that describes the "
"event that is being logged. This can include details such as a stack trace "
"or an error code."
msgstr ""

# 19e6b7cfd53944c3b2d87dcb46e00bc7
#: ../../../../1.8/docs/topics/logging.txt:57
msgid ""
"When a message is given to the logger, the log level of the message is "
"compared to the log level of the logger. If the log level of the message "
"meets or exceeds the log level of the logger itself, the message will "
"undergo further processing. If it doesn't, the message will be ignored."
msgstr ""

# b7d885d6f159400fa92393bdc233f808
#: ../../../../1.8/docs/topics/logging.txt:63
msgid ""
"Once a logger has determined that a message needs to be processed, it is "
"passed to a *Handler*."
msgstr ""

# dead184e1fd64272a90ecb821d1caf1c
# 48c937197206474a8a64be9a39b56c37
#: ../../../../1.8/docs/topics/logging.txt:69
#: ../../../../1.8/docs/topics/logging.txt:547
msgid "Handlers"
msgstr ""

# 0f6c8dce7f6e4074b98f54a7edd3725a
#: ../../../../1.8/docs/topics/logging.txt:71
msgid ""
"The handler is the engine that determines what happens to each message in a "
"logger. It describes a particular logging behavior, such as writing a "
"message to the screen, to a file, or to a network socket."
msgstr ""

# 500de191d0754d19ab1dd68e24dfb6bd
#: ../../../../1.8/docs/topics/logging.txt:75
msgid ""
"Like loggers, handlers also have a log level. If the log level of a log "
"record doesn't meet or exceed the level of the handler, the handler will "
"ignore the message."
msgstr ""

# 588e54d3a1764200a872566a5524ebf8
#: ../../../../1.8/docs/topics/logging.txt:79
msgid ""
"A logger can have multiple handlers, and each handler can have a different "
"log level. In this way, it is possible to provide different forms of "
"notification depending on the importance of a message. For example, you "
"could install one handler that forwards ``ERROR`` and ``CRITICAL`` messages "
"to a paging service, while a second handler logs all messages (including "
"``ERROR`` and ``CRITICAL`` messages) to a file for later analysis."
msgstr ""

# 5c6c92d222ab494d9e724fa90a66e4d5
# 72941f8c5ca64d1988dc5aeacf071cd0
# 0ce3d66ae41f473a8bfe8895eeab892e
#: ../../../../1.8/docs/topics/logging.txt:90
#: ../../../../1.8/docs/topics/logging.txt:618
#: ../../../../1.8/docs/topics/templates.txt:599
msgid "Filters"
msgstr "Filtros"

# e24205655c4e4de08b076be68c943f44
#: ../../../../1.8/docs/topics/logging.txt:92
msgid ""
"A filter is used to provide additional control over which log records are "
"passed from logger to handler."
msgstr ""

# c8c72c638f794d90b8b946fd0e69926a
#: ../../../../1.8/docs/topics/logging.txt:95
msgid ""
"By default, any log message that meets log level requirements will be "
"handled. However, by installing a filter, you can place additional criteria "
"on the logging process. For example, you could install a filter that only "
"allows ``ERROR`` messages from a particular source to be emitted."
msgstr ""

# ec3ebed08ed04fb49526b29bd47ce532
#: ../../../../1.8/docs/topics/logging.txt:101
msgid ""
"Filters can also be used to modify the logging record prior to being "
"emitted. For example, you could write a filter that downgrades ``ERROR`` log"
" records to ``WARNING`` records if a particular set of criteria are met."
msgstr ""

# d6a1bf5b42644e098564762fb5c6a925
#: ../../../../1.8/docs/topics/logging.txt:106
msgid ""
"Filters can be installed on loggers or on handlers; multiple filters can be "
"used in a chain to perform multiple filtering actions."
msgstr ""

# 84ee25961b96479cada1bf1ce9ca6c65
#: ../../../../1.8/docs/topics/logging.txt:112
msgid "Formatters"
msgstr ""

# 0b0af5438cd24cc6bc786a68a3f145f7
#: ../../../../1.8/docs/topics/logging.txt:114
msgid ""
"Ultimately, a log record needs to be rendered as text. Formatters describe "
"the exact format of that text. A formatter usually consists of a Python "
"formatting string containing :ref:`LogRecord attributes <python:logrecord-"
"attributes>`; however, you can also write custom formatters to implement "
"specific formatting behavior."
msgstr ""

# eabecb9dad65469092152dc826d1199a
#: ../../../../1.8/docs/topics/logging.txt:121
msgid "Using logging"
msgstr ""

# 946037c6971448829a20c23ac9583169
#: ../../../../1.8/docs/topics/logging.txt:123
msgid ""
"Once you have configured your loggers, handlers, filters and formatters, you"
" need to place logging calls into your code. Using the logging framework is "
"very simple. Here's an example::"
msgstr ""

# e6297716d8764f3580d44100e64a684e
#: ../../../../1.8/docs/topics/logging.txt:139
msgid ""
"And that's it! Every time the ``bad_mojo`` condition is activated, an error "
"log record will be written."
msgstr ""

# b9de5faa0bdc47c4b5e66a287e511662
#: ../../../../1.8/docs/topics/logging.txt:143
msgid "Naming loggers"
msgstr ""

# 881417e63c2940cbbea0fc8b949f0a62
#: ../../../../1.8/docs/topics/logging.txt:145
msgid ""
"The call to :func:`logging.getLogger()` obtains (creating, if necessary) an "
"instance of a logger. The logger instance is identified by a name. This name"
" is used to identify the logger for configuration purposes."
msgstr ""

# db1361bee1134ee0839dc9237eb7c73c
#: ../../../../1.8/docs/topics/logging.txt:150
msgid ""
"By convention, the logger name is usually ``__name__``, the name of the "
"python module that contains the logger. This allows you to filter and handle"
" logging calls on a per-module basis. However, if you have some other way of"
" organizing your logging messages, you can provide any dot-separated name to"
" identify your logger::"
msgstr ""

# 7e80351117f94482a0440ea6118d60f2
#: ../../../../1.8/docs/topics/logging.txt:159
msgid ""
"The dotted paths of logger names define a hierarchy. The "
"``project.interesting`` logger is considered to be a parent of the "
"``project.interesting.stuff`` logger; the ``project`` logger is a parent of "
"the ``project.interesting`` logger."
msgstr ""

# 2d77195a1f5847f4b09e99561fc8e4cd
#: ../../../../1.8/docs/topics/logging.txt:164
msgid ""
"Why is the hierarchy important? Well, because loggers can be set to "
"*propagate* their logging calls to their parents. In this way, you can "
"define a single set of handlers at the root of a logger tree, and capture "
"all logging calls in the subtree of loggers. A logging handler defined in "
"the ``project`` namespace will catch all logging messages issued on the "
"``project.interesting`` and ``project.interesting.stuff`` loggers."
msgstr ""

# 4b8216fe65a64aa7b2192ccea63b331e
#: ../../../../1.8/docs/topics/logging.txt:172
msgid ""
"This propagation can be controlled on a per-logger basis. If you don't want "
"a particular logger to propagate to its parents, you can turn off this "
"behavior."
msgstr ""

# 08e1af1002c04988b7d95af4ff4dacaf
#: ../../../../1.8/docs/topics/logging.txt:177
msgid "Making logging calls"
msgstr ""

# 697b3e3882344744a42f6faf97f244ab
#: ../../../../1.8/docs/topics/logging.txt:179
msgid ""
"The logger instance contains an entry method for each of the default log "
"levels:"
msgstr ""

# 1b78435b591942e7890e019094da3bfa
#: ../../../../1.8/docs/topics/logging.txt:182
msgid "``logger.debug()``"
msgstr ""

# c41c8aad2a2d434599bc5f4694863ee2
#: ../../../../1.8/docs/topics/logging.txt:183
msgid "``logger.info()``"
msgstr ""

# fc6c745439ea43e88527e7e770a95ce7
#: ../../../../1.8/docs/topics/logging.txt:184
msgid "``logger.warning()``"
msgstr ""

# a219db64900044a5af978b64f8a34456
#: ../../../../1.8/docs/topics/logging.txt:185
msgid "``logger.error()``"
msgstr ""

# 1c5419f820f945f2aa4ee66bd9e00bed
#: ../../../../1.8/docs/topics/logging.txt:186
msgid "``logger.critical()``"
msgstr ""

# d38b4e4724f0413e9fd6506d47897786
#: ../../../../1.8/docs/topics/logging.txt:188
msgid "There are two other logging calls available:"
msgstr ""

# 4019203b1ea9403f8a873c6c5a6b4e2a
#: ../../../../1.8/docs/topics/logging.txt:190
msgid ""
"``logger.log()``: Manually emits a logging message with a specific log "
"level."
msgstr ""

# c51769ef437d48af8643df3d29181032
#: ../../../../1.8/docs/topics/logging.txt:193
msgid ""
"``logger.exception()``: Creates an ``ERROR`` level logging message wrapping "
"the current exception stack frame."
msgstr ""

# 99f7ec89bf6649e39bca3f41f4920813
#: ../../../../1.8/docs/topics/logging.txt:199
msgid "Configuring logging"
msgstr ""

# fc500ea958af4b949d463ad801013162
#: ../../../../1.8/docs/topics/logging.txt:201
msgid ""
"Of course, it isn't enough to just put logging calls into your code. You "
"also need to configure the loggers, handlers, filters and formatters to "
"ensure that logging output is output in a useful way."
msgstr ""

# 6037d00954594c388aced5858fb510a0
#: ../../../../1.8/docs/topics/logging.txt:205
msgid ""
"Python's logging library provides several techniques to configure logging, "
"ranging from a programmatic interface to configuration files. By default, "
"Django uses the `dictConfig format`_."
msgstr ""

# 8c7c615ffdd343f7ba550989bdec23f1
#: ../../../../1.8/docs/topics/logging.txt:209
msgid ""
"In order to configure logging, you use :setting:`LOGGING` to define a "
"dictionary of logging settings. These settings describes the loggers, "
"handlers, filters and formatters that you want in your logging setup, and "
"the log levels and other properties that you want those components to have."
msgstr ""

# 8e0396928ca64ccaa03f1ca76775e3af
#: ../../../../1.8/docs/topics/logging.txt:215
msgid ""
"By default, the :setting:`LOGGING` setting is merged with :ref:`Django's "
"default logging configuration <default-logging-configuration>` using the "
"following scheme."
msgstr ""

# da82ad02cc9b490293be588e8fdb1ef7
#: ../../../../1.8/docs/topics/logging.txt:219
msgid ""
"If the ``disable_existing_loggers`` key in the :setting:`LOGGING` dictConfig"
" is set to ``True`` (which is the default) then all loggers from the default"
" configuration will be disabled. Disabled loggers are not the same as "
"removed; the logger will still exist, but will silently discard anything "
"logged to it, not even propagating entries to a parent logger. Thus you "
"should be very careful using ``'disable_existing_loggers': True``; it's "
"probably not what you want. Instead, you can set "
"``disable_existing_loggers`` to ``False`` and redefine some or all of the "
"default loggers; or you can set :setting:`LOGGING_CONFIG` to ``None`` and "
":ref:`handle logging config yourself <disabling-logging-configuration>`."
msgstr ""

# 117c740ef6ea4a83942b7dd31ede3d7d
#: ../../../../1.8/docs/topics/logging.txt:230
msgid ""
"Logging is configured as part of the general Django ``setup()`` function. "
"Therefore, you can be certain that loggers are always ready for use in your "
"project code."
msgstr ""

# 8b2b3631658246b9a82480da23f35a4d
#: ../../../../1.8/docs/topics/logging.txt:239
msgid ""
"The full documentation for `dictConfig format`_ is the best source of "
"information about logging configuration dictionaries. However, to give you a"
" taste of what is possible, here are several examples."
msgstr ""

# 281d62c0e077442881dec8aa0f61cc2e
#: ../../../../1.8/docs/topics/logging.txt:243
msgid ""
"First, here's a simple configuration which writes all request logging from "
"the :ref:`django-request-logger` logger to a local file::"
msgstr ""

# 18460e2e0534485a85cb6cadc06ea37d
#: ../../../../1.8/docs/topics/logging.txt:265
msgid ""
"If you use this example, be sure to change the ``'filename'`` path to a "
"location that's writable by the user that's running the Django application."
msgstr ""

# e203b90119974d2f96e5c43c6784cdbf
#: ../../../../1.8/docs/topics/logging.txt:268
msgid ""
"Second, here's an example of how to make the logging system print Django's "
"logging to the console. It overrides the fact that ``django.request`` and "
"``django.security`` don't propagate their log entries by default. It may be "
"useful during local development."
msgstr ""

# cc03c54e8cfd44f7b78a01484c9b6866
#: ../../../../1.8/docs/topics/logging.txt:273
msgid ""
"By default, this config only sends messages of level ``INFO`` or higher to "
"the console. Django does not log many such messages. Set the environment "
"variable ``DJANGO_LOG_LEVEL=DEBUG`` to see all of Django's debug logging "
"which is very verbose as it includes all database queries::"
msgstr ""

# be4d069d2d694f62b50e2ea999cba339
#: ../../../../1.8/docs/topics/logging.txt:296
msgid "Finally, here's an example of a fairly complex logging setup::"
msgstr ""

# dfb3fe2d012a4cc39386bab2c653307a
#: ../../../../1.8/docs/topics/logging.txt:350
msgid "This logging configuration does the following things:"
msgstr ""

# 0e85074dbfe34bbd8a56df242dac7927
#: ../../../../1.8/docs/topics/logging.txt:352
msgid ""
"Identifies the configuration as being in 'dictConfig version 1' format. At "
"present, this is the only dictConfig format version."
msgstr ""

# 28ecc95007744756b832ce88166461b8
#: ../../../../1.8/docs/topics/logging.txt:355
msgid "Defines two formatters:"
msgstr ""

# 8f6d77292ea045f78ec337aa41143f55
#: ../../../../1.8/docs/topics/logging.txt:357
msgid ""
"``simple``, that just outputs the log level name (e.g., ``DEBUG``) and the "
"log message."
msgstr ""

# 6d59a3a1aacf44f58bc76cb70c477a22
#: ../../../../1.8/docs/topics/logging.txt:360
msgid ""
"The ``format`` string is a normal Python formatting string describing the "
"details that are to be output on each logging line. The full list of detail "
"that can be output can be found in the `formatter documentation`_."
msgstr ""

# c7ec17f26e7c45dbbdd5f3f82b2b926e
#: ../../../../1.8/docs/topics/logging.txt:365
msgid ""
"``verbose``, that outputs the log level name, the log message, plus the "
"time, process, thread and module that generate the log message."
msgstr ""

# de215ef94e3949c680789c6e439d5a04
#: ../../../../1.8/docs/topics/logging.txt:369
msgid ""
"Defines one filter -- ``project.logging.SpecialFilter``, using the alias "
"``special``. If this filter required additional arguments at time of "
"construction, they can be provided as additional keys in the filter "
"configuration dictionary. In this case, the argument ``foo`` will be given a"
" value of ``bar`` when instantiating the ``SpecialFilter``."
msgstr ""

# 9e6c9b7badb84a0fac5f8d832d84e252
#: ../../../../1.8/docs/topics/logging.txt:376
msgid "Defines three handlers:"
msgstr ""

# 72d1f907453c4ab7a1198f3a217b3897
#: ../../../../1.8/docs/topics/logging.txt:378
msgid ""
"``null``, a NullHandler, which will pass any ``DEBUG`` (or higher) message "
"to ``/dev/null``."
msgstr ""

# 5bb440109e3b44d8ba2a2fe5e684abb9
#: ../../../../1.8/docs/topics/logging.txt:381
msgid ""
"``console``, a StreamHandler, which will print any ``DEBUG`` (or higher) "
"message to stderr. This handler uses the ``simple`` output format."
msgstr ""

# 5c2348e6fa7e431ea2d8fa2c393655e9
#: ../../../../1.8/docs/topics/logging.txt:385
msgid ""
"``mail_admins``, an AdminEmailHandler, which will email any ``ERROR`` (or "
"higher) message to the site admins. This handler uses the ``special`` "
"filter."
msgstr ""

# 3293ac70eca740438837e957f8237d5b
#: ../../../../1.8/docs/topics/logging.txt:389
msgid "Configures three loggers:"
msgstr ""

# 64185dc47fee445b809adf3e7f9d2d89
#: ../../../../1.8/docs/topics/logging.txt:391
msgid ""
"``django``, which passes all messages at ``INFO`` or higher to the ``null`` "
"handler."
msgstr ""

# 140132ca0fbe41609de8ab32e5861364
#: ../../../../1.8/docs/topics/logging.txt:394
msgid ""
"``django.request``, which passes all ``ERROR`` messages to the "
"``mail_admins`` handler. In addition, this logger is marked to *not* "
"propagate messages. This means that log messages written to "
"``django.request`` will not be handled by the ``django`` logger."
msgstr ""

# 1343ac29933749dbbd0e79bc39927cf2
#: ../../../../1.8/docs/topics/logging.txt:400
msgid ""
"``myproject.custom``, which passes all messages at ``INFO`` or higher that "
"also pass the ``special`` filter to two handlers -- the ``console``, and "
"``mail_admins``. This means that all ``INFO`` level messages (or higher) "
"will be printed to the console; ``ERROR`` and ``CRITICAL`` messages will "
"also be output via email."
msgstr ""

# da0fe65ef19f46ac84be24b3205e570b
#: ../../../../1.8/docs/topics/logging.txt:410
msgid "Custom logging configuration"
msgstr ""

# 415d360cb49a474ea97ba0b55964a604
#: ../../../../1.8/docs/topics/logging.txt:412
msgid ""
"If you don't want to use Python's dictConfig format to configure your "
"logger, you can specify your own configuration scheme."
msgstr ""

# 20d4c130f74046009299cc0e6be355a5
#: ../../../../1.8/docs/topics/logging.txt:415
msgid ""
"The :setting:`LOGGING_CONFIG` setting defines the callable that will be used"
" to configure Django's loggers. By default, it points at Python's "
":func:`logging.config.dictConfig()` function. However, if you want to use a "
"different configuration process, you can use any other callable that takes a"
" single argument. The contents of :setting:`LOGGING` will be provided as the"
" value of that argument when logging is configured."
msgstr ""

# 12ceddc09d4e4a709b1ef2f35ea79c51
#: ../../../../1.8/docs/topics/logging.txt:425
msgid "Disabling logging configuration"
msgstr ""

# 46248b7343e44090836ddd2fd53c7b6c
#: ../../../../1.8/docs/topics/logging.txt:427
msgid ""
"If you don't want to configure logging at all (or you want to manually "
"configure logging using your own approach), you can set "
":setting:`LOGGING_CONFIG` to ``None``. This will disable the configuration "
"process for :ref:`Django's default logging <default-logging-configuration>`."
" Here's an example that disables Django's logging configuration and then "
"manually configures logging:"
msgstr ""

# 83655ef1c50d4672be5b60521167d104
#: ../../../../1.8/docs/topics/logging.txt:442
msgid ""
"Setting :setting:`LOGGING_CONFIG` to ``None`` only means that the automatic "
"configuration process is disabled, not logging itself. If you disable the "
"configuration process, Django will still make logging calls, falling back to"
" whatever default logging behavior is defined."
msgstr ""

# d5cb993b0eac47c4a4e5875ea1875d56
#: ../../../../1.8/docs/topics/logging.txt:448
msgid "Django's logging extensions"
msgstr ""

# 3a110a87b6aa488c9ec401a02dccaa6e
#: ../../../../1.8/docs/topics/logging.txt:450
msgid ""
"Django provides a number of utilities to handle the unique requirements of "
"logging in Web server environment."
msgstr ""

# f0a6cd7701ca4cc7ae57279bcbb98456
#: ../../../../1.8/docs/topics/logging.txt:456
msgid "Django provides several built-in loggers."
msgstr ""

# d1210695c33e4815bacb3e477a37166c
#: ../../../../1.8/docs/topics/logging.txt:459
msgid "``django``"
msgstr ""

# 740affe626df4419b8559730dbae1e23
#: ../../../../1.8/docs/topics/logging.txt:461
msgid ""
"``django`` is the catch-all logger. No messages are posted directly to this "
"logger."
msgstr ""

# ca47215797394668ae2bbf06356063aa
#: ../../../../1.8/docs/topics/logging.txt:467
msgid "``django.request``"
msgstr ""

# 9142c56a829f4c4ba513584357986ec5
#: ../../../../1.8/docs/topics/logging.txt:469
msgid ""
"Log messages related to the handling of requests. 5XX responses are raised "
"as ``ERROR`` messages; 4XX responses are raised as ``WARNING`` messages."
msgstr ""

# dc00f20281674a0aab037462bef98736
# a667386c6a1f4edd90112c649850d9dd
#: ../../../../1.8/docs/topics/logging.txt:473
#: ../../../../1.8/docs/topics/logging.txt:490
msgid "Messages to this logger have the following extra context:"
msgstr ""

# d54413df275041d59a93fb2d68ab1c93
#: ../../../../1.8/docs/topics/logging.txt:475
msgid "``status_code``: The HTTP response code associated with the request."
msgstr ""

# df006d58bed64e3f83c5885f9737cf54
#: ../../../../1.8/docs/topics/logging.txt:478
msgid "``request``: The request object that generated the logging message."
msgstr ""

# f0d56130ebbe40548dc1478ce9d144b7
#: ../../../../1.8/docs/topics/logging.txt:484
msgid "``django.db.backends``"
msgstr ""

# 8b2de41b88ae4950a5278863679c4035
#: ../../../../1.8/docs/topics/logging.txt:486
msgid ""
"Messages relating to the interaction of code with the database. For example,"
" every application-level SQL statement executed by a request is logged at "
"the ``DEBUG`` level to this logger."
msgstr ""

# 05082c43a3034e84bce58eee017a6b6b
#: ../../../../1.8/docs/topics/logging.txt:492
msgid "``duration``: The time taken to execute the SQL statement."
msgstr ""

# 9cb9731e0787414396831aba33b0c613
#: ../../../../1.8/docs/topics/logging.txt:493
msgid "``sql``: The SQL statement that was executed."
msgstr ""

# af9ab4c4746d4df9a5ccb067271d59e7
#: ../../../../1.8/docs/topics/logging.txt:494
msgid "``params``: The parameters that were used in the SQL call."
msgstr ""

# 63fd4dbcfe04494e8c43ab0dfab068e5
#: ../../../../1.8/docs/topics/logging.txt:496
msgid ""
"For performance reasons, SQL logging is only enabled when ``settings.DEBUG``"
" is set to ``True``, regardless of the logging level or handlers that are "
"installed."
msgstr ""

# 3c95ce4e642146579068b8afe4140280
#: ../../../../1.8/docs/topics/logging.txt:500
msgid ""
"This logging does not include framework-level initialization (e.g. ``SET "
"TIMEZONE``) or transaction management queries (e.g. ``BEGIN``, ``COMMIT``, "
"and ``ROLLBACK``). Turn on query logging in your database if you wish to "
"view all database queries."
msgstr ""

# 1e139a24ca6544ea8dabbdfee4eed259
#: ../../../../1.8/docs/topics/logging.txt:506
msgid "``django.security.*``"
msgstr ""

# 227f7753e9aa4130b91c1232a229a62b
#: ../../../../1.8/docs/topics/logging.txt:508
msgid ""
"The security loggers will receive messages on any occurrence of "
":exc:`~django.core.exceptions.SuspiciousOperation`. There is a sub-logger "
"for each sub-type of SuspiciousOperation. The level of the log event depends"
" on where the exception is handled.  Most occurrences are logged as a "
"warning, while any ``SuspiciousOperation`` that reaches the WSGI handler "
"will be logged as an error. For example, when an HTTP ``Host`` header is "
"included in a request from a client that does not match "
":setting:`ALLOWED_HOSTS`, Django will return a 400 response, and an error "
"message will be logged to the ``django.security.DisallowedHost`` logger."
msgstr ""

# b2c469e809cd46bc830e9b767b1c7b2d
#: ../../../../1.8/docs/topics/logging.txt:518
msgid ""
"Only the parent ``django.security`` logger is configured by default, and all"
" child loggers will propagate to the parent logger. The ``django.security`` "
"logger is configured the same as the ``django.request`` logger, and any "
"error events will be mailed to admins. Requests resulting in a 400 response "
"due to a ``SuspiciousOperation`` will not be logged to the "
"``django.request`` logger, but only to the ``django.security`` logger."
msgstr ""

# e81e55a889354ab8a78d9622a8b78122
#: ../../../../1.8/docs/topics/logging.txt:525
msgid ""
"To silence a particular type of SuspiciousOperation, you can override that "
"specific logger following this example:"
msgstr ""

# 40bae2f20f7d44cf9edc230c6fc0ccf3
#: ../../../../1.8/docs/topics/logging.txt:538
msgid "``django.db.backends.schema``"
msgstr ""

# 7dd7b623a0ed4090843459c2a88dc753
#: ../../../../1.8/docs/topics/logging.txt:542
msgid ""
"Logs the SQL queries that are executed during schema changes to the database"
" by the :doc:`migrations framework </topics/migrations>`. Note that it won't"
" log the queries executed by "
":class:`~django.db.migrations.operations.RunPython`."
msgstr ""

# ff228f4fc6724730b1c9924e9bff84c5
#: ../../../../1.8/docs/topics/logging.txt:549
msgid ""
"Django provides one log handler in addition to those provided by the Python "
"logging module."
msgstr ""

# a5ccf4ccac194c5eaa4650be4c13e060
#: ../../../../1.8/docs/topics/logging.txt:554
msgid ""
"This handler sends an email to the site admins for each log message it "
"receives."
msgstr ""

# 07b4e934943445048aa6958f2c657d4e
#: ../../../../1.8/docs/topics/logging.txt:557
msgid ""
"If the log record contains a ``request`` attribute, the full details of the "
"request will be included in the email."
msgstr ""

# fe87b314473349b2ab5c6ff2c96355c3
#: ../../../../1.8/docs/topics/logging.txt:560
msgid ""
"If the log record contains stack trace information, that stack trace will be"
" included in the email."
msgstr ""

# d9f609c91c124d2489c0b61339c8e60b
#: ../../../../1.8/docs/topics/logging.txt:563
msgid ""
"The ``include_html`` argument of ``AdminEmailHandler`` is used to control "
"whether the traceback email includes an HTML attachment containing the full "
"content of the debug Web page that would have been produced if "
":setting:`DEBUG` were ``True``. To set this value in your configuration, "
"include it in the handler definition for "
"``django.utils.log.AdminEmailHandler``, like this:"
msgstr ""

# 207dbdef8e3f4214918c52394e402751
#: ../../../../1.8/docs/topics/logging.txt:580
msgid ""
"Note that this HTML version of the email contains a full traceback, with "
"names and values of local variables at each level of the stack, plus the "
"values of your Django settings. This information is potentially very "
"sensitive, and you may not want to send it over email. Consider using "
"something such as `Sentry`_ to get the best of both worlds -- the rich "
"information of full tracebacks plus the security of *not* sending the "
"information over email. You may also explicitly designate certain sensitive "
"information to be filtered out of error reports -- learn more on "
":ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

# 157397eb095c45f7a3176e7c7a87c267
#: ../../../../1.8/docs/topics/logging.txt:590
msgid ""
"By setting the ``email_backend`` argument of ``AdminEmailHandler``, the "
":ref:`email backend <topic-email-backends>` that is being used by the "
"handler can be overridden, like this:"
msgstr ""

# 64133a1019634b77b88408ee0accc980
#: ../../../../1.8/docs/topics/logging.txt:604
msgid ""
"By default, an instance of the email backend specified in "
":setting:`EMAIL_BACKEND` will be used."
msgstr ""

# 0483cfdf81bc434b9cb55bb6ab79d979
#: ../../../../1.8/docs/topics/logging.txt:611
msgid ""
"Sends emails to admin users. To customize this behavior, you can subclass "
"the :class:`~django.utils.log.AdminEmailHandler` class and override this "
"method."
msgstr ""

# a937f52debd74fe3a4cce12275d07a9a
#: ../../../../1.8/docs/topics/logging.txt:620
msgid ""
"Django provides two log filters in addition to those provided by the Python "
"logging module."
msgstr ""

# 78041b22b1394932be50ba78f00aec62
#: ../../../../1.8/docs/topics/logging.txt:625
msgid ""
"This filter accepts a callback function (which should accept a single "
"argument, the record to be logged), and calls it for each record that passes"
" through the filter. Handling of that record will not proceed if the "
"callback returns False."
msgstr ""

# b03e7232a3a84eb39c9ef6efde0a9ba2
#: ../../../../1.8/docs/topics/logging.txt:630
msgid ""
"For instance, to filter out :exc:`~django.http.UnreadablePostError` (raised "
"when a user cancels an upload) from the admin emails, you would create a "
"filter function::"
msgstr ""

# 769f533276984a41959f479808355e39
#: ../../../../1.8/docs/topics/logging.txt:643
msgid "and then add it to your logging config:"
msgstr ""

# 26e6e4a8c38e40d8a2bf002ed700f813
#: ../../../../1.8/docs/topics/logging.txt:663
msgid "This filter will only pass on records when settings.DEBUG is False."
msgstr ""

# c6606f6571474548a619b017f798684d
#: ../../../../1.8/docs/topics/logging.txt:665
msgid ""
"This filter is used as follows in the default :setting:`LOGGING` "
"configuration to ensure that the :class:`AdminEmailHandler` only sends error"
" emails to admins when :setting:`DEBUG` is ``False``:"
msgstr ""

# 969ffd1f0b4b4f4383f2cbfd4e9eb8e8
#: ../../../../1.8/docs/topics/logging.txt:686
msgid ""
"This filter is similar to :class:`RequireDebugFalse`, except that records "
"are passed only when :setting:`DEBUG` is ``True``."
msgstr ""

# 6f7664f2b790467c82107b067189d20e
#: ../../../../1.8/docs/topics/logging.txt:692
msgid "Django's default logging configuration"
msgstr ""

# 3ca68b775f034e03957228279fdf6a86
#: ../../../../1.8/docs/topics/logging.txt:694
msgid "By default, Django configures the following logging:"
msgstr ""

# de5b452418c24d0bbe64287498ef2362
#: ../../../../1.8/docs/topics/logging.txt:696
msgid "When :setting:`DEBUG` is ``True``:"
msgstr ""

# 67a874e5116e44999b11eb36ae65a1f4
#: ../../../../1.8/docs/topics/logging.txt:698
msgid ""
"The ``django`` catch-all logger sends all messages at the ``INFO`` level or "
"higher to the console. Django doesn't make any such logging calls at this "
"time (all logging is at the ``DEBUG`` level or handled by the "
"``django.request`` and ``django.security`` loggers)."
msgstr ""

# 73d9f05031324da196dbae2d00c20b50
#: ../../../../1.8/docs/topics/logging.txt:703
msgid ""
"The ``py.warnings`` logger, which handles messages from ``warnings.warn()``,"
" sends messages to the console."
msgstr ""

# 8d7ff0750914427faadb6e37d3693bef
#: ../../../../1.8/docs/topics/logging.txt:706
msgid "When :setting:`DEBUG` is ``False``:"
msgstr ""

# 87a2d303842444059a946db662010571
#: ../../../../1.8/docs/topics/logging.txt:708
msgid ""
"The ``django.request`` and ``django.security`` loggers send messages with "
"``ERROR`` or ``CRITICAL`` level to :class:`AdminEmailHandler`. These loggers"
" ignore anything at the ``WARNING`` level or below and log entries aren't "
"propagated to other loggers (they won't reach the ``django`` catch-all "
"logger, even when ``DEBUG`` is ``True``)."
msgstr ""

# 8d056dbb3a484a3cbd668861acab2f5c
#: ../../../../1.8/docs/topics/logging.txt:714
msgid ""
"See also :ref:`Configuring logging <configuring-logging>` to learn how you "
"can complement or replace this default logging configuration."
msgstr ""

# d86a89bfc3594366a775bfad81078f15
#: ../../../../1.8/docs/topics/migrations.txt:3
msgid "Migrations"
msgstr ""

# cefab19c0905489caca896f18ce01b29
#: ../../../../1.8/docs/topics/migrations.txt:10
msgid ""
"Migrations are Django's way of propagating changes you make to your models "
"(adding a field, deleting a model, etc.) into your database schema. They're "
"designed to be mostly automatic, but you'll need to know when to make "
"migrations, when to run them, and the common problems you might run into."
msgstr ""

# 4b4a7b02357d492e946b5079ac478270
#: ../../../../1.8/docs/topics/migrations.txt:16
msgid "A Brief History"
msgstr ""

# 04c81ec857e24007b05b0767b32b775e
#: ../../../../1.8/docs/topics/migrations.txt:18
msgid ""
"Prior to version 1.7, Django only supported adding new models to the "
"database; it was not possible to alter or remove existing models via the "
"``syncdb`` command (the predecessor to :djadmin:`migrate`)."
msgstr ""

# 16eb38151fd840a19724a898b59d5476
#: ../../../../1.8/docs/topics/migrations.txt:22
msgid ""
"Third-party tools, most notably `South <http://south.aeracode.org>`_, "
"provided support for these additional types of change, but it was considered"
" important enough that support was brought into core Django."
msgstr ""

# 51d89742d9544ae3b052db4d19d175b6
#: ../../../../1.8/docs/topics/migrations.txt:27
msgid "The Commands"
msgstr ""

# 6a2a98a589c54660ab39a597cbbe2b87
#: ../../../../1.8/docs/topics/migrations.txt:29
msgid ""
"There are several commands which you will use to interact with migrations "
"and Django's handling of database schema:"
msgstr ""

# ec3721c4ac6f4942870e2ad141220dba
#: ../../../../1.8/docs/topics/migrations.txt:32
msgid ""
":djadmin:`migrate`, which is responsible for applying migrations, as well as"
" unapplying and listing their status."
msgstr ""

# 489ad20f06084ac2bc8202c3d7bebe1f
#: ../../../../1.8/docs/topics/migrations.txt:35
msgid ""
":djadmin:`makemigrations`, which is responsible for creating new migrations "
"based on the changes you have made to your models."
msgstr ""

# c957f3a97d7b4cbe897d0dbb17663324
#: ../../../../1.8/docs/topics/migrations.txt:38
msgid ""
":djadmin:`sqlmigrate`, which displays the SQL statements for a migration."
msgstr ""

# e8984c6205734975b022de4506708af6
#: ../../../../1.8/docs/topics/migrations.txt:40
msgid ""
"It's worth noting that migrations are created and run on a per-app basis. In"
" particular, it's possible to have apps that *do not use migrations* (these "
"are referred to as \"unmigrated\" apps) - these apps will instead mimic the "
"legacy behavior of just adding new models."
msgstr ""

# a20e66091cc94bcf9f165671313a6d0f
#: ../../../../1.8/docs/topics/migrations.txt:45
msgid ""
"You should think of migrations as a version control system for your database"
" schema. ``makemigrations`` is responsible for packaging up your model "
"changes into individual migration files - analogous to commits - and "
"``migrate`` is responsible for applying those to your database."
msgstr ""

# 318613323bdf43098ea032ce665988fa
#: ../../../../1.8/docs/topics/migrations.txt:50
msgid ""
"The migration files for each app live in a \"migrations\" directory inside "
"of that app, and are designed to be committed to, and distributed as part "
"of, its codebase. You should be making them once on your development machine"
" and then running the same migrations on your colleagues' machines, your "
"staging machines, and eventually your production machines."
msgstr ""

# e84a6ebbab624642ba40380c755edea8
#: ../../../../1.8/docs/topics/migrations.txt:57
msgid ""
"It is possible to override the name of the package which contains the "
"migrations on a per-app basis by modifying the :setting:`MIGRATION_MODULES` "
"setting."
msgstr ""

# 36f1343c03774497a2012a7a195c812a
#: ../../../../1.8/docs/topics/migrations.txt:61
msgid ""
"Migrations will run the same way on the same dataset and produce consistent "
"results, meaning that what you see in development and staging is, under the "
"same circumstances, exactly what will happen in production."
msgstr ""

# ee615637c14947f18d1aec8b2b6e27a5
#: ../../../../1.8/docs/topics/migrations.txt:65
msgid ""
"Django will make migrations for any change to your models or fields - even "
"options that don't affect the database - as the only way it can reconstruct "
"a field correctly is to have all the changes in the history, and you might "
"need those options in some data migrations later on (for example, if you've "
"set custom validators)."
msgstr ""

# da0a9e608d644e63b666cffe4dc6e28b
#: ../../../../1.8/docs/topics/migrations.txt:72
msgid "Backend Support"
msgstr ""

# 9b9fec40bc9743c6abf62e490bf0dce8
#: ../../../../1.8/docs/topics/migrations.txt:74
msgid ""
"Migrations are supported on all backends that Django ships with, as well as "
"any third-party backends if they have programmed in support for schema "
"alteration (done via the :doc:`SchemaEditor </ref/schema-editor>` class)."
msgstr ""

# 4562341e7a1b465cac2f0de32220e30a
#: ../../../../1.8/docs/topics/migrations.txt:78
msgid ""
"However, some databases are more capable than others when it comes to schema"
" migrations; some of the caveats are covered below."
msgstr ""

# 30ba32f3ac9d4439801e9daf36c0dc25
#: ../../../../1.8/docs/topics/migrations.txt:84
msgid ""
"PostgreSQL is the most capable of all the databases here in terms of schema "
"support; the only caveat is that adding columns with default values will "
"cause a full rewrite of the table, for a time proportional to its size."
msgstr ""

# a6c6b476bcab462dbd66ca8aa440742b
#: ../../../../1.8/docs/topics/migrations.txt:88
msgid ""
"For this reason, it's recommended you always create new columns with "
"``null=True``, as this way they will be added immediately."
msgstr ""

# b08cb167c17f477097529d67852a708a
#: ../../../../1.8/docs/topics/migrations.txt:92
msgid "MySQL"
msgstr "MySQL"

# 4d3fe50470e04d8ca1517381dc386c93
#: ../../../../1.8/docs/topics/migrations.txt:94
msgid ""
"MySQL lacks support for transactions around schema alteration operations, "
"meaning that if a migration fails to apply you will have to manually unpick "
"the changes in order to try again (it's impossible to roll back to an "
"earlier point)."
msgstr ""

# 123ae8d6c1f74393922d6f3789e9ef6e
#: ../../../../1.8/docs/topics/migrations.txt:99
msgid ""
"In addition, MySQL will fully rewrite tables for almost every schema "
"operation and generally takes a time proportional to the number of rows in "
"the table to add or remove columns. On slower hardware this can be worse "
"than a minute per million rows - adding a few columns to a table with just a"
" few million rows could lock your site up for over ten minutes."
msgstr ""

# e5d65feeca2e4e01a6ccdbb3bdf11b93
#: ../../../../1.8/docs/topics/migrations.txt:105
msgid ""
"Finally, MySQL has reasonably small limits on name lengths for columns, "
"tables and indexes, as well as a limit on the combined size of all columns "
"an index covers. This means that indexes that are possible on other backends"
" will fail to be created under MySQL."
msgstr ""

# 0eba52612a80437f900027262e1bb00a
#: ../../../../1.8/docs/topics/migrations.txt:111
msgid "SQLite"
msgstr ""

# a318b71cc68d44fdb879ac46b25a31c3
#: ../../../../1.8/docs/topics/migrations.txt:113
msgid ""
"SQLite has very little built-in schema alteration support, and so Django "
"attempts to emulate it by:"
msgstr ""

# 2ec47fd410424114b562af12519ecf83
#: ../../../../1.8/docs/topics/migrations.txt:116
msgid "Creating a new table with the new schema"
msgstr ""

# 1769bff30f4248dd879898c49392a18d
#: ../../../../1.8/docs/topics/migrations.txt:117
msgid "Copying the data across"
msgstr ""

# ea9636603679473fac5ba97df244a41f
#: ../../../../1.8/docs/topics/migrations.txt:118
msgid "Dropping the old table"
msgstr ""

# 2d0fc9ae6ff049cfb32df01f84b12465
#: ../../../../1.8/docs/topics/migrations.txt:119
msgid "Renaming the new table to match the original name"
msgstr ""

# 4c4218044ece429c8dc103caa50bc485
#: ../../../../1.8/docs/topics/migrations.txt:121
msgid ""
"This process generally works well, but it can be slow and occasionally "
"buggy. It is not recommended that you run and migrate SQLite in a production"
" environment unless you are very aware of the risks and its limitations; the"
" support Django ships with is designed to allow developers to use SQLite on "
"their local machines to develop less complex Django projects without the "
"need for a full database."
msgstr ""

# 41ce417fbb064f6f896145266a4dcf23
#: ../../../../1.8/docs/topics/migrations.txt:129
msgid "Workflow"
msgstr ""

# 868dec7dd2674d91bdd1708020a355c1
#: ../../../../1.8/docs/topics/migrations.txt:131
msgid ""
"Working with migrations is simple. Make changes to your models - say, add a "
"field and remove a model - and then run :djadmin:`makemigrations`::"
msgstr ""

# ca776bf96f5e4e08b892fe644086a513
#: ../../../../1.8/docs/topics/migrations.txt:139
msgid ""
"Your models will be scanned and compared to the versions currently contained"
" in your migration files, and then a new set of migrations will be written "
"out. Make sure to read the output to see what ``makemigrations`` thinks you "
"have changed - it's not perfect, and for complex changes it might not be "
"detecting what you expect."
msgstr ""

# c7e53c66d7104131b6c6cab4265099e1
#: ../../../../1.8/docs/topics/migrations.txt:145
msgid ""
"Once you have your new migration files, you should apply them to your "
"database to make sure they work as expected::"
msgstr ""

# 896e07a123f3460e9c965be0427a25fd
#: ../../../../1.8/docs/topics/migrations.txt:160
msgid ""
"The command runs in two stages; first, it synchronizes unmigrated apps "
"(performing the same functionality that ``syncdb`` used to provide), and "
"then it runs any migrations that have not yet been applied."
msgstr ""

# c028742b7ca84638b5e5fc2d31889594
#: ../../../../1.8/docs/topics/migrations.txt:164
msgid ""
"Once the migration is applied, commit the migration and the models change to"
" your version control system as a single commit - that way, when other "
"developers (or your production servers) check out the code, they'll get both"
" the changes to your models and the accompanying migration at the same time."
msgstr ""

# 8a36b1f059604392aefd565489c539c5
#: ../../../../1.8/docs/topics/migrations.txt:172
msgid ""
"If you want to give the migration(s) a meaningful name instead of a "
"generated one, you can use the :djadminopt:`--name` option::"
msgstr ""

# b5bb6f08b07b41a59098481e5e214f4d
#: ../../../../1.8/docs/topics/migrations.txt:178
msgid "Version control"
msgstr ""

# 2016fb5c1bae4d69bd7cb62e84303db3
#: ../../../../1.8/docs/topics/migrations.txt:180
msgid ""
"Because migrations are stored in version control, you'll occasionally come "
"across situations where you and another developer have both committed a "
"migration to the same app at the same time, resulting in two migrations with"
" the same number."
msgstr ""

# 1f316462ee7341a0875c0a6df037dee4
#: ../../../../1.8/docs/topics/migrations.txt:185
msgid ""
"Don't worry - the numbers are just there for developers' reference, Django "
"just cares that each migration has a different name. Migrations specify "
"which other migrations they depend on - including earlier migrations in the "
"same app - in the file, so it's possible to detect when there's two new "
"migrations for the same app that aren't ordered."
msgstr ""

# 4be28a189fa9477da3fce2751dfef209
#: ../../../../1.8/docs/topics/migrations.txt:191
msgid ""
"When this happens, Django will prompt you and give you some options. If it "
"thinks it's safe enough, it will offer to automatically linearize the two "
"migrations for you. If not, you'll have to go in and modify the migrations "
"yourself - don't worry, this isn't difficult, and is explained more in :ref"
":`migration-files` below."
msgstr ""

# 3a78f8197e65494c99841052747a19b4
#: ../../../../1.8/docs/topics/migrations.txt:198
msgid "Dependencies"
msgstr ""

# 25212eb0d30844de8570a6b633ecbf96
#: ../../../../1.8/docs/topics/migrations.txt:200
msgid ""
"While migrations are per-app, the tables and relationships implied by your "
"models are too complex to be created for just one app at a time. When you "
"make a migration that requires something else to run - for example, you add "
"a ``ForeignKey`` in your ``books`` app to your ``authors`` app - the "
"resulting migration will contain a dependency on a migration in ``authors``."
msgstr ""

# 25c7b60d10c54c8caa8f909e8b8615d7
#: ../../../../1.8/docs/topics/migrations.txt:206
msgid ""
"This means that when you run the migrations, the ``authors`` migration runs "
"first and creates the table the ``ForeignKey`` references, and then the "
"migration that makes the ``ForeignKey`` column runs afterwards and creates "
"the constraint. If this didn't happen, the migration would try to create the"
" ``ForeignKey`` column without the table it's referencing existing and your "
"database would throw an error."
msgstr ""

# 55a765873b0644ee95837d0a7b56ef58
#: ../../../../1.8/docs/topics/migrations.txt:213
msgid ""
"This dependency behavior affects most migration operations where you "
"restrict to a single app. Restricting to a single app (either in "
"``makemigrations`` or ``migrate``) is a best-efforts promise, and not a "
"guarantee; any other apps that need to be used to get dependencies correct "
"will be."
msgstr ""

# c009848d4c88446893101ea845e27bbd
#: ../../../../1.8/docs/topics/migrations.txt:221
msgid ""
"Be aware, however, that unmigrated apps cannot depend on migrated apps, by "
"the very nature of not having migrations. This means that it is not "
"generally possible to have an unmigrated app have a ``ForeignKey`` or "
"``ManyToManyField`` to a migrated app; some cases may work, but it will "
"eventually fail."
msgstr ""

# ea52cd2a85c74b6284028be57addd512
#: ../../../../1.8/docs/topics/migrations.txt:228
msgid ""
"Even if things appear to work with unmigrated apps depending on migrated "
"apps, Django may not generate all the necessary foreign key constraints!"
msgstr ""

# 563d7bba7c5f451eb10e7fbe75ba29b4
#: ../../../../1.8/docs/topics/migrations.txt:231
msgid ""
"This is particularly apparent if you use swappable models (e.g. "
"``AUTH_USER_MODEL``), as every app that uses swappable models will need to "
"have migrations if you're unlucky. As time goes on, more and more third-"
"party apps will get migrations, but in the meantime you can either give them"
" migrations yourself (using :setting:`MIGRATION_MODULES` to store those "
"modules outside of the app's own module if you wish), or keep the app with "
"your user model unmigrated."
msgstr ""

# 5660b8e405a04b74b7575292d7c3ee51
#: ../../../../1.8/docs/topics/migrations.txt:239
msgid ""
"In addition, any models that are used in ``RunPython`` operations must have "
"migrations so that their relations to other models are properly created."
msgstr ""

# 2ed22abf88c54006830f3fd382d91304
#: ../../../../1.8/docs/topics/migrations.txt:245
msgid "Migration files"
msgstr ""

# b16cdcc8b3194ec0a1c049ccdb6dcb41
#: ../../../../1.8/docs/topics/migrations.txt:247
msgid ""
"Migrations are stored as an on-disk format, referred to here as \"migration "
"files\". These files are actually just normal Python files with an agreed-"
"upon object layout, written in a declarative style."
msgstr ""

# 791e292c7031485baa05a1e2045cadd4
#: ../../../../1.8/docs/topics/migrations.txt:251
msgid "A basic migration file looks like this::"
msgstr ""

# 90ce9bd4a3dd4024914ab358707831ba
#: ../../../../1.8/docs/topics/migrations.txt:264
msgid ""
"What Django looks for when it loads a migration file (as a Python module) is"
" a subclass of ``django.db.migrations.Migration`` called ``Migration``. It "
"then inspects this object for four attributes, only two of which are used "
"most of the time:"
msgstr ""

# 455b4d13a2324ce982e1ede3ce13f553
#: ../../../../1.8/docs/topics/migrations.txt:269
msgid "``dependencies``, a list of migrations this one depends on."
msgstr ""

# 1b424648d0c54b81ae7fb52d714ed49f
#: ../../../../1.8/docs/topics/migrations.txt:270
msgid ""
"``operations``, a list of ``Operation`` classes that define what this "
"migration does."
msgstr ""

# bf0f9bd70bba44848452db50ba81f2ee
#: ../../../../1.8/docs/topics/migrations.txt:273
msgid ""
"The operations are the key; they are a set of declarative instructions which"
" tell Django what schema changes need to be made. Django scans them and "
"builds an in-memory representation of all of the schema changes to all apps,"
" and uses this to generate the SQL which makes the schema changes."
msgstr ""

# af4d4efa8dfd456c83d3d5a2f9ba9355
#: ../../../../1.8/docs/topics/migrations.txt:278
msgid ""
"That in-memory structure is also used to work out what the differences are "
"between your models and the current state of your migrations; Django runs "
"through all the changes, in order, on an in-memory set of models to come up "
"with the state of your models last time you ran ``makemigrations``. It then "
"uses these models to compare against the ones in your ``models.py`` files to"
" work out what you have changed."
msgstr ""

# 650f38e3180143ea97f96a4078fa2f2f
#: ../../../../1.8/docs/topics/migrations.txt:285
msgid ""
"You should rarely, if ever, need to edit migration files by hand, but it's "
"entirely possible to write them manually if you need to. Some of the more "
"complex operations are not autodetectable and are only available via a hand-"
"written migration, so don't be scared about editing them if you have to."
msgstr ""

# 9698ad09340d4ba48e4ca6a4d037b25a
#: ../../../../1.8/docs/topics/migrations.txt:291
msgid "Custom fields"
msgstr ""

# 4546c6faf74348f1b67cd7485e936836
#: ../../../../1.8/docs/topics/migrations.txt:293
msgid ""
"You can't modify the number of positional arguments in an already migrated "
"custom field without raising a ``TypeError``. The old migration will call "
"the modified ``__init__`` method with the old signature. So if you need a "
"new argument, please create a keyword argument and add something like "
"``assert 'argument_name' in kwargs`` in the constructor."
msgstr ""

# 972647ca23534395b8970642a6c07311
#: ../../../../1.8/docs/topics/migrations.txt:302
msgid "Model managers"
msgstr ""

# 6efd00aaff5444558ece8fe0ad986704
#: ../../../../1.8/docs/topics/migrations.txt:306
msgid ""
"You can optionally serialize managers into migrations and have them "
"available in :class:`~django.db.migrations.operations.RunPython` operations."
" This is done by defining a ``use_in_migrations`` attribute on the manager "
"class::"
msgstr ""

# 8434bb3f16be4bf584c0b26acb916193
#: ../../../../1.8/docs/topics/migrations.txt:316
msgid ""
"If you are using the :meth:`~django.db.models.from_queryset` function to "
"dynamically generate a manager class, you need to inherit from the generated"
" class to make it importable::"
msgstr ""

# 62d02076b5e84c56a71568f8aff40523
#: ../../../../1.8/docs/topics/migrations.txt:326
msgid ""
"Please refer to the notes about :ref:`historical-models` in migrations to "
"see the implications that come along."
msgstr ""

# a2688a72cdd64cbe86409ab68a1bd66c
#: ../../../../1.8/docs/topics/migrations.txt:330
msgid "Adding migrations to apps"
msgstr ""

# 6a027127f56443059a78bb0ce0114c81
#: ../../../../1.8/docs/topics/migrations.txt:332
msgid ""
"Adding migrations to new apps is straightforward - they come preconfigured "
"to accept migrations, and so just run :djadmin:`makemigrations` once you've "
"made some changes."
msgstr ""

# 0f1eb839786a4d358a1a392069ed19c9
#: ../../../../1.8/docs/topics/migrations.txt:336
msgid ""
"If your app already has models and database tables, and doesn't have "
"migrations yet (for example, you created it against a previous Django "
"version), you'll need to convert it to use migrations; this is a simple "
"process::"
msgstr ""

# 30be8c21483b45d9a7ea61dcecd2c353
#: ../../../../1.8/docs/topics/migrations.txt:342
msgid ""
"This will make a new initial migration for your app. Now, run ``python "
"manage.py migrate --fake-initial``, and Django will detect that you have an "
"initial migration *and* that the tables it wants to create already exist, "
"and will mark the migration as already applied. (Without the :djadminopt"
":`--fake-initial` flag, the :djadmin:`migrate` command would error out "
"because the tables it wants to create already exist.)"
msgstr ""

# 1998d0c63edb425480fad1d0a79de4d8
#: ../../../../1.8/docs/topics/migrations.txt:349
msgid "Note that this only works given two things:"
msgstr ""

# e7383bc593e94c1e86461c29d9615c07
#: ../../../../1.8/docs/topics/migrations.txt:351
msgid ""
"You have not changed your models since you made their tables. For migrations"
" to work, you must make the initial migration *first* and then make changes,"
" as Django compares changes against migration files, not the database."
msgstr ""

# 282092d1072c41239003f13c9c7334a3
#: ../../../../1.8/docs/topics/migrations.txt:355
msgid ""
"You have not manually edited your database - Django won't be able to detect "
"that your database doesn't match your models, you'll just get errors when "
"migrations try to modify those tables."
msgstr ""

# 969be2c0211c42d88c12356cfe5a4fcb
#: ../../../../1.8/docs/topics/migrations.txt:368
msgid "Historical models"
msgstr ""

# c3af4ef7fcdb4a79b7d13fceff6e1b24
#: ../../../../1.8/docs/topics/migrations.txt:370
msgid ""
"When you run migrations, Django is working from historical versions of your "
"models stored in the migration files. If you write Python code using the "
":class:`~django.db.migrations.operations.RunPython` operation, or if you "
"have ``allow_migrate`` methods on your database routers, you will be exposed"
" to these versions of your models."
msgstr ""

# e6cfee5a14864a7ea904794749cb5735
#: ../../../../1.8/docs/topics/migrations.txt:376
msgid ""
"Because it's impossible to serialize arbitrary Python code, these historical"
" models will not have any custom methods that you have defined. They will, "
"however, have the same fields, relationships, managers (limited to those "
"with ``use_in_migrations = True``) and ``Meta`` options (also versioned, so "
"they may be different from your current ones)."
msgstr ""

# b18d3e61d0ea427bbfdcb729e1d2a4ce
#: ../../../../1.8/docs/topics/migrations.txt:384
msgid ""
"This means that you will NOT have custom ``save()`` methods called on "
"objects when you access them in migrations, and you will NOT have any custom"
" constructors or instance methods. Plan appropriately!"
msgstr ""

# 45d1ec39fd9e428589cdc93770b56a60
#: ../../../../1.8/docs/topics/migrations.txt:388
msgid ""
"References to functions in field options such as ``upload_to`` and "
"``limit_choices_to`` and model manager declarations with managers having "
"``use_in_migrations = True`` are serialized in migrations, so the functions "
"and classes will need to be kept around for as long as there is a migration "
"referencing them. Any :doc:`custom model fields </howto/custom-model-"
"fields>` will also need to be kept, since these are imported directly by "
"migrations."
msgstr ""

# afbf2afa2b8745c781822ce02f0ef8ab
#: ../../../../1.8/docs/topics/migrations.txt:395
msgid ""
"In addition, the base classes of the model are just stored as pointers, so "
"you must always keep base classes around for as long as there is a migration"
" that contains a reference to them. On the plus side, methods and managers "
"from these base classes inherit normally, so if you absolutely need access "
"to these you can opt to move them into a superclass."
msgstr ""

# e29c78163b2d4faca379ef9f4282ddae
#: ../../../../1.8/docs/topics/migrations.txt:404
msgid "Considerations when removing model fields"
msgstr ""

# 57c4ff5b6f844e9d8236069a29ab48c1
#: ../../../../1.8/docs/topics/migrations.txt:408
msgid ""
"Similar to the \"references to historical functions\" considerations "
"described in the previous section, removing custom model fields from your "
"project or third-party app will cause a problem if they are referenced in "
"old migrations."
msgstr ""

# 4b4f754e0fcb45f98ce633ede8040066
#: ../../../../1.8/docs/topics/migrations.txt:412
msgid ""
"To help with this situation, Django provides some model field attributes to "
"assist with model field deprecation using the :doc:`system checks framework "
"</topics/checks>`."
msgstr ""

# d43adaa58539491b95f830c8423d040f
#: ../../../../1.8/docs/topics/migrations.txt:416
msgid ""
"Add the ``system_check_deprecated_details`` attribute to your model field "
"similar to the following::"
msgstr ""

# cdec371ab97347fc8e3ed0f9b1e9deb7
#: ../../../../1.8/docs/topics/migrations.txt:429
msgid ""
"After a deprecation period of your choosing (two major releases for fields "
"in Django itself), change the ``system_check_deprecated_details`` attribute "
"to ``system_check_removed_details`` and update the dictionary similar to::"
msgstr ""

# b2d263a45e31406196a28ad5696df432
#: ../../../../1.8/docs/topics/migrations.txt:443
msgid ""
"You should keep the field's methods that are required for it to operate in "
"database migrations such as ``__init__()``, ``deconstruct()``, and "
"``get_internal_type()``. Keep this stub field for as long as any migrations "
"which reference the field exist. For example, after squashing migrations and"
" removing the old ones, you should be able to remove the field completely."
msgstr ""

# 770b5d66ff254fb1b7a60dbcd07674c7
#: ../../../../1.8/docs/topics/migrations.txt:452
msgid "Data Migrations"
msgstr ""

# 7c24c953976f404b9ab421af2827b194
#: ../../../../1.8/docs/topics/migrations.txt:454
msgid ""
"As well as changing the database schema, you can also use migrations to "
"change the data in the database itself, in conjunction with the schema if "
"you want."
msgstr ""

# 3f1fbc8030f846b9aea2cdf1d3b22bd9
#: ../../../../1.8/docs/topics/migrations.txt:457
msgid ""
"Migrations that alter data are usually called \"data migrations\"; they're "
"best written as separate migrations, sitting alongside your schema "
"migrations."
msgstr ""

# 47d2cda01d5046ed9b972f0142867e31
#: ../../../../1.8/docs/topics/migrations.txt:460
msgid ""
"Django can't automatically generate data migrations for you, as it does with"
" schema migrations, but it's not very hard to write them. Migration files in"
" Django are made up of :doc:`Operations </ref/migration-operations>`, and "
"the main operation you use for data migrations is "
":class:`~django.db.migrations.operations.RunPython`."
msgstr ""

# 2a4ddbebaa2b4f76a848a73ed1d4a32f
#: ../../../../1.8/docs/topics/migrations.txt:466
msgid ""
"To start, make an empty migration file you can work from (Django will put "
"the file in the right place, suggest a name, and add dependencies for you)::"
msgstr ""

# f2c5614e1a2f4a32949883b520937867
#: ../../../../1.8/docs/topics/migrations.txt:471
msgid "Then, open up the file; it should look something like this::"
msgstr ""

# 1f101324a8c245e2a80ce72395a8c652
#: ../../../../1.8/docs/topics/migrations.txt:485
msgid ""
"Now, all you need to do is create a new function and have "
":class:`~django.db.migrations.operations.RunPython` use it. "
":class:`~django.db.migrations.operations.RunPython` expects a callable as "
"its argument which takes two arguments - the first is an :doc:`app registry "
"</ref/applications/>` that has the historical versions of all your models "
"loaded into it to match where in your history the migration sits, and the "
"second is a :doc:`SchemaEditor </ref/schema-editor>`, which you can use to "
"manually effect database schema changes (but beware, doing this can confuse "
"the migration autodetector!)"
msgstr ""

# 4691edfc2ccc4fa6a8ed062fe8cd5713
#: ../../../../1.8/docs/topics/migrations.txt:495
msgid ""
"Let's write a simple migration that populates our new ``name`` field with "
"the combined values of ``first_name`` and ``last_name`` (we've come to our "
"senses and realized that not everyone has first and last names). All we need"
" to do is use the historical model and iterate over the rows::"
msgstr ""

# 3a9e79717dd947ce84f0742e692a1362
#: ../../../../1.8/docs/topics/migrations.txt:521
msgid ""
"Once that's done, we can just run ``python manage.py migrate`` as normal and"
" the data migration will run in place alongside other migrations."
msgstr ""

# 4c5d828828ed4e7a8c1861b7a8ee9d71
#: ../../../../1.8/docs/topics/migrations.txt:524
msgid ""
"You can pass a second callable to "
":class:`~django.db.migrations.operations.RunPython` to run whatever logic "
"you want executed when migrating backwards. If this callable is omitted, "
"migrating backwards will raise an exception."
msgstr ""

# 498bffd0beab4c9b982571b69d4b628f
#: ../../../../1.8/docs/topics/migrations.txt:530
msgid "Accessing models from other apps"
msgstr ""

# 9c529acbae804ff6bf2363acdfdee80c
#: ../../../../1.8/docs/topics/migrations.txt:532
msgid ""
"When writing a ``RunPython`` function that uses models from apps other than "
"the one in which the migration is located, the migration's ``dependencies`` "
"attribute should include the latest migration of each app that is involved, "
"otherwise you may get an error similar to: ``LookupError: No installed app "
"with label 'myappname'`` when you try to retrieve the model in the "
"``RunPython`` function using ``apps.get_model()``."
msgstr ""

# 2e6b762d7e8c467283bfcf1c9eb3a757
#: ../../../../1.8/docs/topics/migrations.txt:539
msgid ""
"In the following example, we have a migration in ``app1`` which needs to use"
" models in ``app2``. We aren't concerned with the details of ``move_m1`` "
"other than the fact it will need to access models from both apps. Therefore "
"we've added a dependency that specifies the last migration of ``app2``::"
msgstr ""

# 743c73a9a6cd4a5f87287a0895242dff
#: ../../../../1.8/docs/topics/migrations.txt:557
msgid "More advanced migrations"
msgstr ""

# b91afe15d5af4210bc9483c55db3981c
#: ../../../../1.8/docs/topics/migrations.txt:559
msgid ""
"If you're interested in the more advanced migration operations, or want to "
"be able to write your own, see the :doc:`migration operations reference "
"</ref/migration-operations>` and the \"how-to\" on :doc:`writing migrations "
"</howto/writing-migrations>`."
msgstr ""

# 280c36cbd9164b3d97e6ff0d55b2f0ea
#: ../../../../1.8/docs/topics/migrations.txt:567
msgid "Squashing migrations"
msgstr ""

# e833fab983b3433594586182bbcbfa1f
#: ../../../../1.8/docs/topics/migrations.txt:569
msgid ""
"You are encouraged to make migrations freely and not worry about how many "
"you have; the migration code is optimized to deal with hundreds at a time "
"without much slowdown. However, eventually you will want to move back from "
"having several hundred migrations to just a few, and that's where squashing "
"comes in."
msgstr ""

# 9c93f69b0299439492ac2be591be54d5
#: ../../../../1.8/docs/topics/migrations.txt:574
msgid ""
"Squashing is the act of reducing an existing set of many migrations down to "
"one (or sometimes a few) migrations which still represent the same changes."
msgstr ""

# cc9e2368f93c4d5e99b55665c7422326
#: ../../../../1.8/docs/topics/migrations.txt:577
msgid ""
"Django does this by taking all of your existing migrations, extracting their"
" ``Operation``\\s and putting them all in sequence, and then running an "
"optimizer over them to try and reduce the length of the list - for example, "
"it knows that :class:`~django.db.migrations.operations.CreateModel` and "
":class:`~django.db.migrations.operations.DeleteModel` cancel each other out,"
" and it knows that :class:`~django.db.migrations.operations.AddField` can be"
" rolled into :class:`~django.db.migrations.operations.CreateModel`."
msgstr ""

# 27793b6af3ac453c9de1887ceb877ad3
#: ../../../../1.8/docs/topics/migrations.txt:585
msgid ""
"Once the operation sequence has been reduced as much as possible - the "
"amount possible depends on how closely intertwined your models are and if "
"you have any :class:`~django.db.migrations.operations.RunSQL` or "
":class:`~django.db.migrations.operations.RunPython` operations (which can't "
"be optimized through) - Django will then write it back out into a new set of"
" initial migration files."
msgstr ""

# ee19ce93bd2d4c7e9bb9c74b249ff991
#: ../../../../1.8/docs/topics/migrations.txt:592
msgid ""
"These files are marked to say they replace the previously-squashed "
"migrations, so they can coexist with the old migration files, and Django "
"will intelligently switch between them depending where you are in the "
"history. If you're still part-way through the set of migrations that you "
"squashed, it will keep using them until it hits the end and then switch to "
"the squashed history, while new installs will just use the new squashed "
"migration and skip all the old ones."
msgstr ""

# 29adc771627341b4a3cd0379a1aaf517
#: ../../../../1.8/docs/topics/migrations.txt:599
msgid ""
"This enables you to squash and not mess up systems currently in production "
"that aren't fully up-to-date yet. The recommended process is to squash, "
"keeping the old files, commit and release, wait until all systems are "
"upgraded with the new release (or if you're a third-party project, just "
"ensure your users upgrade releases in order without skipping any), and then "
"remove the old files, commit and do a second release."
msgstr ""

# 77bc45baa5bc4c94b8e126bd6124d4bb
#: ../../../../1.8/docs/topics/migrations.txt:606
msgid ""
"The command that backs all this is :djadmin:`squashmigrations` - just pass "
"it the app label and migration name you want to squash up to, and it'll get "
"to work::"
msgstr ""

# 38b639d9bc994c4c8801b8dcebec060f
#: ../../../../1.8/docs/topics/migrations.txt:625
msgid ""
"Note that model interdependencies in Django can get very complex, and "
"squashing may result in migrations that do not run; either mis-optimized (in"
" which case you can try again with ``--no-optimize``, though you should also"
" report an issue), or with a ``CircularDependencyError``, in which case you "
"can manually resolve it."
msgstr ""

# 49e18a674bdf460ca6b213ea968325e9
#: ../../../../1.8/docs/topics/migrations.txt:630
msgid ""
"To manually resolve a ``CircularDependencyError``, break out one of the "
"ForeignKeys in the circular dependency loop into a separate migration, and "
"move the dependency on the other app with it. If you're unsure, see how "
"makemigrations deals with the problem when asked to create brand new "
"migrations from your models. In a future release of Django, squashmigrations"
" will be updated to attempt to resolve these errors itself."
msgstr ""

# 15730cbc4e284902a3705f2668b92abf
#: ../../../../1.8/docs/topics/migrations.txt:637
msgid ""
"Once you've squashed your migration, you should then commit it alongside the"
" migrations it replaces and distribute this change to all running instances "
"of your application, making sure that they run ``migrate`` to store the "
"change in their database."
msgstr ""

# 16983e05d96d4e8385395c827184d2a7
#: ../../../../1.8/docs/topics/migrations.txt:642
msgid ""
"After this has been done, you must then transition the squashed migration to"
" a normal initial migration, by:"
msgstr ""

# 3eea3f6161df4d79bb14ae1e16f4feae
#: ../../../../1.8/docs/topics/migrations.txt:645
msgid "Deleting all the migration files it replaces"
msgstr ""

# a4e0f7c453d34731a2f6f317115e9b50
#: ../../../../1.8/docs/topics/migrations.txt:646
msgid ""
"Removing the ``replaces`` argument in the ``Migration`` class of the "
"squashed migration (this is how Django tells that it is a squashed "
"migration)"
msgstr ""

# 55ee05281d014be78d061d248926bb31
#: ../../../../1.8/docs/topics/migrations.txt:650
msgid ""
"Once you've squashed a migration, you should not then re-squash that "
"squashed migration until you have fully transitioned it to a normal "
"migration."
msgstr ""

# a7e16fc082934a249fcf34f3bd2368fc
#: ../../../../1.8/docs/topics/migrations.txt:657
msgid "Serializing values"
msgstr ""

# 9b7621a034954938bd8b1b6b4c1822f2
#: ../../../../1.8/docs/topics/migrations.txt:659
msgid ""
"Migrations are just Python files containing the old definitions of your "
"models - thus, to write them, Django must take the current state of your "
"models and serialize them out into a file."
msgstr ""

# e08a3a57e1694038a03ed3070404749b
#: ../../../../1.8/docs/topics/migrations.txt:663
msgid ""
"While Django can serialize most things, there are some things that we just "
"can't serialize out into a valid Python representation - there's no Python "
"standard for how a value can be turned back into code (``repr()`` only works"
" for basic values, and doesn't specify import paths)."
msgstr ""

# 4b4c59d5104a48569f08b2a47de76351
#: ../../../../1.8/docs/topics/migrations.txt:668
msgid "Django can serialize the following:"
msgstr ""

# 8aac269d85304adda23148b93bddf6e6
#: ../../../../1.8/docs/topics/migrations.txt:670
msgid ""
"``int``, ``long``, ``float``, ``bool``, ``str``, ``unicode``, ``bytes``, "
"``None``"
msgstr ""

# 26e67aaf6fa84d3981c7be805a84d2d8
#: ../../../../1.8/docs/topics/migrations.txt:671
msgid "``list``, ``set``, ``tuple``, ``dict``"
msgstr ""

# 4b5c0eef1c2a4c1ab3c3f3a2d45ebad3
#: ../../../../1.8/docs/topics/migrations.txt:672
msgid ""
"``datetime.date``, ``datetime.time``, and ``datetime.datetime`` instances "
"(include those that are timezone-aware)"
msgstr ""

# a6481a74379046a3b3caab75239290ae
#: ../../../../1.8/docs/topics/migrations.txt:674
msgid "``decimal.Decimal`` instances"
msgstr ""

# d9658966d29d4cc9929936e607a23532
#: ../../../../1.8/docs/topics/migrations.txt:675
msgid "Any Django field"
msgstr ""

# 2499595dddf14426b8980ea6054d5db6
#: ../../../../1.8/docs/topics/migrations.txt:676
msgid ""
"Any function or method reference (e.g. ``datetime.datetime.today``) (must be"
" in module's top-level scope)"
msgstr ""

# 9101ec0ec2b74e848891bc3cbcc01cd0
#: ../../../../1.8/docs/topics/migrations.txt:677
msgid "Any class reference (must be in module's top-level scope)"
msgstr ""

# 256342a3cbb94cb59444beb5a6b4170d
#: ../../../../1.8/docs/topics/migrations.txt:678
msgid ""
"Anything with a custom ``deconstruct()`` method (:ref:`see below <custom-"
"deconstruct-method>`)"
msgstr ""

# b654d0a158bf48769a4adc9b8c2c3ef5
#: ../../../../1.8/docs/topics/migrations.txt:682
msgid "Support for serializing timezone-aware datetimes was added."
msgstr ""

# 57e7b64cf44d47d590d3235f1c5b23cb
#: ../../../../1.8/docs/topics/migrations.txt:684
msgid "Django can serialize the following on Python 3 only:"
msgstr ""

# ba91ba0b7fc549a590944196f2fce7cc
#: ../../../../1.8/docs/topics/migrations.txt:686
msgid "Unbound methods used from within the class body (see below)"
msgstr ""

# 4daa0ba9127b454ebcafc621674e16c6
#: ../../../../1.8/docs/topics/migrations.txt:688
msgid "Django cannot serialize:"
msgstr ""

# c83cf7c25d634273af399bfd02a72be3
#: ../../../../1.8/docs/topics/migrations.txt:690
msgid "Nested classes"
msgstr ""

# bb6ca46f46604086ac2760182ac71880
#: ../../../../1.8/docs/topics/migrations.txt:691
msgid "Arbitrary class instances (e.g. ``MyClass(4.3, 5.7)``)"
msgstr ""

# 7ca3dbb4949f44d4b0ec3a8d6e670824
#: ../../../../1.8/docs/topics/migrations.txt:692
msgid "Lambdas"
msgstr ""

# fc2a76da990643a6a4634558863406d4
#: ../../../../1.8/docs/topics/migrations.txt:694
msgid ""
"Due to the fact ``__qualname__`` was only introduced in Python 3, Django can"
" only serialize the following pattern (an unbound method used within the "
"class body) on Python 3, and will fail to serialize a reference to it on "
"Python 2::"
msgstr ""

# 2d6ae79055aa4b6cbcf33c2dcb9dde5c
#: ../../../../1.8/docs/topics/migrations.txt:705
msgid ""
"If you are using Python 2, we recommend you move your methods for upload_to "
"and similar arguments that accept callables (e.g. ``default``) to live in "
"the main module body, rather than the class body."
msgstr ""

# 116fb1309ac44a55babe286e8262a27d
#: ../../../../1.8/docs/topics/migrations.txt:712
msgid "Adding a deconstruct() method"
msgstr ""

# 61b63099c7cc48d595eec4a79b4ff757
#: ../../../../1.8/docs/topics/migrations.txt:714
msgid ""
"You can let Django serialize your own custom class instances by giving the "
"class a ``deconstruct()`` method. It takes no arguments, and should return a"
" tuple of three things ``(path, args, kwargs)``:"
msgstr ""

# 6614c21f8a3143b0aa81ec6030be6d7f
#: ../../../../1.8/docs/topics/migrations.txt:718
msgid ""
"``path`` should be the Python path to the class, with the class name "
"included as the last part (for example, ``myapp.custom_things.MyClass``). If"
" your class is not available at the top level of a module it is not "
"serializable."
msgstr ""

# 30a33bdc47d64db59a8129fc9274c2d9
#: ../../../../1.8/docs/topics/migrations.txt:722
msgid ""
"``args`` should be a list of positional arguments to pass to your class' "
"``__init__`` method. Everything in this list should itself be serializable."
msgstr ""

# 018b2642d44c430ebed6ebe703b82b1d
#: ../../../../1.8/docs/topics/migrations.txt:725
msgid ""
"``kwargs`` should be a dict of keyword arguments to pass to your class' "
"``__init__`` method. Every value should itself be serializable."
msgstr ""

# 65db82784fcc4e3bb9d0b7259a938dc6
#: ../../../../1.8/docs/topics/migrations.txt:730
msgid ""
"This return value is different from the ``deconstruct()`` method :ref:`for "
"custom fields <custom-field-deconstruct-method>` which returns a tuple of "
"four items."
msgstr ""

# 076f630906504d0ab5989131cf29044f
#: ../../../../1.8/docs/topics/migrations.txt:734
msgid ""
"Django will write out the value as an instantiation of your class with the "
"given arguments, similar to the way it writes out references to Django "
"fields."
msgstr ""

# 50955f6c77df4678a556983b73651bf0
#: ../../../../1.8/docs/topics/migrations.txt:737
msgid ""
"To prevent a new migration from being created each time "
":djadmin:`makemigrations` is run, you should also add a ``__eq__()`` method "
"to the decorated class. This function will be called by Django's migration "
"framework to detect changes between states."
msgstr ""

# c45367adf5b84bba8176d685e280b17c
#: ../../../../1.8/docs/topics/migrations.txt:742
msgid ""
"As long as all of the arguments to your class' constructor are themselves "
"serializable, you can use the ``@deconstructible`` class decorator from "
"``django.utils.deconstruct`` to add the ``deconstruct()`` method::"
msgstr ""

# 67c8aae8e0c44de7b7eabdc63f589ea2
#: ../../../../1.8/docs/topics/migrations.txt:759
msgid ""
"The decorator adds logic to capture and preserve the arguments on their way "
"into your constructor, and then returns those arguments exactly when "
"deconstruct() is called."
msgstr ""

# 898e580dc3a94d0abf5474aa149a260a
#: ../../../../1.8/docs/topics/migrations.txt:764
msgid "Supporting Python 2 and 3"
msgstr ""

# af7ca197b8054857997922b4e87ce82a
#: ../../../../1.8/docs/topics/migrations.txt:766
msgid ""
"In order to generate migrations that support both Python 2 and 3, all string"
" literals used in your models and fields (e.g. ``verbose_name``, "
"``related_name``, etc.), must be consistently either bytestrings or text "
"(unicode) strings in both Python 2 and 3 (rather than bytes in Python 2 and "
"text in Python 3, the default situation for unmarked string literals.) "
"Otherwise running :djadmin:`makemigrations` under Python 3 will generate "
"spurious new migrations to convert all these string attributes to text."
msgstr ""

# 8d9481906bd84712a608da17829f6c07
#: ../../../../1.8/docs/topics/migrations.txt:774
msgid ""
"The easiest way to achieve this is to follow the advice in Django's "
":doc:`Python 3 porting guide </topics/python3>` and make sure that all your "
"modules begin with ``from __future__ import unicode_literals``, so that all "
"unmarked string literals are always unicode, regardless of Python version. "
"When you add this to an app with existing migrations generated on Python 2, "
"your next run of :djadmin:`makemigrations` on Python 3 will likely generate "
"many changes as it converts all the bytestring attributes to text strings; "
"this is normal and should only happen once."
msgstr ""

# f7cd049d7101470a80bd64f28dcc2be4
#: ../../../../1.8/docs/topics/migrations.txt:784
msgid "Supporting multiple Django versions"
msgstr ""

# c1806fb9beef46b7b77da84ffb135a0e
#: ../../../../1.8/docs/topics/migrations.txt:786
msgid ""
"If you are the maintainer of a third-party app with models, you may need to "
"ship migrations that support multiple Django versions. In this case, you "
"should always run :djadmin:`makemigrations` **with the lowest Django version"
" you wish to support**."
msgstr ""

# 81089600e5a247b0ad8d8632d0b0380b
#: ../../../../1.8/docs/topics/migrations.txt:791
msgid ""
"The migrations system will maintain backwards-compatibility according to the"
" same policy as the rest of Django, so migration files generated on Django "
"X.Y should run unchanged on Django X.Y+1. The migrations system does not "
"promise forwards-compatibility, however. New features may be added, and "
"migration files generated with newer versions of Django may not work on "
"older versions."
msgstr ""

# 2e65d798b5444275abae72070798ec17
#: ../../../../1.8/docs/topics/migrations.txt:800
msgid "Upgrading from South"
msgstr ""

# 5ad32fa39927492c8d39049cb75018c0
#: ../../../../1.8/docs/topics/migrations.txt:802
msgid ""
"If you already have pre-existing migrations created with `South "
"<http://south.aeracode.org>`_, then the upgrade process to use "
"``django.db.migrations`` is quite simple:"
msgstr ""

# f34a50b82a1840de8ba32ae6a7f4590a
#: ../../../../1.8/docs/topics/migrations.txt:806
msgid "Ensure all installs are fully up-to-date with their migrations."
msgstr ""

# 5ddf7303ec2a401aa6a52d21d8197722
#: ../../../../1.8/docs/topics/migrations.txt:807
msgid "Remove ``'south'`` from :setting:`INSTALLED_APPS`."
msgstr ""

# bcab17a031014e20b6b1865bfed7e84f
#: ../../../../1.8/docs/topics/migrations.txt:808
msgid ""
"Delete all your (numbered) migration files, but not the directory or "
"``__init__.py`` - make sure you remove the ``.pyc`` files too."
msgstr ""

# d1b2557e906e4eb4a13cc25448efffe6
#: ../../../../1.8/docs/topics/migrations.txt:810
msgid ""
"Run ``python manage.py makemigrations``. Django should see the empty "
"migration directories and make new initial migrations in the new format."
msgstr ""

# 4b6e0d66f37f437d8e70dca1c0dcd916
#: ../../../../1.8/docs/topics/migrations.txt:812
msgid ""
"Run ``python manage.py migrate --fake-initial``. Django will see that the "
"tables for the initial migrations already exist and mark them as applied "
"without running them. (Django won't check that the table schema match your "
"models, just that the right table names exist)."
msgstr ""

# 6d3eca187de44c3fbaac3686f113cc7e
#: ../../../../1.8/docs/topics/migrations.txt:817
msgid ""
"That's it! The only complication is if you have a circular dependency loop "
"of foreign keys; in this case, ``makemigrations`` might make more than one "
"initial migration, and you'll need to mark them all as applied using::"
msgstr ""

# c45802abe00147a9aa6be038a2bf6617
#: ../../../../1.8/docs/topics/migrations.txt:825
msgid ""
"The :djadminopt:`--fake-initial` flag was added to :djadmin:`migrate`; "
"previously, initial migrations were always automatically fake-applied if "
"existing tables were detected."
msgstr ""

# 61696b8fb4e5453c9ac90d05135cd2f4
#: ../../../../1.8/docs/topics/migrations.txt:830
msgid "Libraries/Third-party Apps"
msgstr ""

# 2958bd59e5474ad8bb895123ecacc1ca
#: ../../../../1.8/docs/topics/migrations.txt:832
msgid ""
"If you are a library or app maintainer, and wish to support both South "
"migrations (for Django 1.6 and below) and Django migrations (for 1.7 and "
"above) you should keep two parallel migration sets in your app, one in each "
"format."
msgstr ""

# f65a7c1b1b544578bea051955ca3e3b5
#: ../../../../1.8/docs/topics/migrations.txt:836
msgid ""
"To aid in this, South 1.0 will automatically look for South-format "
"migrations in a ``south_migrations`` directory first, before looking in "
"``migrations``, meaning that users' projects will transparently use the "
"correct set as long as you put your South migrations in the "
"``south_migrations`` directory and your Django migrations in the "
"``migrations`` directory."
msgstr ""

# 1d15f69a1ada485babea9fece09f20ea
#: ../../../../1.8/docs/topics/migrations.txt:842
msgid ""
"More information is available in the `South 1.0 release notes "
"<http://south.readthedocs.org/en/latest/releasenotes/1.0.html#library-"
"migration-path>`_."
msgstr ""

# 189611fbfd6c4d4287f7c424df1aeaf4
#: ../../../../1.8/docs/topics/migrations.txt:849
msgid ":doc:`The Migrations Operations Reference </ref/migration-operations>`"
msgstr ""

# 9a353dbd82e04f92bdade5802ab5915b
#: ../../../../1.8/docs/topics/migrations.txt:848
msgid ""
"Covers the schema operations API, special operations, and writing your own "
"operations."
msgstr ""

# 0a893f15c16c4fd39fd76e52cbf46451
#: ../../../../1.8/docs/topics/migrations.txt:852
msgid ":doc:`The Writing Migrations \"how-to\" </howto/writing-migrations>`"
msgstr ""

# 6dcd3b9896774e259cf828bc4827dfb5
#: ../../../../1.8/docs/topics/migrations.txt:852
msgid ""
"Explains how to structure and write database migrations for different "
"scenarios you might encounter."
msgstr ""

# 226eed6f925b4b97907c4eee7f68ee6b
#: ../../../../1.8/docs/topics/pagination.txt:3
msgid "Pagination"
msgstr ""

# a4e20841808d43eb839a6ab1d78e1f75
#: ../../../../1.8/docs/topics/pagination.txt:8
msgid ""
"Django provides a few classes that help you manage paginated data -- that "
"is, data that's split across several pages, with \"Previous/Next\" links. "
"These classes live in :file:`django/core/paginator.py`."
msgstr ""

# fa0262075ca849ec8070523905ba079b
#: ../../../../1.8/docs/topics/pagination.txt:15
msgid ""
"Give :class:`Paginator` a list of objects, plus the number of items you'd "
"like to have on each page, and it gives you methods for accessing the items "
"for each page::"
msgstr ""

# cb094bb9573649f4b43500c64ea23fdf
#: ../../../../1.8/docs/topics/pagination.txt:67
msgid ""
"Note that you can give ``Paginator`` a list/tuple, a Django ``QuerySet``, or"
" any other object with a ``count()`` or ``__len__()`` method. When "
"determining the number of objects contained in the passed object, "
"``Paginator`` will first try calling ``count()``, then fallback to using "
"``len()`` if the passed object has no ``count()`` method. This allows "
"objects such as Django's ``QuerySet`` to use a more efficient ``count()`` "
"method when available."
msgstr ""

# 5f0fdced82c84e1383880f390061f29f
#: ../../../../1.8/docs/topics/pagination.txt:77
msgid "Using ``Paginator`` in a view"
msgstr ""

# fb676469611a4b8e84e780fb76235924
#: ../../../../1.8/docs/topics/pagination.txt:79
msgid ""
"Here's a slightly more complex example using :class:`Paginator` in a view to"
" paginate a queryset. We give both the view and the accompanying template to"
" show how you can display the results. This example assumes you have a "
"``Contacts`` model that has already been imported."
msgstr ""

# 81ad830235364ebebbc987364b54d76f
#: ../../../../1.8/docs/topics/pagination.txt:84
msgid "The view function looks like this::"
msgstr ""

# 27ed0e9a1c274e04845e86e0cd55556a
#: ../../../../1.8/docs/topics/pagination.txt:104
msgid ""
"In the template :file:`list.html`, you'll want to include navigation between"
" pages along with any interesting information from the objects themselves::"
msgstr ""

# e8c3944a622a43f68cce4ceba8f62b46
#: ../../../../1.8/docs/topics/pagination.txt:130
msgid "``Paginator`` objects"
msgstr ""

# f5b311d9a6414bc29e7eaab2fa4b4f4a
#: ../../../../1.8/docs/topics/pagination.txt:132
msgid "The :class:`Paginator` class has this constructor:"
msgstr ""

# 1ab618f63ce3442e927df4dc52414caf
#: ../../../../1.8/docs/topics/pagination.txt:141
msgid "``object_list``"
msgstr ""

# 399e1b2ea4904d66b1f2794f901cad44
#: ../../../../1.8/docs/topics/pagination.txt:140
msgid ""
"A list, tuple, Django ``QuerySet``, or other sliceable object with a "
"``count()`` or ``__len__()`` method."
msgstr ""

# 408a81c75aee48929a835bef0ccc1d80
#: ../../../../1.8/docs/topics/pagination.txt:145
msgid "``per_page``"
msgstr ""

# 8c5fa9b1b805488e998b9e0227e2fe55
#: ../../../../1.8/docs/topics/pagination.txt:144
msgid ""
"The maximum number of items to include on a page, not including orphans (see"
" the ``orphans`` optional argument below)."
msgstr ""

# 2ec00464ef6e4e92962dd3879ba3e26a
#: ../../../../1.8/docs/topics/pagination.txt:158
msgid "``orphans``"
msgstr ""

# 69c84398156e416282fdfeccffa37437
#: ../../../../1.8/docs/topics/pagination.txt:151
msgid ""
"The minimum number of items allowed on the last page, defaults to zero. Use "
"this when you don't want to have a last page with very few items. If the "
"last page would normally have a number of items less than or equal to "
"``orphans``, then those items will be added to the previous page (which "
"becomes the last page) instead of leaving the items on a page by themselves."
" For example, with 23 items, ``per_page=10``, and ``orphans=3``, there will "
"be two pages; the first page with 10 items and the  second (and last) page "
"with 13 items."
msgstr ""

# 3830a0f618cc4b61bf0a9421567b8301
#: ../../../../1.8/docs/topics/pagination.txt:162
msgid "``allow_empty_first_page``"
msgstr ""

# 8008e31831024fb6b3503fa31ea5f526
#: ../../../../1.8/docs/topics/pagination.txt:161
msgid ""
"Whether or not the first page is allowed to be empty.  If ``False`` and "
"``object_list`` is  empty, then an ``EmptyPage`` error will be raised."
msgstr ""

# 71e7950e09814e5a813950c17349f529
# 4dc395a7f5b141e1a2147007c60cf8ce
# b337e016b2304b879111f03cf909be57
#: ../../../../1.8/docs/topics/pagination.txt:165
#: ../../../../1.8/docs/topics/pagination.txt:235
#: ../../../../1.8/docs/topics/testing/advanced.txt:456
msgid "Methods"
msgstr "Métodos"

# b7f16c84d86a442abf78b0dddaf891af
#: ../../../../1.8/docs/topics/pagination.txt:169
msgid ""
"Returns a :class:`Page` object with the given 1-based index. Raises "
":exc:`InvalidPage` if the given page number doesn't exist."
msgstr ""

# e3adac5c324344ceb983bc4b499ef4c9
# a9e8550b8e2b4227be0d53bb431e35cb
# 6b72163017e2434f990f312069a7487f
#: ../../../../1.8/docs/topics/pagination.txt:173
#: ../../../../1.8/docs/topics/pagination.txt:274
#: ../../../../1.8/docs/topics/testing/advanced.txt:415
msgid "Attributes"
msgstr "Atributos"

# a99fc17d62304ec9849fb095169f1ac1
#: ../../../../1.8/docs/topics/pagination.txt:177
msgid "The total number of objects, across all pages."
msgstr ""

# 363009db7e3843839bed675ff3e0555b
#: ../../../../1.8/docs/topics/pagination.txt:181
msgid ""
"When determining the number of objects contained in ``object_list``, "
"``Paginator`` will first try calling ``object_list.count()``. If "
"``object_list`` has no ``count()`` method, then ``Paginator`` will fallback "
"to using ``len(object_list)``. This allows objects, such as Django's "
"``QuerySet``, to use a more efficient ``count()`` method when available."
msgstr ""

# 588ca7857b6344e4afc5f7523149e756
#: ../../../../1.8/docs/topics/pagination.txt:190
msgid "The total number of pages."
msgstr ""

# fedfb5e084a54c679c64c44192a9648a
#: ../../../../1.8/docs/topics/pagination.txt:194
msgid "A 1-based range of page numbers, e.g., ``[1, 2, 3, 4]``."
msgstr ""

# ab55ac437fde41f9aa1b73e7558d3baa
#: ../../../../1.8/docs/topics/pagination.txt:198
msgid "``InvalidPage`` exceptions"
msgstr ""

# 6be8bb3d10b249dd9fa51f1c3ed8d0d5
#: ../../../../1.8/docs/topics/pagination.txt:202
msgid ""
"A base class for exceptions raised when a paginator is passed an invalid "
"page number."
msgstr ""

# 408a45b4c8d74e7c83ddc910955e2054
#: ../../../../1.8/docs/topics/pagination.txt:205
msgid ""
"The :meth:`Paginator.page` method raises an exception if the requested page "
"is invalid (i.e., not an integer) or contains no objects. Generally, it's "
"enough to catch the ``InvalidPage`` exception, but if you'd like more "
"granularity, you can catch either of the following exceptions:"
msgstr ""

# 966ea0a50a3a498889e680502eb1fb0e
#: ../../../../1.8/docs/topics/pagination.txt:212
msgid "Raised when ``page()`` is given a value that isn't an integer."
msgstr ""

# a3b54daba12f45c69a7facd1fd92b14e
#: ../../../../1.8/docs/topics/pagination.txt:216
msgid ""
"Raised when ``page()`` is given a valid value but no objects exist on that "
"page."
msgstr ""

# 310c1dd30fbd49bcafe089a462e000df
#: ../../../../1.8/docs/topics/pagination.txt:219
msgid ""
"Both of the exceptions are subclasses of :exc:`InvalidPage`, so you can "
"handle them both with a simple ``except InvalidPage``."
msgstr ""

# 0b14703fd4714b1da7feb5aa03585e81
#: ../../../../1.8/docs/topics/pagination.txt:224
msgid "``Page`` objects"
msgstr ""

# 37165b2ac2ba422ca2918038f3b6ae7c
#: ../../../../1.8/docs/topics/pagination.txt:226
msgid ""
"You usually won't construct ``Page`` objects by hand -- you'll get them "
"using :meth:`Paginator.page`."
msgstr ""

# 3105d4304a2d47f5a7fe1b1e122513cd
#: ../../../../1.8/docs/topics/pagination.txt:231
msgid ""
"A page acts like a sequence of :attr:`Page.object_list` when using ``len()``"
" or iterating it directly."
msgstr ""

# 7c9033b9fadc4061a0619a96bf8981fb
#: ../../../../1.8/docs/topics/pagination.txt:239
msgid "Returns ``True`` if there's a next page."
msgstr ""

# d14b7c05ab4d4082986edfb9bcdfe6d7
#: ../../../../1.8/docs/topics/pagination.txt:243
msgid "Returns ``True`` if there's a previous page."
msgstr ""

# 44e0c90a6f614dcd8db7578ab3620f03
#: ../../../../1.8/docs/topics/pagination.txt:247
msgid "Returns ``True`` if there's a next *or* previous page."
msgstr ""

# 371ab541c5e84eef99bc453a1be2ef21
#: ../../../../1.8/docs/topics/pagination.txt:251
msgid ""
"Returns the next page number. Raises :exc:`InvalidPage` if next page doesn't"
" exist."
msgstr ""

# 95ace7a848e04a7f8ebeae64e548e545
#: ../../../../1.8/docs/topics/pagination.txt:256
msgid ""
"Returns the previous page number. Raises :exc:`InvalidPage` if previous page"
" doesn't exist."
msgstr ""

# 85441403b807409092bf91bc3f72cf66
#: ../../../../1.8/docs/topics/pagination.txt:261
msgid ""
"Returns the 1-based index of the first object on the page, relative to all "
"of the objects in the paginator's list. For example, when paginating a list "
"of 5 objects with 2 objects per page, the second page's "
":meth:`~Page.start_index` would return ``3``."
msgstr ""

# 1b076ecaea2647e7969dd0045f55f5af
#: ../../../../1.8/docs/topics/pagination.txt:268
msgid ""
"Returns the 1-based index of the last object on the page, relative to all of"
" the objects in the paginator's list. For example, when paginating a list of"
" 5 objects with 2 objects per page, the second page's "
":meth:`~Page.end_index` would return ``4``."
msgstr ""

# a134e84356c0487f8d633977d07a8407
#: ../../../../1.8/docs/topics/pagination.txt:278
msgid "The list of objects on this page."
msgstr ""

# e0eb2fd997ea4bcf880bc64f0d02550d
#: ../../../../1.8/docs/topics/pagination.txt:282
msgid "The 1-based page number for this page."
msgstr ""

# ad0f3145357c4694bb1308cdaabb5178
#: ../../../../1.8/docs/topics/pagination.txt:286
msgid "The associated :class:`Paginator` object."
msgstr ""

# 70c8d847e9be460fb6e57b766378bc8f
#: ../../../../1.8/docs/topics/performance.txt:3
msgid "Performance and optimization"
msgstr "Rendimiento y optimización"

# ba4f99f71cc9480ab3c1a5fc66b5906c
#: ../../../../1.8/docs/topics/performance.txt:5
msgid ""
"This document provides an overview of techniques and tools that can help get"
" your Django code running more efficiently - faster, and using fewer system "
"resources."
msgstr ""

# 1e9afcc609514c5da91bd05d6253da84
#: ../../../../1.8/docs/topics/performance.txt:12
msgid ""
"Generally one's first concern is to write code that *works*, whose logic "
"functions as required to produce the expected output. Sometimes, however, "
"this will not be enough to make the code work as *efficiently* as one would "
"like."
msgstr ""

# 666631aae8f44684ae14ee666b5dd04e
#: ../../../../1.8/docs/topics/performance.txt:16
msgid ""
"In this case, what's needed is something - and in practice, often a "
"collection of things - to improve the code's performance without, or only "
"minimally, affecting its behavior."
msgstr ""

# 60760cb147fa4a0f801db6fc3c587f88
#: ../../../../1.8/docs/topics/performance.txt:21
msgid "General approaches"
msgstr ""

# 3de541a5dba847ba8d4535ff8dd3f2a2
#: ../../../../1.8/docs/topics/performance.txt:24
msgid "What are you optimizing *for*?"
msgstr ""

# f943a42ee3884b66996bde428a10b080
#: ../../../../1.8/docs/topics/performance.txt:26
msgid ""
"It's important to have a clear idea what you mean by 'performance'. There is"
" not just one metric of it."
msgstr ""

# 2c76390c6abd470cbebd185c485f7095
#: ../../../../1.8/docs/topics/performance.txt:29
msgid ""
"Improved speed might be the most obvious aim for a program, but sometimes "
"other performance improvements might be sought, such as lower memory "
"consumption or fewer demands on the database or network."
msgstr ""

# d3e2e76994ce41a2987dee861c826fcf
#: ../../../../1.8/docs/topics/performance.txt:33
msgid ""
"Improvements in one area will often bring about improved performance in "
"another, but not always; sometimes one can even be at the expense of "
"another. For example, an improvement in a program's speed might cause it to "
"use more memory. Even worse, it can be self-defeating - if the speed "
"improvement is so memory-hungry that the system starts to run out of memory,"
" you'll have done more harm than good."
msgstr ""

# 9dd75cceb9fa4600bf2ab18e16ec0c69
#: ../../../../1.8/docs/topics/performance.txt:40
msgid ""
"There are other trade-offs to bear in mind. Your own time is a valuable "
"resource, more precious than CPU time. Some improvements might be too "
"difficult to be worth implementing, or might affect the portability or "
"maintainability of the code. Not all performance improvements are worth the "
"effort."
msgstr ""

# 4711619920554f30bfba97079d982210
#: ../../../../1.8/docs/topics/performance.txt:45
msgid ""
"So, you need to know what performance improvements you are aiming for, and "
"you also need to know that you have a good reason for aiming in that "
"direction - and for that you need:"
msgstr ""

# f2a78f0feee943a3861b948480dab6ca
#: ../../../../1.8/docs/topics/performance.txt:50
msgid "Performance benchmarking"
msgstr ""

# 74b57e3446ca4ba29812df4e341b9f5c
#: ../../../../1.8/docs/topics/performance.txt:52
msgid ""
"It's no good just guessing or assuming where the inefficiencies lie in your "
"code."
msgstr ""

# 76a1016c31b0488fa8c810b2ad5a5a28
#: ../../../../1.8/docs/topics/performance.txt:56
msgid "Django tools"
msgstr ""

# 3c9645b05a834196ac1b9558e9f1b1ee
#: ../../../../1.8/docs/topics/performance.txt:58
msgid ""
"`django-debug-toolbar <https://github.com/django-debug-toolbar/django-debug-"
"toolbar/>`_ is a very handy tool that provides insights into what your code "
"is doing and how much time it spends doing it. In particular it can show you"
" all the SQL queries your page is generating, and how long each one has "
"taken."
msgstr ""

# 9a12eed37b9c4417838ce1236e7ba2b9
#: ../../../../1.8/docs/topics/performance.txt:64
msgid ""
"Third-party panels are also available for the toolbar, that can (for "
"example) report on cache performance and template rendering times."
msgstr ""

# 726c9cf0a8414f759b5dc79df11442df
#: ../../../../1.8/docs/topics/performance.txt:68
msgid "Third-party services"
msgstr ""

# b93a875cf969403ab5b76ab3e0821acf
#: ../../../../1.8/docs/topics/performance.txt:70
msgid ""
"There are a number of free services that will analyze and report on the "
"performance of your site's pages from the perspective of a remote HTTP "
"client, in effect simulating the experience of an actual user."
msgstr ""

# 83399e21474a47849794a273e27c1c80
#: ../../../../1.8/docs/topics/performance.txt:74
msgid ""
"These can't report on the internals of your code, but can provide a useful "
"insight into your site's overall performance, including aspects that can't "
"be adequately measured from within Django environment. Examples include:"
msgstr ""

# 6e305bdd81cf40bc959ef7de8c0fe2f4
#: ../../../../1.8/docs/topics/performance.txt:78
msgid "`Yahoo's Yslow <http://yslow.org/>`_"
msgstr ""

# ec9169cf27184fd79575ec202cf45a62
#: ../../../../1.8/docs/topics/performance.txt:79
msgid "`Google PageSpeed <https://developers.google.com/speed/pagespeed/>`_"
msgstr ""

# ba3961b71816466f9003160fb5f2ab99
#: ../../../../1.8/docs/topics/performance.txt:81
msgid ""
"There are also several paid-for services that perform a similar analysis, "
"including some that are Django-aware and can integrate with your codebase to"
" profile its performance far more comprehensively."
msgstr ""

# ded64430509440839f30e3906b98b50f
#: ../../../../1.8/docs/topics/performance.txt:86
msgid "Get things right from the start"
msgstr ""

# 925739f01cff48eaa7e96e6a2208265c
#: ../../../../1.8/docs/topics/performance.txt:88
msgid ""
"Some work in optimization involves tackling performance shortcomings, but "
"some of the work can simply be built in to what you'd do anyway, as part of "
"the good practices you should adopt even before you start thinking about "
"improving performance."
msgstr ""

# e2da1b66488a4f478ae92f7c9d4ff178
#: ../../../../1.8/docs/topics/performance.txt:93
msgid ""
"In this respect Python is an excellent language to work with, because "
"solutions that look elegant and feel right usually are the best performing "
"ones. As with most skills, learning what \"looks right\" takes practice, but"
" one of the most useful guidelines is:"
msgstr ""

# 95b0666afb524336867bc7b0f7dd4afb
#: ../../../../1.8/docs/topics/performance.txt:99
msgid "Work at the appropriate level"
msgstr ""

# d074cc85b4bf4229af0751ac2d7b4375
#: ../../../../1.8/docs/topics/performance.txt:101
msgid ""
"Django offers many different ways of approaching things, but just because "
"it's possible to do something in a certain way doesn't mean that it's the "
"most appropriate way to do it. For example, you might find that you could "
"calculate the same thing - the number of items in a collection, perhaps - in"
" a ``QuerySet``, in Python, or in a template."
msgstr ""

# 2ecea589d45f40a9a8cfe21ad2c3818d
#: ../../../../1.8/docs/topics/performance.txt:107
msgid ""
"However, it will almost always be faster to do this work at lower rather "
"than higher levels. At higher levels the system has to deal with objects "
"through multiple levels of abstraction and layers of machinery."
msgstr ""

# 55d2cd6769db460dab96850e5e63e260
#: ../../../../1.8/docs/topics/performance.txt:111
msgid ""
"That is, the database can typically do things faster than Python can, which "
"can do them faster than the template language can::"
msgstr ""

# 7d1d0f3cbe41478393adeae992b66f92
#: ../../../../1.8/docs/topics/performance.txt:128
msgid ""
"Generally speaking, the most appropriate level for the job is the lowest-"
"level one that it is comfortable to code for."
msgstr ""

# aa8342e098704b13959e259facc26000
#: ../../../../1.8/docs/topics/performance.txt:133
msgid "The example above is merely illustrative."
msgstr ""

# 2c10e85a661e46b89995abc7cf4ff1ad
#: ../../../../1.8/docs/topics/performance.txt:135
msgid ""
"Firstly, in a real-life case you need to consider what is happening before "
"and after your count to work out what's an optimal way of doing it *in that "
"particular context*. The database optimization documents describes :ref:`a "
"case where counting in the template would be better "
"<overuse_of_count_and_exists>`."
msgstr ""

# 1826a2cf795047a9823bb569788ce347
#: ../../../../1.8/docs/topics/performance.txt:141
msgid ""
"Secondly, there are other options to consider: in a real-life case, ``{{ "
"my_bicycles.count }}``, which invokes the ``QuerySet`` ``count()`` method "
"directly from the template, might be the most appropriate choice."
msgstr ""

# bd17a34406b6418088d7958fc2dd9cd7
#: ../../../../1.8/docs/topics/performance.txt:146
msgid "Caching"
msgstr ""

# e6cea2100fdb46d2aba0395451ee87d0
#: ../../../../1.8/docs/topics/performance.txt:148
msgid ""
"Often it is expensive (that is, resource-hungry and slow) to compute a "
"value, so there can be huge benefit in saving the value to a quickly "
"accessible cache, ready for the next time it's required."
msgstr ""

# c69a5a4bdad94681860ab893350c4cab
#: ../../../../1.8/docs/topics/performance.txt:152
msgid ""
"It's a sufficiently significant and powerful technique that Django includes "
"a comprehensive caching framework, as well as other smaller pieces of "
"caching functionality."
msgstr ""

# 678249faf06e41c29f34f92042896521
#: ../../../../1.8/docs/topics/performance.txt:157
msgid ":doc:`The caching framework </topics/cache>`"
msgstr ""

# 3930046006084aae8815cfb85f0f3c59
#: ../../../../1.8/docs/topics/performance.txt:159
msgid ""
"Django's :doc:`caching framework </topics/cache>` offers very significant "
"opportunities for performance gains, by saving dynamic content so that it "
"doesn't need to be calculated for each request."
msgstr ""

# ef2be6737fc747b48954894621752b39
#: ../../../../1.8/docs/topics/performance.txt:163
msgid ""
"For convenience, Django offers different levels of cache granularity: you "
"can cache the output of specific views, or only the pieces that are "
"difficult to produce, or even an entire site."
msgstr ""

# b3a27c911cf24fd7b27cfbc8c3134a57
#: ../../../../1.8/docs/topics/performance.txt:167
msgid ""
"Implementing caching should not be regarded as an alternative to improving "
"code that's performing poorly because it has been written badly. It's one of"
" the final steps towards producing well-performing code, not a shortcut."
msgstr ""

# d7046a8110444ee58a56569f8fb3520d
#: ../../../../1.8/docs/topics/performance.txt:172
msgid ":class:`~django.utils.functional.cached_property`"
msgstr ""

# 3b2d641f525f404893c8ee27cc709f24
#: ../../../../1.8/docs/topics/performance.txt:174
msgid ""
"It's common to have to call a class instances's method more than once. If "
"that function is expensive, then doing so can be wasteful."
msgstr ""

# 05c2e2f4cb8a47cabedc0b3256a02dd7
#: ../../../../1.8/docs/topics/performance.txt:177
msgid ""
"Using the ``@cached_property`` decorator saves the value returned by a "
"property; the next time the function is called on that instance, it will "
"return the saved value rather than re-computing it. Note that this only "
"works on methods that take ``self`` as their only argument and that it "
"changes the method to a property."
msgstr ""

# 7b1ff16ffacd48ca83c387da70a07537
#: ../../../../1.8/docs/topics/performance.txt:183
msgid ""
"Certain Django components also have their own caching functionality; these "
"are discussed below in the sections related to those components."
msgstr ""

# 854471965bb842c39eced646b949a819
#: ../../../../1.8/docs/topics/performance.txt:187
msgid "Understanding laziness"
msgstr ""

# d288e679a5104b66958e73f59ffafe6e
#: ../../../../1.8/docs/topics/performance.txt:189
msgid ""
"*Laziness* is a strategy complementary to caching. Caching avoids "
"recomputation by saving results; laziness delays computation until it's "
"actually required."
msgstr ""

# 097f92aab02e4c4dafa576910211f117
#: ../../../../1.8/docs/topics/performance.txt:193
msgid ""
"Laziness allows us to refer to things before they are instantiated, or even "
"before it's possible to instantiate them. This has numerous uses."
msgstr ""

# 1eb25798ad2c495a9a87c735b997868a
#: ../../../../1.8/docs/topics/performance.txt:196
msgid ""
"For example, :ref:`lazy translation <lazy-translations>` can be used before "
"the target language is even known, because it doesn't take place until the "
"translated string is actually required, such as in a rendered template."
msgstr ""

# 096f958fe1e44f1ea2d7cd20c00a658a
#: ../../../../1.8/docs/topics/performance.txt:200
msgid ""
"Laziness is also a way to save effort by trying to avoid work in the first "
"place. That is, one aspect of laziness is not doing anything until it has to"
" be done, because it may not turn out to be necessary after all. Laziness "
"can therefore have performance implications, and the more expensive the work"
" concerned, the more there is to gain through laziness."
msgstr ""

# b3b582e2ce114a919a1d98413a8f6823
#: ../../../../1.8/docs/topics/performance.txt:206
msgid ""
"Python provides a number of tools for lazy evaluation, particularly through "
"the :py:term:`generator` and :py:term:`generator expression` constructs. "
"It's worth reading up on laziness in Python to discover opportunities for "
"making use of lazy patterns in your code."
msgstr ""

# 8e055ba22a934fb3a4b8274558aa955b
#: ../../../../1.8/docs/topics/performance.txt:212
msgid "Laziness in Django"
msgstr ""

# cc804940084540c9a933eae64841ad35
#: ../../../../1.8/docs/topics/performance.txt:214
msgid ""
"Django is itself quite lazy. A good example of this can be found in the "
"evaluation of ``QuerySets``. :ref:`QuerySets are lazy <querysets-are-lazy>`."
" Thus a ``QuerySet`` can be created, passed around and combined with other "
"``QuerySets``, without actually incurring any trips to the database to fetch"
" the items it describes. What gets passed around is the ``QuerySet`` object,"
" not the collection of items that - eventually - will be required from the "
"database."
msgstr ""

# 5e0067e3aa634cff96f94a53bf7d0232
#: ../../../../1.8/docs/topics/performance.txt:221
msgid ""
"On the other hand, :ref:`certain operations will force the evaluation of a "
"QuerySet <when-querysets-are-evaluated>`. Avoiding the premature evaluation "
"of a ``QuerySet`` can save making an expensive and unnecessary trip to the "
"database."
msgstr ""

# 6235e1fd14ff4cdc8cbe2ff68492d9c8
#: ../../../../1.8/docs/topics/performance.txt:226
msgid ""
"Django also offers an :meth:`~django.utils.functional.allow_lazy` decorator."
" This allows a function that has been called with a lazy argument to behave "
"lazily itself, only being evaluated when it needs to be. Thus the lazy "
"argument - which could be an expensive one - will not be called upon for "
"evaluation until it's strictly required."
msgstr ""

# a795050f880d423ebfdf6fb1972396a2
#: ../../../../1.8/docs/topics/performance.txt:233
msgid "Databases"
msgstr ""

# 39ad2c8c69c44e9bbf3ff9b81b068577
#: ../../../../1.8/docs/topics/performance.txt:236
msgid ":doc:`Database optimization </topics/db/optimization>`"
msgstr ""

# 1421c32a584a40bba955a9001ab6ebb6
#: ../../../../1.8/docs/topics/performance.txt:238
msgid ""
"Django’s database layer provides various ways to help developers get the "
"best performance from their databases. The :doc:`database optimization "
"documentation </topics/db/optimization>` gathers together links to the "
"relevant documentation and adds various tips that outline the steps to take "
"when attempting to optimize your database usage."
msgstr ""

# c0679b944fe241f9bf74382615d6a293
#: ../../../../1.8/docs/topics/performance.txt:245
msgid "Other database-related tips"
msgstr ""

# 901baa93494f4bc084097c9268dc4543
#: ../../../../1.8/docs/topics/performance.txt:247
msgid ""
"Enabling :ref:`persistent-database-connections` can speed up connections to "
"the database accounts for a significant part of the request processing time."
msgstr ""

# af8f130260b44b89b6faaf19e593a46b
#: ../../../../1.8/docs/topics/performance.txt:250
msgid ""
"This helps a lot on virtualized hosts with limited network performance, for "
"example."
msgstr ""

# e4bcfe87e82749dc99d0037c09b45c8c
#: ../../../../1.8/docs/topics/performance.txt:253
msgid "HTTP performance"
msgstr ""

# cbb9a1d38b894d408ddecaba893ac198
#: ../../../../1.8/docs/topics/performance.txt:258
msgid ""
"Django comes with a few helpful pieces of :doc:`middleware "
"</ref/middleware>` that can help optimize your site's performance. They "
"include:"
msgstr ""

# 4b04257d554c42cb90951733dc58610a
#: ../../../../1.8/docs/topics/performance.txt:262
msgid ":class:`~django.middleware.http.ConditionalGetMiddleware`"
msgstr ""

# a582c8940bf249928cb36fa996688595
#: ../../../../1.8/docs/topics/performance.txt:264
msgid ""
"Adds support for modern browsers to conditionally GET responses based on the"
" ``ETag`` and ``Last-Modified`` headers."
msgstr ""

# 8d0c7a5a67c2437aba594e6f24fd485f
#: ../../../../1.8/docs/topics/performance.txt:268
msgid ":class:`~django.middleware.gzip.GZipMiddleware`"
msgstr ""

# 62a89317384d424d9f15caf7a75ff371
#: ../../../../1.8/docs/topics/performance.txt:270
msgid ""
"Compresses responses for all modern browsers, saving bandwidth and transfer "
"time. Note that GZipMiddleware is currently considered a security risk, and "
"is vulnerable to attacks that nullify the protection provided by TLS/SSL. "
"See the warning in :class:`~django.middleware.gzip.GZipMiddleware` for more "
"information."
msgstr ""

# f95510789ee545febe0c0d16cc67abda
#: ../../../../1.8/docs/topics/performance.txt:276
msgid "Sessions"
msgstr "Sesiones"

# c7815cd2c07749b0ab7de1ce16a02b2d
#: ../../../../1.8/docs/topics/performance.txt:279
msgid ":ref:`Using cached sessions <cached-sessions-backend>`"
msgstr ""

# dd767ede869e4bd493c410d88256bf40
#: ../../../../1.8/docs/topics/performance.txt:281
msgid ""
":ref:`Using cached sessions <cached-sessions-backend>` may be a way to "
"increase performance by eliminating the need to load session data from a "
"slower storage source like the database and instead storing frequently used "
"session data in memory."
msgstr ""

# 0d2ee344cd944d22907bcc343b4b39a5
#: ../../../../1.8/docs/topics/performance.txt:287
msgid "Static files"
msgstr ""

# f690518e2f1e48aab354bf5c297e912b
#: ../../../../1.8/docs/topics/performance.txt:289
msgid ""
"Static files, which by definition are not dynamic, make an excellent target "
"for optimization gains."
msgstr ""

# 4482813d122549aea7aca12103bd88e7
#: ../../../../1.8/docs/topics/performance.txt:293
msgid ":class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage`"
msgstr ""

# cf70a3f18da54dd2b79e20a19f8f5068
#: ../../../../1.8/docs/topics/performance.txt:295
msgid ""
"By taking advantage of web browsers' caching abilities, you can eliminate "
"network hits entirely for a given file after the initial download."
msgstr ""

# 7b12306579ba4266b60ef4f79e811277
#: ../../../../1.8/docs/topics/performance.txt:298
msgid ""
":class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` "
"appends a content-dependent tag to the filenames of :doc:`static files "
"</ref/contrib/staticfiles>` to make it safe for browsers to cache them long-"
"term without missing future changes - when a file changes, so will the tag, "
"so browsers will reload the asset automatically."
msgstr ""

# 771f7e82bbd14f9297ed625aaee1db82
#: ../../../../1.8/docs/topics/performance.txt:305
msgid "\"Minification\""
msgstr ""

# e0144ce0d8ca413cb36a27b43e2e7151
#: ../../../../1.8/docs/topics/performance.txt:307
msgid ""
"Several third-party Django tools and packages provide the ability to "
"\"minify\" HTML, CSS, and JavaScript. They remove unnecessary whitespace, "
"newlines, and comments, and shorten variable names, and thus reduce the size"
" of the documents that your site publishes."
msgstr ""

# b5d6dd74108249b68bb95d707c7db1a1
#: ../../../../1.8/docs/topics/performance.txt:313
msgid "Template performance"
msgstr ""

# 91ce94280b0b43889db44e8866f385a9
#: ../../../../1.8/docs/topics/performance.txt:315
msgid "Note that:"
msgstr ""

# aee7193d62124f75a5dc42cc35010b89
#: ../../../../1.8/docs/topics/performance.txt:317
msgid "using ``{% block %}`` is faster than using ``{% include %}``"
msgstr ""

# a6d312d64dd74a54961d8a75d356e39d
#: ../../../../1.8/docs/topics/performance.txt:318
msgid ""
"heavily-fragmented templates, assembled from many small pieces, can affect "
"performance"
msgstr ""

# 88c74644bfae428abc4093953d48ad18
#: ../../../../1.8/docs/topics/performance.txt:322
msgid "The cached template loader"
msgstr ""

# 9a60ec73ed4641febd2cdc8e7d797ca7
#: ../../../../1.8/docs/topics/performance.txt:324
msgid ""
"Enabling the :class:`cached template loader "
"<django.template.loaders.cached.Loader>` often improves performance "
"drastically, as it avoids compiling each template every time it needs to be "
"rendered."
msgstr ""

# b01010ffdaf4408293d8a379dfa968d5
#: ../../../../1.8/docs/topics/performance.txt:330
msgid "Using different versions of available software"
msgstr ""

# 963d739f8e3b47a18a250a620082e3ed
#: ../../../../1.8/docs/topics/performance.txt:332
msgid ""
"It can sometimes be worth checking whether different and better-performing "
"versions of the software that you're using are available."
msgstr ""

# 0d0d458186e54abea50d913a07696436
#: ../../../../1.8/docs/topics/performance.txt:335
msgid ""
"These techniques are targeted at more advanced users who want to push the "
"boundaries of performance of an already well-optimized Django site."
msgstr ""

# 1c144840dd23495ebc16c02cb3630748
#: ../../../../1.8/docs/topics/performance.txt:338
msgid ""
"However, they are not magic solutions to performance problems, and they're "
"unlikely to bring better than marginal gains to sites that don't already do "
"the more basic things the right way."
msgstr ""

# 3c91834a36234e1ab8b4648a113cf4a0
#: ../../../../1.8/docs/topics/performance.txt:344
msgid ""
"It's worth repeating: **reaching for alternatives to software you're already"
" using is never the first answer to performance problems**. When you reach "
"this level of optimization, you need a formal benchmarking solution."
msgstr ""

# fc9f972bced54134b56f28c34a48e687
#: ../../../../1.8/docs/topics/performance.txt:350
msgid "Newer is often - but not always - better"
msgstr ""

# 957f57e1b0eb4735b2d516eb9b37108f
#: ../../../../1.8/docs/topics/performance.txt:352
msgid ""
"It's fairly rare for a new release of well-maintained software to be less "
"efficient, but the maintainers can't anticipate every possible use-case - so"
" while being aware that newer versions are likely to perform better, don't "
"simply assume that they always will."
msgstr ""

# 543866d16aa34c89989bc7bd360afb00
#: ../../../../1.8/docs/topics/performance.txt:357
msgid ""
"This is true of Django itself. Successive releases have offered a number of "
"improvements across the system, but you should still check the real-world "
"performance of your application, because in some cases you may find that "
"changes mean it performs worse rather than better."
msgstr ""

# cd4e43f92fd44d8ebb454e31692e24d8
#: ../../../../1.8/docs/topics/performance.txt:362
msgid ""
"Newer versions of Python, and also of Python packages, will often perform "
"better too - but measure, rather than assume."
msgstr ""

# b6387e726b3b4982b98e86c1422ddb7b
#: ../../../../1.8/docs/topics/performance.txt:367
msgid ""
"Unless you've encountered an unusual performance problem in a particular "
"version, you'll generally find better features, reliability, and security in"
" a new release and that these benefits are far more significant than any "
"performance you might win or lose."
msgstr ""

# f050413117e14bac935d6fda869cbd76
#: ../../../../1.8/docs/topics/performance.txt:373
msgid "Alternatives to Django's template language"
msgstr ""

# fb2281ff948144c8b1055d78e8376def
#: ../../../../1.8/docs/topics/performance.txt:375
msgid ""
"For nearly all cases, Django's built-in template language is perfectly "
"adequate. However, if the bottlenecks in your Django project seem to lie in "
"the template system and you have exhausted other opportunities to remedy "
"this, a third-party alternative may be the answer."
msgstr ""

# cd1589553ab24bba903c932d8a06afc2
#: ../../../../1.8/docs/topics/performance.txt:380
msgid ""
"`Jinja2 <http://jinja.pocoo.org/docs/>`_ can offer performance improvements,"
" particularly when it comes to speed."
msgstr ""

# 2ce1a873e8fa43e9940fc77c2b6f7da6
#: ../../../../1.8/docs/topics/performance.txt:383
msgid ""
"Alternative template systems vary in the extent to which they share Django's"
" templating language."
msgstr ""

# 7a690821a0124990abc42bfb36a5b655
#: ../../../../1.8/docs/topics/performance.txt:388
msgid ""
"*If* you experience performance issues in templates, the first thing to do "
"is to understand exactly why. Using an alternative template system may prove"
" faster, but the same gains may also be available without going to that "
"trouble - for example, expensive processing and logic in your templates "
"could be done more efficiently in your views."
msgstr ""

# 72e7ce922de54004a4811c7b34822532
#: ../../../../1.8/docs/topics/performance.txt:395
msgid "Alternative software implementations"
msgstr ""

# 4c7527bd56044b0ba77ab6767ccf1b73
#: ../../../../1.8/docs/topics/performance.txt:397
msgid ""
"It may be worth checking whether Python software you're using has been "
"provided in a different implementation that can execute the same code "
"faster."
msgstr ""

# 1ce6f3e48c4e4c5dbb7c372d032bcc80
#: ../../../../1.8/docs/topics/performance.txt:400
msgid ""
"However: most performance problems in well-written Django sites aren't at "
"the Python execution level, but rather in inefficient database querying, "
"caching, and templates. If you're relying on poorly-written Python code, "
"your performance problems are unlikely to be solved by having it execute "
"faster."
msgstr ""

# 270bdbce39154e6982a318f57aed8e82
#: ../../../../1.8/docs/topics/performance.txt:405
msgid ""
"Using an alternative implementation may introduce compatibility, deployment,"
" portability, or maintenance issues. It goes without saying that before "
"adopting a non-standard implementation you should ensure it provides "
"sufficient performance gains for your application to outweigh the potential "
"risks."
msgstr ""

# 6d078f5084ac4da28ca38fba1583f1ac
#: ../../../../1.8/docs/topics/performance.txt:410
msgid "With these caveats in mind, you should be aware of:"
msgstr ""

# 2c6b8c639d4b475c80c09b4d86dbb953
#: ../../../../1.8/docs/topics/performance.txt:413
msgid "`PyPy <http://pypy.org/>`_"
msgstr ""

# da3452d52d1c49089812d7d6bce9c279
#: ../../../../1.8/docs/topics/performance.txt:415
msgid ""
"`PyPy <http://pypy.org/>`_ is an implementation of Python in Python itself "
"(the 'standard' Python implementation is in C). PyPy can offer substantial "
"performance gains, typically for heavyweight applications."
msgstr ""

# c53dd95b3a64449489a7690f29491ce5
#: ../../../../1.8/docs/topics/performance.txt:419
msgid ""
"A key aim of the PyPy project is `compatibility "
"<http://pypy.org/compat.html>`_ with existing Python APIs and libraries. "
"Django is compatible, but you will need to check the compatibility of other "
"libraries you rely on."
msgstr ""

# 5f688b903ca64af38fa1229c8cebda39
#: ../../../../1.8/docs/topics/performance.txt:425
msgid "C implementations of Python libraries"
msgstr ""

# db9bd5f74a4a42d18edc882b68ae9417
#: ../../../../1.8/docs/topics/performance.txt:427
msgid ""
"Some Python libraries are also implemented in C, and can be much faster. "
"They aim to offer the same APIs. Note that compatibility issues and behavior"
" differences are not unknown (and not always immediately evident)."
msgstr ""

# fd941362b12a4a25a7914574c27ce6e7
#: ../../../../1.8/docs/topics/python3.txt:3
msgid "Porting to Python 3"
msgstr ""

# 561c693271304291a82c39a980a81202
#: ../../../../1.8/docs/topics/python3.txt:5
msgid ""
"Django 1.5 is the first version of Django to support Python 3. The same code"
" runs both on Python 2 (≥ 2.6.5) and Python 3 (≥ 3.2), thanks to the six_ "
"compatibility layer."
msgstr ""

# ab4904f1986b41958758cba742109768
#: ../../../../1.8/docs/topics/python3.txt:11
msgid ""
"This document is primarily targeted at authors of pluggable applications who"
" want to support both Python 2 and 3. It also describes guidelines that "
"apply to Django's code."
msgstr ""

# 104ce62440094700a7159e7b78153601
#: ../../../../1.8/docs/topics/python3.txt:16
msgid "Philosophy"
msgstr ""

# b9334ed8d96c410fb8578f5e4ec4c606
#: ../../../../1.8/docs/topics/python3.txt:18
msgid ""
"This document assumes that you are familiar with the changes between Python "
"2 and Python 3. If you aren't, read `Python's official porting guide`_ "
"first. Refreshing your knowledge of unicode handling on Python 2 and 3 will "
"help; the `Pragmatic Unicode`_ presentation is a good resource."
msgstr ""

# 9a3a2353ffa54551bf7ca34d63ef0de3
#: ../../../../1.8/docs/topics/python3.txt:23
msgid ""
"Django uses the *Python 2/3 Compatible Source* strategy. Of course, you're "
"free to chose another strategy for your own code, especially if you don't "
"need to stay compatible with Python 2. But authors of pluggable applications"
" are encouraged to use the same porting strategy as Django itself."
msgstr ""

# 21fc5b3b23914743be8ef75eaaf509ab
#: ../../../../1.8/docs/topics/python3.txt:28
msgid ""
"Writing compatible code is much easier if you target Python ≥ 2.6. Django "
"1.5 introduces compatibility tools such as :mod:`django.utils.six`, which is"
" a customized version of the :mod:`six module <six>`. For convenience, "
"forwards-compatible aliases were introduced in Django 1.4.2. If your "
"application takes advantage of these tools, it will require Django ≥ 1.4.2."
msgstr ""

# f38733f1ab304f089a216856d37c3c6e
#: ../../../../1.8/docs/topics/python3.txt:34
msgid ""
"Obviously, writing compatible source code adds some overhead, and that can "
"cause frustration. Django's developers have found that attempting to write "
"Python 3 code that's compatible with Python 2 is much more rewarding than "
"the opposite. Not only does that make your code more future-proof, but "
"Python 3's advantages (like the saner string handling) start shining "
"quickly. Dealing with Python 2 becomes a backwards compatibility "
"requirement, and we as developers are used to dealing with such constraints."
msgstr ""

# c5098d006dba44649c18974f296a7541
#: ../../../../1.8/docs/topics/python3.txt:42
msgid ""
"Porting tools provided by Django are inspired by this philosophy, and it's "
"reflected throughout this guide."
msgstr ""

# b48b6b1933b4491882c9eb227ea1074e
#: ../../../../1.8/docs/topics/python3.txt:49
msgid "Porting tips"
msgstr ""

# 7f7c3cb11d1f48a0bfcec1bc26e6bfa5
#: ../../../../1.8/docs/topics/python3.txt:52
msgid "Unicode literals"
msgstr ""

# ac7e002273a5472398e3487e15bd00f4
#: ../../../../1.8/docs/topics/python3.txt:54
msgid "This step consists in:"
msgstr ""

# a8695e0a04634bb998ba14a0e224cdcb
#: ../../../../1.8/docs/topics/python3.txt:56
msgid ""
"Adding ``from __future__ import unicode_literals`` at the top of your Python"
" modules -- it's best to put it in each and every module, otherwise you'll "
"keep checking the top of your files to see which mode is in effect;"
msgstr ""

# 1cecfda54a3f4c3684732e0ede049146
#: ../../../../1.8/docs/topics/python3.txt:59
msgid "Removing the ``u`` prefix before unicode strings;"
msgstr ""

# b624edaa5e6d4412a20e180d5ebe73e3
#: ../../../../1.8/docs/topics/python3.txt:60
msgid "Adding a ``b`` prefix before bytestrings."
msgstr ""

# 62f1ffe6e2da49cebcb14936d352c28d
#: ../../../../1.8/docs/topics/python3.txt:62
msgid ""
"Performing these changes systematically guarantees backwards compatibility."
msgstr ""

# 37268bbdc3db431999547480add9482e
#: ../../../../1.8/docs/topics/python3.txt:64
msgid ""
"However, Django applications generally don't need bytestrings, since Django "
"only exposes unicode interfaces to the programmer. Python 3 discourages "
"using bytestrings, except for binary data or byte-oriented interfaces. "
"Python 2 makes bytestrings and unicode strings effectively interchangeable, "
"as long as they only contain ASCII data. Take advantage of this to use "
"unicode strings wherever possible and avoid the ``b`` prefixes."
msgstr ""

# 40bb969fcf7c452b959cdeda574a9965
#: ../../../../1.8/docs/topics/python3.txt:73
msgid ""
"Python 2's ``u`` prefix is a syntax error in Python 3.2 but it will be "
"allowed again in Python 3.3 thanks to :pep:`414`. Thus, this transformation "
"is optional if you target Python ≥ 3.3. It's still recommended, per the "
"\"write Python 3 code\" philosophy."
msgstr ""

# 68caff085044482fba808b0f6f6d783a
# 33e9241114204ba1bac8410cb946760d
#: ../../../../1.8/docs/topics/python3.txt:79
#: ../../../../1.8/docs/topics/python3.txt:338
msgid "String handling"
msgstr ""

# bc9dfa04288d475a90dd724c0a36982e
#: ../../../../1.8/docs/topics/python3.txt:81
msgid ""
"Python 2's `unicode`_ type was renamed :class:`str` in Python 3, ``str()`` "
"was renamed :class:`bytes`, and `basestring`_ disappeared. six_ provides "
":ref:`tools <string-handling-with-six>` to deal with these changes."
msgstr ""

# b6226fca7dbb46a484aaac52ab74f0a7
#: ../../../../1.8/docs/topics/python3.txt:86
msgid ""
"Django also contains several string related classes and functions in the "
":mod:`django.utils.encoding` and :mod:`django.utils.safestring` modules. "
"Their names used the words ``str``, which doesn't mean the same thing in "
"Python 2 and Python 3, and ``unicode``, which doesn't exist in Python 3. In "
"order to avoid ambiguity and confusion these concepts were renamed ``bytes``"
" and ``text``."
msgstr ""

# e69ce66da32e4d86a12aacbe029a2730
#: ../../../../1.8/docs/topics/python3.txt:93
msgid "Here are the name changes in :mod:`django.utils.encoding`:"
msgstr ""

# 61dec231a2804e499ef43e9bcd5cb319
# 63437545d8024258902145138674c33c
#: ../../../../1.8/docs/topics/python3.txt:96
#: ../../../../1.8/docs/topics/python3.txt:120
msgid "Old name"
msgstr ""

# 30173bb252584c3285320fc890bd9353
# 27d9f788cabf4a92813678a7957c94a3
#: ../../../../1.8/docs/topics/python3.txt:96
#: ../../../../1.8/docs/topics/python3.txt:120
msgid "New name"
msgstr ""

# a9f99b265bc14f15a32587195446d1ff
#: ../../../../1.8/docs/topics/python3.txt:98
msgid "``smart_str``"
msgstr ""

# 4baa5d86b9ef49e68fe9839e45d34b12
#: ../../../../1.8/docs/topics/python3.txt:98
msgid "``smart_bytes``"
msgstr ""

# f222fe0f4ff9420395c895acd88e3eae
#: ../../../../1.8/docs/topics/python3.txt:99
msgid "``smart_unicode``"
msgstr ""

# d82f3c12d48c429e82a64b56a7e0f1e0
#: ../../../../1.8/docs/topics/python3.txt:99
msgid "``smart_text``"
msgstr ""

# 73729f0801cb4002957679e38d33f75a
#: ../../../../1.8/docs/topics/python3.txt:100
msgid "``force_unicode``"
msgstr ""

# d4fcc8a9ec814981ab93c643dda0ab55
#: ../../../../1.8/docs/topics/python3.txt:100
msgid "``force_text``"
msgstr ""

# eac72cafdf464f9a92089a46cf5c7eed
#: ../../../../1.8/docs/topics/python3.txt:103
msgid ""
"For backwards compatibility, the old names still work on Python 2. Under "
"Python 3, ``smart_str`` is an alias for ``smart_text``."
msgstr ""

# cb44d3ceca914f01b541ac7e8b94ddca
# b8174089e8e4430caf7346f52dcd1733
#: ../../../../1.8/docs/topics/python3.txt:106
#: ../../../../1.8/docs/topics/python3.txt:132
msgid "For forwards compatibility, the new names work as of Django 1.4.2."
msgstr ""

# a4ba5a7da95a42c68c4de0b9be23a013
#: ../../../../1.8/docs/topics/python3.txt:110
msgid ""
":mod:`django.utils.encoding` was deeply refactored in Django 1.5 to provide "
"a more consistent API. Check its documentation for more information."
msgstr ""

# 8964ac34a21b49958e33f4d02f076b9d
#: ../../../../1.8/docs/topics/python3.txt:114
msgid ""
":mod:`django.utils.safestring` is mostly used via the "
":func:`~django.utils.safestring.mark_safe` and "
":func:`~django.utils.safestring.mark_for_escaping` functions, which didn't "
"change. In case you're using the internals, here are the name changes:"
msgstr ""

# ce7763e930b64f81aad38ec6955c2ccb
#: ../../../../1.8/docs/topics/python3.txt:122
msgid "``EscapeString``"
msgstr ""

# a2b5cffe83ab47be9df61d4d647c867d
#: ../../../../1.8/docs/topics/python3.txt:122
msgid "``EscapeBytes``"
msgstr ""

# 171c65bbee204eb09d8626286670becc
#: ../../../../1.8/docs/topics/python3.txt:123
msgid "``EscapeUnicode``"
msgstr ""

# 44a20caa916547a3803ad8aac592a8b8
#: ../../../../1.8/docs/topics/python3.txt:123
msgid "``EscapeText``"
msgstr ""

# 30fabbe9f3244890b5a79616f8494e0e
#: ../../../../1.8/docs/topics/python3.txt:124
msgid "``SafeString``"
msgstr ""

# 2a1ad02e97004405a53552a4fba05fa2
#: ../../../../1.8/docs/topics/python3.txt:124
msgid "``SafeBytes``"
msgstr ""

# 2666cadaaf0c4d0588bd54bc42bc5dca
#: ../../../../1.8/docs/topics/python3.txt:125
msgid "``SafeUnicode``"
msgstr ""

# c51effa055f94d949c5a5c1c25f68947
#: ../../../../1.8/docs/topics/python3.txt:125
msgid "``SafeText``"
msgstr ""

# 8b2fc2d5bf894df1aa593f62cde2f55e
#: ../../../../1.8/docs/topics/python3.txt:128
msgid ""
"For backwards compatibility, the old names still work on Python 2. Under "
"Python 3, ``EscapeString`` and ``SafeString`` are aliases for ``EscapeText``"
" and ``SafeText`` respectively."
msgstr ""

# 7051e2f041924057a940df289d4399b8
#: ../../../../1.8/docs/topics/python3.txt:135
msgid ":meth:`~object.__str__` and ` __unicode__()`_ methods"
msgstr ""

# ce1c0f3256be42e59737086c79b73e16
#: ../../../../1.8/docs/topics/python3.txt:137
msgid ""
"In Python 2, the object model specifies :meth:`~object.__str__` and ` "
"__unicode__()`_ methods. If these methods exist, they must return ``str`` "
"(bytes) and ``unicode`` (text) respectively."
msgstr ""

# e94b05fbbe894504a22fce6e20d90baf
#: ../../../../1.8/docs/topics/python3.txt:141
msgid ""
"The ``print`` statement and the :class:`str` built-in call "
":meth:`~object.__str__` to determine the human-readable representation of an"
" object. The ``unicode`` built-in calls ` __unicode__()`_ if it exists, and "
"otherwise falls back to :meth:`~object.__str__` and decodes the result with "
"the system encoding. Conversely, the :class:`~django.db.models.Model` base "
"class automatically derives :meth:`~object.__str__` from ` __unicode__()`_ "
"by encoding to UTF-8."
msgstr ""

# c5d95bd615e94b3baa2de00db57eccad
#: ../../../../1.8/docs/topics/python3.txt:149
msgid ""
"In Python 3, there's simply :meth:`~object.__str__`, which must return "
"``str`` (text)."
msgstr ""

# c63777224a2645bc90989dea8d2db7b2
#: ../../../../1.8/docs/topics/python3.txt:152
msgid ""
"(It is also possible to define :meth:`~object.__bytes__`, but Django "
"applications have little use for that method, because they hardly ever deal "
"with ``bytes``.)"
msgstr ""

# b8ff6a39071e4867bc51b3caae866e48
#: ../../../../1.8/docs/topics/python3.txt:155
msgid ""
"Django provides a simple way to define :meth:`~object.__str__` and ` "
"__unicode__()`_ methods that work on Python 2 and 3: you must define a "
":meth:`~object.__str__` method returning text and to apply the "
":func:`~django.utils.encoding.python_2_unicode_compatible` decorator."
msgstr ""

# 72a7cc99396f450193fb0fa10b254ae1
#: ../../../../1.8/docs/topics/python3.txt:160
msgid ""
"On Python 3, the decorator is a no-op. On Python 2, it defines appropriate `"
" __unicode__()`_ and :meth:`~object.__str__` methods (replacing the original"
" :meth:`~object.__str__` method in the process). Here's an example::"
msgstr ""

# efadf18caf5c48978de090930a3efdf5
#: ../../../../1.8/docs/topics/python3.txt:172
msgid "This technique is the best match for Django's porting philosophy."
msgstr ""

# 24f9f0be100048da9f70adb5861813a3
#: ../../../../1.8/docs/topics/python3.txt:174
msgid ""
"For forwards compatibility, this decorator is available as of Django 1.4.2."
msgstr ""

# 68d56122596a4ab0a4bff96410b70c84
#: ../../../../1.8/docs/topics/python3.txt:176
msgid ""
"Finally, note that :meth:`~object.__repr__` must return a ``str`` on all "
"versions of Python."
msgstr ""

# ec3429bb491840259df86ebacd2501bd
#: ../../../../1.8/docs/topics/python3.txt:180
msgid ":class:`dict` and :class:`dict`-like classes"
msgstr ""

# f349828b82ed4769a4e0daf9ea494db4
#: ../../../../1.8/docs/topics/python3.txt:182
msgid ""
":meth:`dict.keys`, :meth:`dict.items` and :meth:`dict.values` return lists "
"in Python 2 and iterators in Python 3. :class:`~django.http.QueryDict` and "
"the :class:`dict`-like classes defined in :mod:`django.utils.datastructures`"
" behave likewise in Python 3."
msgstr ""

# cd3739c19f734159bee5dfea0f8fa979
#: ../../../../1.8/docs/topics/python3.txt:187
msgid ""
"six_ provides compatibility functions to work around this change: "
":func:`~six.iterkeys`, :func:`~six.iteritems`, and :func:`~six.itervalues`. "
"It also contains an undocumented ``iterlists`` function that works well for "
"``django.utils.datastructures.MultiValueDict`` and its subclasses."
msgstr ""

# dccdfe0c8ce1450db13228b36c7d08ed
#: ../../../../1.8/docs/topics/python3.txt:193
msgid ""
":class:`~django.http.HttpRequest` and :class:`~django.http.HttpResponse` "
"objects"
msgstr ""

# 3814d23e456948098778b6cf507bf5b6
#: ../../../../1.8/docs/topics/python3.txt:195
msgid "According to :pep:`3333`:"
msgstr ""

# d2b36487522d409ca3c52f64440bb06a
#: ../../../../1.8/docs/topics/python3.txt:197
msgid "headers are always ``str`` objects,"
msgstr ""

# 7c975dfd7f2242418b1a9fcc9112b142
#: ../../../../1.8/docs/topics/python3.txt:198
msgid "input and output streams are always ``bytes`` objects."
msgstr ""

# 438fdabc8b384b39b093a3dc0be1a2b1
#: ../../../../1.8/docs/topics/python3.txt:200
msgid ""
"Specifically, :attr:`HttpResponse.content "
"<django.http.HttpResponse.content>` contains ``bytes``, which may become an "
"issue if you compare it with a ``str`` in your tests. The preferred solution"
" is to rely on :meth:`~django.test.SimpleTestCase.assertContains` and "
":meth:`~django.test.SimpleTestCase.assertNotContains`. These methods accept "
"a response and a unicode string as arguments."
msgstr ""

# 3b2d026e48524031b395dddecccc044c
#: ../../../../1.8/docs/topics/python3.txt:208
msgid "Coding guidelines"
msgstr ""

# 9490f9b7808d47c09a007f1b7341504b
#: ../../../../1.8/docs/topics/python3.txt:210
msgid ""
"The following guidelines are enforced in Django's source code. They're also "
"recommended for third-party applications that follow the same porting "
"strategy."
msgstr ""

# 522d985bdb2e4f3096aaac2884e87dfe
#: ../../../../1.8/docs/topics/python3.txt:214
msgid "Syntax requirements"
msgstr ""

# 9a8e0cf32d4c4cf7b0c8f71810cb16cc
#: ../../../../1.8/docs/topics/python3.txt:217
msgid "Unicode"
msgstr ""

# 4a6d5d95c4eb42d8b9d36e9ea5e0f377
#: ../../../../1.8/docs/topics/python3.txt:219
msgid ""
"In Python 3, all strings are considered Unicode by default. The ``unicode`` "
"type from Python 2 is called ``str`` in Python 3, and ``str`` becomes "
"``bytes``."
msgstr ""

# bb53ce091e754d349931573e5ee92898
#: ../../../../1.8/docs/topics/python3.txt:223
msgid ""
"You mustn't use the ``u`` prefix before a unicode string literal because "
"it's a syntax error in Python 3.2. You must prefix byte strings with ``b``."
msgstr ""

# df5ce876697d46a8b23612bc0be6a4c9
#: ../../../../1.8/docs/topics/python3.txt:226
msgid ""
"In order to enable the same behavior in Python 2, every module must import "
"``unicode_literals`` from ``__future__``::"
msgstr ""

# 6fba049d0a2b4bed9794b317dbbe8f8d
#: ../../../../1.8/docs/topics/python3.txt:234
msgid ""
"If you need a byte string literal under Python 2 and a unicode string "
"literal under Python 3, use the :class:`str` builtin::"
msgstr ""

# 4dfc8c477a28454c94699aaa043de9b4
#: ../../../../1.8/docs/topics/python3.txt:239
msgid ""
"In Python 3, there aren't any automatic conversions between ``str`` and "
"``bytes``, and the :mod:`codecs` module became more strict. "
":meth:`str.encode` always returns ``bytes``, and ``bytes.decode`` always "
"returns ``str``. As a consequence, the following pattern is sometimes "
"necessary::"
msgstr ""

# 20d0bd0b7dd14033a72bb8f8b19841c3
#: ../../../../1.8/docs/topics/python3.txt:246
msgid "Be cautious if you have to `index bytestrings`_."
msgstr ""

# c2a0dd54455f4af1a30284b147c7903f
# d16dc7b5eca14ecea9bc356ed8c2bfa0
#: ../../../../1.8/docs/topics/python3.txt:251
#: ../../../../1.8/docs/topics/testing/tools.txt:487
msgid "Exceptions"
msgstr ""

# 9e24905e1e204ee28f9787c455c95698
#: ../../../../1.8/docs/topics/python3.txt:253
msgid "When you capture exceptions, use the ``as`` keyword::"
msgstr ""

# 5cb6c29cc49643e7a753a8ebf4a84d02
#: ../../../../1.8/docs/topics/python3.txt:260
msgid "This older syntax was removed in Python 3::"
msgstr ""

# 6a6e558a810249889692d13ac94b0dcd
#: ../../../../1.8/docs/topics/python3.txt:267
msgid ""
"The syntax to reraise an exception with a different traceback also changed. "
"Use :func:`six.reraise`."
msgstr ""

# 21eea4a7356c4c1d8d98e74d6e2b64a8
#: ../../../../1.8/docs/topics/python3.txt:271
msgid "Magic methods"
msgstr ""

# 6b9be938acac4b82a8df344912683462
#: ../../../../1.8/docs/topics/python3.txt:273
msgid "Use the patterns below to handle magic methods renamed in Python 3."
msgstr ""

# 9f561d0b3f99447483b02e918ad3906a
#: ../../../../1.8/docs/topics/python3.txt:276
msgid "Iterators"
msgstr ""

# 0d4513a83cce4b76938035ca83054165
#: ../../../../1.8/docs/topics/python3.txt:288
msgid "Boolean evaluation"
msgstr ""

# 59bae018c72541e4b6afcf7384637a0c
#: ../../../../1.8/docs/topics/python3.txt:301
msgid "Division"
msgstr ""

# d6eebe8be0774d65b7b9f37e8b731fa2
#: ../../../../1.8/docs/topics/python3.txt:319
msgid ""
"Special methods are looked up on the class and not on the instance to "
"reflect the behavior of the Python interpreter."
msgstr ""

# c5dd27f4d92f465a861ea2bc1fce6e6f
#: ../../../../1.8/docs/topics/python3.txt:325
msgid "Writing compatible code with six"
msgstr ""

# 55431420aff64e2ab506ede5d5db142e
#: ../../../../1.8/docs/topics/python3.txt:327
msgid ""
"six_ is the canonical compatibility library for supporting Python 2 and 3 in"
" a single codebase. Read its documentation!"
msgstr ""

# 8e54dbc700a44ae686cc27a5aa502b78
#: ../../../../1.8/docs/topics/python3.txt:330
msgid ""
"A :mod:`customized version of six <django.utils.six>` is bundled with Django"
" as of version 1.4.2. You can import it as ``django.utils.six``."
msgstr ""

# 4e8179e632fc4d38b874dcf3fe967af1
#: ../../../../1.8/docs/topics/python3.txt:333
msgid "Here are the most common changes required to write compatible code."
msgstr ""

# a0c91dde1d944d989a9f9947179c41c1
#: ../../../../1.8/docs/topics/python3.txt:340
msgid ""
"The ``basestring`` and ``unicode`` types were removed in Python 3, and the "
"meaning of ``str`` changed. To test these types, use the following idioms::"
msgstr ""

# d1da573776b44095a1e0c5345f4984da
#: ../../../../1.8/docs/topics/python3.txt:347
msgid ""
"Python ≥ 2.6 provides ``bytes`` as an alias for ``str``, so you don't need "
":data:`six.binary_type`."
msgstr ""

# 69d27c2ae7a744ec99ea4884411b5be8
#: ../../../../1.8/docs/topics/python3.txt:351
msgid "``long``"
msgstr ""

# 62a4a0531a2541ffbbe31e3fb3aaf2ea
#: ../../../../1.8/docs/topics/python3.txt:353
msgid ""
"The ``long`` type no longer exists in Python 3. ``1L`` is a syntax error. "
"Use :data:`six.integer_types` check if a value is an integer or a long::"
msgstr ""

# 44b6e17e4d6a4e2b860fbe10ac7bea6b
#: ../../../../1.8/docs/topics/python3.txt:359
msgid "``xrange``"
msgstr ""

# f9abb06add1d46378d38e1896f81dbb4
#: ../../../../1.8/docs/topics/python3.txt:361
msgid ""
"If you use ``xrange`` on Python 2, import ``six.moves.range`` and use that "
"instead. You can also import ``six.moves.xrange`` (it's equivalent to "
"``six.moves.range``) but the first technique allows you to simply drop the "
"import when dropping support for Python 2."
msgstr ""

# 92b79365135d4a6989c4084fcd0c3cec
#: ../../../../1.8/docs/topics/python3.txt:367
msgid "Moved modules"
msgstr ""

# 561923117056458f92de3009dc6797ea
#: ../../../../1.8/docs/topics/python3.txt:369
msgid ""
"Some modules were renamed in Python 3. The ``django.utils.six.moves`` module"
" (based on the :mod:`six.moves module <six.moves>`) provides a compatible "
"location to import them."
msgstr ""

# 0791ebdcf2a44af5a12b0b829236eafb
#: ../../../../1.8/docs/topics/python3.txt:374
msgid "PY2"
msgstr ""

# a17c53326e99459db883fce79cab7a4d
#: ../../../../1.8/docs/topics/python3.txt:376
msgid ""
"If you need different code in Python 2 and Python 3, check :data:`six.PY2`::"
msgstr ""

# 2ca2a15e80af47d69acd2f00f7d82858
#: ../../../../1.8/docs/topics/python3.txt:381
msgid ""
"This is a last resort solution when :mod:`six` doesn't provide an "
"appropriate function."
msgstr ""

# a68c947658d94327ac0e10587a202fcb
#: ../../../../1.8/docs/topics/python3.txt:387
msgid "Django customized version of six"
msgstr ""

# 1218ee2cb6924aa0aede8e99221f7209
#: ../../../../1.8/docs/topics/python3.txt:389
msgid ""
"The version of six bundled with Django (``django.utils.six``) includes a few"
" customizations for internal use only."
msgstr ""

# 87715224629b423e8e7b9bf53db74eb3
#: ../../../../1.8/docs/topics/security.txt:3
msgid "Security in Django"
msgstr ""

# 34937ef1b6f3494ca16593ee684af310
#: ../../../../1.8/docs/topics/security.txt:5
msgid ""
"This document is an overview of Django's security features. It includes "
"advice on securing a Django-powered site."
msgstr ""

# 5da45476b4984863a5f577c4202b1174
#: ../../../../1.8/docs/topics/security.txt:11
msgid "Cross site scripting (XSS) protection"
msgstr ""

# 9eb5ee256dbb448f82b73fde434a5141
#: ../../../../1.8/docs/topics/security.txt:15
msgid ""
"XSS attacks allow a user to inject client side scripts into the browsers of "
"other users. This is usually achieved by storing the malicious scripts in "
"the database where it will be retrieved and displayed to other users, or by "
"getting users to click a link which will cause the attacker's JavaScript to "
"be executed by the user's browser. However, XSS attacks can originate from "
"any untrusted source of data, such as cookies or Web services, whenever the "
"data is not sufficiently sanitized before including in a page."
msgstr ""

# bfcc30dbe5c24638bb58dec372759b35
#: ../../../../1.8/docs/topics/security.txt:23
msgid ""
"Using Django templates protects you against the majority of XSS attacks. "
"However, it is important to understand what protections it provides and its "
"limitations."
msgstr ""

# a3095124724b495aacd67c7c606cc87b
#: ../../../../1.8/docs/topics/security.txt:27
msgid ""
"Django templates :ref:`escape specific characters <automatic-html-escaping>`"
" which are particularly dangerous to HTML. While this protects users from "
"most malicious input, it is not entirely foolproof. For example, it will not"
" protect the following:"
msgstr ""

# 1b77b944ccd74da0a49c4dd784382b71
#: ../../../../1.8/docs/topics/security.txt:36
msgid ""
"If ``var`` is set to ``'class1 onmouseover=javascript:func()'``, this can "
"result in unauthorized JavaScript execution, depending on how the browser "
"renders imperfect HTML. (Quoting the attribute value would fix this case.)"
msgstr ""

# 071c0ccbc0f84b138a0a590db73cd81b
#: ../../../../1.8/docs/topics/security.txt:40
msgid ""
"It is also important to be particularly careful when using ``is_safe`` with "
"custom template tags, the :tfilter:`safe` template tag, :mod:`mark_safe "
"<django.utils.safestring>`, and when autoescape is turned off."
msgstr ""

# 14148b6a03544dad965c74b7493bbb61
#: ../../../../1.8/docs/topics/security.txt:44
msgid ""
"In addition, if you are using the template system to output something other "
"than HTML, there may be entirely separate characters and words which require"
" escaping."
msgstr ""

# 4759fb17249a41c595e6b828e1bc9d42
#: ../../../../1.8/docs/topics/security.txt:48
msgid ""
"You should also be very careful when storing HTML in the database, "
"especially when that HTML is retrieved and displayed."
msgstr ""

# e5cd6f8ca1c848789ec296dbbb878d70
#: ../../../../1.8/docs/topics/security.txt:53
msgid "Cross site request forgery (CSRF) protection"
msgstr ""

# 88f9b4a8055842b0971554e27f6d1ef2
#: ../../../../1.8/docs/topics/security.txt:55
msgid ""
"CSRF attacks allow a malicious user to execute actions using the credentials"
" of another user without that user's knowledge or consent."
msgstr ""

# 9a12b00ea6af49a697c6f2f604537ebb
#: ../../../../1.8/docs/topics/security.txt:58
msgid ""
"Django has built-in protection against most types of CSRF attacks, providing"
" you have :ref:`enabled and used it <using-csrf>` where appropriate. "
"However, as with any mitigation technique, there are limitations. For "
"example, it is possible to disable the CSRF module globally or for "
"particular views. You should only do this if you know what you are doing. "
"There are other :ref:`limitations <csrf-limitations>` if your site has "
"subdomains that are outside of your control."
msgstr ""

# fe54cd642f474fef95aa1cfeccf6f3bb
#: ../../../../1.8/docs/topics/security.txt:66
msgid ""
":ref:`CSRF protection works <how-csrf-works>` by checking for a nonce in "
"each POST request. This ensures that a malicious user cannot simply "
"\"replay\" a form POST to your Web site and have another logged in user "
"unwittingly submit that form. The malicious user would have to know the "
"nonce, which is user specific (using a cookie)."
msgstr ""

# 3493561091be46819da0442a7e818168
#: ../../../../1.8/docs/topics/security.txt:72
msgid ""
"When deployed with :ref:`HTTPS <security-recommendation-ssl>`, "
"``CsrfViewMiddleware`` will check that the HTTP referer header is set to a "
"URL on the same origin (including subdomain and port). Because HTTPS "
"provides additional security, it is imperative to ensure connections use "
"HTTPS where it is available by forwarding insecure connection requests and "
"using HSTS for supported browsers."
msgstr ""

# df997aa434be4b268b103fdab24f90d5
#: ../../../../1.8/docs/topics/security.txt:79
msgid ""
"Be very careful with marking views with the ``csrf_exempt`` decorator unless"
" it is absolutely necessary."
msgstr ""

# 04edc3b4e8c24963b3aae46114359033
#: ../../../../1.8/docs/topics/security.txt:85
msgid "SQL injection protection"
msgstr ""

# bd2c839337c143bf9f7ebb15e2d9da13
#: ../../../../1.8/docs/topics/security.txt:87
msgid ""
"SQL injection is a type of attack where a malicious user is able to execute "
"arbitrary SQL code on a database. This can result in records being deleted "
"or data leakage."
msgstr ""

# 0830c0484e4b4241bf8d7bee63eb5aee
#: ../../../../1.8/docs/topics/security.txt:91
msgid ""
"By using Django's querysets, the resulting SQL will be properly escaped by "
"the underlying database driver. However, Django also gives developers power "
"to write :ref:`raw queries <executing-raw-queries>` or execute :ref:`custom "
"sql <executing-custom-sql>`. These capabilities should be used sparingly and"
" you should always be careful to properly escape any parameters that the "
"user can control. In addition, you should exercise caution when using "
":meth:`extra() <django.db.models.query.QuerySet.extra>`."
msgstr ""

# a49050976800465194b2fb1bad1d1e03
#: ../../../../1.8/docs/topics/security.txt:100
msgid "Clickjacking protection"
msgstr ""

# 35c12a477fe54747b53307d959f6dc2e
#: ../../../../1.8/docs/topics/security.txt:102
msgid ""
"Clickjacking is a type of attack where a malicious site wraps another site "
"in a frame. This attack can result in an unsuspecting user being tricked "
"into performing unintended actions on the target site."
msgstr ""

# 28a67459fb1a4c30a2e63f40a1119f8a
#: ../../../../1.8/docs/topics/security.txt:106
msgid ""
"Django contains :ref:`clickjacking protection <clickjacking-prevention>` in "
"the form of the :mod:`X-Frame-Options middleware "
"<django.middleware.clickjacking.XFrameOptionsMiddleware>` which in a "
"supporting browser can prevent a site from being rendered inside a frame. It"
" is possible to disable the protection on a per view basis or to configure "
"the exact header value sent."
msgstr ""

# 2454b55b633b4884b81ef31a372a226f
#: ../../../../1.8/docs/topics/security.txt:113
msgid ""
"The middleware is strongly recommended for any site that does not need to "
"have its pages wrapped in a frame by third party sites, or only needs to "
"allow that for a small section of the site."
msgstr ""

# 8443f69780314d9f90c289a69f43405f
#: ../../../../1.8/docs/topics/security.txt:120
msgid "SSL/HTTPS"
msgstr ""

# 8e7db1a46d4a4de3a92c0991dedef2ec
#: ../../../../1.8/docs/topics/security.txt:122
msgid ""
"It is always better for security, though not always practical in all cases, "
"to deploy your site behind HTTPS. Without this, it is possible for malicious"
" network users to sniff authentication credentials or any other information "
"transferred between client and server, and in some cases -- **active** "
"network attackers -- to alter data that is sent in either direction."
msgstr ""

# 5d91db9e145541a6bbb5c5bdf589ec84
#: ../../../../1.8/docs/topics/security.txt:128
msgid ""
"If you want the protection that HTTPS provides, and have enabled it on your "
"server, there are some additional steps you may need:"
msgstr ""

# 2641d99c5cc2425983678d5fb239ff86
#: ../../../../1.8/docs/topics/security.txt:131
msgid ""
"If necessary, set :setting:`SECURE_PROXY_SSL_HEADER`, ensuring that you have"
" understood the warnings there thoroughly. Failure to do this can result in "
"CSRF vulnerabilities, and failure to do it correctly can also be dangerous!"
msgstr ""

# f4331db7f4b24b889fd099e310020eac
#: ../../../../1.8/docs/topics/security.txt:136
msgid "Set up redirection so that requests over HTTP are redirected to HTTPS."
msgstr ""

# 62d5bcf6f5c841a6b1110036c6355667
#: ../../../../1.8/docs/topics/security.txt:138
msgid ""
"This could be done using a custom middleware. Please note the caveats under "
":setting:`SECURE_PROXY_SSL_HEADER`. For the case of a reverse proxy, it may "
"be easier or more secure to configure the main Web server to do the redirect"
" to HTTPS."
msgstr ""

# c998ad50ac574337828e3b1f6c9d8669
#: ../../../../1.8/docs/topics/security.txt:143
msgid "Use 'secure' cookies."
msgstr ""

# 2537cf3d66e6428799e2ff8ba397de0e
#: ../../../../1.8/docs/topics/security.txt:145
msgid ""
"If a browser connects initially via HTTP, which is the default for most "
"browsers, it is possible for existing cookies to be leaked. For this reason,"
" you should set your :setting:`SESSION_COOKIE_SECURE` and "
":setting:`CSRF_COOKIE_SECURE` settings to ``True``. This instructs the "
"browser to only send these cookies over HTTPS connections. Note that this "
"will mean that sessions will not work over HTTP, and the CSRF protection "
"will prevent any POST data being accepted over HTTP (which will be fine if "
"you are redirecting all HTTP traffic to HTTPS)."
msgstr ""

# 1b2f3c8712334224bca09bc7df527472
#: ../../../../1.8/docs/topics/security.txt:154
msgid "Use HTTP Strict Transport Security (HSTS)"
msgstr ""

# 971b07a336f5427697cdb436fe30be4f
#: ../../../../1.8/docs/topics/security.txt:156
msgid ""
"HSTS is an HTTP header that informs a browser that all future connections to"
" a particular site should always use HTTPS. Combined with redirecting "
"requests over HTTP to HTTPS, this will ensure that connections always enjoy "
"the added security of SSL provided one successful connection has occurred. "
"HSTS is usually configured on the web server."
msgstr ""

# 2dbc3d6f641c44d58c41dbf37c5cb5e0
#: ../../../../1.8/docs/topics/security.txt:165
msgid "Host header validation"
msgstr ""

# f39105ff3def4d64af0aa7c4fe595063
#: ../../../../1.8/docs/topics/security.txt:167
msgid ""
"Django uses the ``Host`` header provided by the client to construct URLs in "
"certain cases. While these values are sanitized to prevent Cross Site "
"Scripting attacks, a fake ``Host`` value can be used for Cross-Site Request "
"Forgery, cache poisoning attacks, and poisoning links in emails."
msgstr ""

# e6cc1fbc9be747c38eaa14c174cb64a4
#: ../../../../1.8/docs/topics/security.txt:172
msgid ""
"Because even seemingly-secure web server configurations are susceptible to "
"fake ``Host`` headers, Django validates ``Host`` headers against the "
":setting:`ALLOWED_HOSTS` setting in the "
":meth:`django.http.HttpRequest.get_host()` method."
msgstr ""

# d643eea283fd43dd8668aa1b4134e6fc
#: ../../../../1.8/docs/topics/security.txt:177
msgid ""
"This validation only applies via "
":meth:`~django.http.HttpRequest.get_host()`; if your code accesses the "
"``Host`` header directly from ``request.META`` you are bypassing this "
"security protection."
msgstr ""

# fc8068c779b54d92aa81231732c85d3e
#: ../../../../1.8/docs/topics/security.txt:181
msgid "For more details see the full :setting:`ALLOWED_HOSTS` documentation."
msgstr ""

# 641f36b697d346db95bf140a7e0d8b99
#: ../../../../1.8/docs/topics/security.txt:185
msgid ""
"Previous versions of this document recommended configuring your web server "
"to ensure it validates incoming HTTP ``Host`` headers. While this is still "
"recommended, in many common web servers a configuration that seems to "
"validate the ``Host`` header may not in fact do so. For instance, even if "
"Apache is configured such that your Django site is served from a non-default"
" virtual host with the ``ServerName`` set, it is still possible for an HTTP "
"request to match this virtual host and supply a fake ``Host`` header. Thus, "
"Django now requires that you set :setting:`ALLOWED_HOSTS` explicitly rather "
"than relying on web server configuration."
msgstr ""

# 9337ac42c45d471a82a6ae53857ebaf3
#: ../../../../1.8/docs/topics/security.txt:195
msgid ""
"Additionally, as of 1.3.1, Django requires you to explicitly enable support "
"for the ``X-Forwarded-Host`` header (via the :setting:`USE_X_FORWARDED_HOST`"
" setting) if your configuration requires it."
msgstr ""

# 6f88ab61417b419db99e7ab05464b628
#: ../../../../1.8/docs/topics/security.txt:202
msgid ""
"Similar to the :ref:`CSRF limitations <csrf-limitations>` requiring a site "
"to be deployed such that untrusted users don't have access to any "
"subdomains, :mod:`django.contrib.sessions` also has limitations. See "
":ref:`the session topic guide section on security <topics-session-security>`"
" for details."
msgstr ""

# 4a3298eb133241e882bba2ce51509743
#: ../../../../1.8/docs/topics/security.txt:210
msgid "User-uploaded content"
msgstr ""

# cbe6d7acd509457e9d03001960848772
#: ../../../../1.8/docs/topics/security.txt:213
msgid ""
"Consider :ref:`serving static files from a cloud service or CDN "
"<staticfiles-from-cdn>` to avoid some of these issues."
msgstr ""

# 35613846516b425e8d18e941f02a0178
#: ../../../../1.8/docs/topics/security.txt:216
msgid ""
"If your site accepts file uploads, it is strongly advised that you limit "
"these uploads in your Web server configuration to a reasonable size in order"
" to prevent denial of service (DOS) attacks. In Apache, this can be easily "
"set using the LimitRequestBody_ directive."
msgstr ""

# 64604cfbd4a640cab7d172216c116148
#: ../../../../1.8/docs/topics/security.txt:221
msgid ""
"If you are serving your own static files, be sure that handlers like "
"Apache's ``mod_php``, which would execute static files as code, are "
"disabled. You don't want users to be able to execute arbitrary code by "
"uploading and requesting a specially crafted file."
msgstr ""

# 8dee9f96fb5a4b68b9a13855b3d007c5
#: ../../../../1.8/docs/topics/security.txt:226
msgid ""
"Django's media upload handling poses some vulnerabilities when that media is"
" served in ways that do not follow security best practices. Specifically, an"
" HTML file can be uploaded as an image if that file contains a valid PNG "
"header followed by malicious HTML. This file will pass verification of the "
"library that Django uses for :class:`~django.db.models.ImageField` image "
"processing (Pillow). When this file is subsequently displayed to a user, it "
"may be displayed as HTML depending on the type and configuration of your web"
" server."
msgstr ""

# 9b281a2e882b44f09b0c5d253ac6802c
#: ../../../../1.8/docs/topics/security.txt:235
msgid ""
"No bulletproof technical solution exists at the framework level to safely "
"validate all user uploaded file content, however, there are some other steps"
" you can take to mitigate these attacks:"
msgstr ""

# cc57eccbf23241ba831c5eeb157bd502
#: ../../../../1.8/docs/topics/security.txt:239
msgid ""
"One class of attacks can be prevented by always serving user uploaded "
"content from a distinct top-level or second-level domain. This prevents any "
"exploit blocked by `same-origin policy`_ protections such as cross site "
"scripting. For example, if your site runs on ``example.com``, you would want"
" to serve uploaded content (the :setting:`MEDIA_URL` setting) from something"
" like ``usercontent-example.com``. It's *not* sufficient to serve content "
"from a subdomain like ``usercontent.example.com``."
msgstr ""

# 3fb6f70b894d4917a40350b00de48e11
#: ../../../../1.8/docs/topics/security.txt:247
msgid ""
"Beyond this, applications may choose to define a whitelist of allowable file"
" extensions for user uploaded files and configure the web server to only "
"serve such files."
msgstr ""

# 066c5f92b51a4fb1ab867c0e2659ae1d
#: ../../../../1.8/docs/topics/security.txt:256
msgid "Additional security topics"
msgstr ""

# c51f6a9d88924bc7abe2a8200f7f8a88
#: ../../../../1.8/docs/topics/security.txt:258
msgid ""
"While Django provides good security protection out of the box, it is still "
"important to properly deploy your application and take advantage of the "
"security protection of the Web server, operating system and other "
"components."
msgstr ""

# a8e9f851093041c3be9895586bd952ab
#: ../../../../1.8/docs/topics/security.txt:262
msgid ""
"Make sure that your Python code is outside of the Web server's root. This "
"will ensure that your Python code is not accidentally served as plain text "
"(or accidentally executed)."
msgstr ""

# ba5d059410b944d4baa0de960d705b03
#: ../../../../1.8/docs/topics/security.txt:265
msgid "Take care with any :ref:`user uploaded files <file-upload-security>`."
msgstr ""

# 011dff6e2c804154bab30eefc41a6b27
#: ../../../../1.8/docs/topics/security.txt:266
msgid ""
"Django does not throttle requests to authenticate users. To protect against "
"brute-force attacks against the authentication system, you may consider "
"deploying a Django plugin or Web server module to throttle these requests."
msgstr ""

# be106b44058949d5a9b51012cd331ccd
#: ../../../../1.8/docs/topics/security.txt:269
msgid "Keep your :setting:`SECRET_KEY` a secret."
msgstr ""

# 7d177a1b59de432182375603d405f045
#: ../../../../1.8/docs/topics/security.txt:270
msgid ""
"It is a good idea to limit the accessibility of your caching system and "
"database using a firewall."
msgstr ""

# f510ae9a2ec1477cadea5ba0d8baaf47
#: ../../../../1.8/docs/topics/serialization.txt:3
msgid "Serializing Django objects"
msgstr ""

# d3de6a6dee074d82aaa7e86cf7fdc373
#: ../../../../1.8/docs/topics/serialization.txt:5
msgid ""
"Django's serialization framework provides a mechanism for \"translating\" "
"Django models into other formats. Usually these other formats will be text-"
"based and used for sending Django data over a wire, but it's possible for a "
"serializer to handle any format (text-based or not)."
msgstr ""

# ddc255a51b1d44d2859a2ac195c8a305
#: ../../../../1.8/docs/topics/serialization.txt:12
msgid ""
"If you just want to get some data from your tables into a serialized form, "
"you could use the :djadmin:`dumpdata` management command."
msgstr ""

# 2fd96497062f4db680da735305d71847
#: ../../../../1.8/docs/topics/serialization.txt:16
msgid "Serializing data"
msgstr ""

# 971f16b95adc4b4fa791fff502d0d900
#: ../../../../1.8/docs/topics/serialization.txt:18
msgid "At the highest level, serializing data is a very simple operation::"
msgstr ""

# 78aa5492762d422fbfc3d7c1dd218a86
#: ../../../../1.8/docs/topics/serialization.txt:23
msgid ""
"The arguments to the ``serialize`` function are the format to serialize the "
"data to (see `Serialization formats`_) and a "
":class:`~django.db.models.query.QuerySet` to serialize. (Actually, the "
"second argument can be any iterator that yields Django model instances, but "
"it'll almost always be a QuerySet)."
msgstr ""

# 4b79972924b94d1b8b7b584855513d45
#: ../../../../1.8/docs/topics/serialization.txt:31
msgid "You can also use a serializer object directly::"
msgstr ""

# 0dd1429019474c969b822bc3e4e8dd93
#: ../../../../1.8/docs/topics/serialization.txt:38
msgid ""
"This is useful if you want to serialize data directly to a file-like object "
"(which includes an :class:`~django.http.HttpResponse`)::"
msgstr ""

# fadadd7154d046e6b6ea1a2ed5fd90ca
#: ../../../../1.8/docs/topics/serialization.txt:46
msgid ""
"Calling :func:`~django.core.serializers.get_serializer` with an unknown "
":ref:`format <serialization-formats>` will raise a "
"``django.core.serializers.SerializerDoesNotExist`` exception."
msgstr ""

# fa372c52deb449a4b0c936a58176326d
#: ../../../../1.8/docs/topics/serialization.txt:53
msgid "Subset of fields"
msgstr ""

# c3f402a4f11f48619243713ec9f72884
#: ../../../../1.8/docs/topics/serialization.txt:55
msgid ""
"If you only want a subset of fields to be serialized, you can specify a "
"``fields`` argument to the serializer::"
msgstr ""

# 0c013fa1a54a49a2bd554a96e9b336d3
#: ../../../../1.8/docs/topics/serialization.txt:61
msgid ""
"In this example, only the ``name`` and ``size`` attributes of each model "
"will be serialized."
msgstr ""

# 61259bb15b924023b344bcd48e6cdf14
#: ../../../../1.8/docs/topics/serialization.txt:66
msgid ""
"Depending on your model, you may find that it is not possible to deserialize"
" a model that only serializes a subset of its fields. If a serialized object"
" doesn't specify all the fields that are required by a model, the "
"deserializer will not be able to save deserialized instances."
msgstr ""

# 2571b8fcf29140b2b064a615f75af33c
#: ../../../../1.8/docs/topics/serialization.txt:72
msgid "Inherited Models"
msgstr ""

# 6c1fe8f3a18243baa5eb5832fa2af512
#: ../../../../1.8/docs/topics/serialization.txt:74
msgid ""
"If you have a model that is defined using an :ref:`abstract base class "
"<abstract-base-classes>`, you don't have to do anything special to serialize"
" that model. Just call the serializer on the object (or objects) that you "
"want to serialize, and the output will be a complete representation of the "
"serialized object."
msgstr ""

# dfd33c5a5f2f4c79bb500a33763bce6a
#: ../../../../1.8/docs/topics/serialization.txt:80
msgid ""
"However, if you have a model that uses :ref:`multi-table inheritance <multi-"
"table-inheritance>`, you also need to serialize all of the base classes for "
"the model. This is because only the fields that are locally defined on the "
"model will be serialized. For example, consider the following models::"
msgstr ""

# 857e4c6f6a9d4e87850bcde97eca8a2d
#: ../../../../1.8/docs/topics/serialization.txt:91
msgid "If you only serialize the Restaurant model::"
msgstr ""

# 1aef178fb32b48b3bf441e26d7a7d5d5
#: ../../../../1.8/docs/topics/serialization.txt:95
msgid ""
"the fields on the serialized output will only contain the "
"``serves_hot_dogs`` attribute. The ``name`` attribute of the base class will"
" be ignored."
msgstr ""

# 28ac69faefb64dda8c1b1a60f9f41bf5
#: ../../../../1.8/docs/topics/serialization.txt:98
msgid ""
"In order to fully serialize your ``Restaurant`` instances, you will need to "
"serialize the ``Place`` models as well::"
msgstr ""

# 7f6354120a8f45a29bafe96504e0487d
#: ../../../../1.8/docs/topics/serialization.txt:105
msgid "Deserializing data"
msgstr ""

# c6fa2824e6874df3af2ebd1b50ad1a3f
#: ../../../../1.8/docs/topics/serialization.txt:107
msgid "Deserializing data is also a fairly simple operation::"
msgstr ""

# 10c2473c940e4996b40045950a744255
#: ../../../../1.8/docs/topics/serialization.txt:112
msgid ""
"As you can see, the ``deserialize`` function takes the same format argument "
"as ``serialize``, a string or stream of data, and returns an iterator."
msgstr ""

# 6cada72a7e97438697a7692131644ee1
#: ../../../../1.8/docs/topics/serialization.txt:115
msgid ""
"However, here it gets slightly complicated. The objects returned by the "
"``deserialize`` iterator *aren't* simple Django objects. Instead, they are "
"special ``DeserializedObject`` instances that wrap a created -- but unsaved "
"-- object and any associated relationship data."
msgstr ""

# 07fbafe536304143aaa00a74ac60f628
#: ../../../../1.8/docs/topics/serialization.txt:120
msgid ""
"Calling ``DeserializedObject.save()`` saves the object to the database."
msgstr ""

# 69d050f3cdcb4713b29b7430f2165ab2
#: ../../../../1.8/docs/topics/serialization.txt:124
msgid ""
"If the ``pk`` attribute in the serialized data doesn't exist or is null, a "
"new instance will be saved to the database."
msgstr ""

# 8b69d5e92cfb47eda99423bf1e55ff71
#: ../../../../1.8/docs/topics/serialization.txt:127
msgid ""
"This ensures that deserializing is a non-destructive operation even if the "
"data in your serialized representation doesn't match what's currently in the"
" database. Usually, working with these ``DeserializedObject`` instances "
"looks something like::"
msgstr ""

# 8fba91c92ccf464bb6f499e07c44fa08
#: ../../../../1.8/docs/topics/serialization.txt:136
msgid ""
"In other words, the usual use is to examine the deserialized objects to make"
" sure that they are \"appropriate\" for saving before doing so.  Of course, "
"if you trust your data source you could just save the object and move on."
msgstr ""

# c644877c5b934963870af0ae0569d576
#: ../../../../1.8/docs/topics/serialization.txt:140
msgid ""
"The Django object itself can be inspected as ``deserialized_object.object``."
" If fields in the serialized data do not exist on a model, a "
"``DeserializationError`` will be raised unless the ``ignorenonexistent`` "
"argument is passed in as ``True``::"
msgstr ""

# 635d8ea60e7d4bf6b99b34d2422e1f98
#: ../../../../1.8/docs/topics/serialization.txt:150
msgid "Serialization formats"
msgstr ""

# 34a2dbfa13bd4cceb56492efcce24b77
#: ../../../../1.8/docs/topics/serialization.txt:152
msgid ""
"Django supports a number of serialization formats, some of which require you"
" to install third-party Python modules:"
msgstr ""

# bc27d1ae995a41ca8574740fbf75ffea
#: ../../../../1.8/docs/topics/serialization.txt:156
msgid "Identifier"
msgstr ""

# 7006dc77cb1a48fb8c7aad7ac41d2c07
#: ../../../../1.8/docs/topics/serialization.txt:156
msgid "Information"
msgstr ""

# 7fe8322978484f84ab93444c1854ecb9
#: ../../../../1.8/docs/topics/serialization.txt:158
msgid "``xml``"
msgstr ""

# fc33145cef184ffdb0d44ca5626b023c
#: ../../../../1.8/docs/topics/serialization.txt:158
msgid "Serializes to and from a simple XML dialect."
msgstr ""

# edf1c60b2ce8423bbcebad87a37c992b
#: ../../../../1.8/docs/topics/serialization.txt:160
msgid "``json``"
msgstr ""

# 8f66f38bb8d44ddaaf2987b769e035ae
#: ../../../../1.8/docs/topics/serialization.txt:160
msgid "Serializes to and from JSON_."
msgstr ""

# 6fc39263d5e4464ebc44dc562d471ef4
#: ../../../../1.8/docs/topics/serialization.txt:162
msgid "``yaml``"
msgstr ""

# 485f1be339db44a78bd7de0ce49c14f9
#: ../../../../1.8/docs/topics/serialization.txt:162
msgid ""
"Serializes to YAML (YAML Ain't a Markup Language). This serializer is only "
"available if PyYAML_ is installed."
msgstr ""

# f75554d491ee4a1b8370d3da96275cb7
#: ../../../../1.8/docs/topics/serialization.txt:170
msgid "XML"
msgstr ""

# cd1f1786d3df40fd99afe9afe93cca36
#: ../../../../1.8/docs/topics/serialization.txt:172
msgid "The basic XML serialization format is quite simple::"
msgstr ""

# f81c6cf2af8349c48ec72099709b60ff
#: ../../../../1.8/docs/topics/serialization.txt:182
msgid ""
"The whole collection of objects that is either serialized or de-serialized "
"is represented by a ``<django-objects>``-tag which contains multiple "
"``<object>``-elements. Each such object has two attributes: \"pk\" and "
"\"model\", the latter being represented by the name of the app "
"(\"sessions\") and the lowercase name of the model (\"session\") separated "
"by a dot."
msgstr ""

# 582959c45de34736b714328784ef2b4f
#: ../../../../1.8/docs/topics/serialization.txt:188
msgid ""
"Each field of the object is serialized as a ``<field>``-element sporting the"
" fields \"type\" and \"name\". The text content of the element represents "
"the value that should be stored."
msgstr ""

# aee0060a5e6346a1ae1fafa5d555d747
#: ../../../../1.8/docs/topics/serialization.txt:192
msgid ""
"Foreign keys and other relational fields are treated a little bit "
"differently::"
msgstr ""

# a205ade02ce74df8b65f8521dc6cefb6
#: ../../../../1.8/docs/topics/serialization.txt:200
msgid ""
"In this example we specify that the auth.Permission object with the PK 27 "
"has a foreign key to the contenttypes.ContentType instance with the PK 9."
msgstr ""

# 3ef60ace41954a29af5012f7d3ea9381
#: ../../../../1.8/docs/topics/serialization.txt:203
msgid ""
"ManyToMany-relations are exported for the model that binds them. For "
"instance, the auth.User model has such a relation to the auth.Permission "
"model::"
msgstr ""

# e9e9a9d3561c4bd2a3987d9a40d5a124
#: ../../../../1.8/docs/topics/serialization.txt:214
msgid ""
"This example links the given user with the permission models with PKs 46 and"
" 47."
msgstr ""

# e359f7156490422ca8f5f424247d319e
#: ../../../../1.8/docs/topics/serialization.txt:219
msgid "JSON"
msgstr ""

# 3d2b53637b76459abc08cd18a2517ecb
#: ../../../../1.8/docs/topics/serialization.txt:221
msgid ""
"When staying with the same example data as before it would be serialized as "
"JSON in the following way::"
msgstr ""

# 08aa9f6f772342009c68e66281f09d49
#: ../../../../1.8/docs/topics/serialization.txt:235
msgid ""
"The formatting here is a bit simpler than with XML. The whole collection is "
"just represented as an array and the objects are represented by JSON objects"
" with three properties: \"pk\", \"model\" and \"fields\". \"fields\" is "
"again an object containing each field's name and value as property and "
"property-value respectively."
msgstr ""

# 54c53e57f86b4fc787c0eab45ed578cb
#: ../../../../1.8/docs/topics/serialization.txt:241
msgid ""
"Foreign keys just have the PK of the linked object as property value. "
"ManyToMany-relations are serialized for the model that defines them and are "
"represented as a list of PKs."
msgstr ""

# a5bc56ecafa44d709849c200ff537fbe
#: ../../../../1.8/docs/topics/serialization.txt:245
msgid ""
"Date and datetime related types are treated in a special way by the JSON "
"serializer to make the format compatible with `ECMA-262`_."
msgstr ""

# b32c5e37649a48f8ac226b90c9e4919a
#: ../../../../1.8/docs/topics/serialization.txt:248
msgid ""
"Be aware that not all Django output can be passed unmodified to :mod:`json`."
" In particular, :ref:`lazy translation objects <lazy-translations>` need a "
"`special encoder`_ written for them. Something like this will work::"
msgstr ""

# bfe0eea6e6484626bf85a5523237550a
#: ../../../../1.8/docs/topics/serialization.txt:262
msgid ""
"Also note that GeoDjango provides a :doc:`customized GeoJSON serializer "
"</ref/contrib/gis/serializers>`."
msgstr ""

# 63a1d8a79cb74b5bba9110a2b63d2173
#: ../../../../1.8/docs/topics/serialization.txt:269
msgid "YAML"
msgstr ""

# 13ca31767a7d4c7fa81f810a83bb67e6
#: ../../../../1.8/docs/topics/serialization.txt:271
msgid ""
"YAML serialization looks quite similar to JSON. The object list is "
"serialized as a sequence mappings with the keys \"pk\", \"model\" and "
"\"fields\". Each field is again a mapping with the key being name of the "
"field and the value the value::"
msgstr ""

# 8a925486d2e64f158e6027143734f54f
#: ../../../../1.8/docs/topics/serialization.txt:279
msgid ""
"Referential fields are again just represented by the PK or sequence of PKs."
msgstr ""

# 166b0748c2574f43a36868f3d88424a9
#: ../../../../1.8/docs/topics/serialization.txt:284
msgid "Natural keys"
msgstr ""

# 904a47b8aeb1416e829bfd38427ff5c9
#: ../../../../1.8/docs/topics/serialization.txt:286
msgid ""
"The default serialization strategy for foreign keys and many-to-many "
"relations is to serialize the value of the primary key(s) of the objects in "
"the relation. This strategy works well for most objects, but it can cause "
"difficulty in some circumstances."
msgstr ""

# b2a9d98eaf7b4249ab57e8dc6125b132
#: ../../../../1.8/docs/topics/serialization.txt:291
msgid ""
"Consider the case of a list of objects that have a foreign key referencing "
":class:`~django.contrib.contenttypes.models.ContentType`. If you're going to"
" serialize an object that refers to a content type, then you need to have a "
"way to refer to that content type to begin with. Since ``ContentType`` "
"objects are automatically created by Django during the database "
"synchronization process, the primary key of a given content type isn't easy "
"to predict; it will depend on how and when :djadmin:`migrate` was executed. "
"This is true for all models which automatically generate objects, notably "
"including :class:`~django.contrib.auth.models.Permission`, "
":class:`~django.contrib.auth.models.Group`, and "
":class:`~django.contrib.auth.models.User`."
msgstr ""

# 49ed81947861401797306f63a0ea3760
#: ../../../../1.8/docs/topics/serialization.txt:305
msgid ""
"You should never include automatically generated objects in a fixture or "
"other serialized data. By chance, the primary keys in the fixture may match "
"those in the database and loading the fixture will have no effect. In the "
"more likely case that they don't match, the fixture loading will fail with "
"an :class:`~django.db.IntegrityError`."
msgstr ""

# 6c3dc14ac14d478fae80f2dd1d272a8a
#: ../../../../1.8/docs/topics/serialization.txt:311
msgid ""
"There is also the matter of convenience. An integer id isn't always the most"
" convenient way to refer to an object; sometimes, a more natural reference "
"would be helpful."
msgstr ""

# 85d661ae141646aeb2871510c5d8f6b0
#: ../../../../1.8/docs/topics/serialization.txt:315
msgid ""
"It is for these reasons that Django provides *natural keys*. A natural key "
"is a tuple of values that can be used to uniquely identify an object "
"instance without using the primary key value."
msgstr ""

# 52f845cc58c848ed9667df9c76837329
#: ../../../../1.8/docs/topics/serialization.txt:320
msgid "Deserialization of natural keys"
msgstr ""

# ece0fc2f8d8d4a34992016a985914b5d
#: ../../../../1.8/docs/topics/serialization.txt:322
msgid "Consider the following two models::"
msgstr ""

# 924e0c65538b47fa9f5a7b6729a29425
#: ../../../../1.8/docs/topics/serialization.txt:339
msgid ""
"Ordinarily, serialized data for ``Book`` would use an integer to refer to "
"the author. For example, in JSON, a Book might be serialized as::"
msgstr ""

# 6d1612e9f5034bc09e9d88e50fe3a33d
#: ../../../../1.8/docs/topics/serialization.txt:353
msgid ""
"This isn't a particularly natural way to refer to an author. It requires "
"that you know the primary key value for the author; it also requires that "
"this primary key value is stable and predictable."
msgstr ""

# c17446775d304738863fb8ddf7617030
#: ../../../../1.8/docs/topics/serialization.txt:357
msgid ""
"However, if we add natural key handling to Person, the fixture becomes much "
"more humane. To add natural key handling, you define a default Manager for "
"Person with a ``get_by_natural_key()`` method. In the case of a Person, a "
"good natural key might be the pair of first and last name::"
msgstr ""

# 8deea10e21664c53a8e21936abeb6783
#: ../../../../1.8/docs/topics/serialization.txt:380
msgid "Now books can use that natural key to refer to ``Person`` objects::"
msgstr ""

# 1fd172d9a1c840839e06f9cd3be3e9bc
#: ../../../../1.8/docs/topics/serialization.txt:393
msgid ""
"When you try to load this serialized data, Django will use the "
"``get_by_natural_key()`` method to resolve ``[\"Douglas\", \"Adams\"]`` into"
" the primary key of an actual ``Person`` object."
msgstr ""

# 220dba3241c640fbb02fdfeaf9044dc8
#: ../../../../1.8/docs/topics/serialization.txt:399
msgid ""
"Whatever fields you use for a natural key must be able to uniquely identify "
"an object. This will usually mean that your model will have a uniqueness "
"clause (either unique=True on a single field, or ``unique_together`` over "
"multiple fields) for the field or fields in your natural key. However, "
"uniqueness doesn't need to be enforced at the database level. If you are "
"certain that a set of fields will be effectively unique, you can still use "
"those fields as a natural key."
msgstr ""

# e82103730d264cb092029e63ed834926
#: ../../../../1.8/docs/topics/serialization.txt:410
msgid ""
"Deserialization of objects with no primary key will always check whether the"
" model's manager has a ``get_by_natural_key()`` method and if so, use it to "
"populate the deserialized object's primary key."
msgstr ""

# ee94fb25462e4fc9a79d77e3bc7b3256
#: ../../../../1.8/docs/topics/serialization.txt:415
msgid "Serialization of natural keys"
msgstr ""

# 970f98534d2b4d1d94f18ee0f30ed134
#: ../../../../1.8/docs/topics/serialization.txt:417
msgid ""
"So how do you get Django to emit a natural key when serializing an object? "
"Firstly, you need to add another method -- this time to the model itself::"
msgstr ""

# 92134d05ac174e899c11dc048fe055d5
#: ../../../../1.8/docs/topics/serialization.txt:434
msgid ""
"That method should always return a natural key tuple -- in this example, "
"``(first name, last name)``. Then, when you call "
"``serializers.serialize()``, you provide ``use_natural_foreign_keys=True`` "
"or ``use_natural_primary_keys=True`` arguments::"
msgstr ""

# 9a1f04d689b24ce792dfedaea3c7e9bc
#: ../../../../1.8/docs/topics/serialization.txt:442
msgid ""
"When ``use_natural_foreign_keys=True`` is specified, Django will use the "
"``natural_key()`` method to serialize any foreign key reference to objects "
"of the type that defines the method."
msgstr ""

# aa096407ac8140b5b5fc937f0f166aa9
#: ../../../../1.8/docs/topics/serialization.txt:446
msgid ""
"When ``use_natural_primary_keys=True`` is specified, Django will not provide"
" the primary key in the serialized data of this object since it can be "
"calculated during deserialization::"
msgstr ""

# cf394c1f46804382be089ed7d36a83b8
#: ../../../../1.8/docs/topics/serialization.txt:461
msgid ""
"This can be useful when you need to load serialized data into an existing "
"database and you cannot guarantee that the serialized primary key value is "
"not already in use, and do not need to ensure that deserialized objects "
"retain the same primary keys."
msgstr ""

# d671f00db07e4af8b26ea5d98d5ed6a5
#: ../../../../1.8/docs/topics/serialization.txt:466
msgid ""
"If you are using :djadmin:`dumpdata` to generate serialized data, use the "
":djadminopt:`--natural-foreign` and :djadminopt:`--natural-primary` command "
"line flags to generate natural keys."
msgstr ""

# e811ec59896f469d9e4b8f384b4fbc66
#: ../../../../1.8/docs/topics/serialization.txt:472
msgid ""
"You don't need to define both ``natural_key()`` and "
"``get_by_natural_key()``. If you don't want Django to output natural keys "
"during serialization, but you want to retain the ability to load natural "
"keys, then you can opt to not implement the ``natural_key()`` method."
msgstr ""

# b8f8bbe71f064e3fb11bbcc642b77639
#: ../../../../1.8/docs/topics/serialization.txt:478
msgid ""
"Conversely, if (for some strange reason) you want Django to output natural "
"keys during serialization, but *not* be able to load those key values, just "
"don't define the ``get_by_natural_key()`` method."
msgstr ""

# 1870eb9a280e4f8085db75f092bf8b79
#: ../../../../1.8/docs/topics/serialization.txt:484
msgid ""
"Previously there was only a ``use_natural_keys`` argument for "
"``serializers.serialize()`` and the `-n` or `--natural` command line flags. "
"These have been deprecated in favor of the ``use_natural_foreign_keys`` and "
"``use_natural_primary_keys`` arguments and the corresponding :djadminopt"
":`--natural-foreign` and :djadminopt:`--natural-primary` options for "
":djadmin:`dumpdata`."
msgstr ""

# 3acd88bd32c84780b333781ff4b959b5
#: ../../../../1.8/docs/topics/serialization.txt:491
msgid ""
"The original argument and command line flags remain for backwards "
"compatibility and map to the new ``use_natural_foreign_keys`` argument and "
"`--natural-foreign` command line flag. They'll be removed in Django 1.9."
msgstr ""

# 10ad71d688524481b294f414d601efc4
#: ../../../../1.8/docs/topics/serialization.txt:496
msgid "Dependencies during serialization"
msgstr ""

# d35e5be959954b25828bf5103d5c5153
#: ../../../../1.8/docs/topics/serialization.txt:498
msgid ""
"Since natural keys rely on database lookups to resolve references, it is "
"important that the data exists before it is referenced. You can't make a "
"\"forward reference\" with natural keys -- the data you're referencing must "
"exist before you include a natural key reference to that data."
msgstr ""

# 14142349d1d349ae8eac18307bb89658
#: ../../../../1.8/docs/topics/serialization.txt:503
msgid ""
"To accommodate this limitation, calls to :djadmin:`dumpdata` that use the "
":djadminopt:`--natural-foreign` option will serialize any model with a "
"``natural_key()`` method before serializing standard primary key objects."
msgstr ""

# 3f62303a0698411593b5b6b53ecffbaf
#: ../../../../1.8/docs/topics/serialization.txt:507
msgid ""
"However, this may not always be enough. If your natural key refers to "
"another object (by using a foreign key or natural key to another object as "
"part of a natural key), then you need to be able to ensure that the objects "
"on which a natural key depends occur in the serialized data before the "
"natural key requires them."
msgstr ""

# 56092148af2a4cfe94635d1d7895f3ec
#: ../../../../1.8/docs/topics/serialization.txt:513
msgid ""
"To control this ordering, you can define dependencies on your "
"``natural_key()`` methods. You do this by setting a ``dependencies`` "
"attribute on the ``natural_key()`` method itself."
msgstr ""

# 7355b5eecaa2405b9c67c6e04793b16a
#: ../../../../1.8/docs/topics/serialization.txt:517
msgid ""
"For example, let's add a natural key to the ``Book`` model from the example "
"above::"
msgstr ""

# 7b89bb351f1f4de6b601b61d9daa7078
#: ../../../../1.8/docs/topics/serialization.txt:527
msgid ""
"The natural key for a ``Book`` is a combination of its name and its author. "
"This means that ``Person`` must be serialized before ``Book``. To define "
"this dependency, we add one extra line::"
msgstr ""

# 758f83e1949f437aaa8eaca82fc4b082
#: ../../../../1.8/docs/topics/serialization.txt:535
msgid ""
"This definition ensures that all ``Person`` objects are serialized before "
"any ``Book`` objects. In turn, any object referencing ``Book`` will be "
"serialized after both ``Person`` and ``Book`` have been serialized."
msgstr ""

# 9a8b4f39c23842c0a2e302d34a49796c
#: ../../../../1.8/docs/topics/settings.txt:3
msgid "Django settings"
msgstr ""

# 74820f15ad4947619b1d2ff35165a366
#: ../../../../1.8/docs/topics/settings.txt:5
msgid ""
"A Django settings file contains all the configuration of your Django "
"installation. This document explains how settings work and which settings "
"are available."
msgstr ""

# d08486b7e02f4fdfbeee689aea1bfd4b
#: ../../../../1.8/docs/topics/settings.txt:10
msgid "The basics"
msgstr ""

# 4ee2db4b60e044f9a5a2548dd6f092db
#: ../../../../1.8/docs/topics/settings.txt:12
msgid "A settings file is just a Python module with module-level variables."
msgstr ""

# ee1265d0472e4aafb8a86b1417cac1f6
#: ../../../../1.8/docs/topics/settings.txt:14
msgid "Here are a couple of example settings::"
msgstr ""

# 81818d6cbac7405faeb59cb6173927af
#: ../../../../1.8/docs/topics/settings.txt:22
msgid ""
"If you set :setting:`DEBUG` to ``False``, you also need to properly set the "
":setting:`ALLOWED_HOSTS` setting."
msgstr ""

# d8c5fbd22c524f368b60f24322a6682c
#: ../../../../1.8/docs/topics/settings.txt:25
msgid "Because a settings file is a Python module, the following apply:"
msgstr ""

# d9de5bc897f8400fb641a563e68dc9bb
#: ../../../../1.8/docs/topics/settings.txt:27
msgid "It doesn't allow for Python syntax errors."
msgstr ""

# 74f62511034442288ba6c1ae95e9c147
#: ../../../../1.8/docs/topics/settings.txt:28
msgid ""
"It can assign settings dynamically using normal Python syntax. For example::"
msgstr ""

# 1937661fcccb4923af7477a280a802b9
#: ../../../../1.8/docs/topics/settings.txt:33
msgid "It can import values from other settings files."
msgstr ""

# d09d2dabfe5f481bb145e72631488f31
#: ../../../../1.8/docs/topics/settings.txt:38
msgid "Designating the settings"
msgstr ""

# 227f940414da4e5088786c5f425cc12b
#: ../../../../1.8/docs/topics/settings.txt:42
msgid ""
"When you use Django, you have to tell it which settings you're using. Do "
"this by using an environment variable, ``DJANGO_SETTINGS_MODULE``."
msgstr ""

# 825a0ecd24ff471397a7fbc637530317
#: ../../../../1.8/docs/topics/settings.txt:45
msgid ""
"The value of ``DJANGO_SETTINGS_MODULE`` should be in Python path syntax, "
"e.g. ``mysite.settings``. Note that the settings module should be on the "
"Python `import search path`_."
msgstr ""

# 6eded55903bd4c0689d6bbcd30a558bc
#: ../../../../1.8/docs/topics/settings.txt:52
msgid "The django-admin utility"
msgstr ""

# badf6b3ff857432782d40107585ecf78
#: ../../../../1.8/docs/topics/settings.txt:54
msgid ""
"When using :doc:`django-admin </ref/django-admin>`, you can either set the "
"environment variable once, or explicitly pass in the settings module each "
"time you run the utility."
msgstr ""

# 9e1281dcb38647fdb5eef8080a25c198
#: ../../../../1.8/docs/topics/settings.txt:58
msgid "Example (Unix Bash shell)::"
msgstr ""

# 7fa6960148c9419093fe2ed488a7e7e0
#: ../../../../1.8/docs/topics/settings.txt:63
msgid "Example (Windows shell)::"
msgstr ""

# 547262afbbcd44f8a1ff684ad51b5b76
#: ../../../../1.8/docs/topics/settings.txt:68
msgid ""
"Use the ``--settings`` command-line argument to specify the settings "
"manually::"
msgstr ""

# 34ad7c100f174ada8cb8a452aa11ecee
#: ../../../../1.8/docs/topics/settings.txt:75
msgid "On the server (mod_wsgi)"
msgstr ""

# 3bcbfbd2536244aab2c178d78f0f8651
#: ../../../../1.8/docs/topics/settings.txt:77
msgid ""
"In your live server environment, you'll need to tell your WSGI application "
"what settings file to use. Do that with ``os.environ``::"
msgstr ""

# 22bbe1042f3748fab7c7fc426ce4b67c
#: ../../../../1.8/docs/topics/settings.txt:84
msgid ""
"Read the :doc:`Django mod_wsgi documentation "
"</howto/deployment/wsgi/modwsgi>` for more information and other common "
"elements to a Django WSGI application."
msgstr ""

# 9f0c557f2e0b4f80b6ad11a488edbb24
#: ../../../../1.8/docs/topics/settings.txt:89
msgid "Default settings"
msgstr ""

# 8d6b716e51f142a596fef710b8b4746d
#: ../../../../1.8/docs/topics/settings.txt:91
msgid ""
"A Django settings file doesn't have to define any settings if it doesn't "
"need to. Each setting has a sensible default value. These defaults live in "
"the module :file:`django/conf/global_settings.py`."
msgstr ""

# c16ce4298b0f4d50b2b10ce5624822c8
#: ../../../../1.8/docs/topics/settings.txt:95
msgid "Here's the algorithm Django uses in compiling settings:"
msgstr ""

# 138688e6d7bc4083a7d5f580b7d7bf6d
#: ../../../../1.8/docs/topics/settings.txt:97
msgid "Load settings from ``global_settings.py``."
msgstr ""

# 50ac58fc05d049ce92c12de3a25fae24
#: ../../../../1.8/docs/topics/settings.txt:98
msgid ""
"Load settings from the specified settings file, overriding the global "
"settings as necessary."
msgstr ""

# 6a53833aad91470ab044e0b9ae16cf8d
#: ../../../../1.8/docs/topics/settings.txt:101
msgid ""
"Note that a settings file should *not* import from ``global_settings``, "
"because that's redundant."
msgstr ""

# e5e4951bcddd40d891b4556d83a3654c
#: ../../../../1.8/docs/topics/settings.txt:105
msgid "Seeing which settings you've changed"
msgstr ""

# cdb08b0577214b129b85dc892b453dc2
#: ../../../../1.8/docs/topics/settings.txt:107
msgid ""
"There's an easy way to view which of your settings deviate from the default "
"settings. The command ``python manage.py diffsettings`` displays differences"
" between the current settings file and Django's default settings."
msgstr ""

# f2975078609640538f4426be4544e423
#: ../../../../1.8/docs/topics/settings.txt:111
msgid "For more, see the :djadmin:`diffsettings` documentation."
msgstr ""

# 8843f2e17c4a4c2d80c4b157202e5fe5
#: ../../../../1.8/docs/topics/settings.txt:114
msgid "Using settings in Python code"
msgstr ""

# ba121a2f99c24d269fec9aee296dfff7
#: ../../../../1.8/docs/topics/settings.txt:116
msgid ""
"In your Django apps, use settings by importing the object "
"``django.conf.settings``. Example::"
msgstr ""

# 71954447996e47d4ae85f3ea0f97a11b
#: ../../../../1.8/docs/topics/settings.txt:124
msgid ""
"Note that ``django.conf.settings`` isn't a module -- it's an object. So "
"importing individual settings is not possible::"
msgstr ""

# 41219ee15587470088ec1945b87ebc05
#: ../../../../1.8/docs/topics/settings.txt:129
msgid ""
"Also note that your code should *not* import from either ``global_settings``"
" or your own settings file. ``django.conf.settings`` abstracts the concepts "
"of default settings and site-specific settings; it presents a single "
"interface. It also decouples the code that uses settings from the location "
"of your settings."
msgstr ""

# a371c34d955b4f8ca2a72cfcadcf62f3
#: ../../../../1.8/docs/topics/settings.txt:136
msgid "Altering settings at runtime"
msgstr ""

# 827e494051304fc3893a07acea49a9a3
#: ../../../../1.8/docs/topics/settings.txt:138
msgid ""
"You shouldn't alter settings in your applications at runtime. For example, "
"don't do this in a view::"
msgstr ""

# 518e9f4f2feb4e3892a7251588db88a4
#: ../../../../1.8/docs/topics/settings.txt:145
msgid "The only place you should assign to settings is in a settings file."
msgstr ""

# 15e408935aef40e4bb1f6fdc9acf3aa9
#: ../../../../1.8/docs/topics/settings.txt:148
msgid "Security"
msgstr "Seguridad"

# 5f6ec82c01bc429ebda43d49749f1076
#: ../../../../1.8/docs/topics/settings.txt:150
msgid ""
"Because a settings file contains sensitive information, such as the database"
" password, you should make every attempt to limit access to it. For example,"
" change its file permissions so that only you and your Web server's user can"
" read it. This is especially important in a shared-hosting environment."
msgstr ""

# f98167e0f42c4ab4a62906677b4e8f23
#: ../../../../1.8/docs/topics/settings.txt:156
msgid "Available settings"
msgstr ""

# 5e7e8bf71ff349668c0694f3ce2214ce
#: ../../../../1.8/docs/topics/settings.txt:158
msgid ""
"For a full list of available settings, see the :doc:`settings reference "
"</ref/settings>`."
msgstr ""

# 5962e4d7a5024380b1e1a68e0c6b1dbd
#: ../../../../1.8/docs/topics/settings.txt:161
msgid "Creating your own settings"
msgstr ""

# 3a5b0c5f24724575a53cc175b7149352
#: ../../../../1.8/docs/topics/settings.txt:163
msgid ""
"There's nothing stopping you from creating your own settings, for your own "
"Django apps. Just follow these conventions:"
msgstr ""

# 16582a760efc43ab8f702c97ca98cbd9
#: ../../../../1.8/docs/topics/settings.txt:166
msgid "Setting names are in all uppercase."
msgstr ""

# 15a4b1375a1c4acb8b5012f09c3fbcdd
#: ../../../../1.8/docs/topics/settings.txt:167
msgid "Don't reinvent an already-existing setting."
msgstr ""

# 47eb92d6d32a43d2bd13f8bf15c7da89
#: ../../../../1.8/docs/topics/settings.txt:169
msgid ""
"For settings that are sequences, Django itself uses tuples, rather than "
"lists, but this is only a convention."
msgstr ""

# 69c75251926d492e8894a478efe85e35
#: ../../../../1.8/docs/topics/settings.txt:175
msgid "Using settings without setting DJANGO_SETTINGS_MODULE"
msgstr ""

# 7059364c95ff44ea9083f17b6db564c3
#: ../../../../1.8/docs/topics/settings.txt:177
msgid ""
"In some cases, you might want to bypass the ``DJANGO_SETTINGS_MODULE`` "
"environment variable. For example, if you're using the template system by "
"itself, you likely don't want to have to set up an environment variable "
"pointing to a settings module."
msgstr ""

# c72d671272e7411ab83e5430aeffafc4
#: ../../../../1.8/docs/topics/settings.txt:182
msgid ""
"In these cases, you can configure Django's settings manually. Do this by "
"calling:"
msgstr ""

# 675288eaf17f483a834feea7e3a27c85
#: ../../../../1.8/docs/topics/settings.txt:193
msgid ""
"Pass ``configure()`` as many keyword arguments as you'd like, with each "
"keyword argument representing a setting and its value. Each argument name "
"should be all uppercase, with the same name as the settings described above."
" If a particular setting is not passed to ``configure()`` and is needed at "
"some later point, Django will use the default setting value."
msgstr ""

# 7bfdcc9833994120a5de4f4ffe745109
#: ../../../../1.8/docs/topics/settings.txt:199
msgid ""
"Configuring Django in this fashion is mostly necessary -- and, indeed, "
"recommended -- when you're using a piece of the framework inside a larger "
"application."
msgstr ""

# 8200ff56547d476d8d77ac8718d3867b
#: ../../../../1.8/docs/topics/settings.txt:203
msgid ""
"Consequently, when configured via ``settings.configure()``, Django will not "
"make any modifications to the process environment variables (see the "
"documentation of :setting:`TIME_ZONE` for why this would normally occur). "
"It's assumed that you're already in full control of your environment in "
"these cases."
msgstr ""

# 35e24dfb1bd94a40afc65c41d9056eb2
#: ../../../../1.8/docs/topics/settings.txt:210
msgid "Custom default settings"
msgstr ""

# f9f02254b6214000a53f809ffd7cb095
#: ../../../../1.8/docs/topics/settings.txt:212
msgid ""
"If you'd like default values to come from somewhere other than "
"``django.conf.global_settings``, you can pass in a module or class that "
"provides the default settings as the ``default_settings`` argument (or as "
"the first positional argument) in the call to ``configure()``."
msgstr ""

# 2382bb4e989c42ff80a17d3770110622
#: ../../../../1.8/docs/topics/settings.txt:217
msgid ""
"In this example, default settings are taken from ``myapp_defaults``, and the"
" :setting:`DEBUG` setting is set to ``True``, regardless of its value in "
"``myapp_defaults``::"
msgstr ""

# 6b3853003d4c4856b16ab638803010c5
#: ../../../../1.8/docs/topics/settings.txt:226
msgid ""
"The following example, which uses ``myapp_defaults`` as a positional "
"argument, is equivalent::"
msgstr ""

# 90e15d60ed9e4c6aad835b846753a37f
#: ../../../../1.8/docs/topics/settings.txt:231
msgid ""
"Normally, you will not need to override the defaults in this fashion. The "
"Django defaults are sufficiently tame that you can safely use them. Be aware"
" that if you do pass in a new default module, it entirely *replaces* the "
"Django defaults, so you must specify a value for every possible setting that"
" might be used in that code you are importing. Check in "
"``django.conf.settings.global_settings`` for the full list."
msgstr ""

# b051ca68f817492889ba75d2c1bbc7e0
#: ../../../../1.8/docs/topics/settings.txt:239
msgid "Either configure() or DJANGO_SETTINGS_MODULE is required"
msgstr ""

# 5d63be2517254d60a24c7d114e984a86
#: ../../../../1.8/docs/topics/settings.txt:241
msgid ""
"If you're not setting the ``DJANGO_SETTINGS_MODULE`` environment variable, "
"you *must* call ``configure()`` at some point before using any code that "
"reads settings."
msgstr ""

# 69c8e35b235f4fa9b6f3a4db99d8d9fd
#: ../../../../1.8/docs/topics/settings.txt:245
msgid ""
"If you don't set ``DJANGO_SETTINGS_MODULE`` and don't call ``configure()``, "
"Django will raise an ``ImportError`` exception the first time a setting is "
"accessed."
msgstr ""

# bcaed5931745401b9b701ee27c835686
#: ../../../../1.8/docs/topics/settings.txt:249
msgid ""
"If you set ``DJANGO_SETTINGS_MODULE``, access settings values somehow, "
"*then* call ``configure()``, Django will raise a ``RuntimeError`` indicating"
" that settings have already been configured. There is a property just for "
"this purpose:"
msgstr ""

# 81a5fb5ad7724ea884b438865a523da3
#: ../../../../1.8/docs/topics/settings.txt:262
msgid ""
"Also, it's an error to call ``configure()`` more than once, or to call "
"``configure()`` after any setting has been accessed."
msgstr ""

# df23d0fa866945569fa69c1c8f1fd288
#: ../../../../1.8/docs/topics/settings.txt:265
msgid ""
"It boils down to this: Use exactly one of either ``configure()`` or "
"``DJANGO_SETTINGS_MODULE``. Not both, and not neither."
msgstr ""

# 6bd089d90aba4575a0b45848ecf258fe
#: ../../../../1.8/docs/topics/settings.txt:272
msgid ":doc:`The Settings Reference </ref/settings>`"
msgstr ""

# dbda662400d64510ade22921ce9f8f09
#: ../../../../1.8/docs/topics/settings.txt:273
msgid "Contains the complete list of core and contrib app settings."
msgstr ""

# 07944e22d6b84f54a607a2d9a19b91f2
#: ../../../../1.8/docs/topics/signals.txt:3
msgid "Signals"
msgstr "Señales"

# 2c9c92b68a3146f79d9ac650addf17e7
#: ../../../../1.8/docs/topics/signals.txt:8
msgid ""
"Django includes a \"signal dispatcher\" which helps allow decoupled "
"applications get notified when actions occur elsewhere in the framework. In "
"a nutshell, signals allow certain *senders* to notify a set of *receivers* "
"that some action has taken place. They're especially useful when many pieces"
" of code may be interested in the same events."
msgstr ""

# 6c216eacc2c74154953abb310d7e8934
#: ../../../../1.8/docs/topics/signals.txt:14
msgid ""
"Django provides a :doc:`set of built-in signals </ref/signals>` that let "
"user code get notified by Django itself of certain actions. These include "
"some useful notifications:"
msgstr ""

# d6654dbf4a804979af8aab8336e5263d
#: ../../../../1.8/docs/topics/signals.txt:18
msgid ""
":data:`django.db.models.signals.pre_save` & "
":data:`django.db.models.signals.post_save`"
msgstr ""

# 89ee450e5fcd4e99b39c4a0feba036b9
#: ../../../../1.8/docs/topics/signals.txt:21
msgid ""
"Sent before or after a model's :meth:`~django.db.models.Model.save` method "
"is called."
msgstr ""

# e5377881d2194c77a6c2c7dfe0c9e212
#: ../../../../1.8/docs/topics/signals.txt:24
msgid ""
":data:`django.db.models.signals.pre_delete` & "
":data:`django.db.models.signals.post_delete`"
msgstr ""

# 5b2659e2127b46bbba0b9e21dd097585
#: ../../../../1.8/docs/topics/signals.txt:27
msgid ""
"Sent before or after a model's :meth:`~django.db.models.Model.delete` method"
" or queryset's :meth:`~django.db.models.query.QuerySet.delete` method is "
"called."
msgstr ""

# 80634c7b9c7a4a30b4f83c0f3f4a2c53
#: ../../../../1.8/docs/topics/signals.txt:31
msgid ":data:`django.db.models.signals.m2m_changed`"
msgstr ""

# 3976bfdcbe094364b9f715bbf74ce247
#: ../../../../1.8/docs/topics/signals.txt:33
msgid ""
"Sent when a :class:`~django.db.models.ManyToManyField` on a model is "
"changed."
msgstr ""

# 391fc572d9cf4812a30b89bb13f7d8a4
#: ../../../../1.8/docs/topics/signals.txt:35
msgid ""
":data:`django.core.signals.request_started` & "
":data:`django.core.signals.request_finished`"
msgstr ""

# 7d31b73e2ec1414f862e1f22397a1bae
#: ../../../../1.8/docs/topics/signals.txt:38
msgid "Sent when Django starts or finishes an HTTP request."
msgstr ""

# 65d23ec2d7c94b2e97ab90b2a8a04b77
#: ../../../../1.8/docs/topics/signals.txt:40
msgid ""
"See the :doc:`built-in signal documentation </ref/signals>` for a complete "
"list, and a complete explanation of each signal."
msgstr ""

# b6ffc017386946aeba8b382ac813ecd6
#: ../../../../1.8/docs/topics/signals.txt:43
msgid "You can also `define and send your own custom signals`_; see below."
msgstr ""

# a19a26ffff2248149a850a4e2b6a74bb
#: ../../../../1.8/docs/topics/signals.txt:48
msgid "Listening to signals"
msgstr ""

# afae56e3bc2b47028a4f2931ec690006
#: ../../../../1.8/docs/topics/signals.txt:50
msgid ""
"To receive a signal, you need to register a *receiver* function that gets "
"called when the signal is sent by using the :meth:`Signal.connect` method:"
msgstr ""

# 211a1192b7d5426285e32ee6a43c22bb
#: ../../../../1.8/docs/topics/signals.txt:55
msgid ""
"The callback function which will be connected to this signal. See :ref"
":`receiver-functions` for more information."
msgstr ""

# 5fd34af8a58e4412aafb552a89f626eb
#: ../../../../1.8/docs/topics/signals.txt:58
msgid ""
"Specifies a particular sender to receive signals from. See :ref:`connecting-"
"to-specific-signals` for more information."
msgstr ""

# c45a0ed8c61946dd9a325dd161756337
#: ../../../../1.8/docs/topics/signals.txt:61
msgid ""
"Django stores signal handlers as weak references by default. Thus, if your "
"receiver is a local function, it may be garbage collected. To prevent this, "
"pass ``weak=False`` when you call the signal's ``connect()`` method."
msgstr ""

# 3649fa80e24b4442aa4cd252bbf5b03f
#: ../../../../1.8/docs/topics/signals.txt:66
msgid ""
"A unique identifier for a signal receiver in cases where duplicate signals "
"may be sent. See :ref:`preventing-duplicate-signals` for more information."
msgstr ""

# f4af7cdce8834f9983d3a49a54a00e8b
#: ../../../../1.8/docs/topics/signals.txt:70
msgid ""
"Let's see how this works by registering a signal that gets called after each"
" HTTP request is finished. We'll be connecting to the "
":data:`~django.core.signals.request_finished` signal."
msgstr ""

# e1de8d1fc49443a782e1b6f7fc1d42ee
#: ../../../../1.8/docs/topics/signals.txt:77
msgid "Receiver functions"
msgstr ""

# 299c543dca354d6d8794e4b87197fd3c
#: ../../../../1.8/docs/topics/signals.txt:79
msgid ""
"First, we need to define a receiver function. A receiver can be any Python "
"function or method::"
msgstr ""

# e990eacf8dc8469d8914b61dfd78a180
#: ../../../../1.8/docs/topics/signals.txt:85
msgid ""
"Notice that the function takes a ``sender`` argument, along with wildcard "
"keyword arguments (``**kwargs``); all signal handlers must take these "
"arguments."
msgstr ""

# bf0e6c72273447c6b63c8d8a3f20e4f2
#: ../../../../1.8/docs/topics/signals.txt:88
msgid ""
"We'll look at senders `a bit later`_, but right now look at the ``**kwargs``"
" argument. All signals send keyword arguments, and may change those keyword "
"arguments at any time. In the case of "
":data:`~django.core.signals.request_finished`, it's documented as sending no"
" arguments, which means we might be tempted to write our signal handling as "
"``my_callback(sender)``."
msgstr ""

# 13afa74886a84c15ab843214f654acb3
#: ../../../../1.8/docs/topics/signals.txt:97
msgid ""
"This would be wrong -- in fact, Django will throw an error if you do so. "
"That's because at any point arguments could get added to the signal and your"
" receiver must be able to handle those new arguments."
msgstr ""

# aeb2f9bf03b640769eeeb0ecc0e20dbf
#: ../../../../1.8/docs/topics/signals.txt:104
msgid "Connecting receiver functions"
msgstr ""

# 13f06b8e9caf417e8dac789108fb1038
#: ../../../../1.8/docs/topics/signals.txt:106
msgid ""
"There are two ways you can connect a receiver to a signal. You can take the "
"manual connect route::"
msgstr ""

# 2b50aea51cfe4b90a52db2d4f842d02b
#: ../../../../1.8/docs/topics/signals.txt:113
msgid "Alternatively, you can use a :func:`receiver` decorator:"
msgstr ""

# 6d4ba789c6014f8ab5fe259ed70f6f08
#: ../../../../1.8/docs/topics/signals.txt:117
msgid "A signal or a list of signals to connect a function to."
msgstr ""

# 95b678b8a58440a28dcae58b308906f3
#: ../../../../1.8/docs/topics/signals.txt:119
msgid "Here's how you connect with the decorator::"
msgstr ""

# 3929bd1259474cedb73f3b07f538d503
#: ../../../../1.8/docs/topics/signals.txt:128
msgid ""
"Now, our ``my_callback`` function will be called each time a request "
"finishes."
msgstr ""

# 726dd157097c43418abb0c9bf849cdc7
#: ../../../../1.8/docs/topics/signals.txt:130
msgid "Where should this code live?"
msgstr ""

# d9ec6b2d880f46358858f72009f472c4
#: ../../../../1.8/docs/topics/signals.txt:132
msgid ""
"Strictly speaking, signal handling and registration code can live anywhere "
"you like, although it's recommended to avoid the application's root module "
"and its ``models`` module to minimize side-effects of importing code."
msgstr ""

# 573e505a370644178a4fe930a542b483
#: ../../../../1.8/docs/topics/signals.txt:136
msgid ""
"In practice, signal handlers are usually defined in a ``signals`` submodule "
"of the application they relate to. Signal receivers are connected in the "
":meth:`~django.apps.AppConfig.ready` method of your application "
"configuration class. If you're using the :func:`receiver` decorator, simply "
"import the ``signals`` submodule inside "
":meth:`~django.apps.AppConfig.ready`."
msgstr ""

# 3e4b652f54ff4a869f24dde162b321be
#: ../../../../1.8/docs/topics/signals.txt:145
msgid ""
"Since :meth:`~django.apps.AppConfig.ready` didn't exist in previous versions"
" of Django, signal registration usually happened in the ``models`` module."
msgstr ""

# 1e5c03c34aff490c9335026527793567
#: ../../../../1.8/docs/topics/signals.txt:151
msgid ""
"The :meth:`~django.apps.AppConfig.ready` method may be executed more than "
"once during testing, so you may want to :ref:`guard your signals from "
"duplication <preventing-duplicate-signals>`, especially if you're planning "
"to send them within tests."
msgstr ""

# 86d0cb723ae446ae9480cbd4d0913ee6
#: ../../../../1.8/docs/topics/signals.txt:159
msgid "Connecting to signals sent by specific senders"
msgstr ""

# 1053ea3130fd48968231acba11888b90
#: ../../../../1.8/docs/topics/signals.txt:161
msgid ""
"Some signals get sent many times, but you'll only be interested in receiving"
" a certain subset of those signals. For example, consider the "
":data:`django.db.models.signals.pre_save` signal sent before a model gets "
"saved. Most of the time, you don't need to know when *any* model gets saved "
"-- just when one *specific* model is saved."
msgstr ""

# 283bbc1671e345109b05f347229eec4e
#: ../../../../1.8/docs/topics/signals.txt:167
msgid ""
"In these cases, you can register to receive signals sent only by particular "
"senders. In the case of :data:`django.db.models.signals.pre_save`, the "
"sender will be the model class being saved, so you can indicate that you "
"only want signals sent by some model::"
msgstr ""

# 45b729d06480430d856d883fce92223b
#: ../../../../1.8/docs/topics/signals.txt:181
msgid ""
"The ``my_handler`` function will only be called when an instance of "
"``MyModel`` is saved."
msgstr ""

# a50d629fd8704b58a1368b776f441acf
#: ../../../../1.8/docs/topics/signals.txt:184
msgid ""
"Different signals use different objects as their senders; you'll need to "
"consult the :doc:`built-in signal documentation </ref/signals>` for details "
"of each particular signal."
msgstr ""

# 72841eea8c3c44bda42bcb013e16c54a
#: ../../../../1.8/docs/topics/signals.txt:191
msgid "Preventing duplicate signals"
msgstr ""

# 9d992092e1904517adf569ba09c7ee98
#: ../../../../1.8/docs/topics/signals.txt:193
msgid ""
"In some circumstances, the code connecting receivers to signals may run "
"multiple times. This can cause your receiver function to be registered more "
"than once, and thus called multiples times for a single signal event."
msgstr ""

# 1b86056bc00f4a0687e970d85d5ca6ea
#: ../../../../1.8/docs/topics/signals.txt:197
msgid ""
"If this behavior is problematic (such as when using signals to send an email"
" whenever a model is saved), pass a unique identifier as the "
"``dispatch_uid`` argument to identify your receiver function. This "
"identifier will usually be a string, although any hashable object will "
"suffice. The end result is that your receiver function will only be bound to"
" the signal once for each unique ``dispatch_uid`` value::"
msgstr ""

# 13914ad27c194517a31983be65e8df85
#: ../../../../1.8/docs/topics/signals.txt:209
msgid "Defining and sending signals"
msgstr ""

# 8868e996c82e4e4a9e38c56d055ca848
#: ../../../../1.8/docs/topics/signals.txt:211
msgid ""
"Your applications can take advantage of the signal infrastructure and "
"provide its own signals."
msgstr ""

# c456ab02c05747b0a1e8b74758dedf30
#: ../../../../1.8/docs/topics/signals.txt:215
msgid "Defining signals"
msgstr ""

# 90bb76db8c4049999635777cb5ec4862
#: ../../../../1.8/docs/topics/signals.txt:219
msgid ""
"All signals are :class:`django.dispatch.Signal` instances. The "
"``providing_args`` is a list of the names of arguments the signal will "
"provide to listeners. This is purely documentational, however, as there is "
"nothing that checks that the signal actually provides these arguments to its"
" listeners."
msgstr ""

# f92042e953f04a9ea529399f7374296f
#: ../../../../1.8/docs/topics/signals.txt:230
msgid ""
"This declares a ``pizza_done`` signal that will provide receivers with "
"``toppings`` and ``size`` arguments."
msgstr ""

# fa2a02b0190a44d5bb42ec23d870dd7f
#: ../../../../1.8/docs/topics/signals.txt:233
msgid ""
"Remember that you're allowed to change this list of arguments at any time, "
"so getting the API right on the first try isn't necessary."
msgstr ""

# 06b29f835f654877a15b8614f37b5473
#: ../../../../1.8/docs/topics/signals.txt:237
msgid "Sending signals"
msgstr ""

# 02f1afebe6da4ccb97ce9d7a465f814c
#: ../../../../1.8/docs/topics/signals.txt:239
msgid "There are two ways to send signals in Django."
msgstr ""

# c06dca8db8654b7682aa55521fd43367
#: ../../../../1.8/docs/topics/signals.txt:244
msgid ""
"To send a signal, call either :meth:`Signal.send` or "
":meth:`Signal.send_robust`. You must provide the ``sender`` argument (which "
"is a class most of the time), and may provide as many other keyword "
"arguments as you like."
msgstr ""

# d0ed7665a90941eabaa025e6ee043cf4
#: ../../../../1.8/docs/topics/signals.txt:248
msgid "For example, here's how sending our ``pizza_done`` signal might look::"
msgstr ""

# c96c0a91f296483493b57d5003d02524
#: ../../../../1.8/docs/topics/signals.txt:257
msgid ""
"Both ``send()`` and ``send_robust()`` return a list of tuple pairs "
"``[(receiver, response), ... ]``, representing the list of called receiver "
"functions and their response values."
msgstr ""

# 50c708a8aeb4471789355880e2560bab
#: ../../../../1.8/docs/topics/signals.txt:261
msgid ""
"``send()`` differs from ``send_robust()`` in how exceptions raised by "
"receiver functions are handled. ``send()`` does *not* catch any exceptions "
"raised by receivers; it simply allows errors to propagate. Thus not all "
"receivers may be notified of a signal in the face of an error."
msgstr ""

# 6d68ef65ceee4662b980cbd89538c82f
#: ../../../../1.8/docs/topics/signals.txt:266
msgid ""
"``send_robust()`` catches all errors derived from Python's ``Exception`` "
"class, and ensures all receivers are notified of the signal. If an error "
"occurs, the error instance is returned in the tuple pair for the receiver "
"that raised the error."
msgstr ""

# 142a6e78370640388a4ca5305e57939b
#: ../../../../1.8/docs/topics/signals.txt:272
msgid ""
"The tracebacks are present on the ``__traceback__`` attribute of the errors "
"returned when calling ``send_robust()``."
msgstr ""

# 2a446a8d6b3a4d6e9e5c7b79dad3a3f9
#: ../../../../1.8/docs/topics/signals.txt:276
msgid "Disconnecting signals"
msgstr ""

# a077229a2876478c9e06af85935be8e6
#: ../../../../1.8/docs/topics/signals.txt:280
msgid ""
"To disconnect a receiver from a signal, call :meth:`Signal.disconnect`. The "
"arguments are as described in :meth:`.Signal.connect`. The method returns "
"``True`` if a receiver was disconnected and ``False`` if not."
msgstr ""

# 1af3086c677448d98778a60133ede8aa
#: ../../../../1.8/docs/topics/signals.txt:284
msgid ""
"The ``receiver`` argument indicates the registered receiver to disconnect. "
"It may be ``None`` if ``dispatch_uid`` is used to identify the receiver."
msgstr ""

# f0d454d281fa493094d582c9b7d5e4f1
#: ../../../../1.8/docs/topics/signals.txt:289
msgid "The boolean return value was added."
msgstr ""

# 37cc3dbf414b450cb1bfc3e9d3167651
#: ../../../../1.8/docs/topics/signing.txt:3
msgid "Cryptographic signing"
msgstr ""

# aefd8ef650784a129c3f77581a631938
#: ../../../../1.8/docs/topics/signing.txt:8
msgid ""
"The golden rule of Web application security is to never trust data from "
"untrusted sources. Sometimes it can be useful to pass data through an "
"untrusted medium. Cryptographically signed values can be passed through an "
"untrusted channel safe in the knowledge that any tampering will be detected."
msgstr ""

# 8c3ff043f6ca4e4395a647861d944078
#: ../../../../1.8/docs/topics/signing.txt:13
msgid ""
"Django provides both a low-level API for signing values and a high-level API"
" for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""

# abc926302e684e71baa7146256beac77
#: ../../../../1.8/docs/topics/signing.txt:17
msgid "You may also find signing useful for the following:"
msgstr ""

# b3c1556da7964dc7977592dc95b3edee
#: ../../../../1.8/docs/topics/signing.txt:19
msgid ""
"Generating \"recover my account\" URLs for sending to users who have lost "
"their password."
msgstr ""

# 06cae53f4d6f4053a151d4dfe0693369
#: ../../../../1.8/docs/topics/signing.txt:22
msgid "Ensuring data stored in hidden form fields has not been tampered with."
msgstr ""

# ea27a67bfebe40e79d3a4acc3e8607c7
#: ../../../../1.8/docs/topics/signing.txt:24
msgid ""
"Generating one-time secret URLs for allowing temporary access to a protected"
" resource, for example a downloadable file that a user has paid for."
msgstr ""

# 2468049891a74bdfa18015bcd2dab24f
#: ../../../../1.8/docs/topics/signing.txt:29
msgid "Protecting the SECRET_KEY"
msgstr ""

# b2c3dbaa73e741bfae4a37fedd2129e2
#: ../../../../1.8/docs/topics/signing.txt:31
msgid ""
"When you create a new Django project using :djadmin:`startproject`, the "
"``settings.py`` file is generated automatically and gets a random "
":setting:`SECRET_KEY` value. This value is the key to securing signed data "
"-- it is vital you keep this secure, or attackers could use it to generate "
"their own signed values."
msgstr ""

# ba8bf8f7835e4fcd8e1b889698666bfd
#: ../../../../1.8/docs/topics/signing.txt:38
msgid "Using the low-level API"
msgstr ""

# 3dcd15c0c739411e94110bb3c10df5ec
#: ../../../../1.8/docs/topics/signing.txt:40
msgid ""
"Django's signing methods live in the ``django.core.signing`` module. To sign"
" a value, first instantiate a ``Signer`` instance::"
msgstr ""

# 1009432613a0431bacc6d39a2b67bbe5
#: ../../../../1.8/docs/topics/signing.txt:49
msgid ""
"The signature is appended to the end of the string, following the colon. You"
" can retrieve the original value using the ``unsign`` method::"
msgstr ""

# ad79588f89654c339280b41918b0fbb1
#: ../../../../1.8/docs/topics/signing.txt:56
msgid ""
"If the signature or value have been altered in any way, a "
"``django.core.signing.BadSignature`` exception will be raised::"
msgstr ""

# 3b9a627dcab64650a96d0b5d81744734
#: ../../../../1.8/docs/topics/signing.txt:66
msgid ""
"By default, the ``Signer`` class uses the :setting:`SECRET_KEY` setting to "
"generate signatures. You can use a different secret by passing it to the "
"``Signer`` constructor::"
msgstr ""

# 57d5676b28884ae09fc1e0a8a062f83b
#: ../../../../1.8/docs/topics/signing.txt:77
msgid ""
"Returns a signer which uses ``key`` to generate signatures and ``sep`` to "
"separate values. ``sep`` cannot be in the `URL safe base64 alphabet "
"<http://tools.ietf.org/html/rfc4648#section-5>`_.  This alphabet contains "
"alphanumeric characters, hyphens, and underscores."
msgstr ""

# 0893eec86db241798d465895db432cae
#: ../../../../1.8/docs/topics/signing.txt:83
msgid "Using the salt argument"
msgstr ""

# c17697749b434537aa9f9d6e33690f36
#: ../../../../1.8/docs/topics/signing.txt:85
msgid ""
"If you do not wish for every occurrence of a particular string to have the "
"same signature hash, you can use the optional ``salt`` argument to the "
"``Signer`` class. Using a salt will seed the signing hash function with both"
" the salt and your :setting:`SECRET_KEY`::"
msgstr ""

# 2780bdfe2ef542b78a569e4e322cd557
#: ../../../../1.8/docs/topics/signing.txt:99
msgid ""
"Using salt in this way puts the different signatures into different "
"namespaces.  A signature that comes from one namespace (a particular salt "
"value) cannot be used to validate the same plaintext string in a different "
"namespace that is using a different salt setting. The result is to prevent "
"an attacker from using a signed string generated in one place in the code as"
" input to another piece of code that is generating (and verifying) "
"signatures using a different salt."
msgstr ""

# 658ef62bd68d491aaced34f3eca92731
#: ../../../../1.8/docs/topics/signing.txt:107
msgid ""
"Unlike your :setting:`SECRET_KEY`, your salt argument does not need to stay "
"secret."
msgstr ""

# 76ed4ea30f1747059da3823ecab6bb6a
#: ../../../../1.8/docs/topics/signing.txt:111
msgid "Verifying timestamped values"
msgstr ""

# 21208c11bf6a4b3885e75c3db55f75da
#: ../../../../1.8/docs/topics/signing.txt:113
msgid ""
"``TimestampSigner`` is a subclass of :class:`~Signer` that appends a signed "
"timestamp to the value. This allows you to confirm that a signed value was "
"created within a specified period of time::"
msgstr ""

# f3ec5ad7003c41a7925e7c7e6c97e525
#: ../../../../1.8/docs/topics/signing.txt:137
msgid "Sign ``value`` and append current timestamp to it."
msgstr ""

# 622fd9b4488e457b81856f3f7020a3d2
#: ../../../../1.8/docs/topics/signing.txt:141
msgid ""
"Checks if ``value`` was signed less than ``max_age`` seconds ago, otherwise "
"raises ``SignatureExpired``. The ``max_age`` parameter can accept an integer"
" or a :py:class:`datetime.timedelta` object."
msgstr ""

# 158e8799232e42dcb8c2d9569d7b075b
#: ../../../../1.8/docs/topics/signing.txt:147
msgid "Previously, the ``max_age`` parameter only accepted an integer."
msgstr ""

# e28157e85656483ca04cd7b3fa59f307
#: ../../../../1.8/docs/topics/signing.txt:150
msgid "Protecting complex data structures"
msgstr ""

# dacb9ce4e8794b78a4457ac4463f7fe8
#: ../../../../1.8/docs/topics/signing.txt:152
msgid ""
"If you wish to protect a list, tuple or dictionary you can do so using the "
"signing module's ``dumps`` and ``loads`` functions. These imitate Python's "
"pickle module, but use JSON serialization under the hood. JSON ensures that "
"even if your :setting:`SECRET_KEY` is stolen an attacker will not be able to"
" execute arbitrary commands by exploiting the pickle format::"
msgstr ""

# df7bf7b0634348999ad00f4a276fe825
#: ../../../../1.8/docs/topics/signing.txt:165
msgid ""
"Because of the nature of JSON (there is no native distinction between lists "
"and tuples) if you pass in a tuple, you will get a list from "
"``signing.loads(object)``::"
msgstr ""

# e0137b0272914f749fd0f7fabd1065a1
#: ../../../../1.8/docs/topics/signing.txt:176
msgid ""
"Returns URL-safe, sha1 signed base64 compressed JSON string. Serialized "
"object is signed using :class:`~TimestampSigner`."
msgstr ""

# 8ab4737bc5ef417b9167880832f0e59f
#: ../../../../1.8/docs/topics/signing.txt:181
msgid ""
"Reverse of ``dumps()``, raises ``BadSignature`` if signature fails. Checks "
"``max_age`` (in seconds) if given."
msgstr ""

# e0704e5078b6435889003f0d3e362a0a
#: ../../../../1.8/docs/topics/templates.txt:3
msgid "Templates"
msgstr "Plantillas"

# 34cecfbbe0d144a7bb2c9ffe8a077614
#: ../../../../1.8/docs/topics/templates.txt:8
msgid ""
"Being a web framework, Django needs a convenient way to generate HTML "
"dynamically. The most common approach relies on templates. A template "
"contains the static parts of the desired HTML output as well as some special"
" syntax describing how dynamic content will be inserted. For a hands-on "
"example of creating HTML pages with templates, see :doc:`Tutorial 3 "
"</intro/tutorial03>`."
msgstr ""

# 0a86155173d146ec9e062b6850727a9e
#: ../../../../1.8/docs/topics/templates.txt:14
msgid ""
"A Django project can be configured with one or several template engines (or "
"even zero if you don't use templates). Django ships built-in backends for "
"its own template system, creatively called the Django template language "
"(DTL), and for the popular alternative Jinja2_. Backends for other template "
"languages may be available from third-parties."
msgstr ""

# 1bc181d2909b48718233c0bc8789ae79
#: ../../../../1.8/docs/topics/templates.txt:20
msgid ""
"Django defines a standard API for loading and rendering templates regardless"
" of the backend. Loading consists of finding the template for a given "
"identifier and preprocessing it, usually compiling it to an in-memory "
"representation. Rendering means interpolating the template with context data"
" and returning the resulting string."
msgstr ""

# c1461c28865442eeaa3aac51cf9a773d
#: ../../../../1.8/docs/topics/templates.txt:26
msgid ""
"The :doc:`Django template language </ref/templates/language>` is Django's "
"own template system. Until Django 1.8 it was the only built-in option "
"available. It's a good template library even though it's fairly opinionated "
"and sports a few idiosyncrasies. If you don't have a pressing reason to "
"choose another backend, you should use the DTL, especially if you're writing"
" a pluggable application and you intend to distribute templates. Django's "
"contrib apps that include templates, like :doc:`django.contrib.admin "
"</ref/contrib/admin/index>`, use the DTL."
msgstr ""

# 5a314b6448d7456b8fb36c1b0fd73d00
#: ../../../../1.8/docs/topics/templates.txt:35
msgid ""
"For historical reasons, both the generic support for template engines and "
"the implementation of the Django template language live in the "
"``django.template`` namespace."
msgstr ""

# dc41967b2f7c4e2f97c8d2170116d1d5
#: ../../../../1.8/docs/topics/templates.txt:42
msgid "Support for template engines"
msgstr ""

# 4b27e15b43d44e88ab004b607053e941
#: ../../../../1.8/docs/topics/templates.txt:46
msgid ""
"Support for multiple template engines and the :setting:`TEMPLATES` setting "
"were added in Django 1.8."
msgstr ""

# e24e488de83a48e0a5ccc6697112c8d3
#: ../../../../1.8/docs/topics/templates.txt:50
msgid "Configuration"
msgstr "Configuración"

# f3906b7e695d4cc98be53d9489a04a91
#: ../../../../1.8/docs/topics/templates.txt:52
msgid ""
"Templates engines are configured with the :setting:`TEMPLATES` setting. It's"
" a list of configurations, one for each engine. The default value is empty. "
"The ``settings.py`` generated by the :djadmin:`startproject` command defines"
" a more useful value::"
msgstr ""

# a6b8a1e8e06941a180e9ebd8636bcd03
#: ../../../../1.8/docs/topics/templates.txt:68
msgid ""
":setting:`BACKEND <TEMPLATES-BACKEND>` is a dotted Python path to a template"
" engine class implementing Django's template backend API. The built-in "
"backends are :class:`django.template.backends.django.DjangoTemplates` and "
":class:`django.template.backends.jinja2.Jinja2`."
msgstr ""

# 33cbe5a5b8954822ada84882259c8e0d
#: ../../../../1.8/docs/topics/templates.txt:73
msgid ""
"Since most engines load templates from files, the top-level configuration "
"for each engine contains two common settings:"
msgstr ""

# 97c2cd2d805e42c9b6288989cce009bd
#: ../../../../1.8/docs/topics/templates.txt:76
msgid ""
":setting:`DIRS <TEMPLATES-DIRS>` defines a list of directories where the "
"engine should look for template source files, in search order."
msgstr ""

# 2088c9e8034d4a809163b27a0ae77e27
#: ../../../../1.8/docs/topics/templates.txt:78
msgid ""
":setting:`APP_DIRS <TEMPLATES-APP_DIRS>` tells whether the engine should "
"look for templates inside installed applications. Each backend defines a "
"conventional name for the subdirectory inside applications where its "
"templates should be stored."
msgstr ""

# b073d7c9cba243ef8b7690376373386c
#: ../../../../1.8/docs/topics/templates.txt:83
msgid ""
"While uncommon, it's possible to configure several instances of the same "
"backend with different options. In that case you should define a unique "
":setting:`NAME <TEMPLATES-NAME>` for each engine."
msgstr ""

# 8211ad5781d44743b4dac161262c657b
#: ../../../../1.8/docs/topics/templates.txt:87
msgid ""
":setting:`OPTIONS <TEMPLATES-OPTIONS>` contains backend-specific settings."
msgstr ""

# 890789715b2d4b6589733d26c805b6f7
#: ../../../../1.8/docs/topics/templates.txt:96
msgid ""
"The ``django.template.loader`` module defines two functions to load "
"templates."
msgstr ""

# 484d5cb9e7e24216a8e85d7a62f89d9e
#: ../../../../1.8/docs/topics/templates.txt:100
msgid ""
"This function loads the template with the given name and returns a "
"``Template`` object."
msgstr ""

# 1c9f7429687c4edd8948b89fb18619d4
#: ../../../../1.8/docs/topics/templates.txt:103
msgid ""
"The exact type of the return value depends on the backend that loaded the "
"template. Each backend has its own ``Template`` class."
msgstr ""

# 7210507fbb7149ffa2d22959bdc22001
#: ../../../../1.8/docs/topics/templates.txt:106
msgid ""
"``get_template()`` tries each template engine in order until one succeeds. "
"If the template cannot be found, it raises "
":exc:`~django.template.TemplateDoesNotExist`. If the template is found but "
"contains invalid syntax, it raises "
":exc:`~django.template.TemplateSyntaxError`."
msgstr ""

# 23f95bced031440e84ea9c7d17d64d60
#: ../../../../1.8/docs/topics/templates.txt:112
msgid ""
"How templates are searched and loaded depends on each engine's backend and "
"configuration."
msgstr ""

# 64b898ac58f44297b3e536ba3e1cae28
#: ../../../../1.8/docs/topics/templates.txt:115
msgid ""
"If you want to restrict the search to a particular template engine, pass the"
" engine's :setting:`NAME <TEMPLATES-NAME>` in the ``using`` argument."
msgstr ""

# 18c1025de8a1414ab6263966100a8ae1
#: ../../../../1.8/docs/topics/templates.txt:132
msgid ""
"``get_template()`` returns a backend-dependent ``Template`` instead of a "
":class:`django.template.Template`."
msgstr ""

# 96c5b9dc34884c21ba9961caf88ff082
#: ../../../../1.8/docs/topics/templates.txt:137
msgid ""
"``select_template()`` is just like ``get_template()``, except it takes a "
"list of template names. It tries each name in order and returns the first "
"template that exists."
msgstr ""

# 391d816ef9a94273b1b1986fe32b3135
#: ../../../../1.8/docs/topics/templates.txt:155
msgid ""
"``select_template()`` returns a backend-dependent ``Template`` instead of a "
":class:`django.template.Template`."
msgstr ""

# 51ebd3c693c746f8af85c60e9bf60a46
#: ../../../../1.8/docs/topics/templates.txt:160
msgid ""
"If loading a template fails, the following two exceptions, defined in "
"``django.template``, may be raised:"
msgstr ""

# cacb7e5a49c64d22a62eda57df531849
#: ../../../../1.8/docs/topics/templates.txt:165
msgid "This exception is raised when a template cannot be found."
msgstr ""

# c0700f923018467cbc8f896b10e474dd
#: ../../../../1.8/docs/topics/templates.txt:169
msgid ""
"This exception is raised when a template was found but contains errors."
msgstr ""

# b8b6e043f8e04445be048cde71f8336e
#: ../../../../1.8/docs/topics/templates.txt:171
msgid ""
"``Template`` objects returned by ``get_template()`` and "
"``select_template()`` must provide a ``render()`` method with the following "
"signature:"
msgstr ""

# ac03e37e4f1e4eae9231166e14947e2a
#: ../../../../1.8/docs/topics/templates.txt:178
msgid "Renders this template with a given context."
msgstr ""

# 296e1445121a49ed8572d6e75d42ed27
#: ../../../../1.8/docs/topics/templates.txt:180
msgid ""
"If ``context`` is provided, it must be a :class:`dict`. If it isn't "
"provided, the engine will render the template with an empty context."
msgstr ""

# 15e002645cbf4268be6a62153d25921b
#: ../../../../1.8/docs/topics/templates.txt:183
msgid ""
"If ``request`` is provided, it must be an :class:`~django.http.HttpRequest`."
" Then the engine must make it, as well as the CSRF token, available in the "
"template. How this is achieved is up to each backend."
msgstr ""

# 29ac0ec1a1884c4688ecc87170cebdc0
#: ../../../../1.8/docs/topics/templates.txt:187
msgid ""
"Here's an example of the search algorithm. For this example the "
":setting:`TEMPLATES` setting is::"
msgstr ""

# 892ed58964dd4bd6a3dd4a98593b282a
#: ../../../../1.8/docs/topics/templates.txt:206
msgid ""
"If you call ``get_template('story_detail.html')``, here are the files Django"
" will look for, in order:"
msgstr ""

# fd1190d0b3234ab18448a8b2bb39daa5
# 98863047b219477994a47f016d77946a
#: ../../../../1.8/docs/topics/templates.txt:209
#: ../../../../1.8/docs/topics/templates.txt:219
msgid "``/home/html/example.com/story_detail.html`` (``'django'`` engine)"
msgstr ""

# c5c37740e8334b0cb717635786a7ef83
# e73c54b7011644f99d5970c8569d0f31
#: ../../../../1.8/docs/topics/templates.txt:210
#: ../../../../1.8/docs/topics/templates.txt:220
msgid "``/home/html/default/story_detail.html`` (``'django'`` engine)"
msgstr ""

# c08d050b47984a369e78bf8f6dfc23f6
# 4037b5a815bb4f609fa412da387d91a3
#: ../../../../1.8/docs/topics/templates.txt:211
#: ../../../../1.8/docs/topics/templates.txt:221
msgid "``/home/html/jinja2/story_detail.html`` (``'jinja2'`` engine)"
msgstr ""

# 5eeeccb912fe448cb618b29959d5d9ed
#: ../../../../1.8/docs/topics/templates.txt:213
msgid ""
"If you call ``select_template(['story_253_detail.html', "
"'story_detail.html'])``, here's what Django will look for:"
msgstr ""

# 35617ecc736844498617bc281afdc6c8
#: ../../../../1.8/docs/topics/templates.txt:216
msgid "``/home/html/example.com/story_253_detail.html`` (``'django'`` engine)"
msgstr ""

# 772cd2f5f4414630807aaffe27d4d3b7
#: ../../../../1.8/docs/topics/templates.txt:217
msgid "``/home/html/default/story_253_detail.html`` (``'django'`` engine)"
msgstr ""

# bf09b5ed107248e1861fc749b7c17eb9
#: ../../../../1.8/docs/topics/templates.txt:218
msgid "``/home/html/jinja2/story_253_detail.html`` (``'jinja2'`` engine)"
msgstr ""

# 85258481bcbf49aea19d4f4617f819b8
#: ../../../../1.8/docs/topics/templates.txt:223
msgid "When Django finds a template that exists, it stops looking."
msgstr ""

# 1bed67a4258842e1aac5772bdaba104a
#: ../../../../1.8/docs/topics/templates.txt:225
msgid "Tip"
msgstr ""

# bbd4f7e9acac4c05b9f6e75f67065949
#: ../../../../1.8/docs/topics/templates.txt:227
msgid ""
"You can use :func:`~django.template.loader.select_template()` for flexible "
"template loading. For example, if you've written a news story and want some "
"stories to have custom templates, use something like "
"``select_template(['story_%s_detail.html' % story.id, "
"'story_detail.html'])``. That'll allow you to use a custom template for an "
"individual story, with a fallback template for stories that don't have "
"custom templates."
msgstr ""

# d6e5fefa10c04a05bf65aec86d061129
#: ../../../../1.8/docs/topics/templates.txt:235
msgid ""
"It's possible -- and preferable -- to organize templates in subdirectories "
"inside each directory containing templates. The convention is to make a "
"subdirectory for each Django app, with subdirectories within those "
"subdirectories as needed."
msgstr ""

# 480cdebcfcc941f79fda2cdbc03066a6
#: ../../../../1.8/docs/topics/templates.txt:240
msgid ""
"Do this for your own sanity. Storing all templates in the root level of a "
"single directory gets messy."
msgstr ""

# 4a98e4aa6b1a48e6b000639721a08214
#: ../../../../1.8/docs/topics/templates.txt:243
msgid ""
"To load a template that's within a subdirectory, just use a slash, like so::"
msgstr ""

# 69d6d7f93e514534b943a7e354563450
#: ../../../../1.8/docs/topics/templates.txt:247
msgid ""
"Using the same :setting:`TEMPLATES` option as above, this will attempt to "
"load the following templates:"
msgstr ""

# aa11dfb11ad64cb49fbede0d07a25e47
#: ../../../../1.8/docs/topics/templates.txt:250
msgid ""
"``/home/html/example.com/news/story_detail.html`` (``'django'`` engine)"
msgstr ""

# a89d0d6ceacc4531b36b3ac5b6cba44b
#: ../../../../1.8/docs/topics/templates.txt:251
msgid "``/home/html/default/news/story_detail.html`` (``'django'`` engine)"
msgstr ""

# b9634906d73349809d6e099feb9bae8a
#: ../../../../1.8/docs/topics/templates.txt:252
msgid "``/home/html/jinja2/news/story_detail.html`` (``'jinja2'`` engine)"
msgstr ""

# 12eb6196a0e74c68b3577682adeaad5f
#: ../../../../1.8/docs/topics/templates.txt:256
msgid ""
"In addition, to cut down on the repetitive nature of loading and rendering "
"templates, Django provides a shortcut function which automates the process."
msgstr ""

# 78a8d6fba8834227a4f8f6516807e079
#: ../../../../1.8/docs/topics/templates.txt:261
msgid ""
"``render_to_string()`` loads a template like :func:`get_template` and calls "
"its ``render()`` method immediately. It takes the following arguments."
msgstr ""

# ea88c8b5068449bbb1d2079f212c9c3d
#: ../../../../1.8/docs/topics/templates.txt:266
msgid ""
"The name of the template to load and render. If it's a list of template "
"names, Django uses :func:`select_template` instead of :func:`get_template` "
"to find the template."
msgstr ""

# be91bd0214b44b9ab790628049785a0d
#: ../../../../1.8/docs/topics/templates.txt:271
msgid "A :class:`dict` to be used as the template's context for rendering."
msgstr ""

# ef59ee286e404d44b15c7d43590d2ec3
#: ../../../../1.8/docs/topics/templates.txt:278
msgid ""
"``context`` is now optional. An empty context will be used if it isn't "
"provided."
msgstr ""

# c2acae3284ec4f3d989788e661998267
#: ../../../../1.8/docs/topics/templates.txt:282
msgid ""
"An instance of :class:`~django.template.Context` or a subclass (e.g., an "
"instance of :class:`~django.template.RequestContext`) to use as the "
"template's context."
msgstr ""

# a5200ccdeca34a9b9b0509db8079c015
#: ../../../../1.8/docs/topics/templates.txt:288
msgid ""
"The ``context_instance`` argument is deprecated. Use ``context`` and if "
"needed ``request``."
msgstr ""

# 84a29e8673f445788d23a6e50b72b5a1
#: ../../../../1.8/docs/topics/templates.txt:292
msgid ""
"An optional :class:`~django.http.HttpRequest` that will be available during "
"the template's rendering process."
msgstr ""

# a0acb567771c46f7a1179df28a1da7c4
#: ../../../../1.8/docs/topics/templates.txt:297
msgid "The ``request`` argument was added."
msgstr ""

# 21fbb15a89b24923a288bb8b784a24cb
#: ../../../../1.8/docs/topics/templates.txt:299
msgid ""
"See also the :func:`~django.shortcuts.render()` and "
":func:`~django.shortcuts.render_to_response()` shortcuts, which call "
":func:`render_to_string()` and feed the result into an "
":class:`~django.http.HttpResponse` suitable for returning from a view."
msgstr ""

# ab27a46796a045fa8eefde69207b1751
#: ../../../../1.8/docs/topics/templates.txt:304
msgid "Finally, you can use configured engines directly:"
msgstr ""

# 831f0333bcf94ebf9fb8b2695ca8716b
#: ../../../../1.8/docs/topics/templates.txt:308
msgid "Template engines are available in ``django.template.engines``::"
msgstr ""

# 7ab71f79745048c39bea96396f4a1cb0
#: ../../../../1.8/docs/topics/templates.txt:315
msgid ""
"The lookup key — ``'django'`` in this example — is the engine's "
":setting:`NAME <TEMPLATES-NAME>`."
msgstr ""

# f94c7e352e9e4caf9a1778c45a8b30c9
#: ../../../../1.8/docs/topics/templates.txt:321
msgid "Built-in backends"
msgstr ""

# d841c1e8b70548a38e6acd70321c42f5
#: ../../../../1.8/docs/topics/templates.txt:327
msgid ""
"Set :setting:`BACKEND <TEMPLATES-BACKEND>` to "
"``'django.template.backends.django.DjangoTemplates'`` to configure a Django "
"template engine."
msgstr ""

# dd48ebc2b0e84b3ab84af6ffacadbece
#: ../../../../1.8/docs/topics/templates.txt:331
msgid ""
"When :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is ``True``, "
"``DjangoTemplates`` engines look for templates in the ``templates`` "
"subdirectory of installed applications. This generic name was kept for "
"backwards-compatibility."
msgstr ""

# f44110ccf0504012a6181111ef4bcbaf
#: ../../../../1.8/docs/topics/templates.txt:335
msgid ""
"``DjangoTemplates`` engines accept the following :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>`:"
msgstr ""

# 2737e2170eeb4db9b1ebf698440ab531
#: ../../../../1.8/docs/topics/templates.txt:338
msgid ""
"``'allowed_include_roots'``: a list of strings representing allowed prefixes"
" for the ``{% ssi %}`` template tag. This is a security measure, so that "
"template authors can't access files that they shouldn't be accessing."
msgstr ""

# 82d5efe6c1e24e8eb5954e624d5612de
#: ../../../../1.8/docs/topics/templates.txt:342
msgid ""
"For example, if ``'allowed_include_roots'`` is ``['/home/html', "
"'/var/www']``, then ``{% ssi /home/html/foo.txt %}`` would work, but ``{% "
"ssi /etc/passwd %}`` wouldn't."
msgstr ""

# 3b4db1a73d464f758f5407d3bd0f2a28
# ee2c0c58f8304ac2a98ac30c5d91b7f0
#: ../../../../1.8/docs/topics/templates.txt:346
#: ../../../../1.8/docs/topics/templates.txt:358
msgid "It defaults to an empty list."
msgstr ""

# f457f7c9032b4cdcb5870a56d5c17ed7
#: ../../../../1.8/docs/topics/templates.txt:350
msgid ""
"``allowed_include_roots`` is deprecated because the {% ssi %} tag is "
"deprecated."
msgstr ""

# ed3f7070b6fa4973b8797eb5dfb92113
#: ../../../../1.8/docs/topics/templates.txt:353
msgid ""
"``'context_processors'``: a list of dotted Python paths to callables that "
"are used to populate the context when a template is rendered with a request."
" These callables take a request object as their argument and return a "
":class:`dict` of items to be merged into the context."
msgstr ""

# 546e769f09974964bd76337078aa16a8
#: ../../../../1.8/docs/topics/templates.txt:360
msgid "See :class:`~django.template.RequestContext` for more information."
msgstr ""

# 22def4e55e3546238766ab3bc44a7d44
#: ../../../../1.8/docs/topics/templates.txt:362
msgid ""
"``'debug'``: a boolean that turns on/off template debug mode. If it is "
"``True``, the fancy error page will display a detailed report for any "
"exception raised during template rendering. This report contains the "
"relevant snippet of the template with the appropriate line highlighted."
msgstr ""

# 2e7f26cf71a74a55a50a3722bd97f4a7
#: ../../../../1.8/docs/topics/templates.txt:367
msgid "It defaults to the value of the :setting:`DEBUG` setting."
msgstr ""

# 794707088c334cb8b6e76fdecf3f519f
#: ../../../../1.8/docs/topics/templates.txt:369
msgid ""
"``'loaders'``: a list of dotted Python paths to template loader classes. "
"Each ``Loader`` class knows how to import templates from a particular "
"source. Optionally, a tuple can be used instead of a string. The first item "
"in the tuple should be the ``Loader`` class name, and subsequent items are "
"passed to the ``Loader`` during initialization."
msgstr ""

# 039c0ebc841d4b94956def80c8c3fa36
#: ../../../../1.8/docs/topics/templates.txt:375
msgid ""
"The default depends on the values of :setting:`DIRS <TEMPLATES-DIRS>` and "
":setting:`APP_DIRS <TEMPLATES-APP_DIRS>`."
msgstr ""

# 1379ce6544124600a608472c8ba327a6
#: ../../../../1.8/docs/topics/templates.txt:378
msgid "See :ref:`template-loaders` for details."
msgstr ""

# bf1dcdfec5eb4afab0b5b6f0b23404c7
#: ../../../../1.8/docs/topics/templates.txt:380
msgid ""
"``'string_if_invalid'``: the output, as a string, that the template system "
"should use for invalid (e.g. misspelled) variables."
msgstr ""

# e2265595746f4733a0eb32547336608f
#: ../../../../1.8/docs/topics/templates.txt:383
msgid "It defaults to an empty string."
msgstr ""

# 8b242e58c26d41a59c4e08d62790cfa1
#: ../../../../1.8/docs/topics/templates.txt:385
msgid "See :ref:`invalid-template-variables` for details."
msgstr ""

# d952af0b90d24fe19b7790035762ba1d
#: ../../../../1.8/docs/topics/templates.txt:387
msgid "``'file_charset'``: the charset used to read template files on disk."
msgstr ""

# af841800dc0b4429a020e639def9df1d
#: ../../../../1.8/docs/topics/templates.txt:389
msgid "It defaults to the value of :setting:`FILE_CHARSET`."
msgstr ""

# ef65c913696840e392471c5c3329082f
#: ../../../../1.8/docs/topics/templates.txt:395
msgid "Requires Jinja2_ to be installed:"
msgstr ""

# 438050080772474ba574c6a9230d5ec5
#: ../../../../1.8/docs/topics/templates.txt:401
msgid ""
"Set :setting:`BACKEND <TEMPLATES-BACKEND>` to "
"``'django.template.backends.jinja2.Jinja2'`` to configure a Jinja2_ engine."
msgstr ""

# 549c2fceb2cb4b0e99b7753539bb2576
#: ../../../../1.8/docs/topics/templates.txt:404
msgid ""
"When :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is ``True``, ``Jinja2`` "
"engines look for templates in the ``jinja2`` subdirectory of installed "
"applications."
msgstr ""

# 2690fbdb8c614afea3b9f58cb4286af2
#: ../../../../1.8/docs/topics/templates.txt:407
msgid ""
"The most important entry in :setting:`OPTIONS <TEMPLATES-OPTIONS>` is "
"``'environment'``. It's a dotted Python path to a callable returning a "
"Jinja2 environment. It defaults to ``'jinja2.Environment'``. Django invokes "
"that callable and passes other options as keyword arguments. Furthermore, "
"Django adds defaults that differ from Jinja2's for a few options:"
msgstr ""

# e53f34561ed84e92a8f6ae46c795184b
#: ../../../../1.8/docs/topics/templates.txt:413
msgid "``'autoescape'``: ``True``"
msgstr ""

# 341156ec01294f5987653a8abd840bd3
#: ../../../../1.8/docs/topics/templates.txt:414
msgid ""
"``'loader'``: a loader configured for :setting:`DIRS <TEMPLATES-DIRS>` and "
":setting:`APP_DIRS <TEMPLATES-APP_DIRS>`"
msgstr ""

# c1f72454e73e4483bd81578b80b38868
#: ../../../../1.8/docs/topics/templates.txt:416
msgid "``'auto_reload'``: ``settings.DEBUG``"
msgstr ""

# 58e720d696c54903a20882b5f1c381db
#: ../../../../1.8/docs/topics/templates.txt:417
msgid "``'undefined'``: ``DebugUndefined if settings.DEBUG else Undefined``"
msgstr ""

# 708fd333341c413ead0db99b9ecdc427
#: ../../../../1.8/docs/topics/templates.txt:419
msgid ""
"The default configuration is purposefully kept to a minimum. The ``Jinja2`` "
"backend doesn't create a Django-flavored environment. It doesn't know about "
"Django context processors, filters, and tags. In order to use Django-"
"specific APIs, you must configure them into the environment."
msgstr ""

# caf7e3adcce74f239c92d67c91022276
#: ../../../../1.8/docs/topics/templates.txt:424
msgid ""
"For example, you can create ``myproject/jinja2.py`` with this content::"
msgstr ""

# 0aa092ffc2834e31b90dbeecd52214c0
#: ../../../../1.8/docs/topics/templates.txt:442
msgid ""
"and set the ``'environment'`` option to ``'myproject.jinja2.environment'``."
msgstr ""

# a8fe830941804b60b621a4664056fdf9
#: ../../../../1.8/docs/topics/templates.txt:444
msgid "Then you could use the following constructs in Jinja2 templates:"
msgstr ""

# 0c80ad0d45f34d5f95f2fa5be42105f9
#: ../../../../1.8/docs/topics/templates.txt:452
msgid ""
"The concepts of tags and filters exist both in the Django template language "
"and in Jinja2 but they're used differently. Since Jinja2 supports passing "
"arguments to callables in templates, many features that require a template "
"tag or filter in Django templates can be achieved simply by calling a "
"function in Jinja2 templates, as shown in the example above. Jinja2's global"
" namespace removes the need for template context processors. The Django "
"template language doesn't have an equivalent of Jinja2 tests."
msgstr ""

# 985bf8595c5a4e28a9280bac95cd4c51
#: ../../../../1.8/docs/topics/templates.txt:461
msgid "Custom backends"
msgstr ""

# 07d53d5b38614dfc96d534858c12d5fd
#: ../../../../1.8/docs/topics/templates.txt:463
msgid ""
"Here's how to implement a custom template backend in order to use another "
"template system. A template backend is a class that inherits "
"``django.template.backends.base.BaseEngine``. It must implement "
"``get_template()`` and optionally ``from_string()``. Here's an example for a"
" fictional ``foobar`` template library::"
msgstr ""

# 1d3e53a38a43490ba913c5637050e712
#: ../../../../1.8/docs/topics/templates.txt:519
msgid "See `DEP 182`_ for more information."
msgstr ""

# 6213a7fdd3db4dc3bef825c3fdc9409f
#: ../../../../1.8/docs/topics/templates.txt:526
msgid "The Django template language"
msgstr ""

# 6591656fb9ba4d43a88430e0fe7c506e
#: ../../../../1.8/docs/topics/templates.txt:531
msgid "Syntax"
msgstr ""

# 0871d59b39e4455a9b835a205a713d1c
# a970a09ca7e7405a8195ea43a6092541
#: ../../../../1.8/docs/topics/templates.txt:533
#: ../../../../1.8/docs/topics/templates.txt:632
msgid "About this section"
msgstr ""

# 0cf8de5d6cf3492cab6630b7f3819d05
#: ../../../../1.8/docs/topics/templates.txt:535
msgid ""
"This is an overview of the Django template language's syntax. For details "
"see the :doc:`language syntax reference </ref/templates/language>`."
msgstr ""

# e87b2af830ad4f32b14481ad7eeeb4c9
#: ../../../../1.8/docs/topics/templates.txt:538
msgid ""
"A Django template is simply a text document or a Python string marked-up "
"using the Django template language. Some constructs are recognized and "
"interpreted by the template engine. The main ones are variables and tags."
msgstr ""

# 57dee9d03b704e5b81bd49eae67083bb
#: ../../../../1.8/docs/topics/templates.txt:542
msgid ""
"A template is rendered with a context. Rendering replaces variables with "
"their values, which are looked up in the context, and executes tags. "
"Everything else is output as is."
msgstr ""

# 3b4c814f0d2544d6be78e15b4c69936e
#: ../../../../1.8/docs/topics/templates.txt:546
msgid "The syntax of the Django template language involves four constructs."
msgstr ""

# 56328d5846394501bf9b059c416ea556
#: ../../../../1.8/docs/topics/templates.txt:549
msgid "Variables"
msgstr ""

# f9c75af2cf8148b584453039427e4d22
#: ../../../../1.8/docs/topics/templates.txt:551
msgid ""
"A variable outputs a value from the context, which is a dict-like object "
"mapping keys to values."
msgstr ""

# 94f080e806c446e29eef02c9f34a71fe
#: ../../../../1.8/docs/topics/templates.txt:554
msgid "Variables are surrounded by ``{{`` and ``}}`` like this::"
msgstr ""

# e0834e7ac4c240d8a895e00f395fe95a
#: ../../../../1.8/docs/topics/templates.txt:558
msgid ""
"With a context of ``{'first_name': 'John', 'last_name': 'Doe'}``, this "
"template renders to::"
msgstr ""

# 72d4168bb6234858a24f914c3f57822c
#: ../../../../1.8/docs/topics/templates.txt:563
msgid ""
"Dictionary lookup, attribute lookup and list-index lookups are implemented "
"with a dot notation::"
msgstr ""

# e6d61dd720d249e999b5cb6f00e8e022
#: ../../../../1.8/docs/topics/templates.txt:570
msgid ""
"If a variable resolves to a callable, the template system will call it with "
"no arguments and use its result instead of the callable."
msgstr ""

# bef9ce8e1e0649e4bf17f17f43fd15fe
#: ../../../../1.8/docs/topics/templates.txt:574
msgid "Tags"
msgstr "Etiquetas"

# eb0161b91c0e4d0bb3ac01c27881e1a6
#: ../../../../1.8/docs/topics/templates.txt:576
msgid "Tags provide arbitrary logic in the rendering process."
msgstr ""

# c0dad735716847babd43f84632ff346c
#: ../../../../1.8/docs/topics/templates.txt:578
msgid ""
"This definition is deliberately vague. For example, a tag can output "
"content, serve as a control structure e.g. an \"if\" statement or a \"for\" "
"loop, grab content from a database, or even enable access to other template "
"tags."
msgstr ""

# 87be2c8bc8394d1dbe9d60c7d0ce2c04
#: ../../../../1.8/docs/topics/templates.txt:582
msgid "Tags are surrounded by ``{%`` and ``%}`` like this::"
msgstr ""

# 04932e42daf748588bcfaa5d8ba620b0
#: ../../../../1.8/docs/topics/templates.txt:586
msgid "Most tags accept arguments::"
msgstr ""

# fce909c92c2d4920acd52e7059f19eeb
#: ../../../../1.8/docs/topics/templates.txt:590
msgid "Some tags require beginning and ending tags::"
msgstr ""

# cf8e4fa5768b47bcaffa88546f76332b
#: ../../../../1.8/docs/topics/templates.txt:594
msgid ""
"A :ref:`reference of built-in tags <ref-templates-builtins-tags>` is "
"available as well as :ref:`instructions for writing custom tags <howto-"
"writing-custom-template-tags>`."
msgstr ""

# afb83982a1914661a0db18b9b9d42175
#: ../../../../1.8/docs/topics/templates.txt:601
msgid "Filters transform the values of variables and tag arguments."
msgstr ""

# b052bc72acda4ca4b21e2b45e64d76cb
#: ../../../../1.8/docs/topics/templates.txt:603
msgid "They look like this::"
msgstr ""

# 715ffc49d28c4e2faa223eb7f635d555
#: ../../../../1.8/docs/topics/templates.txt:607
msgid ""
"With a context of ``{'django': 'the web framework for perfectionists with "
"deadlines'}``, this template renders to::"
msgstr ""

# b32e5087a0bb4c729c04663d3f404583
#: ../../../../1.8/docs/topics/templates.txt:612
msgid "Some filters take an argument::"
msgstr ""

# 560959d6d21f4688be51648e415ddf87
#: ../../../../1.8/docs/topics/templates.txt:616
msgid ""
"A :ref:`reference of built-in filters <ref-templates-builtins-filters>` is "
"available as well as :ref:`instructions for writing custom filters <howto-"
"writing-custom-template-filters>`."
msgstr ""

# dc4fb46c75694816854c31c768a9a950
#: ../../../../1.8/docs/topics/templates.txt:621
msgid "Comments"
msgstr "Comentarios"

# 6e0ed2fb148947b8bef817a0f05ff074
#: ../../../../1.8/docs/topics/templates.txt:623
msgid "Comments look like this::"
msgstr ""

# 722393464e264609b40d3187be0b6e68
#: ../../../../1.8/docs/topics/templates.txt:627
msgid "A :ttag:`{% comment %} <comment>` tag provides multi-line comments."
msgstr ""

# d21878b27e614b648fa02cfc431ee1f9
#: ../../../../1.8/docs/topics/templates.txt:630
msgid "Components"
msgstr ""

# 91f0e162236d4c5b85ccfef70b4acbc4
#: ../../../../1.8/docs/topics/templates.txt:634
msgid ""
"This is an overview of the Django template language's APIs. For details see "
"the :doc:`API reference </ref/templates/api>`."
msgstr ""

# aa1e722c61544e83888330d3d6873663
#: ../../../../1.8/docs/topics/templates.txt:638
msgid "Engine"
msgstr ""

# e34c50b48a504607b27193ff3be97d2c
#: ../../../../1.8/docs/topics/templates.txt:640
msgid ""
":class:`django.template.Engine` encapsulates an instance of the Django "
"template system. The main reason for instantiating an "
":class:`~django.template.Engine` directly is to use the Django template "
"language outside of a Django project."
msgstr ""

# 523c79fb848748e8a9db9811454cc397
#: ../../../../1.8/docs/topics/templates.txt:645
msgid ""
":class:`django.template.backends.django.DjangoTemplates` is a thin wrapper "
"adapting :class:`django.template.Engine` to Django's template backend API."
msgstr ""

# fba17c0db0ec49be895be0bb1072aa4c
#: ../../../../1.8/docs/topics/templates.txt:649
msgid "Template"
msgstr ""

# bff4e6ffcfed419db7682d192b16a6f2
#: ../../../../1.8/docs/topics/templates.txt:651
msgid ""
":class:`django.template.Template` represents a compiled template. Templates "
"are obtained with :meth:`Engine.get_template() "
"<django.template.Engine.get_template>` or :meth:`Engine.from_string() "
"<django.template.Engine.from_string>`"
msgstr ""

# 164619ef0dc34dbcb536567bf4c14588
#: ../../../../1.8/docs/topics/templates.txt:656
msgid ""
"Likewise ``django.template.backends.django.Template`` is a thin wrapper "
"adapting :class:`django.template.Template` to the common template API."
msgstr ""

# a95e691ff08047ceb0ebf412182cd2aa
#: ../../../../1.8/docs/topics/templates.txt:660
msgid "Context"
msgstr ""

# dc42b305d3354111be4a88391e4a3b36
#: ../../../../1.8/docs/topics/templates.txt:662
msgid ""
":class:`django.template.Context` holds some metadata in addition to the "
"context data. It is passed to :meth:`Template.render() "
"<django.template.Template.render>` for rendering a template."
msgstr ""

# 804379252d0347bd919f60a9899855ac
#: ../../../../1.8/docs/topics/templates.txt:666
msgid ""
":class:`django.template.RequestContext` is a subclass of "
":class:`~django.template.Context` that stores the current "
":class:`~django.http.HttpRequest` and runs template context processors."
msgstr ""

# 913aa367c0b8494d958beb1c628ae62e
#: ../../../../1.8/docs/topics/templates.txt:670
msgid ""
"The common API doesn't have an equivalent concept. Context data is passed in"
" a plain :class:`dict` and the current :class:`~django.http.HttpRequest` is "
"passed separately if needed."
msgstr ""

# a186a9f629ba44e39cb146e09e4f57fb
#: ../../../../1.8/docs/topics/templates.txt:675
msgid "Loaders"
msgstr ""

# cd516df2c3aa49238f540e469f4dc37d
#: ../../../../1.8/docs/topics/templates.txt:677
msgid ""
"Template loaders are responsible for locating templates, loading them, and "
"returning :class:`~django.template.Template` objects."
msgstr ""

# 06aff8d8e75e47d69957a6d61c67795d
#: ../../../../1.8/docs/topics/templates.txt:680
msgid ""
"Django provides several :ref:`built-in template loaders <template-loaders>` "
"and supports :ref:`custom template loaders <custom-template-loaders>`."
msgstr ""

# 159363f1d5ad43b68aeec2d1dd07bb47
#: ../../../../1.8/docs/topics/templates.txt:684
msgid "Context processors"
msgstr ""

# 8b49bed442e94ad38196bc2e3b30455d
#: ../../../../1.8/docs/topics/templates.txt:686
msgid ""
"Context processors are functions that receive the current "
":class:`~django.http.HttpRequest` as an argument and return a :class:`dict` "
"of data to be added to the rendering context."
msgstr ""

# 23bc9de9041e450a82b50cf4aaeed1fb
#: ../../../../1.8/docs/topics/templates.txt:690
msgid ""
"Their main use is to add common data shared by all templates to the context "
"without repeating code in every view."
msgstr ""

# 7bd406a557b94cb89bd986b28bc4b838
#: ../../../../1.8/docs/topics/templates.txt:693
msgid ""
"Django provides many :ref:`built-in context processors <context-"
"processors>`. Implementing a custom context processor is as simple as "
"defining a function."
msgstr ""

# 8bea3773eb174f38a4bef5eba0f093b7
#: ../../../../1.8/docs/topics/testing/advanced.txt:3
msgid "Advanced testing topics"
msgstr ""

# 61dc1ed6a39849f8ba786d0c64ab1783
#: ../../../../1.8/docs/topics/testing/advanced.txt:6
msgid "The request factory"
msgstr ""

# 3f9653790318464a85512fe3b2eb950b
#: ../../../../1.8/docs/topics/testing/advanced.txt:12
msgid ""
"The :class:`~django.test.RequestFactory` shares the same API as the test "
"client. However, instead of behaving like a browser, the RequestFactory "
"provides a way to generate a request instance that can be used as the first "
"argument to any view. This means you can test a view function the same way "
"as you would test any other function -- as a black box, with exactly known "
"inputs, testing for specific outputs."
msgstr ""

# 9267573bab44415bb01d883e445bcd1c
#: ../../../../1.8/docs/topics/testing/advanced.txt:19
msgid ""
"The API for the :class:`~django.test.RequestFactory` is a slightly "
"restricted subset of the test client API:"
msgstr ""

# 06cd7bc2944344e881480b4021c71e1b
#: ../../../../1.8/docs/topics/testing/advanced.txt:22
msgid ""
"It only has access to the HTTP methods :meth:`~Client.get()`, "
":meth:`~Client.post()`, :meth:`~Client.put()`, :meth:`~Client.delete()`, "
":meth:`~Client.head()`, :meth:`~Client.options()`, and "
":meth:`~Client.trace()`."
msgstr ""

# e355183ca81d4aa989dff2ddc3fc0a0e
#: ../../../../1.8/docs/topics/testing/advanced.txt:27
msgid ""
"These methods accept all the same arguments *except* for ``follows``. Since "
"this is just a factory for producing requests, it's up to you to handle the "
"response."
msgstr ""

# d01259a113a14df68cd3ec30b6e9c822
#: ../../../../1.8/docs/topics/testing/advanced.txt:31
msgid ""
"It does not support middleware. Session and authentication attributes must "
"be supplied by the test itself if required for the view to function "
"properly."
msgstr ""

# 5b36af50dca548adaea522f3307ba36c
#: ../../../../1.8/docs/topics/testing/advanced.txt:38
msgid "The following is a simple unit test using the request factory::"
msgstr ""

# 5c9fa9a6f1594bbba305deb550ab229b
#: ../../../../1.8/docs/topics/testing/advanced.txt:71
msgid "Tests and multiple databases"
msgstr ""

# 062396ce643b4bdb96326a9758874e00
#: ../../../../1.8/docs/topics/testing/advanced.txt:76
msgid "Testing primary/replica configurations"
msgstr ""

# fc9b112536d94509bd874173d7d0deb8
#: ../../../../1.8/docs/topics/testing/advanced.txt:78
msgid ""
"If you're testing a multiple database configuration with primary/replica "
"(referred to as master/slave by some databases) replication, this strategy "
"of creating test databases poses a problem. When the test databases are "
"created, there won't be any replication, and as a result, data created on "
"the primary won't be seen on the replica."
msgstr ""

# 45776c9f8bce45d781cfd3c1466585b9
#: ../../../../1.8/docs/topics/testing/advanced.txt:85
msgid ""
"To compensate for this, Django allows you to define that a database is a "
"*test mirror*. Consider the following (simplified) example database "
"configuration::"
msgstr ""

# 29ec522a571d46918230f95da3470dc9
#: ../../../../1.8/docs/topics/testing/advanced.txt:105
msgid ""
"In this setup, we have two database servers: ``dbprimary``, described by the"
" database alias ``default``, and ``dbreplica`` described by the alias "
"``replica``. As you might expect, ``dbreplica`` has been configured by the "
"database administrator as a read replica of ``dbprimary``, so in normal "
"activity, any write to ``default`` will appear on ``replica``."
msgstr ""

# 332d8533c7af43dd9a7cbe5a50dc2140
#: ../../../../1.8/docs/topics/testing/advanced.txt:111
msgid ""
"If Django created two independent test databases, this would break any tests"
" that expected replication to occur. However, the ``replica`` database has "
"been configured as a test mirror (using the :setting:`TEST_MIRROR` setting),"
" indicating that under testing, ``replica`` should be treated as a mirror of"
" ``default``."
msgstr ""

# 6a3d850f47554d8da123556a6edb77af
#: ../../../../1.8/docs/topics/testing/advanced.txt:117
msgid ""
"When the test environment is configured, a test version of ``replica`` will "
"*not* be created. Instead the connection to ``replica`` will be redirected "
"to point at ``default``. As a result, writes to ``default`` will appear on "
"``replica`` -- but because they are actually the same database, not because "
"there is data replication between the two databases."
msgstr ""

# 902d16d81f8b451aa79d68b7d9455c01
#: ../../../../1.8/docs/topics/testing/advanced.txt:127
msgid "Controlling creation order for test databases"
msgstr ""

# 83dcf14dfabf4d65b17d3d9adfc2555c
#: ../../../../1.8/docs/topics/testing/advanced.txt:129
msgid ""
"By default, Django will assume all databases depend on the ``default`` "
"database and therefore always create the ``default`` database first. "
"However, no guarantees are made on the creation order of any other databases"
" in your test setup."
msgstr ""

# 73aacb7e2dc84b3aa81e1f202b1753b5
#: ../../../../1.8/docs/topics/testing/advanced.txt:134
msgid ""
"If your database configuration requires a specific creation order, you can "
"specify the dependencies that exist using the :setting:`TEST_DEPENDENCIES` "
"setting. Consider the following (simplified) example database "
"configuration::"
msgstr ""

# c084d2e19a2844e681f95aa54a175c0a
#: ../../../../1.8/docs/topics/testing/advanced.txt:162
msgid ""
"Under this configuration, the ``diamonds`` database will be created first, "
"as it is the only database alias without dependencies. The ``default`` and "
"``clubs`` alias will be created next (although the order of creation of this"
" pair is not guaranteed); then ``hearts``; and finally ``spades``."
msgstr ""

# 6a16aa65567048e78c02c54eb3b2fa64
#: ../../../../1.8/docs/topics/testing/advanced.txt:167
msgid ""
"If there are any circular dependencies in the :setting:`TEST_DEPENDENCIES` "
"definition, an ``ImproperlyConfigured`` exception will be raised."
msgstr ""

# 13b85a3ca8ff463b9b6fa5d2bb41a288
#: ../../../../1.8/docs/topics/testing/advanced.txt:172
msgid "Advanced features of ``TransactionTestCase``"
msgstr ""

# bcb96423f90f4a8b9aa9a536a3a31eb7
#: ../../../../1.8/docs/topics/testing/advanced.txt:178
msgid ""
"This attribute is a private API. It may be changed or removed without a "
"deprecation period in the future, for instance to accommodate changes in "
"application loading."
msgstr ""

# 6fed4eaef8fa40b4a4a6d44ba2da005d
#: ../../../../1.8/docs/topics/testing/advanced.txt:182
msgid ""
"It's used to optimize Django's own test suite, which contains hundreds of "
"models but no relations between models in different applications."
msgstr ""

# 65606c4858d04c449ad3110509a30a31
#: ../../../../1.8/docs/topics/testing/advanced.txt:185
msgid ""
"By default, ``available_apps`` is set to ``None``. After each test, Django "
"calls :djadmin:`flush` to reset the database state. This empties all tables "
"and emits the :data:`~django.db.models.signals.post_migrate` signal, which "
"re-creates one content type and three permissions for each model. This "
"operation gets expensive proportionally to the number of models."
msgstr ""

# d150ae15fdb946ae969ca31cbde6c52d
#: ../../../../1.8/docs/topics/testing/advanced.txt:191
msgid ""
"Setting ``available_apps`` to a list of applications instructs Django to "
"behave as if only the models from these applications were available. The "
"behavior of ``TransactionTestCase`` changes as follows:"
msgstr ""

# 9db22dc22c2e4430b3934fcf238d1eaf
#: ../../../../1.8/docs/topics/testing/advanced.txt:195
msgid ""
":data:`~django.db.models.signals.post_migrate` is fired before each test to "
"create the content types and permissions for each model in available apps, "
"in case they're missing."
msgstr ""

# 6803e8e936b8424b8e2f38e4da6a2756
#: ../../../../1.8/docs/topics/testing/advanced.txt:198
msgid ""
"After each test, Django empties only tables corresponding to models in "
"available apps. However, at the database level, truncation may cascade to "
"related models in unavailable apps. Furthermore "
":data:`~django.db.models.signals.post_migrate` isn't fired; it will be fired"
" by the next ``TransactionTestCase``, after the correct set of applications "
"is selected."
msgstr ""

# 8e4c828071d449b6a06690c71515313b
#: ../../../../1.8/docs/topics/testing/advanced.txt:205
msgid ""
"Since the database isn't fully flushed, if a test creates instances of "
"models not included in ``available_apps``, they will leak and they may cause"
" unrelated tests to fail. Be careful with tests that use sessions; the "
"default session engine stores them in the database."
msgstr ""

# a408346ee2dd468bad7fad4a7abf2810
#: ../../../../1.8/docs/topics/testing/advanced.txt:210
msgid ""
"Since :data:`~django.db.models.signals.post_migrate` isn't emitted after "
"flushing the database, its state after a ``TransactionTestCase`` isn't the "
"same as after a ``TestCase``: it's missing the rows created by listeners to "
":data:`~django.db.models.signals.post_migrate`. Considering the :ref:`order "
"in which tests are executed <order-of-tests>`, this isn't an issue, provided"
" either all ``TransactionTestCase`` in a given test suite declare "
"``available_apps``, or none of them."
msgstr ""

# 6219d8cf275f4092be435b93cb2b5a66
#: ../../../../1.8/docs/topics/testing/advanced.txt:218
msgid "``available_apps`` is mandatory in Django's own test suite."
msgstr ""

# 9d9ac0306cf24342b86660cdf2053898
#: ../../../../1.8/docs/topics/testing/advanced.txt:222
msgid ""
"Setting ``reset_sequences = True`` on a ``TransactionTestCase`` will make "
"sure sequences are always reset before the test run::"
msgstr ""

# bbb59ba613cf4df39dbcd1a0762d16e6
#: ../../../../1.8/docs/topics/testing/advanced.txt:233
msgid ""
"Unless you are explicitly testing primary keys sequence numbers, it is "
"recommended that you do not hard code primary key values in tests."
msgstr ""

# 9aecee21afba4ddd9b333cf0a5710476
#: ../../../../1.8/docs/topics/testing/advanced.txt:236
msgid ""
"Using ``reset_sequences = True`` will slow down the test, since the primary "
"key reset is an relatively expensive database operation."
msgstr ""

# 1b94a3bcd1074063bc623a2b2f8bff09
#: ../../../../1.8/docs/topics/testing/advanced.txt:241
msgid "Using the Django test runner to test reusable applications"
msgstr ""

# ed3a2a26afd348c387725958125ef883
#: ../../../../1.8/docs/topics/testing/advanced.txt:243
msgid ""
"If you are writing a :doc:`reusable application </intro/reusable-apps>` you "
"may want to use the Django test runner to run your own test suite and thus "
"benefit from the Django testing infrastructure."
msgstr ""

# 1de659596d3f4adaad130605e2a1ec0a
#: ../../../../1.8/docs/topics/testing/advanced.txt:247
msgid ""
"A common practice is a *tests* directory next to the application code, with "
"the following structure::"
msgstr ""

# a2ea3205c5294d4aae642a9bdb685ec7
#: ../../../../1.8/docs/topics/testing/advanced.txt:261
msgid "Let's take a look inside a couple of those files:"
msgstr ""

# 8c24bc518ee84898a33bf495ee2a37c1
#: ../../../../1.8/docs/topics/testing/advanced.txt:283
msgid ""
"This is the script that you invoke to run the test suite. It sets up the "
"Django environment, creates the test database and runs the tests."
msgstr ""

# 0c0481e0cd02439f8de629872c1f9411
#: ../../../../1.8/docs/topics/testing/advanced.txt:286
msgid ""
"For the sake of clarity, this example contains only the bare minimum "
"necessary to use the Django test runner. You may want to add command-line "
"options for controlling verbosity, passing in specific test labels to run, "
"etc."
msgstr ""

# e238ec688aab4d50b3aff8d3e6ef0bf6
#: ../../../../1.8/docs/topics/testing/advanced.txt:299
msgid ""
"This file contains the :doc:`Django settings </topics/settings>` required to"
" run your app's tests."
msgstr ""

# 5cc656c7b6c742d49db7fcb2996d0491
#: ../../../../1.8/docs/topics/testing/advanced.txt:302
msgid ""
"Again, this is a minimal example; your tests may require additional settings"
" to run."
msgstr ""

# d3db55484a0248f8a62e733d04a0211d
#: ../../../../1.8/docs/topics/testing/advanced.txt:305
msgid ""
"Since the *tests* package is included in :setting:`INSTALLED_APPS` when "
"running your tests, you can define test-only models in its ``models.py`` "
"file."
msgstr ""

# da6bbd17893a46e7b3faaa05f63c2f03
#: ../../../../1.8/docs/topics/testing/advanced.txt:313
msgid "Using different testing frameworks"
msgstr ""

# 04c89f3c24ac4c10b574d0a45213baa6
#: ../../../../1.8/docs/topics/testing/advanced.txt:315
msgid ""
"Clearly, :mod:`unittest` is not the only Python testing framework. While "
"Django doesn't provide explicit support for alternative frameworks, it does "
"provide a way to invoke tests constructed for an alternative framework as if"
" they were normal Django tests."
msgstr ""

# e69ffe859eb14752a0b2cf26a15ad089
#: ../../../../1.8/docs/topics/testing/advanced.txt:320
msgid ""
"When you run ``./manage.py test``, Django looks at the "
":setting:`TEST_RUNNER` setting to determine what to do. By default, "
":setting:`TEST_RUNNER` points to ``'django.test.runner.DiscoverRunner'``. "
"This class defines the default Django testing behavior. This behavior "
"involves:"
msgstr ""

# 9b338ba73d134d71a2e1a893868cf463
#: ../../../../1.8/docs/topics/testing/advanced.txt:325
msgid "Performing global pre-test setup."
msgstr ""

# 318668a7b2ac4c30937ea6e1b61482aa
#: ../../../../1.8/docs/topics/testing/advanced.txt:327
msgid ""
"Looking for tests in any file below the current directory whose name matches"
" the pattern ``test*.py``."
msgstr ""

# 2db4ddfa5531406f9cc38667dbb4f127
#: ../../../../1.8/docs/topics/testing/advanced.txt:330
msgid "Creating the test databases."
msgstr ""

# 2110266167ad4c31b36e5f50e4636dc3
#: ../../../../1.8/docs/topics/testing/advanced.txt:332
msgid ""
"Running ``migrate`` to install models and initial data into the test "
"databases."
msgstr ""

# 52c425fbe32b4e6cabae65b95c97caa6
#: ../../../../1.8/docs/topics/testing/advanced.txt:335
msgid "Running the tests that were found."
msgstr ""

# 2bb4f196c8fc40ff9fbac7a116e1c7b3
#: ../../../../1.8/docs/topics/testing/advanced.txt:337
msgid "Destroying the test databases."
msgstr ""

# 7befbee8a40949ba913d86101685fa14
#: ../../../../1.8/docs/topics/testing/advanced.txt:339
msgid "Performing global post-test teardown."
msgstr ""

# 6ecc2406f9f44d5488945b8e28084473
#: ../../../../1.8/docs/topics/testing/advanced.txt:341
msgid ""
"If you define your own test runner class and point :setting:`TEST_RUNNER` at"
" that class, Django will execute your test runner whenever you run "
"``./manage.py test``. In this way, it is possible to use any test framework "
"that can be executed from Python code, or to modify the Django test "
"execution process to satisfy whatever testing requirements you may have."
msgstr ""

# a9bd0518262e4f608c45c1132d488f05
#: ../../../../1.8/docs/topics/testing/advanced.txt:350
msgid "Defining a test runner"
msgstr ""

# c32193ea78e74627927e7316b2b727b4
#: ../../../../1.8/docs/topics/testing/advanced.txt:354
msgid ""
"A test runner is a class defining a ``run_tests()`` method. Django ships "
"with a ``DiscoverRunner`` class that defines the default Django testing "
"behavior. This class defines the ``run_tests()`` entry point, plus a "
"selection of other methods that are used to by ``run_tests()`` to set up, "
"execute and tear down the test suite."
msgstr ""

# 011ac3253c8b4c65aa17e383277af4c7
#: ../../../../1.8/docs/topics/testing/advanced.txt:362
msgid ""
"``DiscoverRunner`` will search for tests in any file matching ``pattern``."
msgstr ""

# 2afd9722f5914b309e5d50a220b9cddc
#: ../../../../1.8/docs/topics/testing/advanced.txt:364
msgid ""
"``top_level`` can be used to specify the directory containing your top-level"
" Python modules. Usually Django can figure this out automatically, so it's "
"not necessary to specify this option. If specified, it should generally be "
"the directory containing your ``manage.py`` file."
msgstr ""

# 79e2b2ce7fac44c0ad5c63b32d524fd6
#: ../../../../1.8/docs/topics/testing/advanced.txt:369
msgid ""
"``verbosity`` determines the amount of notification and debug information "
"that will be printed to the console; ``0`` is no output, ``1`` is normal "
"output, and ``2`` is verbose output."
msgstr ""

# 95cbd19744544866908cfabd685053c7
#: ../../../../1.8/docs/topics/testing/advanced.txt:373
msgid ""
"If ``interactive`` is ``True``, the test suite has permission to ask the "
"user for instructions when the test suite is executed. An example of this "
"behavior would be asking for permission to delete an existing test database."
" If ``interactive`` is ``False``, the test suite must be able to run without"
" any manual intervention."
msgstr ""

# f4c068dbeb2f4710ac32810cb45db2da
#: ../../../../1.8/docs/topics/testing/advanced.txt:379
msgid ""
"If ``failfast`` is ``True``, the test suite will stop running after the "
"first test failure is detected."
msgstr ""

# bfc4f71fa3e948c7aaf6fa6cbedd1be9
#: ../../../../1.8/docs/topics/testing/advanced.txt:382
msgid ""
"If ``keepdb`` is ``True``, the test suite will use the existing database, or"
" create one if necessary. If ``False``, a new database will be created, "
"prompting the user to remove the existing one, if present."
msgstr ""

# 38f22dc7ae1e482ead09b88d58edd5d6
#: ../../../../1.8/docs/topics/testing/advanced.txt:386
msgid ""
"If ``reverse`` is ``True``, test cases will be executed in the opposite "
"order. This could be useful to debug tests that aren't properly isolated and"
" have side effects. :ref:`Grouping by test class <order-of-tests>` is "
"preserved when using this option."
msgstr ""

# 3d3e55b65e484070b0e9ac6b21a18935
#: ../../../../1.8/docs/topics/testing/advanced.txt:391
msgid ""
"If ``debug_sql`` is ``True``, failing test cases will output SQL queries "
"logged to the :ref:`django.db.backends logger <django-db-logger>` as well as"
" the traceback. If ``verbosity`` is ``2``, then queries in all tests are "
"output."
msgstr ""

# d98d8540ba8949fd94a1bda798dc7391
#: ../../../../1.8/docs/topics/testing/advanced.txt:396
msgid ""
"Django may, from time to time, extend the capabilities of the test runner by"
" adding new arguments. The ``**kwargs`` declaration allows for this "
"expansion. If you subclass ``DiscoverRunner`` or write your own test runner,"
" ensure it accepts ``**kwargs``."
msgstr ""

# dec2b288d2914427a05618bb29b2bec5
#: ../../../../1.8/docs/topics/testing/advanced.txt:401
msgid ""
"Your test runner may also define additional command-line options. Create or "
"override an ``add_arguments(cls, parser)`` class method and add custom "
"arguments by calling ``parser.add_argument()`` inside the method, so that "
"the :djadmin:`test` command will be able to use those arguments."
msgstr ""

# 998bb614560f46849942ae2312c0ca34
#: ../../../../1.8/docs/topics/testing/advanced.txt:408
msgid ""
"Previously, you had to provide an ``option_list`` attribute to a subclassed "
"test runner to add options to the list of command-line options that the "
":djadmin:`test` command could use."
msgstr ""

# 1242a2ba92d6411286681e1793d2f21e
#: ../../../../1.8/docs/topics/testing/advanced.txt:412
msgid "The ``keepdb``, ``reverse``, and ``debug_sql`` arguments were added."
msgstr ""

# 1cc961c354b54bc48f77a98e39f3a2d0
#: ../../../../1.8/docs/topics/testing/advanced.txt:421
msgid ""
"The class used to build the test suite. By default it is set to "
"``unittest.TestSuite``. This can be overridden if you wish to implement "
"different logic for collecting tests."
msgstr ""

# f03e93f7fb0c4b21a4e70f415b572741
#: ../../../../1.8/docs/topics/testing/advanced.txt:429
msgid ""
"This is the class of the low-level test runner which is used to execute the "
"individual tests and format the results. By default it is set to "
"``unittest.TextTestRunner``. Despite the unfortunate similarity in naming "
"conventions, this is not the same type of class as ``DiscoverRunner``, which"
" covers a broader set of responsibilities. You can override this attribute "
"to modify the way tests are run and reported."
msgstr ""

# 91803fdb367f43919e43862bc94c60b2
#: ../../../../1.8/docs/topics/testing/advanced.txt:438
msgid ""
"This is the class that loads tests, whether from TestCases or modules or "
"otherwise and bundles them into test suites for the runner to execute. By "
"default it is set to ``unittest.defaultTestLoader``. You can override this "
"attribute if your tests are going to be loaded in unusual ways."
msgstr ""

# 42cc2aebb0514ec3a5becdf09f1cf593
#: ../../../../1.8/docs/topics/testing/advanced.txt:445
msgid ""
"This is the tuple of ``optparse`` options which will be fed into the "
"management command's ``OptionParser`` for parsing arguments. See the "
"documentation for Python's ``optparse`` module for more details."
msgstr ""

# 58744819026347ceac9da615c633e899
#: ../../../../1.8/docs/topics/testing/advanced.txt:451
msgid ""
"You should now override the :meth:`~DiscoverRunner.add_arguments` class "
"method to add custom arguments accepted by the :djadmin:`test` management "
"command."
msgstr ""

# 39ddca89c9e34c53b180aebd41569a47
#: ../../../../1.8/docs/topics/testing/advanced.txt:460
msgid "Run the test suite."
msgstr ""

# 65d346e90b8b49e985091ef85cfcf74d
#: ../../../../1.8/docs/topics/testing/advanced.txt:462
msgid ""
"``test_labels`` allows you to specify which tests to run and supports "
"several formats (see :meth:`DiscoverRunner.build_suite` for a list of "
"supported formats)."
msgstr ""

# d09266c160b54eda9fdc6fcaf71e1dcf
# ac1da139ecab41288636ccea4f38bedf
#: ../../../../1.8/docs/topics/testing/advanced.txt:466
#: ../../../../1.8/docs/topics/testing/advanced.txt:507
msgid ""
"``extra_tests`` is a list of extra ``TestCase`` instances to add to the "
"suite that is executed by the test runner. These extra tests are run in "
"addition to those discovered in the modules listed in ``test_labels``."
msgstr ""

# cedfc8f3a28a4448894757f373d0af92
#: ../../../../1.8/docs/topics/testing/advanced.txt:470
msgid "This method should return the number of tests that failed."
msgstr ""

# 8b2eacccfcf441168a20aec620671f45
#: ../../../../1.8/docs/topics/testing/advanced.txt:476
msgid ""
"Override this class method to add custom arguments accepted by the "
":djadmin:`test` management command. See "
":py:meth:`argparse.ArgumentParser.add_argument()` for details about adding "
"arguments to a parser."
msgstr ""

# bd6fc5e86c564c7e9ba3666d6c1a9a80
#: ../../../../1.8/docs/topics/testing/advanced.txt:483
msgid ""
"Sets up the test environment by calling "
":func:`~django.test.utils.setup_test_environment` and setting "
":setting:`DEBUG` to ``False``."
msgstr ""

# 27cf3a867f5d4a20abf35f8ed3163dab
#: ../../../../1.8/docs/topics/testing/advanced.txt:489
msgid "Constructs a test suite that matches the test labels provided."
msgstr ""

# d0b00b66bbde45d8ae55e40b45000c43
#: ../../../../1.8/docs/topics/testing/advanced.txt:491
msgid ""
"``test_labels`` is a list of strings describing the tests to be run. A test "
"label can take one of four forms:"
msgstr ""

# d5dc8f1414874c4c90641a7548f30722
#: ../../../../1.8/docs/topics/testing/advanced.txt:494
msgid ""
"``path.to.test_module.TestCase.test_method`` -- Run a single test method in "
"a test case."
msgstr ""

# e6cc2483c00049448f472f4fbda26d7d
#: ../../../../1.8/docs/topics/testing/advanced.txt:496
msgid ""
"``path.to.test_module.TestCase`` -- Run all the test methods in a test case."
msgstr ""

# f61cb8db73da40258bb8b22b70b39d68
#: ../../../../1.8/docs/topics/testing/advanced.txt:498
msgid ""
"``path.to.module`` -- Search for and run all tests in the named Python "
"package or module."
msgstr ""

# 1593e9859d5f48f48d98ce6159d88732
#: ../../../../1.8/docs/topics/testing/advanced.txt:500
msgid ""
"``path/to/directory`` -- Search for and run all tests below the named "
"directory."
msgstr ""

# 008bfacd8cbc4ce4816e03e19c51e7f9
#: ../../../../1.8/docs/topics/testing/advanced.txt:503
msgid ""
"If ``test_labels`` has a value of ``None``, the test runner will search for "
"tests in all files below the current directory whose names match its "
"``pattern`` (see above)."
msgstr ""

# a3f2f0d5ec254297af3821603a03bc1c
#: ../../../../1.8/docs/topics/testing/advanced.txt:511
msgid "Returns a ``TestSuite`` instance ready to be run."
msgstr ""

# 10b7bcdd91c141f5a0806b5a5b07c9b9
#: ../../../../1.8/docs/topics/testing/advanced.txt:515
msgid "Creates the test databases."
msgstr ""

# 60ec27bc7dfd4e8f9ec6f60d2310a568
#: ../../../../1.8/docs/topics/testing/advanced.txt:517
msgid ""
"Returns a data structure that provides enough detail to undo the changes "
"that have been made. This data will be provided to the "
"``teardown_databases()`` function at the conclusion of testing."
msgstr ""

# d529e898c5d941cc82c0aface55164db
#: ../../../../1.8/docs/topics/testing/advanced.txt:523
msgid "Runs the test suite."
msgstr ""

# 1f2a005a559d4aa4944a59f7943f097e
#: ../../../../1.8/docs/topics/testing/advanced.txt:525
msgid "Returns the result produced by the running the test suite."
msgstr ""

# ba32e8b4e6434b009e6eb8032f3903a2
#: ../../../../1.8/docs/topics/testing/advanced.txt:529
msgid "Destroys the test databases, restoring pre-test conditions."
msgstr ""

# 6e9bc69fd22b4428855169f2b7239928
#: ../../../../1.8/docs/topics/testing/advanced.txt:531
msgid ""
"``old_config`` is a data structure defining the changes in the database "
"configuration that need to be reversed. It is the return value of the "
"``setup_databases()`` method."
msgstr ""

# ea0331af1cbe462fb64276023e69b5ce
#: ../../../../1.8/docs/topics/testing/advanced.txt:537
msgid "Restores the pre-test environment."
msgstr ""

# 9e8dcea472bb4b039a579bd0371c706c
#: ../../../../1.8/docs/topics/testing/advanced.txt:541
msgid ""
"Computes and returns a return code based on a test suite, and the result "
"from that test suite."
msgstr ""

# d33445db3ec343f5bc4e2d2caa6fe0f0
#: ../../../../1.8/docs/topics/testing/advanced.txt:546
msgid "Testing utilities"
msgstr ""

# e7bbe05bfbd64fb380730203441a4ec1
#: ../../../../1.8/docs/topics/testing/advanced.txt:549
msgid "django.test.utils"
msgstr ""

# 11a44b28941f46ea86a752c9a05289f5
#: ../../../../1.8/docs/topics/testing/advanced.txt:554
msgid ""
"To assist in the creation of your own test runner, Django provides a number "
"of utility methods in the ``django.test.utils`` module."
msgstr ""

# 5e7e13fa20f44bdd81432cb459db56ac
#: ../../../../1.8/docs/topics/testing/advanced.txt:559
msgid ""
"Performs any global pre-test setup, such as the installing the "
"instrumentation of the template rendering system and setting up the dummy "
"email outbox."
msgstr ""

# 2d35ce5b154b4eedad9ca76ba4991225
#: ../../../../1.8/docs/topics/testing/advanced.txt:565
msgid ""
"Performs any global post-test teardown, such as removing the black magic "
"hooks into the template system and restoring normal email services."
msgstr ""

# 315d5527de3e49858893ad483834ba51
#: ../../../../1.8/docs/topics/testing/advanced.txt:570
msgid "django.db.connection.creation"
msgstr ""

# 5ef12ebd7b0c4371afa1d2e975f315af
#: ../../../../1.8/docs/topics/testing/advanced.txt:574
msgid ""
"The creation module of the database backend also provides some utilities "
"that can be useful during testing."
msgstr ""

# 57576afa912c44448460e50f4727028e
#: ../../../../1.8/docs/topics/testing/advanced.txt:579
msgid "Creates a new test database and runs ``migrate`` against it."
msgstr ""

# a4acbb0fb9c34a4b8ca55a5f4cbc489a
#: ../../../../1.8/docs/topics/testing/advanced.txt:581
msgid "``verbosity`` has the same behavior as in ``run_tests()``."
msgstr ""

# dfb49640c035476fbe8662612f6fd09d
#: ../../../../1.8/docs/topics/testing/advanced.txt:583
msgid ""
"``autoclobber`` describes the behavior that will occur if a database with "
"the same name as the test database is discovered:"
msgstr ""

# f40b74416b8b4533accda39c67ec1bc8
#: ../../../../1.8/docs/topics/testing/advanced.txt:586
msgid ""
"If ``autoclobber`` is ``False``, the user will be asked to approve "
"destroying the existing database. ``sys.exit`` is called if the user does "
"not approve."
msgstr ""

# d459e28e0b4248928fedf91fd8de41a1
#: ../../../../1.8/docs/topics/testing/advanced.txt:590
msgid ""
"If autoclobber is ``True``, the database will be destroyed without "
"consulting the user."
msgstr ""

# 0ab12b02f06a4d62a0ca945a2d72cab0
#: ../../../../1.8/docs/topics/testing/advanced.txt:593
msgid ""
"``serialize`` determines if Django serializes the database into an in-memory"
" JSON string before running tests (used to restore the database state "
"between tests if you don't have transactions). You can set this to ``False``"
" to speed up creation time if you don't have any test classes with "
":ref:`serialized_rollback=True <test-case-serialized-rollback>`."
msgstr ""

# 21aa5745f4144d09812b8889398925ce
#: ../../../../1.8/docs/topics/testing/advanced.txt:601
msgid ""
"If you are using the default test runner, you can control this with the the "
":setting:`SERIALIZE <TEST_SERIALIZE>` entry in the :setting:`TEST <DATABASE-"
"TEST>` dictionary"
msgstr ""

# 26bca18fc0ac4b02a16a95ab7fbc8ec5
#: ../../../../1.8/docs/topics/testing/advanced.txt:605
msgid ""
"``keepdb`` determines if the test run should use an existing database, or "
"create a new one. If ``True``, the existing database will be used, or "
"created if not present. If ``False``, a new database will be created, "
"prompting the user to remove the existing one, if present."
msgstr ""

# bb7366f3fb16406d971a46caa1d6b966
#: ../../../../1.8/docs/topics/testing/advanced.txt:611
msgid "Returns the name of the test database that it created."
msgstr ""

# 8229c667f39a4409911e0632c5d731cb
#: ../../../../1.8/docs/topics/testing/advanced.txt:613
msgid ""
"``create_test_db()`` has the side effect of modifying the value of "
":setting:`NAME` in :setting:`DATABASES` to match the name of the test "
"database."
msgstr ""

# 31621022f9be48dbbef8eef0faa3119b
#: ../../../../1.8/docs/topics/testing/advanced.txt:619
msgid "The ``serialize`` argument was added."
msgstr ""

# a9457f509f7b4e90b53b8ec1c24b4358
# b0b3bfe3903f4c1883719462cafa0182
#: ../../../../1.8/docs/topics/testing/advanced.txt:623
#: ../../../../1.8/docs/topics/testing/advanced.txt:639
msgid "The ``keepdb`` argument was added."
msgstr ""

# 67acacde35a9438997cc030249801fff
#: ../../../../1.8/docs/topics/testing/advanced.txt:627
msgid ""
"Destroys the database whose name is the value of :setting:`NAME` in "
":setting:`DATABASES`, and sets :setting:`NAME` to the value of "
"``old_database_name``."
msgstr ""

# 0f1ad3bfb9414afda5cc10a2017684e2
#: ../../../../1.8/docs/topics/testing/advanced.txt:631
msgid ""
"The ``verbosity`` argument has the same behavior as for "
":class:`~django.test.runner.DiscoverRunner`."
msgstr ""

# 44af2c2c412545e4be167cdb281500df
#: ../../../../1.8/docs/topics/testing/advanced.txt:634
msgid ""
"If the ``keepdb`` argument is ``True``, then the connection to the database "
"will be closed, but the database will not be destroyed."
msgstr ""

# e22328e6cbd5434ca577cb1d7b1a45f1
#: ../../../../1.8/docs/topics/testing/advanced.txt:644
msgid "Integration with coverage.py"
msgstr ""

# ec2b5ae5c214488893558ef4f58b865d
#: ../../../../1.8/docs/topics/testing/advanced.txt:646
msgid ""
"Code coverage describes how much source code has been tested. It shows which"
" parts of your code are being exercised by tests and which are not. It's an "
"important part of testing applications, so it's strongly recommended to "
"check the coverage of your tests."
msgstr ""

# 5c1ff8151e194388bfeb71f898ab4f98
#: ../../../../1.8/docs/topics/testing/advanced.txt:651
msgid ""
"Django can be easily integrated with `coverage.py`_, a tool for measuring "
"code coverage of Python programs. First, `install coverage.py`_. Next, run "
"the following from your project folder containing ``manage.py``::"
msgstr ""

# 98481b61e67a4ba0aa3c7ef90015c359
#: ../../../../1.8/docs/topics/testing/advanced.txt:657
msgid ""
"This runs your tests and collects coverage data of the executed files in "
"your project. You can see a report of this data by typing following "
"command::"
msgstr ""

# e10e0f9160c645338ea4744c5de96e4b
#: ../../../../1.8/docs/topics/testing/advanced.txt:662
msgid ""
"Note that some Django code was executed while running tests, but it is not "
"listed here because of the ``source`` flag passed to the previous command."
msgstr ""

# e28a6d6b9fef468698a5b14f4425da40
#: ../../../../1.8/docs/topics/testing/advanced.txt:665
msgid ""
"For more options like annotated HTML listings detailing missed lines, see "
"the `coverage.py`_ docs."
msgstr ""

# f0e757744fb347fa8b83038c78acc06a
#: ../../../../1.8/docs/topics/testing/index.txt:3
msgid "Testing in Django"
msgstr ""

# a28a5c83f03143f18766fb2fbeaf2bf3
#: ../../../../1.8/docs/topics/testing/index.txt:5
msgid ""
"Automated testing is an extremely useful bug-killing tool for the modern Web"
" developer. You can use a collection of tests -- a **test suite** -- to "
"solve, or avoid, a number of problems:"
msgstr ""

# cba21db723cb46b58afcc779a4153783
#: ../../../../1.8/docs/topics/testing/index.txt:9
msgid ""
"When you're writing new code, you can use tests to validate your code works "
"as expected."
msgstr ""

# 844bcb38beef473c9805088326bdd18c
#: ../../../../1.8/docs/topics/testing/index.txt:12
msgid ""
"When you're refactoring or modifying old code, you can use tests to ensure "
"your changes haven't affected your application's behavior unexpectedly."
msgstr ""

# 3ed63f4ab3a342198fc371778db8aba2
#: ../../../../1.8/docs/topics/testing/index.txt:16
msgid ""
"Testing a Web application is a complex task, because a Web application is "
"made of several layers of logic -- from HTTP-level request handling, to form"
" validation and processing, to template rendering. With Django's test-"
"execution framework and assorted utilities, you can simulate requests, "
"insert test data, inspect your application's output and generally verify "
"your code is doing what it should be doing."
msgstr ""

# af22abfd928c4f73a69a72624bf0321c
#: ../../../../1.8/docs/topics/testing/index.txt:23
msgid "The best part is, it's really easy."
msgstr ""

# 7c162260354f4f33be40d08807bd0a9b
#: ../../../../1.8/docs/topics/testing/index.txt:25
msgid ""
"The preferred way to write tests in Django is using the :mod:`unittest` "
"module built in to the Python standard library. This is covered in detail in"
" the :doc:`overview` document."
msgstr ""

# c43f81291cca4dea9440acfb2132662d
#: ../../../../1.8/docs/topics/testing/index.txt:29
msgid ""
"You can also use any *other* Python test framework; Django provides an API "
"and tools for that kind of integration. They are described in the :ref"
":`other-testing-frameworks` section of :doc:`advanced`."
msgstr ""

# 85d333140c13400395960014bd0b02a7
#: ../../../../1.8/docs/topics/testing/overview.txt:3
msgid "Writing and running tests"
msgstr ""

# 2043867e39194e98ac6cbb060c7a5858
#: ../../../../1.8/docs/topics/testing/overview.txt:10
msgid ""
"The :doc:`testing tutorial </intro/tutorial05>`, the :doc:`testing tools "
"reference </topics/testing/tools>`, and the :doc:`advanced testing topics "
"</topics/testing/advanced>`."
msgstr ""

# 42824145c4f74f78bba51fb2ed4152e0
#: ../../../../1.8/docs/topics/testing/overview.txt:14
msgid ""
"This document is split into two primary sections. First, we explain how to "
"write tests with Django. Then, we explain how to run them."
msgstr ""

# 3354b36755df4de5874294d2d785c052
#: ../../../../1.8/docs/topics/testing/overview.txt:18
msgid "Writing tests"
msgstr ""

# 204ce42100944bbe948d07a047aa759d
#: ../../../../1.8/docs/topics/testing/overview.txt:20
msgid ""
"Django's unit tests use a Python standard library module: :mod:`unittest`. "
"This module defines tests using a class-based approach."
msgstr ""

# 37a5f0c4f3d540cf964ef1e5d89421c1
#: ../../../../1.8/docs/topics/testing/overview.txt:23
msgid "unittest2"
msgstr ""

# d1b27c86ebbb4313b893f04532900918
#: ../../../../1.8/docs/topics/testing/overview.txt:27
msgid ""
"Python 2.7 introduced some major changes to the ``unittest`` library, adding"
" some extremely useful features. To ensure that every Django project could "
"benefit from these new features, Django used to ship with a copy of Python "
"2.7's ``unittest`` backported for Python 2.6 compatibility."
msgstr ""

# 6bd18a167214447492aef6e8db6e1a93
#: ../../../../1.8/docs/topics/testing/overview.txt:32
msgid ""
"Since Django no longer supports Python versions older than 2.7, "
"``django.utils.unittest`` is deprecated. Simply use ``unittest``."
msgstr ""

# 7686394d194847c6b8e77ba237ec3af0
#: ../../../../1.8/docs/topics/testing/overview.txt:37
msgid ""
"Here is an example which subclasses from :class:`django.test.TestCase`, "
"which is a subclass of :class:`unittest.TestCase` that runs each test inside"
" a transaction to provide isolation::"
msgstr ""

# f377b43926ff4694b24ba54fda611ac7
#: ../../../../1.8/docs/topics/testing/overview.txt:56
msgid ""
"When you :ref:`run your tests <running-tests>`, the default behavior of the "
"test utility is to find all the test cases (that is, subclasses of "
":class:`unittest.TestCase`) in any file whose name begins with ``test``, "
"automatically build a test suite out of those test cases, and run that "
"suite."
msgstr ""

# 3306939d96334dd4ab3ceaebed6d9de7
#: ../../../../1.8/docs/topics/testing/overview.txt:61
msgid "For more details about :mod:`unittest`, see the Python documentation."
msgstr ""

# 667ba15334a64e2ca510339baa249e33
#: ../../../../1.8/docs/topics/testing/overview.txt:65
msgid ""
"If your tests rely on database access such as creating or querying models, "
"be sure to create your test classes as subclasses of "
":class:`django.test.TestCase` rather than :class:`unittest.TestCase`."
msgstr ""

# 742e11407520434ba86b6f9ea83f0a68
#: ../../../../1.8/docs/topics/testing/overview.txt:69
msgid ""
"Using :class:`unittest.TestCase` avoids the cost of running each test in a "
"transaction and flushing the database, but if your tests interact with the "
"database their behavior will vary based on the order that the test runner "
"executes them. This can lead to unit tests that pass when run in isolation "
"but fail when run in a suite."
msgstr ""

# 3f08a90d333742dbbb202a51b840ef85
#: ../../../../1.8/docs/topics/testing/overview.txt:79
msgid "Running tests"
msgstr ""

# 8fc2ed9dc67b403099d2f004abe723d2
#: ../../../../1.8/docs/topics/testing/overview.txt:81
msgid ""
"Once you've written tests, run them using the :djadmin:`test` command of "
"your project's ``manage.py`` utility::"
msgstr ""

# 77e823db57e84865a02930b53321ca00
#: ../../../../1.8/docs/topics/testing/overview.txt:86
msgid ""
"Test discovery is based on the unittest module's :py:ref:`built-in test "
"discovery <unittest-test-discovery>`.  By default, this will discover tests "
"in any file named \"test*.py\" under the current working directory."
msgstr ""

# 07a19b2f286645b2b4e51948c0ad1fae
#: ../../../../1.8/docs/topics/testing/overview.txt:90
msgid ""
"You can specify particular tests to run by supplying any number of \"test "
"labels\" to ``./manage.py test``. Each test label can be a full Python "
"dotted path to a package, module, ``TestCase`` subclass, or test method. For"
" instance::"
msgstr ""

# 85a3ed1c590844a6b26edd2c492d4f73
#: ../../../../1.8/docs/topics/testing/overview.txt:106
msgid ""
"You can also provide a path to a directory to discover tests below that "
"directory::"
msgstr ""

# 7c9fccb5c985476d871c180bdffaf924
#: ../../../../1.8/docs/topics/testing/overview.txt:111
msgid ""
"You can specify a custom filename pattern match using the ``-p`` (or "
"``--pattern``) option, if your test files are named differently from the "
"``test*.py`` pattern::"
msgstr ""

# 079cc180a1d54a20a8638f64733a5cd3
#: ../../../../1.8/docs/topics/testing/overview.txt:117
msgid ""
"If you press ``Ctrl-C`` while the tests are running, the test runner will "
"wait for the currently running test to complete and then exit gracefully. "
"During a graceful exit the test runner will output details of any test "
"failures, report on how many tests were run and how many errors and failures"
" were encountered, and destroy any test databases as usual. Thus pressing "
"``Ctrl-C`` can be very useful if you forget to pass the "
":djadminopt:`--failfast` option, notice that some tests are unexpectedly "
"failing, and want to get details on the failures without waiting for the "
"full test run to complete."
msgstr ""

# 057798d38e93411dbcaf2732a3a692cd
#: ../../../../1.8/docs/topics/testing/overview.txt:126
msgid ""
"If you do not want to wait for the currently running test to finish, you can"
" press ``Ctrl-C`` a second time and the test run will halt immediately, but "
"not gracefully. No details of the tests run before the interruption will be "
"reported, and any test databases created by the run will not be destroyed."
msgstr ""

# ccc28676a6d346bd8c192bc01bd03392
#: ../../../../1.8/docs/topics/testing/overview.txt:131
msgid "Test with warnings enabled"
msgstr ""

# a8390bc64af047d89aa2388d41da7bc0
#: ../../../../1.8/docs/topics/testing/overview.txt:133
msgid ""
"It's a good idea to run your tests with Python warnings enabled: ``python "
"-Wall manage.py test``. The ``-Wall`` flag tells Python to display "
"deprecation warnings. Django, like many other Python libraries, uses these "
"warnings to flag when features are going away. It also might flag areas in "
"your code that aren't strictly wrong but could benefit from a better "
"implementation."
msgstr ""

# 171705f313dc479db7173994911cfaf1
#: ../../../../1.8/docs/topics/testing/overview.txt:144
msgid "The test database"
msgstr ""

# 526ca9e52f16491984e8f9cbbe18b934
#: ../../../../1.8/docs/topics/testing/overview.txt:146
msgid ""
"Tests that require a database (namely, model tests) will not use your "
"\"real\" (production) database. Separate, blank databases are created for "
"the tests."
msgstr ""

# 30a1c7b0e9ee485fa20b646c157d9261
#: ../../../../1.8/docs/topics/testing/overview.txt:149
msgid ""
"Regardless of whether the tests pass or fail, the test databases are "
"destroyed when all the tests have been executed."
msgstr ""

# 995fca4ce87a4850afb92caa44e38513
#: ../../../../1.8/docs/topics/testing/overview.txt:154
msgid ""
"You can prevent the test databases from being destroyed by adding the "
":djadminopt:`--keepdb` flag to the test command. This will preserve the test"
" database between runs. If the database does not exist, it will first be "
"created. Any migrations will also be applied in order to keep it up to date."
msgstr ""

# 284a076a8dd94417a9f262501b76d33a
#: ../../../../1.8/docs/topics/testing/overview.txt:160
msgid ""
"By default the test databases get their names by prepending ``test_`` to the"
" value of the :setting:`NAME` settings for the databases defined in "
":setting:`DATABASES`. When using the SQLite database engine the tests will "
"by default use an in-memory database (i.e., the database will be created in "
"memory, bypassing the filesystem entirely!). If you want to use a different "
"database name, specify :setting:`NAME <TEST_NAME>` in the :setting:`TEST "
"<DATABASE-TEST>` dictionary for any given database in :setting:`DATABASES`."
msgstr ""

# f7051d0d457e448999a4de0b465e7902
#: ../../../../1.8/docs/topics/testing/overview.txt:171
msgid ""
"On PostgreSQL, :setting:`USER` will also need read access to the built-in "
"``postgres`` database."
msgstr ""

# 91c442d98e434548a66d2de7410c3f13
#: ../../../../1.8/docs/topics/testing/overview.txt:174
msgid ""
"Aside from using a separate database, the test runner will otherwise use all"
" of the same database settings you have in your settings file: "
":setting:`ENGINE <DATABASE-ENGINE>`, :setting:`USER`, :setting:`HOST`, etc. "
"The test database is created by the user specified by :setting:`USER`, so "
"you'll need to make sure that the given user account has sufficient "
"privileges to create a new database on the system."
msgstr ""

# 07bc369c514448bbb9a4e42613f79816
#: ../../../../1.8/docs/topics/testing/overview.txt:181
msgid ""
"For fine-grained control over the character encoding of your test database, "
"use the :setting:`CHARSET <TEST_CHARSET>` TEST option. If you're using "
"MySQL, you can also use the :setting:`COLLATION <TEST_COLLATION>` option to "
"control the particular collation used by the test database. See the "
":doc:`settings documentation </ref/settings>` for details of these and other"
" advanced settings."
msgstr ""

# 935354b77c734228af0098b489f730e5
#: ../../../../1.8/docs/topics/testing/overview.txt:188
msgid ""
"If using a SQLite in-memory database with Python 3.4+ and SQLite 3.7.13+, "
"`shared cache <https://www.sqlite.org/sharedcache.html>`_ will be enabled, "
"so you can write tests with ability to share the database between threads."
msgstr ""

# 2b0d05edc9bc492e8ff6e5ac97927a16
#: ../../../../1.8/docs/topics/testing/overview.txt:194
msgid ""
"The different options in the :setting:`TEST <DATABASE-TEST>` database "
"setting used to be separate options in the database settings dictionary, "
"prefixed with ``TEST_``."
msgstr ""

# bf39b43fd9204fb8badce01eabaa91e2
#: ../../../../1.8/docs/topics/testing/overview.txt:200
msgid ""
"The ability to use SQLite with a shared cache as described above was added."
msgstr ""

# db15ea24dcfb47cb9f09bbbdb25b53ee
#: ../../../../1.8/docs/topics/testing/overview.txt:202
msgid "Finding data from your production database when running tests?"
msgstr ""

# 28588fe7cf0d403bbb45f284f8fdd59d
#: ../../../../1.8/docs/topics/testing/overview.txt:204
msgid ""
"If your code attempts to access the database when its modules are compiled, "
"this will occur *before* the test database is set up, with potentially "
"unexpected results. For example, if you have a database query in module-"
"level code and a real database exists, production data could pollute your "
"tests. *It is a bad idea to have such import-time database queries in your "
"code* anyway - rewrite your code so that it doesn't do this."
msgstr ""

# 54d276a6f35d4845b93afb15c21b3d1a
#: ../../../../1.8/docs/topics/testing/overview.txt:213
msgid ""
"This also applies to customized implementations of "
":meth:`~django.apps.AppConfig.ready()`."
msgstr ""

# 2fe9c57b52534523a900683e6e538c54
#: ../../../../1.8/docs/topics/testing/overview.txt:218
msgid ""
"The :ref:`advanced multi-db testing topics <topics-testing-advanced-"
"multidb>`."
msgstr ""

# 48d58815e7ee4161b842b7b6c974b4e0
#: ../../../../1.8/docs/topics/testing/overview.txt:223
msgid "Order in which tests are executed"
msgstr ""

# 0246f0c4e56049e684ff4232fcb5569d
#: ../../../../1.8/docs/topics/testing/overview.txt:225
msgid ""
"In order to guarantee that all ``TestCase`` code starts with a clean "
"database, the Django test runner reorders tests in the following way:"
msgstr ""

# 2158145921d840cbb61676e6ba128cb3
#: ../../../../1.8/docs/topics/testing/overview.txt:228
msgid "All :class:`~django.test.TestCase` subclasses are run first."
msgstr ""

# 0d1920375e5645b48855ea2d2bcad3f4
#: ../../../../1.8/docs/topics/testing/overview.txt:230
msgid ""
"Then, all other Django-based tests (test cases based on "
":class:`~django.test.SimpleTestCase`, including "
":class:`~django.test.TransactionTestCase`) are run with no particular "
"ordering guaranteed nor enforced among them."
msgstr ""

# bdc7733627714a52abf08ea62c317815
#: ../../../../1.8/docs/topics/testing/overview.txt:235
msgid ""
"Then any other :class:`unittest.TestCase` tests (including doctests) that "
"may alter the database without restoring it to its original state are run."
msgstr ""

# 9f3d757133334c8584aa9138b933973b
#: ../../../../1.8/docs/topics/testing/overview.txt:240
msgid ""
"The new ordering of tests may reveal unexpected dependencies on test case "
"ordering. This is the case with doctests that relied on state left in the "
"database by a given :class:`~django.test.TransactionTestCase` test, they "
"must be updated to be able to run independently."
msgstr ""

# 3736b2b585524a1f95f40b9f5d395c49
#: ../../../../1.8/docs/topics/testing/overview.txt:247
msgid ""
"You may reverse the execution order inside groups by passing "
":djadminopt:`--reverse` to the test command. This can help with ensuring "
"your tests are independent from each other."
msgstr ""

# ec359e782f5b4d998ca9f98e9f1ee0b4
#: ../../../../1.8/docs/topics/testing/overview.txt:254
msgid "Rollback emulation"
msgstr ""

# bd2087daefc646cf8b54b2e7af1d457d
#: ../../../../1.8/docs/topics/testing/overview.txt:256
msgid ""
"Any initial data loaded in migrations will only be available in ``TestCase``"
" tests and not in ``TransactionTestCase`` tests, and additionally only on "
"backends where transactions are supported (the most important exception "
"being MyISAM). This is also true for tests which rely on "
"``TransactionTestCase`` such as :class:`LiveServerTestCase` and "
":class:`~django.contrib.staticfiles.testing.StaticLiveServerTestCase`."
msgstr ""

# fc2ad0696c8a463e9c04ad0dafc6e0c5
#: ../../../../1.8/docs/topics/testing/overview.txt:263
msgid ""
"Django can reload that data for you on a per-testcase basis by setting the "
"``serialized_rollback`` option to ``True`` in the body of the ``TestCase`` "
"or ``TransactionTestCase``, but note that this will slow down that test "
"suite by approximately 3x."
msgstr ""

# 48d4fccca12a443394277f3371e1d144
#: ../../../../1.8/docs/topics/testing/overview.txt:268
msgid ""
"Third-party apps or those developing against MyISAM will need to set this; "
"in general, however, you should be developing your own projects against a "
"transactional database and be using ``TestCase`` for most tests, and thus "
"not need this setting."
msgstr ""

# 4ae6d5dff6b2421bada90317d5f5a348
#: ../../../../1.8/docs/topics/testing/overview.txt:273
msgid ""
"The initial serialization is usually very quick, but if you wish to exclude "
"some apps from this process (and speed up test runs slightly), you may add "
"those apps to :setting:`TEST_NON_SERIALIZED_APPS`."
msgstr ""

# aa71f8488b494e91af653d4cc7047f51
#: ../../../../1.8/docs/topics/testing/overview.txt:277
msgid ""
"Apps without migrations are not affected; ``initial_data`` fixtures are "
"reloaded as usual."
msgstr ""

# 1e9747c6b13d4739866647b8f2a1447d
#: ../../../../1.8/docs/topics/testing/overview.txt:281
msgid "Other test conditions"
msgstr ""

# 39f480ddbc5c4be58f9a7f52117d1d17
#: ../../../../1.8/docs/topics/testing/overview.txt:283
msgid ""
"Regardless of the value of the :setting:`DEBUG` setting in your "
"configuration file, all Django tests run with :setting:`DEBUG`\\=False. This"
" is to ensure that the observed output of your code matches what will be "
"seen in a production setting."
msgstr ""

# 9da193dcb87d4f7c95acbb7cf09b4c87
#: ../../../../1.8/docs/topics/testing/overview.txt:288
msgid ""
"Caches are not cleared after each test, and running \"manage.py test "
"fooapp\" can insert data from the tests into the cache of a live system if "
"you run your tests in production because, unlike databases, a separate "
"\"test cache\" is not used. This behavior `may change`_ in the future."
msgstr ""

# 64220729c54441069dca7b6e49202b82
#: ../../../../1.8/docs/topics/testing/overview.txt:296
msgid "Understanding the test output"
msgstr ""

# b4adf6a029454e748da14fef7780d4d7
#: ../../../../1.8/docs/topics/testing/overview.txt:298
msgid ""
"When you run your tests, you'll see a number of messages as the test runner "
"prepares itself. You can control the level of detail of these messages with "
"the ``verbosity`` option on the command line::"
msgstr ""

# 1d0134a784a947d19ed9ad05189d8d61
#: ../../../../1.8/docs/topics/testing/overview.txt:308
msgid ""
"This tells you that the test runner is creating a test database, as "
"described in the previous section."
msgstr ""

# 893df3d6c5b4467c86bb972d414ccb5e
#: ../../../../1.8/docs/topics/testing/overview.txt:311
msgid ""
"Once the test database has been created, Django will run your tests. If "
"everything goes well, you'll see something like this::"
msgstr ""

# ab361cf6da1541a4bfeda41c687affc9
#: ../../../../1.8/docs/topics/testing/overview.txt:319
msgid ""
"If there are test failures, however, you'll see full details about which "
"tests failed::"
msgstr ""

# ce8f52f3a9634027bf692acaa3567db8
#: ../../../../1.8/docs/topics/testing/overview.txt:335
msgid ""
"A full explanation of this error output is beyond the scope of this "
"document, but it's pretty intuitive. You can consult the documentation of "
"Python's :mod:`unittest` library for details."
msgstr ""

# 2b4c0cb633e04d04afc34e08366f11ec
#: ../../../../1.8/docs/topics/testing/overview.txt:339
msgid ""
"Note that the return code for the test-runner script is 1 for any number of "
"failed and erroneous tests. If all the tests pass, the return code is 0. "
"This feature is useful if you're using the test-runner script in a shell "
"script and need to test for success or failure at that level."
msgstr ""

# 5856ed07ad99463a850d536df9bf867c
#: ../../../../1.8/docs/topics/testing/overview.txt:345
msgid "Speeding up the tests"
msgstr ""

# 8057684b9bd3473f91315253c3ad478a
#: ../../../../1.8/docs/topics/testing/overview.txt:347
msgid ""
"In recent versions of Django, the default password hasher is rather slow by "
"design. If during your tests you are authenticating many users, you may want"
" to use a custom settings file and set the :setting:`PASSWORD_HASHERS` "
"setting to a faster hashing algorithm::"
msgstr ""

# 366fddbc34cc4e2297289e9a4df89455
#: ../../../../1.8/docs/topics/testing/overview.txt:356
msgid ""
"Don't forget to also include in :setting:`PASSWORD_HASHERS` any hashing "
"algorithm used in fixtures, if any."
msgstr ""

# 6bf14fbc2f114df3a07397392a6067f0
#: ../../../../1.8/docs/topics/testing/tools.txt:3
msgid "Testing tools"
msgstr ""

# e83cf4eb33e44768812e101a147a45f8
#: ../../../../1.8/docs/topics/testing/tools.txt:7
msgid ""
"Django provides a small set of tools that come in handy when writing tests."
msgstr ""

# 4ef8f189f81245abb2cdaf827ab9313f
#: ../../../../1.8/docs/topics/testing/tools.txt:12
msgid "The test client"
msgstr ""

# 1c0b054a169a40bf96d3354ec0d79bb1
#: ../../../../1.8/docs/topics/testing/tools.txt:14
msgid ""
"The test client is a Python class that acts as a dummy Web browser, allowing"
" you to test your views and interact with your Django-powered application "
"programmatically."
msgstr ""

# 0dd18d7e53d246648011ef5328d6acb2
#: ../../../../1.8/docs/topics/testing/tools.txt:18
msgid "Some of the things you can do with the test client are:"
msgstr ""

# fde5906efc1546c7b7f788e521f99cb8
#: ../../../../1.8/docs/topics/testing/tools.txt:20
msgid ""
"Simulate GET and POST requests on a URL and observe the response -- "
"everything from low-level HTTP (result headers and status codes) to page "
"content."
msgstr ""

# af2aa2ed49b64388bd133e552135d022
#: ../../../../1.8/docs/topics/testing/tools.txt:24
msgid ""
"See the chain of redirects (if any) and check the URL and status code at "
"each step."
msgstr ""

# 7d06b2c10c8f47a6b91f5036e59556a0
#: ../../../../1.8/docs/topics/testing/tools.txt:27
msgid ""
"Test that a given request is rendered by a given Django template, with a "
"template context that contains certain values."
msgstr ""

# a441b69d608246f7a472bc24fa4a95a5
#: ../../../../1.8/docs/topics/testing/tools.txt:30
msgid ""
"Note that the test client is not intended to be a replacement for Selenium_ "
"or other \"in-browser\" frameworks. Django's test client has a different "
"focus. In short:"
msgstr ""

# c2a4b3c46e33491ba5a3e2db2e93c68a
#: ../../../../1.8/docs/topics/testing/tools.txt:34
msgid ""
"Use Django's test client to establish that the correct template is being "
"rendered and that the template is passed the correct context data."
msgstr ""

# 1ad245eb589249b8a98f16f041424f1c
#: ../../../../1.8/docs/topics/testing/tools.txt:37
msgid ""
"Use in-browser frameworks like Selenium_ to test *rendered* HTML and the "
"*behavior* of Web pages, namely JavaScript functionality. Django also "
"provides special support for those frameworks; see the section on "
":class:`~django.test.LiveServerTestCase` for more details."
msgstr ""

# b89b579629be4d81b05646f0cd672a79
#: ../../../../1.8/docs/topics/testing/tools.txt:42
msgid ""
"A comprehensive test suite should use a combination of both test types."
msgstr ""

# 7355fab3f00f4e00bfd273a85243c90f
#: ../../../../1.8/docs/topics/testing/tools.txt:45
msgid "Overview and a quick example"
msgstr ""

# c0fe0e5559af4dd181eca71c90d5f73c
#: ../../../../1.8/docs/topics/testing/tools.txt:47
msgid ""
"To use the test client, instantiate ``django.test.Client`` and retrieve Web "
"pages::"
msgstr ""

# b7dba8d6af60489cac16fb75ba5e2b62
#: ../../../../1.8/docs/topics/testing/tools.txt:59
msgid ""
"As this example suggests, you can instantiate ``Client`` from within a "
"session of the Python interactive interpreter."
msgstr ""

# 954f1024b32441f5b65fe442313f0c51
#: ../../../../1.8/docs/topics/testing/tools.txt:62
msgid "Note a few important things about how the test client works:"
msgstr ""

# 9639838d407a48b899c4f04fb8ef572f
#: ../../../../1.8/docs/topics/testing/tools.txt:64
msgid ""
"The test client does *not* require the Web server to be running. In fact, it"
" will run just fine with no Web server running at all! That's because it "
"avoids the overhead of HTTP and deals directly with the Django framework. "
"This helps make the unit tests run quickly."
msgstr ""

# ec47953761524235a32144f18fcd3a08
#: ../../../../1.8/docs/topics/testing/tools.txt:69
msgid ""
"When retrieving pages, remember to specify the *path* of the URL, not the "
"whole domain. For example, this is correct::"
msgstr ""

# 2b64d644266b4918b1e147ec3a1e5dfb
#: ../../../../1.8/docs/topics/testing/tools.txt:74
msgid "This is incorrect::"
msgstr ""

# 26c351927da641df8c140e67bff08dbf
#: ../../../../1.8/docs/topics/testing/tools.txt:78
msgid ""
"The test client is not capable of retrieving Web pages that are not powered "
"by your Django project. If you need to retrieve other Web pages, use a "
"Python standard library module such as :mod:`urllib`."
msgstr ""

# 46872e56580548e684ee036d29bda294
#: ../../../../1.8/docs/topics/testing/tools.txt:82
msgid ""
"To resolve URLs, the test client uses whatever URLconf is pointed-to by your"
" :setting:`ROOT_URLCONF` setting."
msgstr ""

# dacb244879d1495392cf8aeef8c4e982
#: ../../../../1.8/docs/topics/testing/tools.txt:85
msgid ""
"Although the above example would work in the Python interactive interpreter,"
" some of the test client's functionality, notably the template-related "
"functionality, is only available *while tests are running*."
msgstr ""

# 78c14e66baa44b7484c741b024937720
#: ../../../../1.8/docs/topics/testing/tools.txt:90
msgid ""
"The reason for this is that Django's test runner performs a bit of black "
"magic in order to determine which template was loaded by a given view. This "
"black magic (essentially a patching of Django's template system in memory) "
"only happens during test running."
msgstr ""

# 93c184be6c2f4f93b3fb4f2dae40f045
#: ../../../../1.8/docs/topics/testing/tools.txt:95
msgid ""
"By default, the test client will disable any CSRF checks performed by your "
"site."
msgstr ""

# 4ad7a34ac57e48928ee40ff86913827d
#: ../../../../1.8/docs/topics/testing/tools.txt:98
msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks. To do "
"this, pass in the ``enforce_csrf_checks`` argument when you construct your "
"client::"
msgstr ""

# 04d331f1c82b44c48e2f44617b3cda8a
#: ../../../../1.8/docs/topics/testing/tools.txt:108
msgid "Making requests"
msgstr ""

# f8f86bf45eee44a09c8fd81c85d94e3d
#: ../../../../1.8/docs/topics/testing/tools.txt:110
msgid "Use the ``django.test.Client`` class to make requests."
msgstr ""

# 673a4c22048e4040b35ee4f039baf53f
#: ../../../../1.8/docs/topics/testing/tools.txt:114
msgid ""
"It requires no arguments at time of construction. However, you can use "
"keywords arguments to specify some default headers. For example, this will "
"send a ``User-Agent`` HTTP header in each request::"
msgstr ""

# 6411703f8d2e48ad9af703c68e546292
#: ../../../../1.8/docs/topics/testing/tools.txt:120
msgid ""
"The values from the ``extra`` keywords arguments passed to "
":meth:`~django.test.Client.get()`, :meth:`~django.test.Client.post()`, etc. "
"have precedence over the defaults passed to the class constructor."
msgstr ""

# bbe9070a94914c2b8740e937e1d03bf2
#: ../../../../1.8/docs/topics/testing/tools.txt:125
msgid ""
"The ``enforce_csrf_checks`` argument can be used to test CSRF protection "
"(see above)."
msgstr ""

# 9a42aa920e294ea8ab3def88a6d98ed1
#: ../../../../1.8/docs/topics/testing/tools.txt:128
msgid ""
"Once you have a ``Client`` instance, you can call any of the following "
"methods:"
msgstr ""

# ec1c0e5c65eb4cf8b6fba04c84c3b831
#: ../../../../1.8/docs/topics/testing/tools.txt:135
msgid "The ``secure`` argument was added."
msgstr ""

# 62bebc950a394f868ed5be8149c7f90b
#: ../../../../1.8/docs/topics/testing/tools.txt:137
msgid ""
"Makes a GET request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

# 5e69346424b448d784338bffed4ce9f7
#: ../../../../1.8/docs/topics/testing/tools.txt:140
msgid ""
"The key-value pairs in the ``data`` dictionary are used to create a GET data"
" payload. For example::"
msgstr ""

# 9940859bcb7a4e73b1ab415bd6b39812
#: ../../../../1.8/docs/topics/testing/tools.txt:146
msgid "...will result in the evaluation of a GET request equivalent to::"
msgstr ""

# 05f6cb08b8914d08b97bf31ac7684bae
#: ../../../../1.8/docs/topics/testing/tools.txt:150
msgid ""
"The ``extra`` keyword arguments parameter can be used to specify headers to "
"be sent in the request. For example::"
msgstr ""

# b2dafe9eec124adda88d39740ce62881
#: ../../../../1.8/docs/topics/testing/tools.txt:157
msgid ""
"...will send the HTTP header ``HTTP_X_REQUESTED_WITH`` to the details view, "
"which is a good way to test code paths that use the "
":meth:`django.http.HttpRequest.is_ajax()` method."
msgstr ""

# 3ee40fd9351642f3ba75b3fbdf75b8e6
#: ../../../../1.8/docs/topics/testing/tools.txt:161
msgid "CGI specification"
msgstr ""

# b662bc0a8b614860887e12f219d626f4
#: ../../../../1.8/docs/topics/testing/tools.txt:163
msgid ""
"The headers sent via ``**extra`` should follow CGI_ specification. For "
"example, emulating a different \"Host\" header as sent in the HTTP request "
"from the browser to the server should be passed as ``HTTP_HOST``."
msgstr ""

# 0f99500252ca47da93c564100a1ff307
#: ../../../../1.8/docs/topics/testing/tools.txt:170
msgid ""
"If you already have the GET arguments in URL-encoded form, you can use that "
"encoding instead of using the data argument. For example, the previous GET "
"request could also be posed as::"
msgstr ""

# 014c61d42ae84a358ef8af080e05c6ca
#: ../../../../1.8/docs/topics/testing/tools.txt:177
msgid ""
"If you provide a URL with both an encoded GET data and a data argument, the "
"data argument will take precedence."
msgstr ""

# c686a5eab829443e986c752ab768d6ab
# d3f66ca968324ca29edf42839f0c5567
#: ../../../../1.8/docs/topics/testing/tools.txt:180
#: ../../../../1.8/docs/topics/testing/tools.txt:271
msgid ""
"If you set ``follow`` to ``True`` the client will follow any redirects and a"
" ``redirect_chain`` attribute will be set in the response object containing "
"tuples of the intermediate urls and status codes."
msgstr ""

# d1d1f915567842b9973289cd2711385a
#: ../../../../1.8/docs/topics/testing/tools.txt:184
msgid ""
"If you had a URL ``/redirect_me/`` that redirected to ``/next/``, that "
"redirected to ``/final/``, this is what you'd see::"
msgstr ""

# 8ff6781190d245fb830da837f61ed1a5
# c0ecca4fb44c4f0d989fba409fd58c43
#: ../../../../1.8/docs/topics/testing/tools.txt:191
#: ../../../../1.8/docs/topics/testing/tools.txt:275
msgid ""
"If you set ``secure`` to ``True`` the client will emulate an HTTPS request."
msgstr ""

# 9ee4791063ac4c3a9d524fe80be660c5
#: ../../../../1.8/docs/topics/testing/tools.txt:196
msgid ""
"Makes a POST request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

# 45a1e9fc41bd4ff088523368aeae9a6d
#: ../../../../1.8/docs/topics/testing/tools.txt:199
msgid ""
"The key-value pairs in the ``data`` dictionary are used to submit POST data."
" For example::"
msgstr ""

# 4dbbe0ab87194d5e8460806fd80ec180
#: ../../../../1.8/docs/topics/testing/tools.txt:205
msgid "...will result in the evaluation of a POST request to this URL::"
msgstr ""

# 18d8d6b2ae414742acfe4e6adab7ec5f
#: ../../../../1.8/docs/topics/testing/tools.txt:209
msgid "...with this POST data::"
msgstr ""

# a9f6b4506dd1450fb999e76dd10bf15a
#: ../../../../1.8/docs/topics/testing/tools.txt:213
msgid ""
"If you provide ``content_type`` (e.g. :mimetype:`text/xml` for an XML "
"payload), the contents of ``data`` will be sent as-is in the POST request, "
"using ``content_type`` in the HTTP ``Content-Type`` header."
msgstr ""

# 3af5d51b8bec48a8aa30b5b73298e5df
#: ../../../../1.8/docs/topics/testing/tools.txt:217
msgid ""
"If you don't provide a value for ``content_type``, the values in ``data`` "
"will be transmitted with a content type of :mimetype:`multipart/form-data`. "
"In this case, the key-value pairs in ``data`` will be encoded as a multipart"
" message and used to create the POST data payload."
msgstr ""

# e29160715dd74571914822ba309bb156
#: ../../../../1.8/docs/topics/testing/tools.txt:223
msgid ""
"To submit multiple values for a given key -- for example, to specify the "
"selections for a ``<select multiple>`` -- provide the values as a list or "
"tuple for the required key. For example, this value of ``data`` would submit"
" three selected values for the field named ``choices``::"
msgstr ""

# f62e1227ce58491bba361cca2d1b5515
#: ../../../../1.8/docs/topics/testing/tools.txt:230
msgid ""
"Submitting files is a special case. To POST a file, you need only provide "
"the file field name as a key, and a file handle to the file you wish to "
"upload as a value. For example::"
msgstr ""

# a2911fa477c64438af31a6d9aa945ab6
#: ../../../../1.8/docs/topics/testing/tools.txt:238
msgid ""
"(The name ``attachment`` here is not relevant; use whatever name your file-"
"processing code expects.)"
msgstr ""

# f17ed4bc7c504e2dba83600f1081a15b
#: ../../../../1.8/docs/topics/testing/tools.txt:241
msgid ""
"You may also provide any file-like object (e.g., :class:`~io.StringIO` or "
":class:`~io.BytesIO`) as a file handle."
msgstr ""

# cda1a883be4e4fc0ae1b44f92b1182a5
#: ../../../../1.8/docs/topics/testing/tools.txt:246
msgid "The ability to use a file-like object was added."
msgstr ""

# d402b35e5ba64e049f72a60eadac2286
#: ../../../../1.8/docs/topics/testing/tools.txt:248
msgid ""
"Note that if you wish to use the same file handle for multiple ``post()`` "
"calls then you will need to manually reset the file pointer between posts. "
"The easiest way to do this is to manually close the file after it has been "
"provided to ``post()``, as demonstrated above."
msgstr ""

# 6bacfcb168fe47b8afc737dbb506685f
#: ../../../../1.8/docs/topics/testing/tools.txt:254
msgid ""
"You should also ensure that the file is opened in a way that allows the data"
" to be read. If your file contains binary data such as an image, this means "
"you will need to open the file in ``rb`` (read binary) mode."
msgstr ""

# c0768b95e801416dbdddfa0cfe0e5b57
#: ../../../../1.8/docs/topics/testing/tools.txt:259
msgid "The ``extra`` argument acts the same as for :meth:`Client.get`."
msgstr ""

# 84bf5a76d562468f816854a497bd9b85
#: ../../../../1.8/docs/topics/testing/tools.txt:261
msgid ""
"If the URL you request with a POST contains encoded parameters, these "
"parameters will be made available in the request.GET data. For example, if "
"you were to make the request::"
msgstr ""

# 8c2f93d8a4d143c3937ef28b66f383b9
#: ../../../../1.8/docs/topics/testing/tools.txt:267
msgid ""
"... the view handling this request could interrogate request.POST to "
"retrieve the username and password, and could interrogate request.GET to "
"determine if the user was a visitor."
msgstr ""

# fb3b47fb853d46539d67609cdb3b0a0d
#: ../../../../1.8/docs/topics/testing/tools.txt:280
msgid ""
"Makes a HEAD request on the provided ``path`` and returns a ``Response`` "
"object. This method works just like :meth:`Client.get`, including the "
"``follow``, ``secure`` and ``extra`` arguments, except it does not return a "
"message body."
msgstr ""

# 7479ce3217cd4156a34042b5f8fdebc3
#: ../../../../1.8/docs/topics/testing/tools.txt:287
msgid ""
"Makes an OPTIONS request on the provided ``path`` and returns a ``Response``"
" object. Useful for testing RESTful interfaces."
msgstr ""

# f5feda5016d04e22ab2ee995e47322b3
# 5b369edd13fc4a9ebc3c63fdc16ad944
# 535f0144044c405b8d5fac1feac73b9d
#: ../../../../1.8/docs/topics/testing/tools.txt:290
#: ../../../../1.8/docs/topics/testing/tools.txt:301
#: ../../../../1.8/docs/topics/testing/tools.txt:320
msgid ""
"When ``data`` is provided, it is used as the request body, and a ``Content-"
"Type`` header is set to ``content_type``."
msgstr ""

# e6c8d2720612479cb00f80bbb791719e
# 423ec2e04e88451485225b3ab0169c97
# c442cfd5ac074cef96b650583f56609b
# 3aac7c8f20814d44ab48fd124900aab2
#: ../../../../1.8/docs/topics/testing/tools.txt:293
#: ../../../../1.8/docs/topics/testing/tools.txt:304
#: ../../../../1.8/docs/topics/testing/tools.txt:312
#: ../../../../1.8/docs/topics/testing/tools.txt:323
msgid ""
"The ``follow``, ``secure`` and ``extra`` arguments act the same as for "
":meth:`Client.get`."
msgstr ""

# 4a9646a73187476da18f322c21090664
#: ../../../../1.8/docs/topics/testing/tools.txt:298
msgid ""
"Makes a PUT request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# 6766d512f56b49bc9844fc2b15ef7565
#: ../../../../1.8/docs/topics/testing/tools.txt:309
msgid ""
"Makes a PATCH request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# edc86bacdf2d474588a61a3ede237fb0
#: ../../../../1.8/docs/topics/testing/tools.txt:317
msgid ""
"Makes an DELETE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# d4e149aa9b05408e9361fd2acaf302df
#: ../../../../1.8/docs/topics/testing/tools.txt:330
msgid ""
"Makes a TRACE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for simulating diagnostic probes."
msgstr ""

# d646b3d2ae564b1cb5d0bdcf06286362
#: ../../../../1.8/docs/topics/testing/tools.txt:333
msgid ""
"Unlike the other request methods, ``data`` is not provided as a keyword "
"parameter in order to comply with :rfc:`2616`, which mandates that TRACE "
"requests should not have an entity-body."
msgstr ""

# 5de29ed0437b41a88a9627e34d43f769
#: ../../../../1.8/docs/topics/testing/tools.txt:337
msgid ""
"The ``follow``, ``secure``, and ``extra`` arguments act the same as for "
":meth:`Client.get`."
msgstr ""

# 3a10e7b8be3749d093f9b668d8c6bde3
#: ../../../../1.8/docs/topics/testing/tools.txt:342
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>` "
"and you deal with logging in users, you can use the test client's "
"``login()`` method to simulate the effect of a user logging into the site."
msgstr ""

# 4d93fd1a52f64635a3b8232fd5ef4d13
#: ../../../../1.8/docs/topics/testing/tools.txt:347
msgid ""
"Inactive users (:attr:`is_active=False "
"<django.contrib.auth.models.User.is_active>`) are not permitted to login as "
"this method is meant to be equivalent to the "
":func:`~django.contrib.auth.login` view which uses "
":class:`~django.contrib.auth.forms.AuthenticationForm` and therefore "
"defaults to rejecting users who are inactive."
msgstr ""

# 4720a64c5ea94770bc8b33433f85c838
#: ../../../../1.8/docs/topics/testing/tools.txt:354
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data required to pass any login-based tests that may form part of a "
"view."
msgstr ""

# a7b8e748ce1f428faf3acd61e732004a
#: ../../../../1.8/docs/topics/testing/tools.txt:358
msgid ""
"The format of the ``credentials`` argument depends on which "
":ref:`authentication backend <authentication-backends>` you're using (which "
"is configured by your :setting:`AUTHENTICATION_BACKENDS` setting). If you're"
" using the standard authentication backend provided by Django "
"(``ModelBackend``), ``credentials`` should be the user's username and "
"password, provided as keyword arguments::"
msgstr ""

# b3fffde8b3a44a438f3465bdbc355232
#: ../../../../1.8/docs/topics/testing/tools.txt:370
msgid ""
"If you're using a different authentication backend, this method may require "
"different credentials. It requires whichever credentials are required by "
"your backend's ``authenticate()`` method."
msgstr ""

# 8a7afec348c04776bbc7c45a9489f251
#: ../../../../1.8/docs/topics/testing/tools.txt:374
msgid ""
"``login()`` returns ``True`` if it the credentials were accepted and login "
"was successful."
msgstr ""

# c1a8932843c74b5e9e5fdcf3700a5742
#: ../../../../1.8/docs/topics/testing/tools.txt:377
msgid ""
"Finally, you'll need to remember to create user accounts before you can use "
"this method. As we explained above, the test runner is executed using a test"
" database, which contains no users by default. As a result, user accounts "
"that are valid on your production site will not work under test conditions. "
"You'll need to create users as part of the test suite -- either manually "
"(using the Django model API) or with a test fixture. Remember that if you "
"want your test user to have a password, you can't set the user's password by"
" setting the password attribute directly -- you must use the "
":meth:`~django.contrib.auth.models.User.set_password()` function to store a "
"correctly hashed password. Alternatively, you can use the "
":meth:`~django.contrib.auth.models.UserManager.create_user` helper method to"
" create a new user with a correctly hashed password."
msgstr ""

# 96b343af09924294b316a19e5831516e
#: ../../../../1.8/docs/topics/testing/tools.txt:393
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>`,"
" the ``logout()`` method can be used to simulate the effect of a user "
"logging out of your site."
msgstr ""

# 33dbd863aa144b518606c125abb0ec52
#: ../../../../1.8/docs/topics/testing/tools.txt:397
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data cleared to defaults. Subsequent requests will appear to come "
"from an :class:`~django.contrib.auth.models.AnonymousUser`."
msgstr ""

# 8f4516a19acb4ec0b83a9771bcb0f1cf
#: ../../../../1.8/docs/topics/testing/tools.txt:402
msgid "Testing responses"
msgstr ""

# 008126f3c3e3487199f9990f7c07c303
#: ../../../../1.8/docs/topics/testing/tools.txt:404
msgid ""
"The ``get()`` and ``post()`` methods both return a ``Response`` object. This"
" ``Response`` object is *not* the same as the ``HttpResponse`` object "
"returned by Django views; the test response object has some additional data "
"useful for test code to verify."
msgstr ""

# f6a8eddae7df4bd9a93c6c4d265c7f46
#: ../../../../1.8/docs/topics/testing/tools.txt:409
msgid "Specifically, a ``Response`` object has the following attributes:"
msgstr ""

# bf82b676273a496daf27cc366898b025
#: ../../../../1.8/docs/topics/testing/tools.txt:415
msgid ""
"The test client that was used to make the request that resulted in the "
"response."
msgstr ""

# a5dbfec5a98d4aa4ad2d0b203345cd86
#: ../../../../1.8/docs/topics/testing/tools.txt:420
msgid ""
"The body of the response, as a string. This is the final page content as "
"rendered by the view, or any error message."
msgstr ""

# 166d47c4e3884bd79a9f71af5f7e12c2
#: ../../../../1.8/docs/topics/testing/tools.txt:425
msgid ""
"The template ``Context`` instance that was used to render the template that "
"produced the response content."
msgstr ""

# 87c5545d7a2745f3840fd14bc79b3208
#: ../../../../1.8/docs/topics/testing/tools.txt:428
msgid ""
"If the rendered page used multiple templates, then ``context`` will be a "
"list of ``Context`` objects, in the order in which they were rendered."
msgstr ""

# 711ee40808b84576b8bd33d918696dbd
#: ../../../../1.8/docs/topics/testing/tools.txt:431
msgid ""
"Regardless of the number of templates used during rendering, you can "
"retrieve context values using the ``[]`` operator. For example, the context "
"variable ``name`` could be retrieved using::"
msgstr ""

# 53416900dcf443c8a1484c9bc35c75af
#: ../../../../1.8/docs/topics/testing/tools.txt:441
msgid "The request data that stimulated the response."
msgstr ""

# fe18f03e89484e65bcb612436ce86289
#: ../../../../1.8/docs/topics/testing/tools.txt:447
msgid ""
"The ``WSGIRequest`` instance generated by the test handler that generated "
"the response."
msgstr ""

# 761cf6ace7464270a15456ea4ae9e089
#: ../../../../1.8/docs/topics/testing/tools.txt:452
msgid ""
"The HTTP status of the response, as an integer. See :rfc:`2616#section-10` "
"for a full list of HTTP status codes."
msgstr ""

# 38b17741b2764266a3c3fc595e924b09
#: ../../../../1.8/docs/topics/testing/tools.txt:457
msgid ""
"A list of ``Template`` instances used to render the final content, in the "
"order they were rendered. For each template in the list, use "
"``template.name`` to get the template's file name, if the template was "
"loaded from a file. (The name is a string such as ``'admin/index.html'``.)"
msgstr ""

# 1150a2f77c724c7c83afec876ea571e5
#: ../../../../1.8/docs/topics/testing/tools.txt:467
msgid ""
"An instance of :class:`~django.core.urlresolvers.ResolverMatch` for the "
"response. You can use the "
":attr:`~django.core.urlresolvers.ResolverMatch.func` attribute, for example,"
" to verify the view that served the response::"
msgstr ""

# 89376d6fbc07443a84bba5b4fe32c4c5
#: ../../../../1.8/docs/topics/testing/tools.txt:479
msgid ""
"If the given URL is not found, accessing this attribute will raise a "
":exc:`~django.core.urlresolvers.Resolver404` exception."
msgstr ""

# 9cb4b3541d2440a6a91e1b662748e257
#: ../../../../1.8/docs/topics/testing/tools.txt:482
msgid ""
"You can also use dictionary syntax on the response object to query the value"
" of any settings in the HTTP headers. For example, you could determine the "
"content type of a response using ``response['Content-Type']``."
msgstr ""

# 2043bb555eb6400fbdfb5a59f5bf1b1b
#: ../../../../1.8/docs/topics/testing/tools.txt:489
msgid ""
"If you point the test client at a view that raises an exception, that "
"exception will be visible in the test case. You can then use a standard "
"``try ... except`` block or :meth:`~unittest.TestCase.assertRaises` to test "
"for exceptions."
msgstr ""

# 7d92a17df41f45918b5f22440f8f00ea
#: ../../../../1.8/docs/topics/testing/tools.txt:493
msgid ""
"The only exceptions that are not visible to the test client are "
":class:`~django.http.Http404`, "
":class:`~django.core.exceptions.PermissionDenied`, :exc:`SystemExit`, and "
":class:`~django.core.exceptions.SuspiciousOperation`. Django catches these "
"exceptions internally and converts them into the appropriate HTTP response "
"codes. In these cases, you can check ``response.status_code`` in your test."
msgstr ""

# 17fb7d72c1704e41b9e51754fb6f1209
#: ../../../../1.8/docs/topics/testing/tools.txt:501
msgid "Persistent state"
msgstr ""

# ce7d5f6cbf2842e8a54c3bfdd709766c
#: ../../../../1.8/docs/topics/testing/tools.txt:503
msgid ""
"The test client is stateful. If a response returns a cookie, then that "
"cookie will be stored in the test client and sent with all subsequent "
"``get()`` and ``post()`` requests."
msgstr ""

# 0309a61203084b34b8084b60ccba427d
#: ../../../../1.8/docs/topics/testing/tools.txt:507
msgid ""
"Expiration policies for these cookies are not followed. If you want a cookie"
" to expire, either delete it manually or create a new ``Client`` instance "
"(which will effectively delete all cookies)."
msgstr ""

# 1535791977ce49c1a322c3f5f5b23ff2
#: ../../../../1.8/docs/topics/testing/tools.txt:511
msgid ""
"A test client has two attributes that store persistent state information. "
"You can access these properties as part of a test condition."
msgstr ""

# b3aefa2edf694fbbaad25769358ad12b
#: ../../../../1.8/docs/topics/testing/tools.txt:516
msgid ""
"A Python :class:`~http.cookies.SimpleCookie` object, containing the current "
"values of all the client cookies. See the documentation of the "
":mod:`http.cookies` module for more."
msgstr ""

# 7974e4ba9e3a48b39868c312ef21c8b0
#: ../../../../1.8/docs/topics/testing/tools.txt:522
msgid ""
"A dictionary-like object containing session information. See the "
":doc:`session documentation</topics/http/sessions>` for full details."
msgstr ""

# 3079507e82774fa094622fa0414afd80
#: ../../../../1.8/docs/topics/testing/tools.txt:525
msgid ""
"To modify the session and then save it, it must be stored in a variable "
"first (because a new ``SessionStore`` is created every time this property is"
" accessed)::"
msgstr ""

# 4e52b6f81fbe4854a705e2a76ef6e021
#: ../../../../1.8/docs/topics/testing/tools.txt:537
msgid "The following is a simple unit test using the test client::"
msgstr ""

# 96b7f3428388424cb9231dd2e2703274
#: ../../../../1.8/docs/topics/testing/tools.txt:559
msgid ":class:`django.test.RequestFactory`"
msgstr ""

# 6e35905ae10643dbbb8af8e0cc24176c
#: ../../../../1.8/docs/topics/testing/tools.txt:564
msgid "Provided test case classes"
msgstr ""

# 476def8eca2e49198046fe2948ec26e3
#: ../../../../1.8/docs/topics/testing/tools.txt:566
msgid ""
"Normal Python unit test classes extend a base class of "
":class:`unittest.TestCase`. Django provides a few extensions of this base "
"class:"
msgstr ""

# d627a998cc2c48afa9127aee4c0b41e0
#: ../../../../1.8/docs/topics/testing/tools.txt:576
msgid "Hierarchy of Django unit testing classes"
msgstr ""

# a620fba2b22e47c78d3af72f873a6fb3
#: ../../../../1.8/docs/topics/testing/tools.txt:579
msgid "SimpleTestCase"
msgstr ""

# 9a43176daa8f4101881185f6be29b1ad
#: ../../../../1.8/docs/topics/testing/tools.txt:583
msgid ""
"A thin subclass of :class:`unittest.TestCase`, it extends it with some basic"
" functionality like:"
msgstr ""

# f5412cee09144037b30004ec128b9c87
#: ../../../../1.8/docs/topics/testing/tools.txt:586
msgid "Saving and restoring the Python warning machinery state."
msgstr ""

# 772e274555f046ad97327dc9e5fafd33
#: ../../../../1.8/docs/topics/testing/tools.txt:587
msgid "Some useful assertions like:"
msgstr ""

# 93063d645ef34cdea590e9a745669e8c
#: ../../../../1.8/docs/topics/testing/tools.txt:589
msgid ""
"Checking that a callable :meth:`raises a certain exception "
"<SimpleTestCase.assertRaisesMessage>`."
msgstr ""

# 03e559f787c7487dab00914ee93b3205
#: ../../../../1.8/docs/topics/testing/tools.txt:591
msgid ""
"Testing form field :meth:`rendering and error treatment "
"<SimpleTestCase.assertFieldOutput>`."
msgstr ""

# 2aed89aa4f8a4048a551bfbb4d417209
#: ../../../../1.8/docs/topics/testing/tools.txt:593
msgid ""
"Testing :meth:`HTML responses for the presence/lack of a given fragment "
"<SimpleTestCase.assertContains>`."
msgstr ""

# 8d272ca446e14e27859ce81ded2d14c9
#: ../../../../1.8/docs/topics/testing/tools.txt:595
msgid ""
"Verifying that a template :meth:`has/hasn't been used to generate a given "
"response content <SimpleTestCase.assertTemplateUsed>`."
msgstr ""

# 7302f32f71c94b3f87feac02cc92f8ba
#: ../../../../1.8/docs/topics/testing/tools.txt:597
msgid ""
"Verifying a HTTP :meth:`redirect <SimpleTestCase.assertRedirects>` is "
"performed by the app."
msgstr ""

# 018f98cec3084dbd88efcd67dd2da217
#: ../../../../1.8/docs/topics/testing/tools.txt:599
msgid ""
"Robustly testing two :meth:`HTML fragments <SimpleTestCase.assertHTMLEqual>`"
" for equality/inequality or :meth:`containment "
"<SimpleTestCase.assertInHTML>`."
msgstr ""

# 79393b2fabb84aa0a0f16120303fcef4
#: ../../../../1.8/docs/topics/testing/tools.txt:601
msgid ""
"Robustly testing two :meth:`XML fragments <SimpleTestCase.assertXMLEqual>` "
"for equality/inequality."
msgstr ""

# 4723652edc3546fead1069e3b39d8d0e
#: ../../../../1.8/docs/topics/testing/tools.txt:603
msgid ""
"Robustly testing two :meth:`JSON fragments <SimpleTestCase.assertJSONEqual>`"
" for equality."
msgstr ""

# ed045269950d447a9b49ff45fa069b15
#: ../../../../1.8/docs/topics/testing/tools.txt:606
msgid ""
"The ability to run tests with :ref:`modified settings <overriding-"
"settings>`."
msgstr ""

# 4b263e6a80fb49829cea4616b2b858b1
#: ../../../../1.8/docs/topics/testing/tools.txt:607
msgid "Using the :attr:`~SimpleTestCase.client` :class:`~django.test.Client`."
msgstr ""

# a65bcd0686e24e7e8bf1c491574cb403
#: ../../../../1.8/docs/topics/testing/tools.txt:608
msgid "Custom test-time :attr:`URL maps <SimpleTestCase.urls>`."
msgstr ""

# 4ac5faa2e8b94e9c895db97d5e2633c0
#: ../../../../1.8/docs/topics/testing/tools.txt:610
msgid ""
"If you need any of the other more complex and heavyweight Django-specific "
"features like:"
msgstr ""

# 860e44435119463587b30a7a29816fd2
#: ../../../../1.8/docs/topics/testing/tools.txt:613
msgid "Testing or using the ORM."
msgstr ""

# 3b50fc4f83a94ba7b1f853647cfd5ac8
#: ../../../../1.8/docs/topics/testing/tools.txt:614
msgid "Database :attr:`~TransactionTestCase.fixtures`."
msgstr ""

# 42a291b77cfd499091e15b7c3e8e6470
#: ../../../../1.8/docs/topics/testing/tools.txt:615
msgid ""
"Test :ref:`skipping based on database backend features <skipping-tests>`."
msgstr ""

# 52e9b8f2e8694f989aab4267001a25c8
#: ../../../../1.8/docs/topics/testing/tools.txt:616
msgid ""
"The remaining specialized :meth:`assert* "
"<TransactionTestCase.assertQuerysetEqual>` methods."
msgstr ""

# f62e14d496004d4a87f57bfe8d3d1a25
#: ../../../../1.8/docs/topics/testing/tools.txt:619
msgid ""
"then you should use :class:`~django.test.TransactionTestCase` or "
":class:`~django.test.TestCase` instead."
msgstr ""

# 5e2b64a7dce54309bff8306a51942c19
#: ../../../../1.8/docs/topics/testing/tools.txt:622
msgid "``SimpleTestCase`` inherits from ``unittest.TestCase``."
msgstr ""

# 8d28431e6e604780bd3011118c122625
#: ../../../../1.8/docs/topics/testing/tools.txt:626
msgid ""
"``SimpleTestCase`` and its subclasses (e.g. ``TestCase``, ...) rely on "
"``setUpClass()`` and ``tearDownClass()`` to perform some class-wide "
"initialization (e.g. overriding settings). If you need to override those "
"methods, don't forget to call the ``super`` implementation::"
msgstr ""

# 50b2c51dbee94b05a343c9fdbeb6aebf
#: ../../../../1.8/docs/topics/testing/tools.txt:644
msgid "TransactionTestCase"
msgstr ""

# befcb3746d8b4f0a85adfac956fe49bf
#: ../../../../1.8/docs/topics/testing/tools.txt:648
msgid ""
"Django's ``TestCase`` class (described below) makes use of database "
"transaction facilities to speed up the process of resetting the database to "
"a known state at the beginning of each test. A consequence of this, however,"
" is that some database behaviors cannot be tested within a Django "
"``TestCase`` class. For instance, you cannot test that a block of code is "
"executing within a transaction, as is required when using "
":meth:`~django.db.models.query.QuerySet.select_for_update()`. In those "
"cases, you should use ``TransactionTestCase``."
msgstr ""

# 9e9e7944e11a4b099d3b9dfd0e467f48
#: ../../../../1.8/docs/topics/testing/tools.txt:659
msgid ""
"In older versions of Django, the effects of transaction commit and rollback "
"could not be tested within a ``TestCase``.  With the completion of the "
"deprecation cycle of the old-style transaction management in Django 1.8, "
"transaction management commands (e.g. ``transaction.commit()``) are no "
"longer disabled within ``TestCase``."
msgstr ""

# ecb4f316acd3466db81438f05febc30e
#: ../../../../1.8/docs/topics/testing/tools.txt:665
msgid ""
"``TransactionTestCase`` and ``TestCase`` are identical except for the manner"
" in which the database is reset to a known state and the ability for test "
"code to test the effects of commit and rollback:"
msgstr ""

# 8f7115c50f9a4d34ad7a98c5dfb31645
#: ../../../../1.8/docs/topics/testing/tools.txt:669
msgid ""
"A ``TransactionTestCase`` resets the database after the test runs by "
"truncating all tables. A ``TransactionTestCase`` may call commit and "
"rollback and observe the effects of these calls on the database."
msgstr ""

# ea7ab883a10c4472a54356321da28d08
#: ../../../../1.8/docs/topics/testing/tools.txt:673
msgid ""
"A ``TestCase``, on the other hand, does not truncate tables after a test. "
"Instead, it encloses the test code in a database transaction that is rolled "
"back at the end of the test. This guarantees that the rollback at the end of"
" the test restores the database to its initial state."
msgstr ""

# 115a0a3b962f4f24b33daa910f7c1b30
#: ../../../../1.8/docs/topics/testing/tools.txt:680
msgid ""
"``TestCase`` running on a database that does not support rollback (e.g. "
"MySQL with the MyISAM storage engine), and all instances of "
"``TransactionTestCase``, will roll back at the end of the test by deleting "
"all data from the test database and reloading initial data for apps without "
"migrations."
msgstr ""

# 98d0a923ae84470ca64afca1ae4d36a4
#: ../../../../1.8/docs/topics/testing/tools.txt:685
msgid ""
"Apps with migrations :ref:`will not see their data reloaded <test-case-"
"serialized-rollback>`; if you need this functionality (for example, third-"
"party apps should enable this) you can set ``serialized_rollback = True`` "
"inside the ``TestCase`` body."
msgstr ""

# d66f97d2f2de4b9883fe4397bc7a23f4
#: ../../../../1.8/docs/topics/testing/tools.txt:690
msgid ""
"``TransactionTestCase`` inherits from :class:`~django.test.SimpleTestCase`."
msgstr ""

# 126b41926e684216929fd7bd4e3a8153
#: ../../../../1.8/docs/topics/testing/tools.txt:693
msgid "TestCase"
msgstr ""

# fc8322e60c4145e1afb60994a3d28062
#: ../../../../1.8/docs/topics/testing/tools.txt:697
msgid ""
"This class provides some additional capabilities that can be useful for "
"testing Web sites."
msgstr ""

# 9fd66d1d428a4d6c881270ef8d60de27
#: ../../../../1.8/docs/topics/testing/tools.txt:700
msgid ""
"Converting a normal :class:`unittest.TestCase` to a Django :class:`TestCase`"
" is easy: Just change the base class of your test from "
"``'unittest.TestCase'`` to ``'django.test.TestCase'``. All of the standard "
"Python unit test functionality will continue to be available, but it will be"
" augmented with some useful additions, including:"
msgstr ""

# c866d65b7d064ee2ac41eefa31b9f7d8
#: ../../../../1.8/docs/topics/testing/tools.txt:706
msgid "Automatic loading of fixtures."
msgstr ""

# 548bcd291c6b42c6b43eda242f7f520d
#: ../../../../1.8/docs/topics/testing/tools.txt:708
msgid ""
"Wraps the tests within two nested ``atomic`` blocks: one for the whole class"
" and one for each test."
msgstr ""

# 334220a34b5844c19f497c649a0903d7
#: ../../../../1.8/docs/topics/testing/tools.txt:711
msgid "Creates a TestClient instance."
msgstr ""

# 461ee79c0bc84bc9919f96637753c8e1
#: ../../../../1.8/docs/topics/testing/tools.txt:713
msgid ""
"Django-specific assertions for testing for things like redirection and form "
"errors."
msgstr ""

# ff5603ef00584ac6a464e877177b64f6
#: ../../../../1.8/docs/topics/testing/tools.txt:720
msgid ""
"The class-level ``atomic`` block described above allows the creation of "
"initial data at the class level, once for the whole ``TestCase``. This "
"technique allows for faster tests as compared to using ``setUp()``."
msgstr ""

# b5a94815822c4bb0a77a92ee808c8de6
#: ../../../../1.8/docs/topics/testing/tools.txt:743
msgid ""
"Note that if the tests are run on a database with no transaction support "
"(for instance, MySQL with the MyISAM engine), ``setUpTestData()`` will be "
"called before each test, negating the speed benefits."
msgstr ""

# 7c03a959e24e4897b6b84d7e34bcae15
#: ../../../../1.8/docs/topics/testing/tools.txt:749
msgid ""
"If you want to test some specific database transaction behavior, you should "
"use ``TransactionTestCase``, as ``TestCase`` wraps test execution within an "
":func:`~django.db.transaction.atomic()` block."
msgstr ""

# 37896794f6bf426c878af8fc53c5f412
#: ../../../../1.8/docs/topics/testing/tools.txt:753
msgid "``TestCase`` inherits from :class:`~django.test.TransactionTestCase`."
msgstr ""

# c50e30f406d84dc39f1c2d4180cb6a8e
#: ../../../../1.8/docs/topics/testing/tools.txt:758
msgid "LiveServerTestCase"
msgstr ""

# dc8631471b774e10ae83969df6430d4f
#: ../../../../1.8/docs/topics/testing/tools.txt:762
msgid ""
"``LiveServerTestCase`` does basically the same as "
":class:`~django.test.TransactionTestCase` with one extra feature: it "
"launches a live Django server in the background on setup, and shuts it down "
"on teardown. This allows the use of automated test clients other than the "
":ref:`Django dummy client <test-client>` such as, for example, the Selenium_"
" client, to execute a series of functional tests inside a browser and "
"simulate a real user's actions."
msgstr ""

# aabd21e0f9c44b5fa76fd4174bfbe29f
#: ../../../../1.8/docs/topics/testing/tools.txt:770
msgid ""
"By default the live server's address is ``'localhost:8081'`` and the full "
"URL can be accessed during the tests with ``self.live_server_url``. If you'd"
" like to change the default address (in the case, for example, where the "
"8081 port is already taken) then you may pass a different one to the "
":djadmin:`test` command via the :djadminopt:`--liveserver` option, for "
"example:"
msgstr ""

# 816725a0427943b6b697dffca990623d
#: ../../../../1.8/docs/topics/testing/tools.txt:780
msgid ""
"Another way of changing the default server address is by setting the "
"`DJANGO_LIVE_TEST_SERVER_ADDRESS` environment variable somewhere in your "
"code (for example, in a :ref:`custom test runner<topics-testing-"
"test_runner>`)::"
msgstr ""

# 1985d7cdea0b4887bdc24b3c2a19a6bb
#: ../../../../1.8/docs/topics/testing/tools.txt:787
msgid ""
"In the case where the tests are run by multiple processes in parallel (for "
"example, in the context of several simultaneous `continuous integration`_ "
"builds), the processes will compete for the same address, and therefore your"
" tests might randomly fail with an \"Address already in use\" error. To "
"avoid this problem, you can pass a comma-separated list of ports or ranges "
"of ports (at least as many as the number of potential parallel processes). "
"For example:"
msgstr ""

# 8cb6d733d23740d2a419ea2901750074
#: ../../../../1.8/docs/topics/testing/tools.txt:798
msgid ""
"Then, during test execution, each new live test server will try every "
"specified port until it finds one that is free and takes it."
msgstr ""

# d34a2025517b4c71b898ca7924c0071c
#: ../../../../1.8/docs/topics/testing/tools.txt:803
msgid ""
"To demonstrate how to use ``LiveServerTestCase``, let's write a simple "
"Selenium test. First of all, you need to install the `selenium package`_ "
"into your Python path:"
msgstr ""

# c14ef7d6f5814634a1820a4f2f36bf7f
#: ../../../../1.8/docs/topics/testing/tools.txt:811
msgid ""
"Then, add a ``LiveServerTestCase``-based test to your app's tests module "
"(for example: ``myapp/tests.py``). The code for this test may look as "
"follows::"
msgstr ""

# 4f0bdc51a92e4d0fab4ebdf352527bdf
#: ../../../../1.8/docs/topics/testing/tools.txt:838
msgid "Finally, you may run the test as follows:"
msgstr ""

# b8776026865f4846bd294e35b87bc70f
#: ../../../../1.8/docs/topics/testing/tools.txt:844
msgid ""
"This example will automatically open Firefox then go to the login page, "
"enter the credentials and press the \"Log in\" button. Selenium offers other"
" drivers in case you do not have Firefox installed or wish to use another "
"browser. The example above is just a tiny fraction of what the Selenium "
"client can do; check out the `full reference`_ for more details."
msgstr ""

# 8ffc9a77e2524398b4d5f1b6af15e8d8
#: ../../../../1.8/docs/topics/testing/tools.txt:857
msgid ""
"In older versions, ``LiveServerTestCase`` relied on the :doc:`staticfiles "
"contrib app </howto/static-files/index>` to transparently serve static files"
" during the execution of tests. This functionality has been moved to the "
":class:`~django.contrib.staticfiles.testing.StaticLiveServerTestCase` "
"subclass, so use that subclass if you need :ref:`the original behavior "
"<staticfiles-testing-support>`."
msgstr ""

# 43e1adb3aee64c3fb8be5be2d1367913
#: ../../../../1.8/docs/topics/testing/tools.txt:864
msgid ""
"``LiveServerTestCase`` now simply publishes the contents of the file system "
"under :setting:`STATIC_ROOT` at the :setting:`STATIC_URL`."
msgstr ""

# 8fc1cf59608f487f92975ab06acc4b31
#: ../../../../1.8/docs/topics/testing/tools.txt:869
msgid ""
"When using an in-memory SQLite database to run the tests, the same database "
"connection will be shared by two threads in parallel: the thread in which "
"the live server is run and the thread in which the test case is run. It's "
"important to prevent simultaneous database queries via this shared "
"connection by the two threads, as that may sometimes randomly cause the "
"tests to fail. So you need to ensure that the two threads don't access the "
"database at the same time. In particular, this means that in some cases (for"
" example, just after clicking a link or submitting a form), you might need "
"to check that a response is received by Selenium and that the next page is "
"loaded before proceeding with further test execution. Do this, for example, "
"by making Selenium wait until the ``<body>`` HTML tag is found in the "
"response (requires Selenium > 2.13)::"
msgstr ""

# de5ffaede2a0481aa4b31ba97c17ee41
#: ../../../../1.8/docs/topics/testing/tools.txt:891
msgid ""
"The tricky thing here is that there's really no such thing as a \"page "
"load,\" especially in modern Web apps that generate HTML dynamically after "
"the server generates the initial document. So, simply checking for the "
"presence of ``<body>`` in the response might not necessarily be appropriate "
"for all use cases. Please refer to the `Selenium FAQ`_ and `Selenium "
"documentation`_ for more information."
msgstr ""

# 8b8c0658a88144b8b0206f0ff3bbd1f9
#: ../../../../1.8/docs/topics/testing/tools.txt:902
msgid "Test cases features"
msgstr ""

# 731c343619224d17a63156a6e63512ca
#: ../../../../1.8/docs/topics/testing/tools.txt:905
msgid "Default test client"
msgstr ""

# ec513ad7b8ce4808bf6ccb0f7bcea0d2
#: ../../../../1.8/docs/topics/testing/tools.txt:909
msgid ""
"Every test case in a ``django.test.*TestCase`` instance has access to an "
"instance of a Django test client. This client can be accessed as "
"``self.client``. This client is recreated for each test, so you don't have "
"to worry about state (such as cookies) carrying over from one test to "
"another."
msgstr ""

# 80d62572e8954a8a91fe39a95f605ba8
#: ../../../../1.8/docs/topics/testing/tools.txt:914
msgid "This means, instead of instantiating a ``Client`` in each test::"
msgstr ""

# 0e9e81f2643749a4a0d630a882cd1bb4
#: ../../../../1.8/docs/topics/testing/tools.txt:930
msgid "...you can just refer to ``self.client``, like so::"
msgstr ""

# 06771f5d4f914340b37377754a865b29
#: ../../../../1.8/docs/topics/testing/tools.txt:944
msgid "Customizing the test client"
msgstr ""

# 7bedc15c49ab4da999523bf808e8350f
#: ../../../../1.8/docs/topics/testing/tools.txt:948
msgid ""
"If you want to use a different ``Client`` class (for example, a subclass "
"with customized behavior), use the :attr:`~SimpleTestCase.client_class` "
"class attribute::"
msgstr ""

# 086e0dc5f35744ce9b8826c1c6bd1536
#: ../../../../1.8/docs/topics/testing/tools.txt:968
msgid "Fixture loading"
msgstr ""

# 9fcff8116f354d9895943d1d51518315
#: ../../../../1.8/docs/topics/testing/tools.txt:972
msgid ""
"A test case for a database-backed Web site isn't much use if there isn't any"
" data in the database. To make it easy to put test data into the database, "
"Django's custom ``TransactionTestCase`` class provides a way of loading "
"**fixtures**."
msgstr ""

# 8a206e2952dc400a8cdc728860107dd4
#: ../../../../1.8/docs/topics/testing/tools.txt:977
msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. For example, if your site has user accounts, you might set up a "
"fixture of fake user accounts in order to populate your database during "
"tests."
msgstr ""

# ff3de43e60eb46599b06d9449fdd4a6b
#: ../../../../1.8/docs/topics/testing/tools.txt:981
msgid ""
"The most straightforward way of creating a fixture is to use the "
":djadmin:`manage.py dumpdata <dumpdata>` command. This assumes you already "
"have some data in your database. See the :djadmin:`dumpdata "
"documentation<dumpdata>` for more details."
msgstr ""

# 6481b038b9214b4b94103d03bc36be3d
#: ../../../../1.8/docs/topics/testing/tools.txt:988
msgid ""
"If you've ever run :djadmin:`manage.py migrate<migrate>`, you've already "
"used a fixture without even knowing it! When you call :djadmin:`migrate` in "
"the database for the first time, Django installs a fixture called "
"``initial_data``. This gives you a way of populating a new database with any"
" initial data, such as a default set of categories."
msgstr ""

# db8c8d7824cb4b599443652e226f2e3d
#: ../../../../1.8/docs/topics/testing/tools.txt:995
msgid ""
"Fixtures with other names can always be installed manually using the "
":djadmin:`manage.py loaddata<loaddata>` command."
msgstr ""

# 48aa6a0c6287423ba24fe541365f1db9
#: ../../../../1.8/docs/topics/testing/tools.txt:998
msgid "Initial SQL data and testing"
msgstr ""

# 02dd9bbc0bff40f1a99645111a39de1a
#: ../../../../1.8/docs/topics/testing/tools.txt:1000
msgid ""
"Django provides a second way to insert initial data into models -- the "
":ref:`custom SQL hook <initial-sql>`. However, this technique *cannot* be "
"used to provide initial data for testing purposes. Django's test framework "
"flushes the contents of the test database after each test; as a result, any "
"data added using the custom SQL hook will be lost."
msgstr ""

# aaccfda013aa4d788e45eae32aa9b1c0
#: ../../../../1.8/docs/topics/testing/tools.txt:1007
msgid ""
"Once you've created a fixture and placed it in a ``fixtures`` directory in "
"one of your :setting:`INSTALLED_APPS`, you can use it in your unit tests by "
"specifying a ``fixtures`` class attribute on your "
":class:`django.test.TestCase` subclass::"
msgstr ""

# 99baffb726e04d86874870eb059ab8e1
#: ../../../../1.8/docs/topics/testing/tools.txt:1026
msgid "Here's specifically what will happen:"
msgstr ""

# a8b86412aee04503a84462e2ac5d7788
#: ../../../../1.8/docs/topics/testing/tools.txt:1028
msgid ""
"At the start of each test case, before ``setUp()`` is run, Django will flush"
" the database, returning the database to the state it was in directly after "
":djadmin:`migrate` was called."
msgstr ""

# 572f9740b22841c3be97b1546616b753
#: ../../../../1.8/docs/topics/testing/tools.txt:1032
msgid ""
"Then, all the named fixtures are installed. In this example, Django will "
"install any JSON fixture named ``mammals``, followed by any fixture named "
"``birds``. See the :djadmin:`loaddata` documentation for more details on "
"defining and installing fixtures."
msgstr ""

# 857e63ada6134ef69a6d792132f38806
#: ../../../../1.8/docs/topics/testing/tools.txt:1037
msgid ""
"This flush/load procedure is repeated for each test in the test case, so you"
" can be certain that the outcome of a test will not be affected by another "
"test, or by the order of test execution."
msgstr ""

# 6b84b72259d944f7adb683b3d7d6ead1
#: ../../../../1.8/docs/topics/testing/tools.txt:1041
msgid ""
"By default, fixtures are only loaded into the ``default`` database. If you "
"are using multiple databases and set :attr:`multi_db=True "
"<TransactionTestCase.multi_db>`, fixtures will be loaded into all databases."
msgstr ""

# 1511278181b34fb5bbadda5b24f3fb97
#: ../../../../1.8/docs/topics/testing/tools.txt:1046
msgid "URLconf configuration"
msgstr ""

# 7204e56fda6e4e7f98757966e0540340
#: ../../../../1.8/docs/topics/testing/tools.txt:1052
msgid ""
"Use ``@override_settings(ROOT_URLCONF=...)`` instead for URLconf "
"configuration."
msgstr ""

# bea23a048b9042b1bb2c26ccb428f569
#: ../../../../1.8/docs/topics/testing/tools.txt:1055
msgid ""
"If your application provides views, you may want to include tests that use "
"the test client to exercise those views. However, an end user is free to "
"deploy the views in your application at any URL of their choosing. This "
"means that your tests can't rely upon the fact that your views will be "
"available at a particular URL."
msgstr ""

# f8df05435e684847be4a6b209368b5d4
#: ../../../../1.8/docs/topics/testing/tools.txt:1061
msgid ""
"In order to provide a reliable URL space for your test, "
"``django.test.*TestCase`` classes provide the ability to customize the "
"URLconf configuration for the duration of the execution of a test suite. If "
"your ``*TestCase`` instance defines an ``urls`` attribute, the ``*TestCase``"
" will use the value of that attribute as the :setting:`ROOT_URLCONF` for the"
" duration of that test."
msgstr ""

# 6b229375224f42e6a0032498237a7b5d
#: ../../../../1.8/docs/topics/testing/tools.txt:1079
msgid ""
"This test case will use the contents of ``myapp.test_urls`` as the URLconf "
"for the duration of the test case."
msgstr ""

# a52089c72bc344fe9ca36e2f86495c6a
#: ../../../../1.8/docs/topics/testing/tools.txt:1085
msgid "Multi-database support"
msgstr ""

# a7cb4403a3e6499db97f9612135a9482
#: ../../../../1.8/docs/topics/testing/tools.txt:1089
msgid ""
"Django sets up a test database corresponding to every database that is "
"defined in the :setting:`DATABASES` definition in your settings file. "
"However, a big part of the time taken to run a Django TestCase is consumed "
"by the call to ``flush`` that ensures that you have a clean database at the "
"start of each test run. If you have multiple databases, multiple flushes are"
" required (one for each database), which can be a time consuming activity --"
" especially if your tests don't need to test multi-database activity."
msgstr ""

# 36ebc1877b764ccb89af5fdb86a4f84f
#: ../../../../1.8/docs/topics/testing/tools.txt:1098
msgid ""
"As an optimization, Django only flushes the ``default`` database at the "
"start of each test run. If your setup contains multiple databases, and you "
"have a test that requires every database to be clean, you can use the "
"``multi_db`` attribute on the test suite to request a full flush."
msgstr ""

# bed8f5e1007d471b9cd60dc351be9877
#: ../../../../1.8/docs/topics/testing/tools.txt:1112
msgid ""
"This test case will flush *all* the test databases before running "
"``testIndexPageView``."
msgstr ""

# 7f7f1467459f4d3897ee0304126a9f7a
#: ../../../../1.8/docs/topics/testing/tools.txt:1115
msgid ""
"The ``multi_db`` flag also affects into which databases the "
"attr:`TransactionTestCase.fixtures` are loaded. By default (when "
"``multi_db=False``), fixtures are only loaded into the ``default`` database."
" If ``multi_db=True``, fixtures are loaded into all databases."
msgstr ""

# 259c53ec5439490e8799a4062fb3d2b2
#: ../../../../1.8/docs/topics/testing/tools.txt:1123
msgid "Overriding settings"
msgstr ""

# 26d6b12c0ffc493286be1a75c7b643bc
#: ../../../../1.8/docs/topics/testing/tools.txt:1127
msgid ""
"Use the functions below to temporarily alter the value of settings in tests."
" Don't manipulate ``django.conf.settings`` directly as Django won't restore "
"the original values after such manipulations."
msgstr ""

# 3da322bfd0684aa9a9c21cd03ed88f71
#: ../../../../1.8/docs/topics/testing/tools.txt:1133
msgid ""
"For testing purposes it's often useful to change a setting temporarily and "
"revert to the original value after running the testing code. For this use "
"case Django provides a standard Python context manager (see :pep:`343`) "
"called :meth:`~django.test.SimpleTestCase.settings`, which can be used like "
"this::"
msgstr ""

# 9fa41f350f744c4e975b42939603a70a
#: ../../../../1.8/docs/topics/testing/tools.txt:1153
msgid ""
"This example will override the :setting:`LOGIN_URL` setting for the code in "
"the ``with`` block and reset its value to the previous state afterwards."
msgstr ""

# 0b0f0820fd1a434da0a4e9bbdac7448a
#: ../../../../1.8/docs/topics/testing/tools.txt:1160
msgid ""
"It can prove unwieldy to redefine settings that contain a list of values. In"
" practice, adding or removing values is often sufficient. The "
":meth:`~django.test.SimpleTestCase.modify_settings` context manager makes it"
" easy::"
msgstr ""

# a56eeaf500ca4c5e85602e4a159868e9
#: ../../../../1.8/docs/topics/testing/tools.txt:1182
msgid ""
"For each action, you can supply either a list of values or a string. When "
"the value already exists in the list, ``append`` and ``prepend`` have no "
"effect; neither does ``remove`` when the value doesn't exist."
msgstr ""

# ba0cd1ed31304c51b89a8ba04f5f6399
#: ../../../../1.8/docs/topics/testing/tools.txt:1188
msgid ""
"In case you want to override a setting for a test method, Django provides "
"the :func:`~django.test.override_settings` decorator (see :pep:`318`). It's "
"used like this::"
msgstr ""

# e17728c9f1f843b78269d939bc9714f0
#: ../../../../1.8/docs/topics/testing/tools.txt:1201
msgid ""
"The decorator can also be applied to :class:`~django.test.TestCase` "
"classes::"
msgstr ""

# e00f6c2489ec48298acd1ae85b49bef7
#: ../../../../1.8/docs/topics/testing/tools.txt:1214
msgid ""
"Previously, ``override_settings`` was imported from ``django.test.utils``."
msgstr ""

# 8ad2af44c01f43a7b5a0303474af6229
#: ../../../../1.8/docs/topics/testing/tools.txt:1220
msgid ""
"Likewise, Django provides the :func:`~django.test.modify_settings` "
"decorator::"
msgstr ""

# ea8c921fb74c4455804cfdcdd72486d3
#: ../../../../1.8/docs/topics/testing/tools.txt:1235
msgid "The decorator can also be applied to test case classes::"
msgstr ""

# eb8d642002a9443999bb78038baa693f
#: ../../../../1.8/docs/topics/testing/tools.txt:1251
msgid ""
"When given a class, these decorators modify the class directly and return "
"it; they don't create and return a modified copy of it. So if you try to "
"tweak the above examples to assign the return value to a different name than"
" ``LoginTestCase`` or ``MiddlewareTestCase``, you may be surprised to find "
"that the original test case classes are still equally affected by the "
"decorator. For a given class, :func:`~django.test.modify_settings` is always"
" applied after :func:`~django.test.override_settings`."
msgstr ""

# 82da948b9ec64faf90888cfc3d4789e6
#: ../../../../1.8/docs/topics/testing/tools.txt:1261
msgid ""
"The settings file contains some settings that are only consulted during "
"initialization of Django internals. If you change them with "
"``override_settings``, the setting is changed if you access it via the "
"``django.conf.settings`` module, however, Django's internals access it "
"differently. Effectively, using :func:`~django.test.override_settings` or "
":func:`~django.test.modify_settings` with these settings is probably not "
"going to do what you expect it to do."
msgstr ""

# c2f282b6bdb448f7b70d0590c41bcfb0
#: ../../../../1.8/docs/topics/testing/tools.txt:1269
msgid ""
"We do not recommend altering the :setting:`DATABASES` setting. Altering the "
":setting:`CACHES` setting is possible, but a bit tricky if you are using "
"internals that make using of caching, like :mod:`django.contrib.sessions`. "
"For example, you will have to reinitialize the session backend in a test "
"that uses cached sessions and overrides :setting:`CACHES`."
msgstr ""

# 6ddc213e350c4355815c0d5f53d0be57
#: ../../../../1.8/docs/topics/testing/tools.txt:1276
msgid ""
"Finally, avoid aliasing your settings as module-level constants as "
"``override_settings()`` won't work on such values since they are only "
"evaluated the first time the module is imported."
msgstr ""

# 0e7bec0e8dbb494e9f6842b6acac07bc
#: ../../../../1.8/docs/topics/testing/tools.txt:1280
msgid ""
"You can also simulate the absence of a setting by deleting it after settings"
" have been overridden, like this::"
msgstr ""

# 2e6187ece3104bd3a71cad90a6eb2065
#: ../../../../1.8/docs/topics/testing/tools.txt:1290
msgid ""
"Previously, you could only simulate the deletion of a setting which was "
"explicitly overridden."
msgstr ""

# 88c28e8b66eb4766abf4d890fe636c40
#: ../../../../1.8/docs/topics/testing/tools.txt:1293
msgid ""
"When overriding settings, make sure to handle the cases in which your app's "
"code uses a cache or similar feature that retains state even if the setting "
"is changed. Django provides the :data:`django.test.signals.setting_changed` "
"signal that lets you register callbacks to clean up and otherwise reset "
"state when settings are changed."
msgstr ""

# a5b8ea0736f046d8bcfa3e88857ebff4
#: ../../../../1.8/docs/topics/testing/tools.txt:1299
msgid "Django itself uses this signal to reset various data:"
msgstr ""

# a0ea84cff0b845048b6ce65125795c32
#: ../../../../1.8/docs/topics/testing/tools.txt:1302
msgid "Overridden settings"
msgstr ""

# aacd4cb26ba3476dbf0f672dddc9e0d3
#: ../../../../1.8/docs/topics/testing/tools.txt:1302
msgid "Data reset"
msgstr ""

# f927b4f3d0d74bc89872bebd950ced7a
#: ../../../../1.8/docs/topics/testing/tools.txt:1304
msgid "USE_TZ, TIME_ZONE"
msgstr ""

# f5eac807350b4bc0a1ea922302f723ab
#: ../../../../1.8/docs/topics/testing/tools.txt:1304
msgid "Databases timezone"
msgstr ""

# ed08817ee5cd4b08bbc1e3e8996c3ef2
#: ../../../../1.8/docs/topics/testing/tools.txt:1305
msgid "TEMPLATES"
msgstr ""

# d20b46cd4ff1456f95c1af3e9d3c988d
#: ../../../../1.8/docs/topics/testing/tools.txt:1305
msgid "Template engines"
msgstr ""

# 7896c46937894fa1ad1c96ae6eb9df03
#: ../../../../1.8/docs/topics/testing/tools.txt:1306
msgid "SERIALIZATION_MODULES"
msgstr ""

# a0f1d06841cd48e5bca407d2c7b86312
#: ../../../../1.8/docs/topics/testing/tools.txt:1306
msgid "Serializers cache"
msgstr ""

# f9e27e9e88a04d8aa72a494117d8bbc7
#: ../../../../1.8/docs/topics/testing/tools.txt:1307
msgid "LOCALE_PATHS, LANGUAGE_CODE"
msgstr ""

# b3a2b1fa25844ba1bf05789015412621
#: ../../../../1.8/docs/topics/testing/tools.txt:1307
msgid "Default translation and loaded translations"
msgstr ""

# da3751bad8004f038c881b0fce8d8e1d
#: ../../../../1.8/docs/topics/testing/tools.txt:1308
msgid "MEDIA_ROOT, DEFAULT_FILE_STORAGE"
msgstr ""

# ab7dbad4d5c74f38bdc3dabb5bc83525
#: ../../../../1.8/docs/topics/testing/tools.txt:1308
msgid "Default file storage"
msgstr ""

# 97412a8821214bdf86ab6b9d18f738f2
#: ../../../../1.8/docs/topics/testing/tools.txt:1312
msgid "Emptying the test outbox"
msgstr ""

# 9ab4a829e581405eb85de23750813751
#: ../../../../1.8/docs/topics/testing/tools.txt:1314
msgid ""
"If you use any of Django's custom ``TestCase`` classes, the test runner will"
" clear the contents of the test email outbox at the start of each test case."
msgstr ""

# ba71e282cb254d87a67fe0301ab41d4d
#: ../../../../1.8/docs/topics/testing/tools.txt:1317
msgid ""
"For more detail on email services during tests, see `Email services`_ below."
msgstr ""

# 260f845fc74a4850a345f7bad3426d74
#: ../../../../1.8/docs/topics/testing/tools.txt:1322
msgid "Assertions"
msgstr ""

# 6db16b35a110451ca46da1e8f774b03d
#: ../../../../1.8/docs/topics/testing/tools.txt:1324
msgid ""
"As Python's normal :class:`unittest.TestCase` class implements assertion "
"methods such as :meth:`~unittest.TestCase.assertTrue` and "
":meth:`~unittest.TestCase.assertEqual`, Django's custom :class:`TestCase` "
"class provides a number of custom assertion methods that are useful for "
"testing Web applications:"
msgstr ""

# eb4ca51cf206412fb2b2ca1dc0edbb3b
#: ../../../../1.8/docs/topics/testing/tools.txt:1330
msgid ""
"The failure messages given by most of these assertion methods can be "
"customized with the ``msg_prefix`` argument. This string will be prefixed to"
" any failure message generated by the assertion. This allows you to provide "
"additional details that may help you to identify the location and cause of "
"an failure in your test suite."
msgstr ""

# 12d44e5bba434f96bd878e4ca660fc14
#: ../../../../1.8/docs/topics/testing/tools.txt:1339
msgid ""
"Asserts that execution of ``callable`` raises ``expected_exception`` and "
"that the exception has an ``expected_message`` representation. Any other "
"outcome is reported as a failure. Similar to unittest's "
":meth:`~unittest.TestCase.assertRaisesRegex` with the difference that "
"``expected_message`` isn't a regular expression."
msgstr ""

# 772eba37e4e1472889540ad9e0be8561
#: ../../../../1.8/docs/topics/testing/tools.txt:1345
msgid ""
"If only the ``expected_exception`` and ``expected_message`` parameters are "
"given, returns a context manager so that the code being tested can be "
"written inline rather than as a function::"
msgstr ""

# 4a0b0999cf044cf385361a2966b0f649
#: ../../../../1.8/docs/topics/testing/tools.txt:1354
msgid "Asserts that a form field behaves correctly with various inputs."
msgstr ""

# 193477a79c3a438082c37016a7a31efb
#: ../../../../1.8/docs/topics/testing/tools.txt:1356
msgid "the class of the field to be tested."
msgstr ""

# b27b79ec4eb04be3bcd843766b46f0b3
#: ../../../../1.8/docs/topics/testing/tools.txt:1357
msgid "a dictionary mapping valid inputs to their expected cleaned values."
msgstr ""

# e14bbb8c6f484406ae22f2d1c896570a
#: ../../../../1.8/docs/topics/testing/tools.txt:1359
msgid ""
"a dictionary mapping invalid inputs to one or more raised error messages."
msgstr ""

# 3f23c05bc7f9435caf3d8b57fa9ccec6
#: ../../../../1.8/docs/topics/testing/tools.txt:1361
msgid "the args passed to instantiate the field."
msgstr ""

# 2c54d519869f4e7399e53c2dcc27181a
#: ../../../../1.8/docs/topics/testing/tools.txt:1362
msgid "the kwargs passed to instantiate the field."
msgstr ""

# e41fb77d728a43a6a4ecd214842e9361
#: ../../../../1.8/docs/topics/testing/tools.txt:1363
msgid "the expected clean output for inputs in ``empty_values``."
msgstr ""

# d26c960811ca4befb68bd7e2b269f43e
#: ../../../../1.8/docs/topics/testing/tools.txt:1365
msgid ""
"For example, the following code tests that an ``EmailField`` accepts "
"``a@a.com`` as a valid email address, but rejects ``aaa`` with a reasonable "
"error message::"
msgstr ""

# 765e3633c81f46689907bb57f43f418f
#: ../../../../1.8/docs/topics/testing/tools.txt:1373
msgid ""
"Asserts that a field on a form raises the provided list of errors when "
"rendered on the form."
msgstr ""

# c1d44a25f42645d2981d67923c22bd78
#: ../../../../1.8/docs/topics/testing/tools.txt:1376
msgid ""
"``form`` is the name the ``Form`` instance was given in the template "
"context."
msgstr ""

# 61cc4236f7f845bd8b72502f0c3bde9f
# 92e96614cfc84e2f8c260adcecd167a0
#: ../../../../1.8/docs/topics/testing/tools.txt:1379
#: ../../../../1.8/docs/topics/testing/tools.txt:1399
msgid ""
"``field`` is the name of the field on the form to check. If ``field`` has a "
"value of ``None``, non-field errors (errors you can access via "
":meth:`form.non_field_errors() <django.forms.Form.non_field_errors>`) will "
"be checked."
msgstr ""

# 0a06a6e8397143e4815ef494e69172ea
# 6c11e6035df141b4a88a9254fe02f456
#: ../../../../1.8/docs/topics/testing/tools.txt:1384
#: ../../../../1.8/docs/topics/testing/tools.txt:1404
msgid ""
"``errors`` is an error string, or a list of error strings, that are expected"
" as a result of form validation."
msgstr ""

# aae1922f5de348d58c40fd192821cc2d
#: ../../../../1.8/docs/topics/testing/tools.txt:1389
msgid ""
"Asserts that the ``formset`` raises the provided list of errors when "
"rendered."
msgstr ""

# 0a8ac8f2fe914b98be6060ca51007230
#: ../../../../1.8/docs/topics/testing/tools.txt:1392
msgid ""
"``formset`` is the name the ``Formset`` instance was given in the template "
"context."
msgstr ""

# cfa1013c515146e3997421961e09326b
#: ../../../../1.8/docs/topics/testing/tools.txt:1395
msgid ""
"``form_index`` is the number of the form within the ``Formset``.  If "
"``form_index`` has a value of ``None``, non-form errors (errors you can "
"access via ``formset.non_form_errors()``) will be checked."
msgstr ""

# 8dbccf463d4a4b93a82460552df484aa
#: ../../../../1.8/docs/topics/testing/tools.txt:1409
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` appears in the content of the response. If ``count`` is "
"provided, ``text`` must occur exactly ``count`` times in the response."
msgstr ""

# fdae615025ad4c2eb340c2f163a996d6
# 66424c2967ac43fa9ed7876c20c169ec
#: ../../../../1.8/docs/topics/testing/tools.txt:1413
#: ../../../../1.8/docs/topics/testing/tools.txt:1424
msgid ""
"Set ``html`` to ``True`` to handle ``text`` as HTML. The comparison with the"
" response content will be based on HTML semantics instead of character-by-"
"character equality. Whitespace is ignored in most cases, attribute ordering "
"is not significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more "
"details."
msgstr ""

# f72b00fac5db4bf08bad8f7a112a1bbb
#: ../../../../1.8/docs/topics/testing/tools.txt:1421
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` does *not* appear in the content of the response."
msgstr ""

# 3d933954deb04d5ba54876c8533a2641
#: ../../../../1.8/docs/topics/testing/tools.txt:1432
msgid ""
"Asserts that the template with the given name was used in rendering the "
"response."
msgstr ""

# 2572e4aab856484aa9e505db1d4f748c
#: ../../../../1.8/docs/topics/testing/tools.txt:1435
msgid "The name is a string such as ``'admin/index.html'``."
msgstr ""

# 6fac1cf85e9c45bb9a8b8d82d2f1c00d
#: ../../../../1.8/docs/topics/testing/tools.txt:1439
msgid ""
"The count argument is an integer indicating the number of times the template"
" should be rendered. Default is ``None``, meaning that the template should "
"be rendered one or more times."
msgstr ""

# 87cd306b1ca241ee86573d27a9f9e0fe
#: ../../../../1.8/docs/topics/testing/tools.txt:1443
msgid "You can use this as a context manager, like this::"
msgstr ""

# 1a40ec9b4bee4885aad8f245892bf34a
#: ../../../../1.8/docs/topics/testing/tools.txt:1452
msgid ""
"Asserts that the template with the given name was *not* used in rendering "
"the response."
msgstr ""

# 74aab39c58df4cfe955d76d6b998e505
#: ../../../../1.8/docs/topics/testing/tools.txt:1455
msgid ""
"You can use this as a context manager in the same way as "
":meth:`~SimpleTestCase.assertTemplateUsed`."
msgstr ""

# ce7e134f91e741619e6736944fc8e1a5
#: ../../../../1.8/docs/topics/testing/tools.txt:1460
msgid ""
"Asserts that the response returned a ``status_code`` redirect status, "
"redirected to ``expected_url`` (including any ``GET`` data), and that the "
"final page was received with ``target_status_code``."
msgstr ""

# 5ab3d101c9f2492780fda7c5f22dc102
#: ../../../../1.8/docs/topics/testing/tools.txt:1464
msgid ""
"If your request used the ``follow`` argument, the ``expected_url`` and "
"``target_status_code`` will be the url and status code for the final point "
"of the redirect chain."
msgstr ""

# 42d5403d4a2648d39a7b4e614af16cf8
#: ../../../../1.8/docs/topics/testing/tools.txt:1468
msgid ""
"The ``host`` argument sets a default host if ``expected_url`` doesn't "
"include one (e.g. ``\"/bar/\"``).  If ``expected_url`` is an absolute URL "
"that includes a host (e.g. ``\"http://testhost/bar/\"``), the ``host`` "
"parameter will be ignored. Note that the test client doesn't support "
"fetching external URLs, but the parameter may be useful if you are testing "
"with a custom HTTP host (for example, initializing the test client with "
"``Client(HTTP_HOST=\"testhost\")``."
msgstr ""

# 54d3d1d7cfba45af99ed84dcd7933f81
#: ../../../../1.8/docs/topics/testing/tools.txt:1478
msgid ""
"If ``fetch_redirect_response`` is ``False``, the final page won't be loaded."
" Since the test client can't fetch externals URLs, this is particularly "
"useful if ``expected_url`` isn't part of your Django app."
msgstr ""

# bf99e19c6d004d499670ff734f8dcbcf
#: ../../../../1.8/docs/topics/testing/tools.txt:1484
msgid ""
"Scheme is handled correctly when making comparisons between two URLs. If "
"there isn't any scheme specified in the location where we are redirected to,"
" the original request's scheme is used. If present, the scheme in "
"``expected_url`` is the one used to make the comparisons to."
msgstr ""

# da8b32e7339b4f11809d9ebe8a57aa80
#: ../../../../1.8/docs/topics/testing/tools.txt:1491
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are equal. The comparison "
"is based on HTML semantics. The comparison takes following things into "
"account:"
msgstr ""

# 20085ad8d9a347c186685271d552f279
#: ../../../../1.8/docs/topics/testing/tools.txt:1495
msgid "Whitespace before and after HTML tags is ignored."
msgstr ""

# ae2459667b814993ba09c97f7d57f034
#: ../../../../1.8/docs/topics/testing/tools.txt:1496
msgid "All types of whitespace are considered equivalent."
msgstr ""

# 994a5cb9a4014fca97f7fa8547fa442a
#: ../../../../1.8/docs/topics/testing/tools.txt:1497
msgid ""
"All open tags are closed implicitly, e.g. when a surrounding tag is closed "
"or the HTML document ends."
msgstr ""

# 65aeb01a6227412bbf8d63bd55225a6a
#: ../../../../1.8/docs/topics/testing/tools.txt:1499
msgid "Empty tags are equivalent to their self-closing version."
msgstr ""

# a509f1a930c343698d8286bfb3a8ff29
#: ../../../../1.8/docs/topics/testing/tools.txt:1500
msgid "The ordering of attributes of an HTML element is not significant."
msgstr ""

# f7664eb4853c400bb65d410e9ebcffdd
#: ../../../../1.8/docs/topics/testing/tools.txt:1501
msgid ""
"Attributes without an argument are equal to attributes that equal in name "
"and value (see the examples)."
msgstr ""

# 802c04ae4e784f77a6d678e8e255669e
#: ../../../../1.8/docs/topics/testing/tools.txt:1504
msgid ""
"The following examples are valid tests and don't raise any "
"``AssertionError``::"
msgstr ""

# f7d94535fd944255aaced49a1dbbe9ce
# 356b008219ed48c79d881bc7a48a81ef
#: ../../../../1.8/docs/topics/testing/tools.txt:1515
#: ../../../../1.8/docs/topics/testing/tools.txt:1526
msgid ""
"``html1`` and ``html2`` must be valid HTML. An ``AssertionError`` will be "
"raised if one of them cannot be parsed."
msgstr ""

# a70738504dc84f1685f2074f8622af51
# 2b379d8223644a63aaf19926bdbd50dc
# 85e762461cb8480fb7d86db90b40ecdf
# ea525c98ef0a41e9bbc2de9cab13503f
# c8bb121ac49047c294d669789b4aee1b
# 200baca6ddd748ebb62ae33b02172f06
# 455d7c05f827498898452034a5ec60ff
#: ../../../../1.8/docs/topics/testing/tools.txt:1518
#: ../../../../1.8/docs/topics/testing/tools.txt:1529
#: ../../../../1.8/docs/topics/testing/tools.txt:1540
#: ../../../../1.8/docs/topics/testing/tools.txt:1548
#: ../../../../1.8/docs/topics/testing/tools.txt:1566
#: ../../../../1.8/docs/topics/testing/tools.txt:1575
#: ../../../../1.8/docs/topics/testing/tools.txt:1593
msgid "Output in case of error can be customized with the ``msg`` argument."
msgstr ""

# 9259e15c8c9b42459e3f2d0b9b388bdc
#: ../../../../1.8/docs/topics/testing/tools.txt:1522
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are *not* equal. The "
"comparison is based on HTML semantics. See "
":meth:`~SimpleTestCase.assertHTMLEqual` for details."
msgstr ""

# 3a90b1bdf459436ab5a19edf9b1cfea2
#: ../../../../1.8/docs/topics/testing/tools.txt:1533
msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are equal. The comparison is "
"based on XML semantics. Similarly to "
":meth:`~SimpleTestCase.assertHTMLEqual`, the comparison is made on parsed "
"content, hence only semantic differences are considered, not syntax "
"differences. When invalid XML is passed in any parameter, an "
"``AssertionError`` is always raised, even if both string are identical."
msgstr ""

# c1092cd6d55e401ba255cf072e091c85
#: ../../../../1.8/docs/topics/testing/tools.txt:1544
msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are *not* equal. The "
"comparison is based on XML semantics. See "
":meth:`~SimpleTestCase.assertXMLEqual` for details."
msgstr ""

# 36d06a1a42924fb9b94313c191717cec
#: ../../../../1.8/docs/topics/testing/tools.txt:1552
msgid ""
"Asserts that the HTML fragment ``needle`` is contained in the ``haystack`` "
"one."
msgstr ""

# f4b64c1c25d044aea9fec60f8fe4e2f4
#: ../../../../1.8/docs/topics/testing/tools.txt:1554
msgid ""
"If the ``count`` integer argument is specified, then additionally the number"
" of ``needle`` occurrences will be strictly verified."
msgstr ""

# 2f1889a0860448ebbba320f41754d7f9
#: ../../../../1.8/docs/topics/testing/tools.txt:1557
msgid ""
"Whitespace in most cases is ignored, and attribute ordering is not "
"significant. The passed-in arguments must be valid HTML."
msgstr ""

# c78b4a348e494e25b34d91943bd7c6b3
#: ../../../../1.8/docs/topics/testing/tools.txt:1562
msgid ""
"Asserts that the JSON fragments ``raw`` and ``expected_data`` are equal. "
"Usual JSON non-significant whitespace rules apply as the heavyweight is "
"delegated to the :mod:`json` library."
msgstr ""

# a73b0508b2a9476db9474374cbe9da3c
#: ../../../../1.8/docs/topics/testing/tools.txt:1572
msgid ""
"Asserts that the JSON fragments ``raw`` and ``expected_data`` are *not* "
"equal. See :meth:`~SimpleTestCase.assertJSONEqual` for further details."
msgstr ""

# 2e7f17ab7dd8428ca5776fd0734c2f02
#: ../../../../1.8/docs/topics/testing/tools.txt:1579
msgid ""
"Asserts that a queryset ``qs`` returns a particular list of values "
"``values``."
msgstr ""

# 07c7051a2f534c7991a71376f2a39a63
#: ../../../../1.8/docs/topics/testing/tools.txt:1581
msgid ""
"The comparison of the contents of ``qs`` and ``values`` is performed using "
"the function ``transform``; by default, this means that the ``repr()`` of "
"each value is compared. Any other callable can be used if ``repr()`` doesn't"
" provide a unique or helpful comparison."
msgstr ""

# d6c23916899c4d95b1f9a28b7024256c
#: ../../../../1.8/docs/topics/testing/tools.txt:1586
msgid ""
"By default, the comparison is also ordering dependent. If ``qs`` doesn't "
"provide an implicit ordering, you can set the ``ordered`` parameter to "
"``False``, which turns the comparison into a ``collections.Counter`` "
"comparison. If the order is undefined (if the given ``qs`` isn't ordered and"
" the comparison is against more than one ordered values), a ``ValueError`` "
"is raised."
msgstr ""

# d6acdcd4339742a191ebdaef580db556
#: ../../../../1.8/docs/topics/testing/tools.txt:1597
msgid ""
"The method now accepts a ``msg`` parameter to allow customization of error "
"message"
msgstr ""

# c68d395ec60746858b8c57a77cff3f9d
#: ../../../../1.8/docs/topics/testing/tools.txt:1602
msgid ""
"Asserts that when ``func`` is called with ``*args`` and ``**kwargs`` that "
"``num`` database queries are executed."
msgstr ""

# 04b6a048ecba4d519585bf483f2d1dfc
#: ../../../../1.8/docs/topics/testing/tools.txt:1605
msgid ""
"If a ``\"using\"`` key is present in ``kwargs`` it is used as the database "
"alias for which to check the number of queries.  If you wish to call a "
"function with a ``using`` parameter you can do it by wrapping the call with "
"a ``lambda`` to add an extra parameter::"
msgstr ""

# 55158a730c6249f2930af10d43a6582e
#: ../../../../1.8/docs/topics/testing/tools.txt:1612
msgid "You can also use this as a context manager::"
msgstr ""

# 741e3171b7ac4bdb9bd1d7177f1607d5
#: ../../../../1.8/docs/topics/testing/tools.txt:1621
msgid "Email services"
msgstr ""

# 62b323f4f0f44316993b6a719037999f
#: ../../../../1.8/docs/topics/testing/tools.txt:1623
msgid ""
"If any of your Django views send email using :doc:`Django's email "
"functionality </topics/email>`, you probably don't want to send email each "
"time you run a test using that view. For this reason, Django's test runner "
"automatically redirects all Django-sent email to a dummy outbox. This lets "
"you test every aspect of sending email -- from the number of messages sent "
"to the contents of each message -- without actually sending the messages."
msgstr ""

# 98a75a6cedda4fad8f11e3fbdd437e83
#: ../../../../1.8/docs/topics/testing/tools.txt:1630
msgid ""
"The test runner accomplishes this by transparently replacing the normal "
"email backend with a testing backend. (Don't worry -- this has no effect on "
"any other email senders outside of Django, such as your machine's mail "
"server, if you're running one.)"
msgstr ""

# 3e8712e9f5084ca2a543383a12b66242
#: ../../../../1.8/docs/topics/testing/tools.txt:1639
msgid ""
"During test running, each outgoing email is saved in "
"``django.core.mail.outbox``. This is a simple list of all "
":class:`~django.core.mail.EmailMessage` instances that have been sent. The "
"``outbox`` attribute is a special attribute that is created *only* when the "
"``locmem`` email backend is used. It doesn't normally exist as part of the "
":mod:`django.core.mail` module and you can't import it directly. The code "
"below shows how to access this attribute correctly."
msgstr ""

# 53a68b07e9f8433a9ace9a94700ae5dd
#: ../../../../1.8/docs/topics/testing/tools.txt:1647
msgid ""
"Here's an example test that examines ``django.core.mail.outbox`` for length "
"and contents::"
msgstr ""

# 67c39334c8d6451a8d90b53a2682cea7
#: ../../../../1.8/docs/topics/testing/tools.txt:1666
msgid ""
"As noted :ref:`previously <emptying-test-outbox>`, the test outbox is "
"emptied at the start of every test in a Django ``*TestCase``. To empty the "
"outbox manually, assign the empty list to ``mail.outbox``::"
msgstr ""

# 794988bc78d24028a38fff3134823f15
#: ../../../../1.8/docs/topics/testing/tools.txt:1678
msgid "Management Commands"
msgstr ""

# 4626c930a189405ba15d046bf79d34b1
#: ../../../../1.8/docs/topics/testing/tools.txt:1680
msgid ""
"Management commands can be tested with the "
":func:`~django.core.management.call_command` function. The output can be "
"redirected into a ``StringIO`` instance::"
msgstr ""

# 897baf81019b48e0809255828113ead1
#: ../../../../1.8/docs/topics/testing/tools.txt:1697
msgid "Skipping tests"
msgstr ""

# 44a18960b3cc482b8e5280e9b470d054
#: ../../../../1.8/docs/topics/testing/tools.txt:1701
msgid ""
"The unittest library provides the :func:`@skipIf <unittest.skipIf>` and "
":func:`@skipUnless <unittest.skipUnless>` decorators to allow you to skip "
"tests if you know ahead of time that those tests are going to fail under "
"certain conditions."
msgstr ""

# 2054b934749b4932977692119f982541
#: ../../../../1.8/docs/topics/testing/tools.txt:1706
msgid ""
"For example, if your test requires a particular optional library in order to"
" succeed, you could decorate the test case with :func:`@skipIf "
"<unittest.skipIf>`. Then, the test runner will report that the test wasn't "
"executed and why, instead of failing the test or omitting the test "
"altogether."
msgstr ""

# 4f4960bc12a149bd894089ab7591683d
#: ../../../../1.8/docs/topics/testing/tools.txt:1711
msgid ""
"To supplement these test skipping behaviors, Django provides two additional "
"skip decorators. Instead of testing a generic boolean, these decorators "
"check the capabilities of the database, and skip the test if the database "
"doesn't support a specific named feature."
msgstr ""

# ec2e72a36db2451bb049b1dba442244b
#: ../../../../1.8/docs/topics/testing/tools.txt:1716
msgid ""
"The decorators use a string identifier to describe database features. This "
"string corresponds to attributes of the database connection features class. "
"See ``django.db.backends.BaseDatabaseFeatures`` class for a full list of "
"database features that can be used as a basis for skipping tests."
msgstr ""

# b19f66f0e97948a3a63a742c28023345
#: ../../../../1.8/docs/topics/testing/tools.txt:1724
msgid ""
"Skip the decorated test or ``TestCase`` if all of the named database "
"features are supported."
msgstr ""

# c045e0a0ac074f1c958dcb7cf213472d
#: ../../../../1.8/docs/topics/testing/tools.txt:1727
msgid ""
"For example, the following test will not be executed if the database "
"supports transactions (e.g., it would *not* run under PostgreSQL, but it "
"would under MySQL with MyISAM tables)::"
msgstr ""

# 1237e2484a3b40a7ad8e97531affb629
#: ../../../../1.8/docs/topics/testing/tools.txt:1738
msgid "``skipIfDBFeature`` can now be used to decorate a ``TestCase`` class."
msgstr ""

# 648b6c4ae5814ee59645607146cc8e93
#: ../../../../1.8/docs/topics/testing/tools.txt:1742
msgid "``skipIfDBFeature`` can accept multiple feature strings."
msgstr ""

# 54f3831f835b4027b1432ded9a2f4718
#: ../../../../1.8/docs/topics/testing/tools.txt:1746
msgid ""
"Skip the decorated test or ``TestCase`` if any of the named database "
"features are *not* supported."
msgstr ""

# 7e9d6defc57e4ea58de5b94d053ee099
#: ../../../../1.8/docs/topics/testing/tools.txt:1749
msgid ""
"For example, the following test will only be executed if the database "
"supports transactions (e.g., it would run under PostgreSQL, but *not* under "
"MySQL with MyISAM tables)::"
msgstr ""

# 80e099a0527a4ca39dffeefb7e1a868f
#: ../../../../1.8/docs/topics/testing/tools.txt:1760
msgid ""
"``skipUnlessDBFeature`` can now be used to decorate a ``TestCase`` class."
msgstr ""

# 7ae65ff26c7347e8bf1d4f1055108b03
#: ../../../../1.8/docs/topics/testing/tools.txt:1764
msgid "``skipUnlessDBFeature`` can accept multiple feature strings."
msgstr ""

# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# 
# Translators:
# albertoalcolea <albertoalcolea@gmail.com>, 2014
# Antonio Melé <antonio.mele@gmail.com>, 2015
# Ernesto Avilés Vázquez <whippiii@gmail.com>, 2015
# juanda097 <juanda097@openmailbox.org>, 2014-2015
# Victor Manuel Castillo <mini.guero@hotmail.com>, 2013
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-06-25 03:09-0500\n"
"PO-Revision-Date: 2015-06-22 13:02+0000\n"
"Last-Translator: Antonio Melé <antonio.mele@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/django-docs/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# c34c58ba16b8459b98d6adce752d10b7
#: ../../../../1.8/docs/intro/contributing.txt:3
msgid "Writing your first patch for Django"
msgstr "Escribiendo tu primer parche para Django"

# 164cf2a923364e1998ab9aa7b62c74ee
#: ../../../../1.8/docs/intro/contributing.txt:6
msgid "Introduction"
msgstr "Introducción"

# 3741e7ef34ca47aba8ed8487eca0c2dd
#: ../../../../1.8/docs/intro/contributing.txt:8
msgid ""
"Interested in giving back to the community a little? Maybe you've found a "
"bug in Django that you'd like to see fixed, or maybe there's a small feature"
" you want added."
msgstr "Interesado en dar a la comunidad un poco? Quizás haz encontrado un bug en Django que te gustaría ver arreglado, o quizás hay una pequeña característica que quieras agregar.   "

# 8a60a4812839441484d530a0ce65c596
#: ../../../../1.8/docs/intro/contributing.txt:12
msgid ""
"Contributing back to Django itself is the best way to see your own concerns "
"addressed. This may seem daunting at first, but it's really pretty simple. "
"We'll walk you through the entire process, so you can learn by example."
msgstr ""

# a56486f914fb47ee9cdce9a5ff380018
#: ../../../../1.8/docs/intro/contributing.txt:17
msgid "Who's this tutorial for?"
msgstr "¿Para quién es este tutorial?"

# eccdd755a4fc420a8dfbfce9520269b8
#: ../../../../1.8/docs/intro/contributing.txt:19
msgid ""
"For this tutorial, we expect that you have at least a basic understanding of"
" how Django works. This means you should be comfortable going through the "
"existing tutorials on :doc:`writing your first Django "
"app</intro/tutorial01>`. In addition, you should have a good understanding "
"of Python itself. But if you don't, `Dive Into Python`__ is a fantastic (and"
" free) online book for beginning Python programmers."
msgstr "Para este tutorial, esperamos que comprendas al menos el funcionamiento básico de Django. Esto significa que no tendrías problemas explorando los tutoriales existentes para :doc:`crear tu primera aplicación Django </intro/tutorial01>`. Adicionalmente, deberías tener una buena comprensión de Python. Si no es así, `Dive into Python`__ es un fantástico libro disponible en línea para los programadores que comienzan en Python."

# 1255cf3bac3140beab8c7f3f4244a669
#: ../../../../1.8/docs/intro/contributing.txt:26
msgid ""
"Those of you who are unfamiliar with version control systems and Trac will "
"find that this tutorial and its links include just enough information to get"
" started. However, you'll probably want to read some more about these "
"different tools if you plan on contributing to Django regularly."
msgstr "Aquellos de ustedes que no están familiarizados con los sistemas de control de versiones y Trac encontrarán que este tutorial y sus vínculos incluyen información suficiente para empezar. Sin embargo, es probable que quiera leer un poco más acerca de estas diferentes herramientas si usted planea contribuir a Django con regularidad."

# da30e46c6d2d4e0ea0fef1fed275e55b
#: ../../../../1.8/docs/intro/contributing.txt:31
msgid ""
"For the most part though, this tutorial tries to explain as much as "
"possible, so that it can be of use to the widest audience."
msgstr "En su mayor parte, sin embargo, este tutorial trata de explicar tanto como sea posible, de modo que pueda ser de utilidad para la audiencia más amplia."

# f056517047f14034ad83fed82b312b51
# 4570aa48123e49e3bc352dba68859039
#: ../../../../1.8/docs/intro/contributing.txt:34
#: ../../../../1.8/docs/intro/tutorial01.txt:35
msgid "Where to get help:"
msgstr "Dónde obtener ayuda:"

# fbb3d7917b70460f82fce2762b02e170
#: ../../../../1.8/docs/intro/contributing.txt:36
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to |django-developers| or drop by `#django-dev on irc.freenode.net`__ to "
"chat with other Django users who might be able to help."
msgstr "Si presentas problemas leyendo este tutorial, por favor publica un mensaje a |django-developers| o pasa por `#django-dev on irc.freenode.net`__ para chatear con otros usuarios de Django que podrían ayudarte."

# 06e54570b2d24e7fb489f029997e3c0d
#: ../../../../1.8/docs/intro/contributing.txt:44
msgid "What does this tutorial cover?"
msgstr "¿Qué cubre esta guía?"

# decec6676dbc4afd947c5c4b42abe3be
#: ../../../../1.8/docs/intro/contributing.txt:46
msgid ""
"We'll be walking you through contributing a patch to Django for the first "
"time. By the end of this tutorial, you should have a basic understanding of "
"both the tools and the processes involved. Specifically, we'll be covering "
"the following:"
msgstr "Te mostraremos cómo contribuir con parches para Django por primera vez. Al final de este tutorial, contarás con un entendimiento básico sobre las herramientas y procesos implicados. Específicamente, cubriremos los siguientes:"

# 11bca06e624041afa8ccac925c5be119
#: ../../../../1.8/docs/intro/contributing.txt:50
msgid "Installing Git."
msgstr "Instalando Git."

# f59a914f11d640ff83e9dd7cc624f37f
#: ../../../../1.8/docs/intro/contributing.txt:51
msgid "How to download a development copy of Django."
msgstr "Cómo descargar una copia de desarrollo de Django."

# 675b18d2f8794830b19d9fbf3de77a10
#: ../../../../1.8/docs/intro/contributing.txt:52
msgid "Running Django's test suite."
msgstr "Conjunto de pruebas de funcionamiento de Django."

# 5c4a037bfb5746e0b1debe9996e8b072
#: ../../../../1.8/docs/intro/contributing.txt:53
msgid "Writing a test for your patch."
msgstr "Escribiendo una prueba para su revisión."

# 3845040c174e41ee8e8ce0f37afc8b33
#: ../../../../1.8/docs/intro/contributing.txt:54
msgid "Writing the code for your patch."
msgstr "Escribiendo el código para su parche."

# 3a9f1446bd7742ce937b60beb089b266
#: ../../../../1.8/docs/intro/contributing.txt:55
msgid "Testing your patch."
msgstr "Probando su parche."

# 5891e89603c24f4e92cbbc6be337eceb
#: ../../../../1.8/docs/intro/contributing.txt:56
msgid "Generating a patch file for your changes."
msgstr "Generar un archivo de parche para sus cambios."

# b27693af482b4243a02760b9b326510a
#: ../../../../1.8/docs/intro/contributing.txt:57
msgid "Where to look for more information."
msgstr "Dónde buscar más información."

# 1e57b28da2834db691d113b9d9d12eb2
#: ../../../../1.8/docs/intro/contributing.txt:59
msgid ""
"Once you're done with the tutorial, you can look through the rest of "
":doc:`Django's documentation on "
"contributing</internals/contributing/index>`. It contains lots of great "
"information and is a must read for anyone who'd like to become a regular "
"contributor to Django. If you've got questions, it's probably got the "
"answers."
msgstr "Una vez que hayas terminado el tutorial, puedes revisar el resto de :doc:`la documentación para contribuir con Django</internals/contributing/index>`. Contiene una gran cantidad de información de lectura obligatoria para todo el que desee convertirse en contribuidor habitual de Django. Si tienes preguntas, es probable que obtengas las respuestas."

# 884109be59404143a7f33e96fa0529cc
#: ../../../../1.8/docs/intro/contributing.txt:66
msgid "Installing Git"
msgstr "Instalando Git"

# 3c5a2cdbdb1541829c0f01005ad0c89d
#: ../../../../1.8/docs/intro/contributing.txt:68
msgid ""
"For this tutorial, you'll need Git installed to download the current "
"development version of Django and to generate patch files for the changes "
"you make."
msgstr "Para este tutorial, necesitará instalar Git para descargar la versión actual de desarrollo de Django y generar archivos de revisión de los cambios que realice."

# 95799304db38440ab0d48fae3aab874b
#: ../../../../1.8/docs/intro/contributing.txt:72
msgid ""
"To check whether or not you have Git installed, enter ``git`` into the "
"command line. If you get messages saying that this command could not be "
"found, you'll have to download and install it, see `Git's download page`__."
msgstr "Para revisar si tienes Git instalado, ejecuta ``git`` en la línea de comandos. Si obtienes un mensaje diciendo que el comando no pudo ser encontrado, tendrás que descargarlo e instalarlo, ver `la página de descarga de Git`__."

# a4042451845849bdaba63a163d15b398
#: ../../../../1.8/docs/intro/contributing.txt:76
msgid ""
"If you're not that familiar with Git, you can always find out more about its"
" commands (once it's installed) by typing ``git help`` into the command "
"line."
msgstr "Si no estás familiarizado con Git, siempre se puede encontrar más información sobre sus comandos (una vez instalado) escribiendo ``git help`` en la línea de comandos."

# f1c07d7e00be48d59dc946e8c5f5346d
#: ../../../../1.8/docs/intro/contributing.txt:82
msgid "Getting a copy of Django's development version"
msgstr "Obtener una copia de la versión de desarrollo de Django"

# 512c40fa27104bc1979435dcb08d43b3
#: ../../../../1.8/docs/intro/contributing.txt:84
msgid ""
"The first step to contributing to Django is to get a copy of the source "
"code. From the command line, use the ``cd`` command to navigate to the "
"directory where you'll want your local copy of Django to live."
msgstr "El primer paso para contribuir con Django es obtener una copia de su código fuente. Desde la línea de comandos, usa ``cd`` para navegar hacia el directorio donde deseas hacer la copia local de Django."

# feb6cc85ac2241ebb3b236de5b316873
#: ../../../../1.8/docs/intro/contributing.txt:88
msgid ""
"Download the Django source code repository using the following command::"
msgstr "Descargue el repositorio de código fuente de Django usando el siguiente comando::"

# 9b568a23a6654ed7a17305e87596e201
#: ../../../../1.8/docs/intro/contributing.txt:94
msgid "For users who wish to use `virtualenv`__, you can use::"
msgstr "Para usuarios que deseen usar `virtualenv`__, puedes usar::"

# 004906b0f8d4492d9adfc5668cb66a71
#: ../../../../1.8/docs/intro/contributing.txt:98
msgid ""
"(where ``django`` is the directory of your clone that contains ``setup.py``)"
" to link your cloned checkout into a virtual environment. This is a great "
"option to isolate your development copy of Django from the rest of your "
"system and avoids potential package conflicts."
msgstr "(donde ``django`` es el directorio del repositorio clonado que contiene ``setup.py``) para enlazar tu repositorio clonado dentro del entorno virtual. Esta es una buena opción para aislar la copia de desarrollo de Django del resto del sistema y evitar potenciales conflictos de paquetes."

# 9416f9c803f1451b9a97c962173ab305
#: ../../../../1.8/docs/intro/contributing.txt:106
msgid "Rolling back to a previous revision of Django"
msgstr "Revertir a una revisión previa de Django"

# eda70ce1f1904386a737171e55eb4378
#: ../../../../1.8/docs/intro/contributing.txt:108
msgid ""
"For this tutorial, we'll be using ticket :ticket:`17549` as a case study, so"
" we'll rewind Django's version history in git to before that ticket's patch "
"was applied. This will allow us to go through all of the steps involved in "
"writing that patch from scratch, including running Django's test suite."
msgstr ""

# 6290330fa33c4ba5ba3fc8106163f756
#: ../../../../1.8/docs/intro/contributing.txt:113
msgid ""
"**Keep in mind that while we'll be using an older revision of Django's trunk"
" for the purposes of the tutorial below, you should always use the current "
"development revision of Django when working on your own patch for a "
"ticket!**"
msgstr "**Ten en mente que aunque estaremos usando una revisión vieja del repositorio central de Django para el tutorial de abajo, siempre deberías usar la revisión actual de desarrollo de Django cuando trabajes en tu propio parche.**"

# 106de100ab9942f98e9ecc95bef9c97e
#: ../../../../1.8/docs/intro/contributing.txt:119
msgid ""
"The patch for this ticket was written by Ulrich Petri, and it was applied to"
" Django as `commit ac2052ebc84c45709ab5f0f25e685bf656ce79bc`__. "
"Consequently, we'll be using the revision of Django just prior to that, "
"`commit 39f5bc7fc3a4bb43ed8a1358b17fe0521a1a63ac`__."
msgstr ""

# 12335e1de1ad4a18ae94f8031d15b6fb
#: ../../../../1.8/docs/intro/contributing.txt:127
msgid ""
"Navigate into Django's root directory (that's the one that contains "
"``django``, ``docs``, ``tests``, ``AUTHORS``, etc.). You can then check out "
"the older revision of Django that we'll be using in the tutorial below::"
msgstr ""

# 85617284adc044429bfa5a625a4e8b19
#: ../../../../1.8/docs/intro/contributing.txt:134
msgid "Running Django's test suite for the first time"
msgstr ""

# 335c080c6778487aa5347bc716797fdf
#: ../../../../1.8/docs/intro/contributing.txt:136
msgid ""
"When contributing to Django it's very important that your code changes don't"
" introduce bugs into other areas of Django.  One way to check that Django "
"still works after you make your changes is by running Django's test suite. "
"If all the tests still pass, then you can be reasonably sure that your "
"changes haven't completely broken Django. If you've never run Django's test "
"suite before, it's a good idea to run it once beforehand just to get "
"familiar with what its output is supposed to look like."
msgstr ""

# 780461faf4d84253838251ac8a6b76a3
#: ../../../../1.8/docs/intro/contributing.txt:144
msgid ""
"We can run the test suite by simply ``cd``-ing into the Django ``tests/`` "
"directory and, if you're using GNU/Linux, Mac OS X or some other flavor of "
"Unix, run::"
msgstr ""

# 9026e041b7b244a49ed053db36d675c3
#: ../../../../1.8/docs/intro/contributing.txt:150
msgid ""
"If you're on Windows, the above should work provided that you are using "
"\"Git Bash\" provided by the default Git install. GitHub has a `nice "
"tutorial`__."
msgstr ""

# df9d65dacda3407897233b3b0e4d32a4
#: ../../../../1.8/docs/intro/contributing.txt:157
msgid ""
"If you're using ``virtualenv``, you can omit ``PYTHONPATH=..`` when running "
"the tests. This instructs Python to look for Django in the parent directory "
"of ``tests``. ``virtualenv`` puts your copy of Django on the ``PYTHONPATH`` "
"automatically."
msgstr ""

# 5cbd706e2a30490790421b990da1c31c
#: ../../../../1.8/docs/intro/contributing.txt:162
msgid ""
"Now sit back and relax. Django's entire test suite has over 4800 different "
"tests, so it can take anywhere from 5 to 15 minutes to run, depending on the"
" speed of your computer."
msgstr ""

# f5f801c673744b3bae757eee5bf5c3ab
#: ../../../../1.8/docs/intro/contributing.txt:166
msgid ""
"While Django's test suite is running, you'll see a stream of characters "
"representing the status of each test as it's run. ``E`` indicates that an "
"error was raised during a test, and ``F`` indicates that a test's assertions"
" failed. Both of these are considered to be test failures. Meanwhile, ``x`` "
"and ``s`` indicated expected failures and skipped tests, respectively. Dots "
"indicate passing tests."
msgstr ""

# e0d10c7e080c4beb8f53e9b9402e3041
#: ../../../../1.8/docs/intro/contributing.txt:173
msgid ""
"Skipped tests are typically due to missing external libraries required to "
"run the test; see :ref:`running-unit-tests-dependencies` for a list of "
"dependencies and be sure to install any for tests related to the changes you"
" are making (we won't need any for this tutorial)."
msgstr ""

# 31053a0279694321bafeb85bc1d9f2a0
#: ../../../../1.8/docs/intro/contributing.txt:178
msgid ""
"Once the tests complete, you should be greeted with a message informing you "
"whether the test suite passed or failed. Since you haven't yet made any "
"changes to Django's code, the entire test suite **should** pass. If you get "
"failures or errors make sure you've followed all of the previous steps "
"properly. See :ref:`running-unit-tests` for more information."
msgstr ""

# 6419efeb5d134783ad24fe8527bf94db
#: ../../../../1.8/docs/intro/contributing.txt:184
msgid ""
"Note that the latest Django trunk may not always be stable. When developing "
"against trunk, you can check `Django's continuous integration builds`__ to "
"determine if the failures are specific to your machine or if they are also "
"present in Django's official builds. If you click to view a particular "
"build, you can view the \"Configuration Matrix\" which shows failures broken"
" down by Python version and database backend."
msgstr ""

# 2d6a24ec4794424797f81ee5363195e9
#: ../../../../1.8/docs/intro/contributing.txt:195
msgid ""
"For this tutorial and the ticket we're working on, testing against SQLite is"
" sufficient, however, it's possible (and sometimes necessary) to :ref:`run "
"the tests using a different database <running-unit-tests-settings>`."
msgstr ""

# 78c2d3c3c3d7464fbf68e96e96651635
#: ../../../../1.8/docs/intro/contributing.txt:201
msgid "Writing some tests for your ticket"
msgstr ""

# a0e3dbe5744b45149bc8177f3b9f8824
#: ../../../../1.8/docs/intro/contributing.txt:203
msgid ""
"In most cases, for a patch to be accepted into Django it has to include "
"tests. For bug fix patches, this means writing a regression test to ensure "
"that the bug is never reintroduced into Django later on. A regression test "
"should be written in such a way that it will fail while the bug still exists"
" and pass once the bug has been fixed. For patches containing new features, "
"you'll need to include tests which ensure that the new features are working "
"correctly. They too should fail when the new feature is not present, and "
"then pass once it has been implemented."
msgstr ""

# 4c388fd44bd4402d8a91479e86642f17
#: ../../../../1.8/docs/intro/contributing.txt:212
msgid ""
"A good way to do this is to write your new tests first, before making any "
"changes to the code. This style of development is called `test-driven "
"development`__ and can be applied to both entire projects and single "
"patches. After writing your tests, you then run them to make sure that they "
"do indeed fail (since you haven't fixed that bug or added that feature yet)."
" If your new tests don't fail, you'll need to fix them so that they do. "
"After all, a regression test that passes regardless of whether a bug is "
"present is not very helpful at preventing that bug from reoccurring down the"
" road."
msgstr ""

# f00f740382eb411b8912c37ee60cd230
#: ../../../../1.8/docs/intro/contributing.txt:221
msgid "Now for our hands-on example."
msgstr ""

# 0b627a33ff8b478092b14f9d5bb6d239
#: ../../../../1.8/docs/intro/contributing.txt:226
msgid "Writing some tests for ticket #17549"
msgstr ""

# 7c1e023d5ff249a7900b239a5c6a791c
#: ../../../../1.8/docs/intro/contributing.txt:228
msgid ""
"Ticket :ticket:`17549` describes the following, small feature addition:"
msgstr ""

# 030f31a0130b4212b0ee6f89c27afe72
#: ../../../../1.8/docs/intro/contributing.txt:230
msgid ""
"It's useful for URLField to give you a way to open the URL; otherwise you "
"might as well use a CharField."
msgstr ""

# fced3fa6276c4f59b58b1ea9447fd98b
#: ../../../../1.8/docs/intro/contributing.txt:233
msgid ""
"In order to resolve this ticket, we'll add a ``render`` method to the "
"``AdminURLFieldWidget`` in order to display a clickable link above the input"
" widget. Before we make those changes though, we're going to write a couple "
"tests to verify that our modification functions correctly and continues to "
"function correctly in the future."
msgstr ""

# d4d6d8c813dc4b028366d43c78687be3
#: ../../../../1.8/docs/intro/contributing.txt:239
msgid ""
"Navigate to Django's ``tests/regressiontests/admin_widgets/`` folder and "
"open the ``tests.py`` file. Add the following code on line 269 right before "
"the ``AdminFileWidgetTest`` class::"
msgstr ""

# a27444a993e447d8bb8acf3b6a371be2
#: ../../../../1.8/docs/intro/contributing.txt:273
msgid ""
"The new tests check to see that the ``render`` method we'll be adding works "
"correctly in a couple different situations."
msgstr ""

# edeca130126545b9b5c85d5139d5f2d8
#: ../../../../1.8/docs/intro/contributing.txt:276
msgid "But this testing thing looks kinda hard..."
msgstr ""

# 77d573684ba44ffc80288d6ebaaecd53
#: ../../../../1.8/docs/intro/contributing.txt:278
msgid ""
"If you've never had to deal with tests before, they can look a little hard "
"to write at first glance. Fortunately, testing is a *very* big subject in "
"computer programming, so there's lots of information out there:"
msgstr ""

# 57c7752959a04202817f1bf944e018a1
#: ../../../../1.8/docs/intro/contributing.txt:282
msgid ""
"A good first look at writing tests for Django can be found in the "
"documentation on :doc:`/topics/testing/overview`."
msgstr ""

# 12ca50a2c4a743ebb5e5787f6187ba24
#: ../../../../1.8/docs/intro/contributing.txt:284
msgid ""
"Dive Into Python (a free online book for beginning Python developers) "
"includes a great `introduction to Unit Testing`__."
msgstr ""

# cbe39659622d456e9b778047b7228d87
#: ../../../../1.8/docs/intro/contributing.txt:286
msgid ""
"After reading those, if you want something a little meatier to sink your "
"teeth into, there's always the `Python unittest documentation`__."
msgstr ""

# 022c943061fd4aeea07e175576c3a3ac
#: ../../../../1.8/docs/intro/contributing.txt:293
msgid "Running your new test"
msgstr ""

# aa219b756caa4f9b9eda88d74e8314b8
#: ../../../../1.8/docs/intro/contributing.txt:295
msgid ""
"Remember that we haven't actually made any modifications to "
"``AdminURLFieldWidget`` yet, so our tests are going to fail. Let's run all "
"the tests in the ``model_forms_regress`` folder to make sure that's really "
"what happens. From the command line, ``cd`` into the Django ``tests/`` "
"directory and run::"
msgstr ""

# faf70f917ea640bbb4eec0d3b328b566
#: ../../../../1.8/docs/intro/contributing.txt:303
msgid ""
"If the tests ran correctly, you should see three failures corresponding to "
"each of the test methods we added. If all of the tests passed, then you'll "
"want to make sure that you added the new test shown above to the appropriate"
" folder and class."
msgstr ""

# 431393f50fce43daa89ceb5317e6bc6d
#: ../../../../1.8/docs/intro/contributing.txt:309
msgid "Writing the code for your ticket"
msgstr ""

# d0ab666807d141d19f656adea8a4d220
#: ../../../../1.8/docs/intro/contributing.txt:311
msgid ""
"Next we'll be adding the functionality described in ticket :ticket:`17549` "
"to Django."
msgstr ""

# f87b2e5b2b284528bbd448dcba5173d2
#: ../../../../1.8/docs/intro/contributing.txt:315
msgid "Writing the code for ticket #17549"
msgstr ""

# ca2309691f9641428692ee00039b721f
#: ../../../../1.8/docs/intro/contributing.txt:317
msgid ""
"Navigate to the ``django/django/contrib/admin/`` folder and open the "
"``widgets.py`` file. Find the ``AdminURLFieldWidget`` class on line 302 and "
"add the following ``render`` method after the existing ``__init__`` method::"
msgstr ""

# 15abf7659c3b48c3853340afe9e0c2cc
#: ../../../../1.8/docs/intro/contributing.txt:334
msgid "Verifying your test now passes"
msgstr ""

# 7678baf3ed26450d84e6bbcb6db9099b
#: ../../../../1.8/docs/intro/contributing.txt:336
msgid ""
"Once you're done modifying Django, we need to make sure that the tests we "
"wrote earlier pass, so we can see whether the code we wrote above is working"
" correctly. To run the tests in the ``admin_widgets`` folder, ``cd`` into "
"the Django ``tests/`` directory and run::"
msgstr ""

# 98766b67add04395830f0bfd53df1a9a
#: ../../../../1.8/docs/intro/contributing.txt:343
msgid ""
"Oops, good thing we wrote those tests! You should still see 3 failures with "
"the following exception::"
msgstr ""

# 6e33814ee0f34ce8bfacc39e2c08f616
#: ../../../../1.8/docs/intro/contributing.txt:348
msgid ""
"We forgot to add the import for that method.  Go ahead and add the "
"``smart_urlquote`` import at the end of line 13 of "
"``django/contrib/admin/widgets.py`` so it looks as follows::"
msgstr ""

# a949318fc3004b8aa9eb0fbadffff5ce
#: ../../../../1.8/docs/intro/contributing.txt:354
msgid ""
"Re-run the tests and everything should pass. If it doesn't, make sure you "
"correctly modified the ``AdminURLFieldWidget`` class as shown above and "
"copied the new tests correctly."
msgstr ""

# bce331247385440180a3d7192e089648
#: ../../../../1.8/docs/intro/contributing.txt:359
msgid "Running Django's test suite for the second time"
msgstr ""

# 1efb47022ea245e5af980663a28f137b
#: ../../../../1.8/docs/intro/contributing.txt:361
msgid ""
"Once you've verified that your patch and your test are working correctly, "
"it's a good idea to run the entire Django test suite just to verify that "
"your change hasn't introduced any bugs into other areas of Django. While "
"successfully passing the entire test suite doesn't guarantee your code is "
"bug free, it does help identify many bugs and regressions that might "
"otherwise go unnoticed."
msgstr ""

# 950d2bc6bf964e6fb774c83b0ec270d9
#: ../../../../1.8/docs/intro/contributing.txt:367
msgid ""
"To run the entire Django test suite, ``cd`` into the Django ``tests/`` "
"directory and run::"
msgstr ""

# aeb27630946c4ee799a0e51acf334ce6
#: ../../../../1.8/docs/intro/contributing.txt:372
msgid ""
"As long as you don't see any failures, you're good to go. Note that this fix"
" also made a `small CSS change`__ to format the new widget. You can make the"
" change if you'd like, but we'll skip it for now in the interest of brevity."
msgstr ""

# fe88e1ad7ca34dfa8e5c5f57d5e90449
#: ../../../../1.8/docs/intro/contributing.txt:379
msgid "Writing Documentation"
msgstr ""

# 5167eb166a17424d974a7dcb10f60c54
#: ../../../../1.8/docs/intro/contributing.txt:381
msgid ""
"This is a new feature, so it should be documented.  Add the following on "
"line 925 of ``django/docs/ref/models/fields.txt`` beneath the existing docs "
"for ``URLField``::"
msgstr ""

# 31440f307ea64a429547bdaafca1be02
#: ../../../../1.8/docs/intro/contributing.txt:390
msgid ""
"For more information on writing documentation, including an explanation of "
"what the ``versionadded`` bit is all about, see "
":doc:`/internals/contributing/writing-documentation`. That page also "
"includes an explanation of how to build a copy of the documentation locally,"
" so you can preview the HTML that will be generated."
msgstr ""

# 1104045f9f1542ddaa7cff8efb39bcc9
#: ../../../../1.8/docs/intro/contributing.txt:397
msgid "Generating a patch for your changes"
msgstr ""

# 7c97a09f9c62498e9907d902e8315e70
#: ../../../../1.8/docs/intro/contributing.txt:399
msgid ""
"Now it's time to generate a patch file that can be uploaded to Trac or "
"applied to another copy of Django. To get a look at the content of your "
"patch, run the following command::"
msgstr ""

# 06addee8ea204e68a77f2f2c7441fc01
#: ../../../../1.8/docs/intro/contributing.txt:405
msgid ""
"This will display the differences between your current copy of Django (with "
"your changes) and the revision that you initially checked out earlier in the"
" tutorial."
msgstr ""

# fff789dad1d9434e82012a2349f5a90f
#: ../../../../1.8/docs/intro/contributing.txt:409
msgid ""
"Once you're done looking at the patch, hit the ``q`` key to exit back to the"
" command line.  If the patch's content looked okay, you can run the "
"following command to save the patch file to your current working directory::"
msgstr ""

# 545b9e3d54ce411f86a7b4c969dfa56f
#: ../../../../1.8/docs/intro/contributing.txt:415
msgid ""
"You should now have a file in the root Django directory called "
"``17549.diff``. This patch file contains all your changes and should look "
"this:"
msgstr ""

# 6dc14e293e054e14a3f9b3e1b805b192
#: ../../../../1.8/docs/intro/contributing.txt:510
msgid "So what do I do next?"
msgstr ""

# b0611c4c62ca4e238900ad1bb2abc68b
#: ../../../../1.8/docs/intro/contributing.txt:512
msgid ""
"Congratulations, you've generated your very first Django patch! Now that "
"you've got that under your belt, you can put those skills to good use by "
"helping to improve Django's codebase. Generating patches and attaching them "
"to Trac tickets is useful, however, since we are using git - adopting a more"
" :doc:`git oriented workflow </internals/contributing/writing-code/working-"
"with-git>` is recommended."
msgstr ""

# 6ddcd39e717a44dab4decc39813356c2
#: ../../../../1.8/docs/intro/contributing.txt:519
msgid ""
"Since we never committed our changes locally, perform the following to get "
"your git branch back to a good starting point::"
msgstr ""

# da9951f607bf4d96b41046cae3d86fda
#: ../../../../1.8/docs/intro/contributing.txt:526
msgid "More information for new contributors"
msgstr ""

# 2c7f327e507e4337ac1ae4f46c77372a
#: ../../../../1.8/docs/intro/contributing.txt:528
msgid ""
"Before you get too into writing patches for Django, there's a little more "
"information on contributing that you should probably take a look at:"
msgstr ""

# 097af2ac121b4728aa6761db68847a30
#: ../../../../1.8/docs/intro/contributing.txt:531
msgid ""
"You should make sure to read Django's documentation on :doc:`claiming "
"tickets and submitting patches </internals/contributing/writing-code"
"/submitting-patches>`. It covers Trac etiquette, how to claim tickets for "
"yourself, expected coding style for patches, and many other important "
"details."
msgstr ""

# a69e35e754f649e09054de231b981f12
#: ../../../../1.8/docs/intro/contributing.txt:536
msgid ""
"First time contributors should also read Django's :doc:`documentation for "
"first time contributors</internals/contributing/new-contributors/>`. It has "
"lots of good advice for those of us who are new to helping out with Django."
msgstr ""

# a257783f27594b009fb6f70f55453e6c
#: ../../../../1.8/docs/intro/contributing.txt:540
msgid ""
"After those, if you're still hungry for more information about contributing,"
" you can always browse through the rest of :doc:`Django's documentation on "
"contributing</internals/contributing/index>`. It contains a ton of useful "
"information and should be your first source for answering any questions you "
"might have."
msgstr ""

# e1432fc46b7943faaf2fd85ef3613339
#: ../../../../1.8/docs/intro/contributing.txt:547
msgid "Finding your first real ticket"
msgstr ""

# cc346c5036f9495695ee92161b65edff
#: ../../../../1.8/docs/intro/contributing.txt:549
msgid ""
"Once you've looked through some of that information, you'll be ready to go "
"out and find a ticket of your own to write a patch for. Pay special "
"attention to tickets with the \"easy pickings\" criterion. These tickets are"
" often much simpler in nature and are great for first time contributors.  "
"Once you're familiar with contributing to Django, you can move on to writing"
" patches for more difficult and complicated tickets."
msgstr ""

# b372d059bf424644a4d597dca261858a
#: ../../../../1.8/docs/intro/contributing.txt:556
msgid ""
"If you just want to get started already (and nobody would blame you!), try "
"taking a look at the list of `easy tickets that need patches`__ and the "
"`easy tickets that have patches which need improvement`__. If you're "
"familiar with writing tests, you can also look at the list of `easy tickets "
"that need tests`__. Just remember to follow the guidelines about claiming "
"tickets that were mentioned in the link to Django's documentation on "
":doc:`claiming tickets and submitting patches </internals/contributing"
"/writing-code/submitting-patches>`."
msgstr ""

# fab2a2036a1a48f69c566eb398ef9ec0
# 832eab2a365d4b09957b29dbed06f89c
# 62a22c7d8bde40c8979d6a6462978ccf
#: ../../../../1.8/docs/intro/contributing.txt:570
#: ../../../../1.8/docs/intro/tutorial05.txt:690
#: ../../../../1.8/docs/intro/tutorial06.txt:120
msgid "What's next?"
msgstr ""

# 1d0babadf9ff40cf923533ac9c8201cd
#: ../../../../1.8/docs/intro/contributing.txt:572
msgid ""
"After a ticket has a patch, it needs to be reviewed by a second set of eyes."
" After uploading a patch or submitting a pull request, be sure to update the"
" ticket metadata by setting the flags on the ticket to say \"has patch\", "
"\"doesn't need tests\", etc, so others can find it for review. Contributing "
"doesn't necessarily always mean writing a patch from scratch. Reviewing "
"existing patches is also a very helpful contribution. See "
":doc:`/internals/contributing/triaging-tickets` for details."
msgstr ""

# a572164522be44ac84e245828766b039
#: ../../../../1.8/docs/intro/index.txt:2
msgid "Getting started"
msgstr ""

# 61c2c0a1f01d4c1c98399fb506c4dca6
#: ../../../../1.8/docs/intro/index.txt:4
msgid ""
"New to Django? Or to Web development in general? Well, you came to the right"
" place: read this material to quickly get up and running."
msgstr ""

# 4d333b533d5540f58a06fa9370d89a19
#: ../../../../1.8/docs/intro/index.txt:24
msgid ""
"If you're new to Python_, you might want to start by getting an idea of what"
" the language is like. Django is 100% Python, so if you've got minimal "
"comfort with Python you'll probably get a lot more out of Django."
msgstr ""

# a5943ee503c8475a953a079ab7f34d7d
#: ../../../../1.8/docs/intro/index.txt:28
msgid ""
"If you're new to programming entirely, you might want to start with this "
"`list of Python resources for non-programmers`_"
msgstr ""

# 731787b4da1f4521a92caa79e8a038d6
#: ../../../../1.8/docs/intro/index.txt:31
msgid ""
"If you already know a few other languages and want to get up to speed with "
"Python quickly, we recommend `Dive Into Python`_. If that's not quite your "
"style, there are many other `books about Python`_."
msgstr ""

# d215843da09745d79fa2f5d4f8824749
#: ../../../../1.8/docs/intro/install.txt:2
msgid "Quick install guide"
msgstr ""

# 8a4d1d050cb540c79c8b0a3eb4ddadb9
#: ../../../../1.8/docs/intro/install.txt:4
msgid ""
"Before you can use Django, you'll need to get it installed. We have a "
":doc:`complete installation guide </topics/install>` that covers all the "
"possibilities; this guide will guide you to a simple, minimal installation "
"that'll work while you walk through the introduction."
msgstr ""

# 7f4f24d6422549b9bf7ace9718545e97
#: ../../../../1.8/docs/intro/install.txt:10
msgid "Install Python"
msgstr ""

# 1cb7329945864de7b669e5a14cd3069d
#: ../../../../1.8/docs/intro/install.txt:12
msgid ""
"Being a Python Web framework, Django requires Python. See :ref:`faq-python-"
"version-support` for details. Python includes a lightweight database called "
"SQLite_ so you won't need to set up a database just yet."
msgstr ""

# c0fa9e4f8b6042399407daa099bd2cac
#: ../../../../1.8/docs/intro/install.txt:18
msgid ""
"Get the latest version of Python at https://www.python.org/download/ or with"
" your operating system's package manager."
msgstr ""

# 6e78d2fbd698406aa87e4a72f93680d9
#: ../../../../1.8/docs/intro/install.txt:21
msgid "Django on Jython"
msgstr ""

# 49ea4e1bff2a45f4aa970fd9cfc49c83
#: ../../../../1.8/docs/intro/install.txt:23
msgid ""
"If you use Jython_ (a Python implementation for the Java platform), you'll "
"need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""

# e61635cd8b3f4006a035448463710d1f
#: ../../../../1.8/docs/intro/install.txt:28
msgid ""
"You can verify that Python is installed by typing ``python`` from your "
"shell; you should see something like::"
msgstr ""

# c6d37a5856ea4422a89c1401c864584a
#: ../../../../1.8/docs/intro/install.txt:37
msgid "Set up a database"
msgstr ""

# 9a91554716b042d4802d4e674f9decdb
#: ../../../../1.8/docs/intro/install.txt:39
msgid ""
"This step is only necessary if you'd like to work with a \"large\" database "
"engine like PostgreSQL, MySQL, or Oracle. To install such a database, "
"consult the :ref:`database installation information <database-"
"installation>`."
msgstr ""

# 9b0fcfe3df684342849d087b03c1075b
#: ../../../../1.8/docs/intro/install.txt:44
msgid "Remove any old versions of Django"
msgstr ""

# fd122f1c207a4d96b1af94cbd3b2a809
#: ../../../../1.8/docs/intro/install.txt:46
msgid ""
"If you are upgrading your installation of Django from a previous version, "
"you will need to :ref:`uninstall the old Django version before installing "
"the new version <removing-old-versions-of-django>`."
msgstr ""

# 0a79bd4321874ba4bbe6319699903716
#: ../../../../1.8/docs/intro/install.txt:51
msgid "Install Django"
msgstr ""

# 525011683f8a4879aee1d18741f7a0ec
#: ../../../../1.8/docs/intro/install.txt:53
msgid "You've got three easy options to install Django:"
msgstr ""

# 60e2921e5fa344ad890e269f9d024038
#: ../../../../1.8/docs/intro/install.txt:55
msgid ""
"Install a version of Django :doc:`provided by your operating system "
"distribution </misc/distributions>`. This is the quickest option for those "
"who have operating systems that distribute Django."
msgstr ""

# 15111d21b629488faa82021a04603bed
#: ../../../../1.8/docs/intro/install.txt:59
msgid ""
":ref:`Install an official release <installing-official-release>`. This is "
"the best approach for users who want a stable version number and aren't "
"concerned about running a slightly older version of Django."
msgstr ""

# 051de4217cb840eda54a6217ec7e0f3e
#: ../../../../1.8/docs/intro/install.txt:63
msgid ""
":ref:`Install the latest development version <installing-development-"
"version>`. This is best for users who want the latest-and-greatest features "
"and aren't afraid of running brand-new code."
msgstr ""

# e1d71bc952e1471f832668875c49fa3a
#: ../../../../1.8/docs/intro/install.txt:67
msgid ""
"Always refer to the documentation that corresponds to the version of Django "
"you're using!"
msgstr ""

# bc7b757efa0f4568a61150001f63f902
#: ../../../../1.8/docs/intro/install.txt:70
msgid ""
"If you do either of the first two steps, keep an eye out for parts of the "
"documentation marked **new in development version**. That phrase flags "
"features that are only available in development versions of Django, and they"
" likely won't work with an official release."
msgstr ""

# 723ff53dd4e14bd4ab2c7a2b875e36ee
#: ../../../../1.8/docs/intro/install.txt:77
msgid "Verifying"
msgstr ""

# 07ea6f2814a04e1d83415ea4a3c661ab
#: ../../../../1.8/docs/intro/install.txt:79
msgid ""
"To verify that Django can be seen by Python, type ``python`` from your "
"shell. Then at the Python prompt, try to import Django:"
msgstr ""

# 2465d298c29e4048b596e15957bcdc82
#: ../../../../1.8/docs/intro/install.txt:88
msgid "You may have another version of Django installed."
msgstr ""

# 02dc7e88ec644f6fb83519be96def2fc
#: ../../../../1.8/docs/intro/install.txt:91
msgid "That's it!"
msgstr ""

# a693b5a3c2bf4134b896756b66c485c2
#: ../../../../1.8/docs/intro/install.txt:93
msgid ""
"That's it -- you can now :doc:`move onto the tutorial </intro/tutorial01>`."
msgstr ""

# 927e80815c87411f8e1656f51f57f2a9
#: ../../../../1.8/docs/intro/overview.txt:3
msgid "Django at a glance"
msgstr ""

# a9b9cfc1b4cb439da2927ab81f747259
#: ../../../../1.8/docs/intro/overview.txt:5
msgid ""
"Because Django was developed in a fast-paced newsroom environment, it was "
"designed to make common Web-development tasks fast and easy. Here's an "
"informal overview of how to write a database-driven Web app with Django."
msgstr "Debido a que Django fue desarrollado en un ambiente de sala de redacción de ritmo rápido, que fue diseñado para hacer tareas comunes de desarrollo web rápido y fácil. Aquí se incluye un resumen informal de cómo escribir una aplicación web con bases de datos con Django."

# 526df5c842944094bbf69d5042e8e2f1
#: ../../../../1.8/docs/intro/overview.txt:9
msgid ""
"The goal of this document is to give you enough technical specifics to "
"understand how Django works, but this isn't intended to be a tutorial or "
"reference -- but we've got both! When you're ready to start a project, you "
"can :doc:`start with the tutorial </intro/tutorial01>` or :doc:`dive right "
"into more detailed documentation </topics/index>`."
msgstr "El objetivo de este documento es dar suficiente información técnica para entender cómo funciona Django, pero no pretende ser un tutorial o referencia - ¡aunque tenemos ambas cosas! Cuando estés listo para empezar un proyecto con Django, puedes: doc: `comenzar con el tutorial </intro/tutorial01> `O: doc:` ir directamente a la documentación más detallada </topics/index> `."

# 2ddca403acbd4e8c8cf224adc606dec2
#: ../../../../1.8/docs/intro/overview.txt:16
msgid "Design your model"
msgstr ""

# 83bc841271d04f58880276e3423c55be
#: ../../../../1.8/docs/intro/overview.txt:18
msgid ""
"Although you can use Django without a database, it comes with an `object-"
"relational mapper`_ in which you describe your database layout in Python "
"code."
msgstr "Aunque es posible usar Django sin una base de datos, Django incluye un `mapeador objeto-relacional`_ en el que es posible definir la estructura de la base de datos utilizando código Python."

# 04bd166acfbf48e7acda9dbb3f321a4f
#: ../../../../1.8/docs/intro/overview.txt:24
msgid ""
"The :doc:`data-model syntax </topics/db/models>` offers many rich ways of "
"representing your models -- so far, it's been solving many years' worth of "
"database-schema problems. Here's a quick example:"
msgstr ""

# 1abbd4732ca5494a8b6039531629aba9
#: ../../../../1.8/docs/intro/overview.txt:49
msgid "Install it"
msgstr ""

# 65124af9b0a843b9bf19b1f08fd310ef
#: ../../../../1.8/docs/intro/overview.txt:51
msgid ""
"Next, run the Django command-line utility to create the database tables "
"automatically:"
msgstr "A continuación ejecuta la línea de comandos de Django para crear las tablas de base de datos de forma automática:"

# 13d77e99b99246b0a84fd4d4dca33cf0
#: ../../../../1.8/docs/intro/overview.txt:58
msgid ""
"The :djadmin:`migrate` command looks at all your available models and "
"creates tables in your database for whichever tables don't already exist, as"
" well as optionally providing :doc:`much richer schema control "
"</topics/migrations>`."
msgstr ""

# 1ae7a3a972fd49c9b5d8f4f01be4d0b5
#: ../../../../1.8/docs/intro/overview.txt:63
msgid "Enjoy the free API"
msgstr ""

# 5d07b24213a3429386e7ceda70d81527
#: ../../../../1.8/docs/intro/overview.txt:65
msgid ""
"With that, you've got a free, and rich, :doc:`Python API "
"</topics/db/queries>` to access your data. The API is created on the fly, no"
" code generation necessary:"
msgstr ""

# 0736b59544d34c5ca04be9b1f908aadc
#: ../../../../1.8/docs/intro/overview.txt:141
msgid ""
"A dynamic admin interface: it's not just scaffolding -- it's the whole house"
msgstr ""

# 2a000e62c39d420f86eb84356243be96
#: ../../../../1.8/docs/intro/overview.txt:143
msgid ""
"Once your models are defined, Django can automatically create a "
"professional, production ready :doc:`administrative interface "
"</ref/contrib/admin/index>` -- a Web site that lets authenticated users add,"
" change and delete objects. It's as easy as registering your model in the "
"admin site:"
msgstr ""

# 86cfc2704fff413283500662ce1990bc
#: ../../../../1.8/docs/intro/overview.txt:168
msgid ""
"The philosophy here is that your site is edited by a staff, or a client, or "
"maybe just you -- and you don't want to have to deal with creating backend "
"interfaces just to manage content."
msgstr ""

# c2d24c580b9f458ea2738be02a1b13f0
#: ../../../../1.8/docs/intro/overview.txt:172
msgid ""
"One typical workflow in creating Django apps is to create models and get the"
" admin sites up and running as fast as possible, so your staff (or clients) "
"can start populating data. Then, develop the way data is presented to the "
"public."
msgstr ""

# 9613a9767fa84c8db148adb97c31c461
#: ../../../../1.8/docs/intro/overview.txt:177
msgid "Design your URLs"
msgstr ""

# 1aaffdca95a64649978616471b3752bc
#: ../../../../1.8/docs/intro/overview.txt:179
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django encourages beautiful URL design and doesn't put any "
"cruft in URLs, like ``.php`` or ``.asp``."
msgstr ""

# 790753ea90e84c9aa3dd48f47b37f0f2
#: ../../../../1.8/docs/intro/overview.txt:183
msgid ""
"To design URLs for an app, you create a Python module called a :doc:`URLconf"
" </topics/http/urls>`. A table of contents for your app, it contains a "
"simple mapping between URL patterns and Python callback functions. URLconfs "
"also serve to decouple URLs from Python code."
msgstr ""

# cbbcb0bba6db4acb866730c39810cc73
#: ../../../../1.8/docs/intro/overview.txt:188
msgid ""
"Here's what a URLconf might look like for the ``Reporter``/``Article`` "
"example above:"
msgstr ""

# 4dd66cafc79a4482b162e21fde3f19ee
#: ../../../../1.8/docs/intro/overview.txt:204
msgid ""
"The code above maps URLs, as simple `regular expressions`_, to the location "
"of Python callback functions (\"views\"). The regular expressions use "
"parenthesis to \"capture\" values from the URLs. When a user requests a "
"page, Django runs through each pattern, in order, and stops at the first one"
" that matches the requested URL. (If none of them matches, Django calls a "
"special-case 404 view.) This is blazingly fast, because the regular "
"expressions are compiled at load time."
msgstr ""

# a31af9f55f3c414c906bb3bb643c0ad8
#: ../../../../1.8/docs/intro/overview.txt:214
msgid ""
"Once one of the regexes matches, Django imports and calls the given view, "
"which is a simple Python function. Each view gets passed a request object --"
" which contains request metadata -- and the values captured in the regex."
msgstr ""

# 96b1d37ae53d43b498858102c1cbc7dc
#: ../../../../1.8/docs/intro/overview.txt:218
msgid ""
"For example, if a user requested the URL \"/articles/2005/05/39323/\", "
"Django would call the function ``news.views.article_detail(request, '2005', "
"'05', '39323')``."
msgstr ""

# 97493cebbccd4e70a297d6ce1ea729ac
#: ../../../../1.8/docs/intro/overview.txt:223
msgid "Write your views"
msgstr ""

# 043a1e558e534bacb6bfe886e1203309
#: ../../../../1.8/docs/intro/overview.txt:225
msgid ""
"Each view is responsible for doing one of two things: Returning an "
":class:`~django.http.HttpResponse` object containing the content for the "
"requested page, or raising an exception such as "
":class:`~django.http.Http404`. The rest is up to you."
msgstr ""

# afd363d6d63a409e9faae5119fabfcc2
#: ../../../../1.8/docs/intro/overview.txt:230
msgid ""
"Generally, a view retrieves data according to the parameters, loads a "
"template and renders the template with the retrieved data. Here's an example"
" view for ``year_archive`` from above:"
msgstr ""

# e5ee158378a14564b58ad685af0e74f0
#: ../../../../1.8/docs/intro/overview.txt:246
msgid ""
"This example uses Django's :doc:`template system </topics/templates>`, which"
" has several powerful features but strives to stay simple enough for non-"
"programmers to use."
msgstr ""

# 4e77067e67a04fe9a2df179ed63fbff4
#: ../../../../1.8/docs/intro/overview.txt:251
msgid "Design your templates"
msgstr ""

# facf559e75714d2c8d5ae36e68bf1095
#: ../../../../1.8/docs/intro/overview.txt:253
msgid "The code above loads the ``news/year_archive.html`` template."
msgstr ""

# 27c83e27d32a421bbf1453cf7b9a5544
#: ../../../../1.8/docs/intro/overview.txt:255
msgid ""
"Django has a template search path, which allows you to minimize redundancy "
"among templates. In your Django settings, you specify a list of directories "
"to check for templates with :setting:`DIRS <TEMPLATES-DIRS>`. If a template "
"doesn't exist in the first directory, it checks the second, and so on."
msgstr ""

# aa2fdb42e1d64d319bbfd42e8dbd2ef6
#: ../../../../1.8/docs/intro/overview.txt:260
msgid ""
"Let's say the ``news/year_archive.html`` template was found. Here's what "
"that might look like:"
msgstr ""

# 3fdd0e29a31c46d19a419837b3a65cf9
#: ../../../../1.8/docs/intro/overview.txt:280
msgid ""
"Variables are surrounded by double-curly braces. ``{{ article.headline }}`` "
"means \"Output the value of the article's headline attribute.\" But dots "
"aren't used only for attribute lookup. They also can do dictionary-key "
"lookup, index lookup and function calls."
msgstr ""

# 9af34b8b24874e669854bd0b182b7780
#: ../../../../1.8/docs/intro/overview.txt:285
msgid ""
"Note ``{{ article.pub_date|date:\"F j, Y\" }}`` uses a Unix-style \"pipe\" "
"(the \"|\" character). This is called a template filter, and it's a way to "
"filter the value of a variable. In this case, the date filter formats a "
"Python datetime object in the given format (as found in PHP's date "
"function)."
msgstr ""

# 4ba128d3f4df4c71bc698a5729100a85
#: ../../../../1.8/docs/intro/overview.txt:290
msgid ""
"You can chain together as many filters as you'd like. You can write "
":ref:`custom template filters <howto-writing-custom-template-filters>`. You "
"can write :doc:`custom template tags </howto/custom-template-tags>`, which "
"run custom Python code behind the scenes."
msgstr ""

# 6e4e84ccaa7d4eaeb9ff47d21ae12928
#: ../../../../1.8/docs/intro/overview.txt:295
msgid ""
"Finally, Django uses the concept of \"template inheritance\". That's what "
"the ``{% extends \"base.html\" %}`` does. It means \"First load the template"
" called 'base', which has defined a bunch of blocks, and fill the blocks "
"with the following blocks.\" In short, that lets you dramatically cut down "
"on redundancy in templates: each template has to define only what's unique "
"to that template."
msgstr ""

# b86907c53e5b447894eb20e00ebb3df4
#: ../../../../1.8/docs/intro/overview.txt:301
msgid ""
"Here's what the \"base.html\" template, including the use of :doc:`static "
"files </howto/static-files/index>`, might look like:"
msgstr ""

# dee990be4f704c1ab5a30ec8a7a4bc54
#: ../../../../1.8/docs/intro/overview.txt:318
msgid ""
"Simplistically, it defines the look-and-feel of the site (with the site's "
"logo), and provides \"holes\" for child templates to fill. This makes a site"
" redesign as easy as changing a single file -- the base template."
msgstr ""

# 2490bc8593cc4c8cb5deac8d85fffe1e
#: ../../../../1.8/docs/intro/overview.txt:322
msgid ""
"It also lets you create multiple versions of a site, with different base "
"templates, while reusing child templates. Django's creators have used this "
"technique to create strikingly different mobile versions of sites -- simply "
"by creating a new base template."
msgstr ""

# ccc081dad2e94327a784b55d656ac6a1
#: ../../../../1.8/docs/intro/overview.txt:327
msgid ""
"Note that you don't have to use Django's template system if you prefer "
"another system. While Django's template system is particularly well-"
"integrated with Django's model layer, nothing forces you to use it. For that"
" matter, you don't have to use Django's database API, either. You can use "
"another database abstraction layer, you can read XML files, you can read "
"files off disk, or anything you want. Each piece of Django -- models, views,"
" templates -- is decoupled from the next."
msgstr ""

# f44afd8bcb27472882bcddc7847ea94a
#: ../../../../1.8/docs/intro/overview.txt:336
msgid "This is just the surface"
msgstr ""

# 20e704a901794de38f385f6a3d4e94f4
#: ../../../../1.8/docs/intro/overview.txt:338
msgid ""
"This has been only a quick overview of Django's functionality. Some more "
"useful features:"
msgstr ""

# d7eb22ae8ca64b29bba61e44cc4c51c1
#: ../../../../1.8/docs/intro/overview.txt:341
msgid ""
"A :doc:`caching framework </topics/cache>` that integrates with memcached or"
" other backends."
msgstr ""

# 37d3dc96f89e409f9d5617a3ac6374c8
#: ../../../../1.8/docs/intro/overview.txt:344
msgid ""
"A :doc:`syndication framework </ref/contrib/syndication>` that makes "
"creating RSS and Atom feeds as easy as writing a small Python class."
msgstr ""

# d5dd5880635e46b9ba72e9263ee1fa87
#: ../../../../1.8/docs/intro/overview.txt:347
msgid ""
"More sexy automatically-generated admin features -- this overview barely "
"scratched the surface."
msgstr ""

# ab35c9fb120b48b697cb0b3d21b2deec
#: ../../../../1.8/docs/intro/overview.txt:350
msgid ""
"The next obvious steps are for you to `download Django`_, read :doc:`the "
"tutorial </intro/tutorial01>` and join `the community`_. Thanks for your "
"interest!"
msgstr ""

# 83aba743c3e84e388c9a602624d16738
#: ../../../../1.8/docs/intro/reusable-apps.txt:3
msgid "Advanced tutorial: How to write reusable apps"
msgstr ""

# 55418a65321441e1801f1dd0cd5ed601
#: ../../../../1.8/docs/intro/reusable-apps.txt:5
msgid ""
"This advanced tutorial begins where :doc:`Tutorial 6 </intro/tutorial06>` "
"left off. We'll be turning our Web-poll into a standalone Python package you"
" can reuse in new projects and share with other people."
msgstr ""

# fe72b460ca7c42379d4c2925f4ec21d2
#: ../../../../1.8/docs/intro/reusable-apps.txt:9
msgid ""
"If you haven't recently completed Tutorials 1–6, we encourage you to review "
"these so that your example project matches the one described below."
msgstr ""

# d9cc9f54515c492494ef411c8cb94d7b
#: ../../../../1.8/docs/intro/reusable-apps.txt:13
msgid "Reusability matters"
msgstr ""

# 6c2f3db8f34841eca42fda5fab2aa5d2
#: ../../../../1.8/docs/intro/reusable-apps.txt:15
msgid ""
"It's a lot of work to design, build, test and maintain a web application. "
"Many Python and Django projects share common problems. Wouldn't it be great "
"if we could save some of this repeated work?"
msgstr ""

# dacdb3ed18d4423f92cf1eff72189c91
#: ../../../../1.8/docs/intro/reusable-apps.txt:19
msgid ""
"Reusability is the way of life in Python. `The Python Package Index (PyPI) "
"<https://pypi.python.org/pypi>`_ has a vast range of packages you can use in"
" your own Python programs. Check out `Django Packages "
"<https://www.djangopackages.com>`_ for existing reusable apps you could "
"incorporate in your project. Django itself is also just a Python package. "
"This means that you can take existing Python packages or Django apps and "
"compose them into your own web project. You only need to write the parts "
"that make your project unique."
msgstr ""

# a8829de076b94a17aa95be250956ebce
#: ../../../../1.8/docs/intro/reusable-apps.txt:28
msgid ""
"Let's say you were starting a new project that needed a polls app like the "
"one we've been working on. How do you make this app reusable? Luckily, "
"you're well on the way already. In :doc:`Tutorial 3 </intro/tutorial03>`, we"
" saw how we could decouple polls from the project-level URLconf using an "
"``include``. In this tutorial, we'll take further steps to make the app easy"
" to use in new projects and ready to publish for others to install and use."
msgstr ""

# 7fa307fda613451ea5f158b2a3f04725
#: ../../../../1.8/docs/intro/reusable-apps.txt:35
msgid "Package? App?"
msgstr ""

# 63ceaa1fe5a949c29b780e20e2812f05
#: ../../../../1.8/docs/intro/reusable-apps.txt:37
msgid ""
"A Python `package <https://docs.python.org/tutorial/modules.html#packages>`_"
" provides a way of grouping related Python code for easy reuse. A package "
"contains one or more files of Python code (also known as \"modules\")."
msgstr ""

# 6a19849903fe4e448bf1fced6bf2d913
#: ../../../../1.8/docs/intro/reusable-apps.txt:41
msgid ""
"A package can be imported with ``import foo.bar`` or ``from foo import "
"bar``. For a directory (like ``polls``) to form a package, it must contain a"
" special file ``__init__.py``, even if this file is empty."
msgstr ""

# f7a90f4920a2450d8763c974e1a3c33e
#: ../../../../1.8/docs/intro/reusable-apps.txt:45
msgid ""
"A Django *application* is just a Python package that is specifically "
"intended for use in a Django project. An application may use common Django "
"conventions, such as having ``models``, ``tests``, ``urls``, and ``views`` "
"submodules."
msgstr ""

# f9964185ab264b8580d8ce40e0046795
#: ../../../../1.8/docs/intro/reusable-apps.txt:50
msgid ""
"Later on we use the term *packaging* to describe the process of making a "
"Python package easy for others to install. It can be a little confusing, we "
"know."
msgstr ""

# 5f2a23255155477881bea57bbcf54394
#: ../../../../1.8/docs/intro/reusable-apps.txt:55
msgid "Your project and your reusable app"
msgstr ""

# b14e759921f64ff5b3070a6dedc3c1db
#: ../../../../1.8/docs/intro/reusable-apps.txt:57
msgid "After the previous tutorials, our project should look like this::"
msgstr ""

# 3433a51a9b94431891cf3f8e4fab98b8
#: ../../../../1.8/docs/intro/reusable-apps.txt:90
msgid ""
"You created ``mysite/templates`` in :doc:`Tutorial 2 </intro/tutorial02>`, "
"and ``polls/templates`` in :doc:`Tutorial 3 </intro/tutorial03>`. Now "
"perhaps it is clearer why we chose to have separate template directories for"
" the project and application: everything that is part of the polls "
"application is in ``polls``. It makes the application self-contained and "
"easier to drop into a new project."
msgstr ""

# 14bc52b4989f4ef491882aa93cdf1a5b
#: ../../../../1.8/docs/intro/reusable-apps.txt:97
msgid ""
"The ``polls`` directory could now be copied into a new Django project and "
"immediately reused. It's not quite ready to be published though. For that, "
"we need to package the app to make it easy for others to install."
msgstr ""

# 3c0163d652ee4d8aa6111a99e7544671
#: ../../../../1.8/docs/intro/reusable-apps.txt:104
msgid "Installing some prerequisites"
msgstr ""

# a98e662b352c420aa1ae2da25fc222ae
#: ../../../../1.8/docs/intro/reusable-apps.txt:106
msgid ""
"The current state of Python packaging is a bit muddled with various tools. "
"For this tutorial, we're going to use setuptools_ to build our package. It's"
" the recommended packaging tool (merged with the ``distribute`` fork). We'll"
" also be using `pip`_ to install and uninstall it. You should install these "
"two packages now. If you need help, you can refer to :ref:`how to install "
"Django with pip<installing-official-release>`. You can install "
"``setuptools`` the same way."
msgstr ""

# f9f04bfe96a34c6fa83dd84e45dfaef4
#: ../../../../1.8/docs/intro/reusable-apps.txt:118
msgid "Packaging your app"
msgstr ""

# f648c7e5699846da9706edffca4e456e
#: ../../../../1.8/docs/intro/reusable-apps.txt:120
msgid ""
"Python *packaging* refers to preparing your app in a specific format that "
"can be easily installed and used. Django itself is packaged very much like "
"this. For a small app like polls, this process isn't too difficult."
msgstr ""

# 0097f709664940ec90d8dc48ae0ac806
#: ../../../../1.8/docs/intro/reusable-apps.txt:124
msgid ""
"First, create a parent directory for ``polls``, outside of your Django "
"project. Call this directory ``django-polls``."
msgstr ""

# 5216453dea1f4f10b8230cccc53f4316
#: ../../../../1.8/docs/intro/reusable-apps.txt:127
msgid "Choosing a name for your app"
msgstr ""

# 5928e4548efe4bbca49657143c05ba76
#: ../../../../1.8/docs/intro/reusable-apps.txt:129
msgid ""
"When choosing a name for your package, check resources like PyPI to avoid "
"naming conflicts with existing packages. It's often useful to prepend "
"``django-`` to your module name when creating a package to distribute. This "
"helps others looking for Django apps identify your app as Django specific."
msgstr ""

# 11412dd0348f4b9c862e70c1294b2a77
#: ../../../../1.8/docs/intro/reusable-apps.txt:135
msgid ""
"Application labels (that is, the final part of the dotted path to "
"application packages) *must* be unique in :setting:`INSTALLED_APPS`. Avoid "
"using the same label as any of the Django :doc:`contrib packages "
"</ref/contrib/index>`, for example ``auth``, ``admin``, or ``messages``."
msgstr ""

# d5d832506c6e4b80a361201ecbc981ce
#: ../../../../1.8/docs/intro/reusable-apps.txt:141
msgid "Move the ``polls`` directory into the ``django-polls`` directory."
msgstr ""

# db6cdea6bed7470abb0b0223e431ff9e
#: ../../../../1.8/docs/intro/reusable-apps.txt:143
msgid "Create a file ``django-polls/README.rst`` with the following contents:"
msgstr ""

# 902babe5807f4d02856096a97cf56dd5
#: ../../../../1.8/docs/intro/reusable-apps.txt:178
msgid ""
"Create a ``django-polls/LICENSE`` file. Choosing a license is beyond the "
"scope of this tutorial, but suffice it to say that code released publicly "
"without a license is *useless*. Django and many Django-compatible apps are "
"distributed under the BSD license; however, you're free to pick your own "
"license. Just be aware that your licensing choice will affect who is able to"
" use your code."
msgstr ""

# fa850bf2383442d086aac0c8c902e24d
#: ../../../../1.8/docs/intro/reusable-apps.txt:185
msgid ""
"Next we'll create a ``setup.py`` file which provides details about how to "
"build and install the app.  A full explanation of this file is beyond the "
"scope of this tutorial, but the `setuptools docs "
"<http://pythonhosted.org/setuptools/setuptools.html>`_ have a good "
"explanation. Create a file ``django-polls/setup.py`` with the following "
"contents:"
msgstr ""

# 9b52d53c31bc473cb9d4817af4b7169e
#: ../../../../1.8/docs/intro/reusable-apps.txt:231
msgid ""
"Only Python modules and packages are included in the package by default. To "
"include additional files, we'll need to create a ``MANIFEST.in`` file. The "
"setuptools docs referred to in the previous step discuss this file in more "
"details. To include the templates, the ``README.rst`` and our ``LICENSE`` "
"file, create a file ``django-polls/MANIFEST.in`` with the following "
"contents:"
msgstr ""

# be468cfb78204113989eb5c9199dd0a5
#: ../../../../1.8/docs/intro/reusable-apps.txt:246
msgid ""
"It's optional, but recommended, to include detailed documentation with your "
"app. Create an empty directory ``django-polls/docs`` for future "
"documentation. Add an additional line to ``django-polls/MANIFEST.in``::"
msgstr ""

# 4d8cbad4e3004a9480c1595510c3fb5e
#: ../../../../1.8/docs/intro/reusable-apps.txt:252
msgid ""
"Note that the ``docs`` directory won't be included in your package unless "
"you add some files to it. Many Django apps also provide their documentation "
"online through sites like `readthedocs.org <https://readthedocs.org>`_."
msgstr ""

# aba73d58dcb9478695de374ccd1851c6
#: ../../../../1.8/docs/intro/reusable-apps.txt:256
msgid ""
"Try building your package with ``python setup.py sdist`` (run from inside "
"``django-polls``). This creates a directory called ``dist`` and builds your "
"new package, ``django-polls-0.1.tar.gz``."
msgstr ""

# b2fbf42fb3434b28acade6f0811ca4c4
#: ../../../../1.8/docs/intro/reusable-apps.txt:260
msgid ""
"For more information on packaging, see Python's `Tutorial on Packaging and "
"Distributing Projects "
"<https://packaging.python.org/en/latest/distributing.html>`_."
msgstr ""

# 4ec4994e0865467892577f82d95360fc
#: ../../../../1.8/docs/intro/reusable-apps.txt:264
msgid "Using your own package"
msgstr ""

# 45c7e6c68ce34e58ba0be0a15b3b4b6a
#: ../../../../1.8/docs/intro/reusable-apps.txt:266
msgid ""
"Since we moved the ``polls`` directory out of the project, it's no longer "
"working. We'll now fix this by installing our new ``django-polls`` package."
msgstr ""

# 849f5439c84744d09acf1cc8fb7aa6af
#: ../../../../1.8/docs/intro/reusable-apps.txt:269
msgid "Installing as a user library"
msgstr ""

# 7689da1530fc43b5b94650440219b541
#: ../../../../1.8/docs/intro/reusable-apps.txt:271
msgid ""
"The following steps install ``django-polls`` as a user library. Per-user "
"installs have a lot of advantages over installing the package system-wide, "
"such as being usable on systems where you don't have administrator access as"
" well as preventing the package from affecting system services and other "
"users of the machine."
msgstr ""

# e073eec8ff92424e857138b146c91c07
#: ../../../../1.8/docs/intro/reusable-apps.txt:277
msgid ""
"Note that per-user installations can still affect the behavior of system "
"tools that run as that user, so ``virtualenv`` is a more robust solution "
"(see below)."
msgstr ""

# 998f984d836f462e8ffbed083e2c4dc1
#: ../../../../1.8/docs/intro/reusable-apps.txt:281
msgid ""
"To install the package, use pip (you already :ref:`installed it <installing-"
"reusable-apps-prerequisites>`, right?)::"
msgstr ""

# 27150892afa44129a07c6a56a94e2f31
#: ../../../../1.8/docs/intro/reusable-apps.txt:286
msgid ""
"With luck, your Django project should now work correctly again. Run the "
"server again to confirm this."
msgstr ""

# 0afaf2c0b5b945b29421a76fca65c648
#: ../../../../1.8/docs/intro/reusable-apps.txt:289
msgid "To uninstall the package, use pip::"
msgstr ""

# 218a99f3768349b083bfe09eca142f2d
#: ../../../../1.8/docs/intro/reusable-apps.txt:296
msgid "Publishing your app"
msgstr ""

# fcce539c5f9c496a97e3a99077457713
#: ../../../../1.8/docs/intro/reusable-apps.txt:298
msgid ""
"Now that we've packaged and tested ``django-polls``, it's ready to share "
"with the world! If this wasn't just an example, you could now:"
msgstr ""

# 66a6d8f10c2b48afa35132ea48f299a2
#: ../../../../1.8/docs/intro/reusable-apps.txt:301
msgid "Email the package to a friend."
msgstr ""

# 3868d723a0a24b6e833387736ea72b07
#: ../../../../1.8/docs/intro/reusable-apps.txt:303
msgid "Upload the package on your Web site."
msgstr ""

# 5d17ac862c8c445984d13cc2bc321936
#: ../../../../1.8/docs/intro/reusable-apps.txt:305
msgid ""
"Post the package on a public repository, such as `the Python Package Index "
"(PyPI)`_. `packaging.python.org <https://packaging.python.org>`_ has `a good"
" tutorial <https://packaging.python.org/en/latest/distributing.html"
"#uploading-your-project-to-pypi>`_ for doing this."
msgstr ""

# a25855a0c8e4449ba012c1f2c19d0f7c
#: ../../../../1.8/docs/intro/reusable-apps.txt:311
msgid "Installing Python packages with virtualenv"
msgstr ""

# 859304b1164940c8ab31fb31425f43af
#: ../../../../1.8/docs/intro/reusable-apps.txt:313
msgid ""
"Earlier, we installed the polls app as a user library. This has some "
"disadvantages:"
msgstr ""

# 6501eb9ed4af4694bfe40068a1c40fa1
#: ../../../../1.8/docs/intro/reusable-apps.txt:316
msgid ""
"Modifying the user libraries can affect other Python software on your "
"system."
msgstr ""

# 3d1f7bc3bde94fdc9d2799b732d01c48
#: ../../../../1.8/docs/intro/reusable-apps.txt:318
msgid ""
"You won't be able to run multiple versions of this package (or others with "
"the same name)."
msgstr ""

# 9c3e0860b80c4ad5916f76706f453fc0
#: ../../../../1.8/docs/intro/reusable-apps.txt:321
msgid ""
"Typically, these situations only arise once you're maintaining several "
"Django projects. When they do, the best solution is to use `virtualenv "
"<http://www.virtualenv.org/>`_. This tool allows you to maintain multiple "
"isolated Python environments, each with its own copy of the libraries and "
"package namespace."
msgstr ""

# 76e491cf464c40bcb056bc1cacb60281
#: ../../../../1.8/docs/intro/tutorial01.txt:3
msgid "Writing your first Django app, part 1"
msgstr ""

# 4d9962dae4f34cd8bbe1c01d855851ed
#: ../../../../1.8/docs/intro/tutorial01.txt:5
msgid "Let's learn by example."
msgstr ""

# c4c9a20152594014804bc2f1c7e06513
#: ../../../../1.8/docs/intro/tutorial01.txt:7
msgid ""
"Throughout this tutorial, we'll walk you through the creation of a basic "
"poll application."
msgstr ""

# 01f7891816ba47d68348a956247990d8
#: ../../../../1.8/docs/intro/tutorial01.txt:10
msgid "It'll consist of two parts:"
msgstr ""

# 63b9e05552a5410b8c5d2c918b94cce4
#: ../../../../1.8/docs/intro/tutorial01.txt:12
msgid "A public site that lets people view polls and vote in them."
msgstr ""

# 66f7025c1a2d432ab2f5490dcd743d6a
#: ../../../../1.8/docs/intro/tutorial01.txt:13
msgid "An admin site that lets you add, change and delete polls."
msgstr ""

# 1591643ea88247bf9e7b350f4b85de2a
#: ../../../../1.8/docs/intro/tutorial01.txt:15
msgid ""
"We'll assume you have :doc:`Django installed </intro/install>` already. You "
"can tell Django is installed and which version by running the following "
"command:"
msgstr ""

# 3ac1b877904c448dbed3c004ff96bb45
#: ../../../../1.8/docs/intro/tutorial01.txt:22
msgid ""
"If Django is installed, you should see the version of your installation. If "
"it isn't, you'll get an error telling \"No module named django\"."
msgstr ""

# b706e5d25c81470fb094a201d1d5bced
#: ../../../../1.8/docs/intro/tutorial01.txt:25
msgid ""
"This tutorial is written for Django |version| and Python 3.2 or later. If "
"the Django version doesn't match, you can refer to the tutorial for your "
"version of Django by using the version switcher at the bottom right corner "
"of this page, or update Django to the newest version. If you are still using"
" Python 2.7, you will need to adjust the code samples slightly, as described"
" in comments."
msgstr ""

# 603e0684fbd34bf39d6f99330e1dd773
#: ../../../../1.8/docs/intro/tutorial01.txt:32
msgid ""
"See :doc:`How to install Django </topics/install>` for advice on how to "
"remove older versions of Django and install a newer one."
msgstr ""

# ef06dae18c8f4c7d868535fe28c418c8
#: ../../../../1.8/docs/intro/tutorial01.txt:37
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to |django-users| or drop by `#django on irc.freenode.net "
"<irc://irc.freenode.net/django>`_ to chat with other Django users who might "
"be able to help."
msgstr ""

# 33352369e9d44b378ff019d1fc112ca7
#: ../../../../1.8/docs/intro/tutorial01.txt:43
msgid "Creating a project"
msgstr ""

# 1973d5aab24d4e9882ed1f722c42af4b
#: ../../../../1.8/docs/intro/tutorial01.txt:45
msgid ""
"If this is your first time using Django, you'll have to take care of some "
"initial setup. Namely, you'll need to auto-generate some code that "
"establishes a Django :term:`project` -- a collection of settings for an "
"instance of Django, including database configuration, Django-specific "
"options and application-specific settings."
msgstr ""

# 0cf1a46344134087a47e2c81497ed2fa
#: ../../../../1.8/docs/intro/tutorial01.txt:51
msgid ""
"From the command line, ``cd`` into a directory where you'd like to store "
"your code, then run the following command:"
msgstr ""

# 5f2b115e10b647a28c410e0a51e57e08
#: ../../../../1.8/docs/intro/tutorial01.txt:58
msgid ""
"This will create a ``mysite`` directory in your current directory. If it "
"didn't work, see :ref:`troubleshooting-django-admin`."
msgstr ""

# a1fa90055e044ce09fd78f9dc904fa6b
#: ../../../../1.8/docs/intro/tutorial01.txt:63
msgid ""
"You'll need to avoid naming projects after built-in Python or Django "
"components. In particular, this means you should avoid using names like "
"``django`` (which will conflict with Django itself) or ``test`` (which "
"conflicts with a built-in Python package)."
msgstr ""

# dc042557bd4c476c8ed048bab8aa4f15
#: ../../../../1.8/docs/intro/tutorial01.txt:68
msgid "Where should this code live?"
msgstr ""

# 3db549d7dc984f0eac0edef4dc8d5fd6
#: ../../../../1.8/docs/intro/tutorial01.txt:70
msgid ""
"If your background is in plain old PHP (with no use of modern frameworks), "
"you're probably used to putting code under the Web server's document root "
"(in a place such as ``/var/www``). With Django, you don't do that. It's not "
"a good idea to put any of this Python code within your Web server's document"
" root, because it risks the possibility that people may be able to view your"
" code over the Web. That's not good for security."
msgstr ""

# 73219ab560ed4433afe37a3806afad53
#: ../../../../1.8/docs/intro/tutorial01.txt:77
msgid ""
"Put your code in some directory **outside** of the document root, such as "
":file:`/home/mycode`."
msgstr ""

# eadb336b13c34057a95f9d7efdc70bf5
#: ../../../../1.8/docs/intro/tutorial01.txt:80
msgid "Let's look at what :djadmin:`startproject` created::"
msgstr ""

# 67b25000923d47929c7a9dc646feec3b
#: ../../../../1.8/docs/intro/tutorial01.txt:90
msgid "These files are:"
msgstr ""

# 247e36680e4f4850884294d2c292c403
#: ../../../../1.8/docs/intro/tutorial01.txt:92
msgid ""
"The outer :file:`mysite/` root directory is just a container for your "
"project. Its name doesn't matter to Django; you can rename it to anything "
"you like."
msgstr ""

# 30f7c3afc7f34a4985841b8a39a31f98
#: ../../../../1.8/docs/intro/tutorial01.txt:96
msgid ""
":file:`manage.py`: A command-line utility that lets you interact with this "
"Django project in various ways. You can read all the details about "
":file:`manage.py` in :doc:`/ref/django-admin`."
msgstr ""

# 5ad6620d669e4362bd04cd1273337873
#: ../../../../1.8/docs/intro/tutorial01.txt:100
msgid ""
"The inner :file:`mysite/` directory is the actual Python package for your "
"project. Its name is the Python package name you'll need to use to import "
"anything inside it (e.g. ``mysite.urls``)."
msgstr ""

# c8faedbfec7a4645984e0d251ba0f3f7
#: ../../../../1.8/docs/intro/tutorial01.txt:104
msgid ""
":file:`mysite/__init__.py`: An empty file that tells Python that this "
"directory should be considered a Python package. (Read `more about "
"packages`_ in the official Python docs if you're a Python beginner.)"
msgstr ""

# 437bf859af594fe1a772293745307004
#: ../../../../1.8/docs/intro/tutorial01.txt:108
msgid ""
":file:`mysite/settings.py`: Settings/configuration for this Django project."
"  :doc:`/topics/settings` will tell you all about how settings work."
msgstr ""

# 3991e25b839644f2bd8eaf7dac89e4d4
#: ../../../../1.8/docs/intro/tutorial01.txt:112
msgid ""
":file:`mysite/urls.py`: The URL declarations for this Django project; a "
"\"table of contents\" of your Django-powered site. You can read more about "
"URLs in :doc:`/topics/http/urls`."
msgstr ""

# 1303dbc1b63d42d3be36b936d86b8899
#: ../../../../1.8/docs/intro/tutorial01.txt:116
msgid ""
":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible web servers to "
"serve your project. See :doc:`/howto/deployment/wsgi/index` for more "
"details."
msgstr ""

# 2e29c3e202fd4b51a85fc8f92a114249
#: ../../../../1.8/docs/intro/tutorial01.txt:122
msgid "Database setup"
msgstr ""

# ddc5655629a44ee88c94e1b563dbb5b8
#: ../../../../1.8/docs/intro/tutorial01.txt:124
msgid ""
"Now, open up :file:`mysite/settings.py`. It's a normal Python module with "
"module-level variables representing Django settings."
msgstr ""

# 0aed22a0625f46a3add4c091a9933c0d
#: ../../../../1.8/docs/intro/tutorial01.txt:127
msgid ""
"By default, the configuration uses SQLite. If you're new to databases, or "
"you're just interested in trying Django, this is the easiest choice. SQLite "
"is included in Python, so you won't need to install anything else to support"
" your database. When starting your first real project, however, you may want"
" to use a more robust database like PostgreSQL, to avoid database-switching "
"headaches down the road."
msgstr ""

# 6cbc6cf0dd374472abf7ad43eace367f
#: ../../../../1.8/docs/intro/tutorial01.txt:134
msgid ""
"If you wish to use another database, install the appropriate :ref:`database "
"bindings <database-installation>`, and change the following keys in the "
":setting:`DATABASES` ``'default'`` item to match your database connection "
"settings:"
msgstr ""

# 07c4e0bdec204e1f8d9edfe99844e09b
#: ../../../../1.8/docs/intro/tutorial01.txt:139
msgid ""
":setting:`ENGINE <DATABASE-ENGINE>` -- Either "
"``'django.db.backends.sqlite3'``, "
"``'django.db.backends.postgresql_psycopg2'``, "
"``'django.db.backends.mysql'``, or ``'django.db.backends.oracle'``. Other "
"backends are :ref:`also available <third-party-notes>`."
msgstr ""

# ac1dbcd78db94656a5823b89be099534
#: ../../../../1.8/docs/intro/tutorial01.txt:146
msgid ""
":setting:`NAME` -- The name of your database. If you're using SQLite, the "
"database will be a file on your computer; in that case, :setting:`NAME` "
"should be the full absolute path, including filename, of that file. The "
"default value, ``os.path.join(BASE_DIR, 'db.sqlite3')``, will store the file"
" in your project directory."
msgstr ""

# 336b52d543df4685b58bac639bffc21f
#: ../../../../1.8/docs/intro/tutorial01.txt:152
msgid ""
"If you are not using SQLite as your database, additional settings such as "
":setting:`USER`, :setting:`PASSWORD`, :setting:`HOST` must be added. For "
"more details, see the reference documentation for :setting:`DATABASES`."
msgstr ""

# 7fbae06aedf44c039b4da024e1f1da3b
#: ../../../../1.8/docs/intro/tutorial01.txt:157
msgid ""
"If you're using PostgreSQL or MySQL, make sure you've created a database by "
"this point. Do that with \"``CREATE DATABASE database_name;``\" within your "
"database's interactive prompt."
msgstr ""

# 90f644f607104397972360ab5ae48a48
#: ../../../../1.8/docs/intro/tutorial01.txt:161
msgid ""
"If you're using SQLite, you don't need to create anything beforehand - the "
"database file will be created automatically when it is needed."
msgstr ""

# af5c11c6ea594f35a903cfaaea0c8112
#: ../../../../1.8/docs/intro/tutorial01.txt:164
msgid ""
"While you're editing :file:`mysite/settings.py`, set :setting:`TIME_ZONE` to"
" your time zone."
msgstr ""

# d70229e579544bba997a6928ca8cc4d7
#: ../../../../1.8/docs/intro/tutorial01.txt:167
msgid ""
"Also, note the :setting:`INSTALLED_APPS` setting at the top of the file. "
"That holds the names of all Django applications that are activated in this "
"Django instance. Apps can be used in multiple projects, and you can package "
"and distribute them for use by others in their projects."
msgstr ""

# c02465c262ce45d3a477ed431f8610e6
#: ../../../../1.8/docs/intro/tutorial01.txt:172
msgid ""
"By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
"which come with Django:"
msgstr ""

# 4fc4c0e4692145cc96f2a4dd8d88ceb3
#: ../../../../1.8/docs/intro/tutorial01.txt:175
msgid ""
":mod:`django.contrib.admin` -- The admin site. You'll use it in :doc:`part 2"
" of this tutorial </intro/tutorial02>`."
msgstr ""

# 09c2692a73674724801c942097d0c69e
#: ../../../../1.8/docs/intro/tutorial01.txt:178
msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ""

# d7a0938a01aa4ce9ba6617dd04d0ca0a
#: ../../../../1.8/docs/intro/tutorial01.txt:180
msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ""

# 85f4f53e37aa43548c0e58b413936772
#: ../../../../1.8/docs/intro/tutorial01.txt:182
msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ""

# e4c3ba0b781e48478df72ae94b33813d
#: ../../../../1.8/docs/intro/tutorial01.txt:184
msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ""

# 4567d5222e9540ccb8671f20e6caf822
#: ../../../../1.8/docs/intro/tutorial01.txt:186
msgid ""
":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ""

# 6b03db441ea3487e9a1680190be24b01
#: ../../../../1.8/docs/intro/tutorial01.txt:189
msgid ""
"These applications are included by default as a convenience for the common "
"case."
msgstr ""

# 7080aa4cd87d4137b4ca5ed97d463d8b
#: ../../../../1.8/docs/intro/tutorial01.txt:191
msgid ""
"Some of these applications make use of at least one database table, though, "
"so we need to create the tables in the database before we can use them. To "
"do that, run the following command:"
msgstr ""

# c0b63f6a168c4617a9a9b4758b31f1e7
#: ../../../../1.8/docs/intro/tutorial01.txt:199
msgid ""
"The :djadmin:`migrate` command looks at the :setting:`INSTALLED_APPS` "
"setting and creates any necessary database tables according to the database "
"settings in your :file:`mysite/settings.py` file and the database migrations"
" shipped with the app (we'll cover those later). You'll see a message for "
"each migration it applies. If you're interested, run the command-line client"
" for your database and type ``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL),"
" or ``.schema`` (SQLite) to display the tables Django created."
msgstr ""

# 1c37b08c510045ad9e35a95e8811f2bc
#: ../../../../1.8/docs/intro/tutorial01.txt:207
msgid "For the minimalists"
msgstr ""

# 06bd7aaab6c04303a70767f078c53c63
#: ../../../../1.8/docs/intro/tutorial01.txt:209
msgid ""
"Like we said above, the default applications are included for the common "
"case, but not everybody needs them. If you don't need any or all of them, "
"feel free to comment-out or delete the appropriate line(s) from "
":setting:`INSTALLED_APPS` before running :djadmin:`migrate`. The "
":djadmin:`migrate` command will only run migrations for apps in "
":setting:`INSTALLED_APPS`."
msgstr ""

# 29a3e29874fe48ca8dbbb1db0302d1eb
#: ../../../../1.8/docs/intro/tutorial01.txt:217
msgid "The development server"
msgstr ""

# 9aa51cc3b9a54af59a6c94cddeb0c8a8
#: ../../../../1.8/docs/intro/tutorial01.txt:219
msgid ""
"Let's verify your Django project works. Change into the outer :file:`mysite`"
" directory, if you haven't already, and run the following commands:"
msgstr ""

# c21af65ab9c644e88f8de843855cdefd
#: ../../../../1.8/docs/intro/tutorial01.txt:226
msgid "You'll see the following output on the command line:"
msgstr ""

# 9568ae562997429abd28555288defbda
#: ../../../../1.8/docs/intro/tutorial01.txt:238
msgid ""
"You've started the Django development server, a lightweight Web server "
"written purely in Python. We've included this with Django so you can develop"
" things rapidly, without having to deal with configuring a production server"
" -- such as Apache -- until you're ready for production."
msgstr ""

# 729257326f46415abfed4e81a1a434c5
#: ../../../../1.8/docs/intro/tutorial01.txt:243
msgid ""
"Now's a good time to note: **don't** use this server in anything resembling "
"a production environment. It's intended only for use while developing. "
"(We're in the business of making Web frameworks, not Web servers.)"
msgstr ""

# 047cc6ae7c104215b192a8737c0746e3
#: ../../../../1.8/docs/intro/tutorial01.txt:247
msgid ""
"Now that the server's running, visit http://127.0.0.1:8000/ with your Web "
"browser. You'll see a \"Welcome to Django\" page, in pleasant, light-blue "
"pastel. It worked!"
msgstr ""

# 214ec3de6f804f4ca9bcaa39c7d4798f
#: ../../../../1.8/docs/intro/tutorial01.txt:251
msgid "Changing the port"
msgstr ""

# 68f146f782a04ad6b2ba86dc30e77366
#: ../../../../1.8/docs/intro/tutorial01.txt:253
msgid ""
"By default, the :djadmin:`runserver` command starts the development server "
"on the internal IP at port 8000."
msgstr ""

# 9d1a8b17550b4b69a756c209954094e8
#: ../../../../1.8/docs/intro/tutorial01.txt:256
msgid ""
"If you want to change the server's port, pass it as a command-line argument."
" For instance, this command starts the server on port 8080:"
msgstr ""

# 1350d55e87d94aebbb0589ac0abdf286
#: ../../../../1.8/docs/intro/tutorial01.txt:264
msgid ""
"If you want to change the server's IP, pass it along with the port. So to "
"listen on all public IPs (useful if you want to show off your work on other "
"computers on your network), use:"
msgstr ""

# 3a5a464ba1c24c8c810d73a59bc34e60
#: ../../../../1.8/docs/intro/tutorial01.txt:272
msgid ""
"Full docs for the development server can be found in the "
":djadmin:`runserver` reference."
msgstr ""

# 07042f6e790d4b3d9635432e1d205bfe
#: ../../../../1.8/docs/intro/tutorial01.txt:275
msgid "Automatic reloading of :djadmin:`runserver`"
msgstr ""

# 928d64e1d5ff4187a3d38a443dccc79c
#: ../../../../1.8/docs/intro/tutorial01.txt:277
msgid ""
"The development server automatically reloads Python code for each request as"
" needed. You don't need to restart the server for code changes to take "
"effect. However, some actions like adding files don't trigger a restart, so "
"you'll have to restart the server in these cases."
msgstr ""

# 7170b84c4126440da01ecf68f32d3560
#: ../../../../1.8/docs/intro/tutorial01.txt:285
msgid "Creating models"
msgstr ""

# a11f8a559af24f55818a9c5155c1bb03
#: ../../../../1.8/docs/intro/tutorial01.txt:287
msgid ""
"Now that your environment -- a \"project\" -- is set up, you're set to start"
" doing work."
msgstr ""

# 5cc6d926718546d4b5fd62a9c1cd5359
#: ../../../../1.8/docs/intro/tutorial01.txt:290
msgid ""
"Each application you write in Django consists of a Python package that "
"follows a certain convention. Django comes with a utility that automatically"
" generates the basic directory structure of an app, so you can focus on "
"writing code rather than creating directories."
msgstr ""

# bdac1d64040945d8987f8945f049a23c
#: ../../../../1.8/docs/intro/tutorial01.txt:295
msgid "Projects vs. apps"
msgstr ""

# 5ce3dcbab4a44c0dac0794675aa85f8b
#: ../../../../1.8/docs/intro/tutorial01.txt:297
msgid ""
"What's the difference between a project and an app? An app is a Web "
"application that does something -- e.g., a Weblog system, a database of "
"public records or a simple poll app. A project is a collection of "
"configuration and apps for a particular Web site. A project can contain "
"multiple apps. An app can be in multiple projects."
msgstr ""

# f03331fb13a84e23a4b76a97391b2fc9
#: ../../../../1.8/docs/intro/tutorial01.txt:303
msgid ""
"Your apps can live anywhere on your `Python path`_. In this tutorial, we'll "
"create our poll app right next to your :file:`manage.py` file so that it can"
" be imported as its own top-level module, rather than a submodule of "
"``mysite``."
msgstr ""

# 1860387099a84147afe28811cd538fd4
#: ../../../../1.8/docs/intro/tutorial01.txt:307
msgid ""
"To create your app, make sure you're in the same directory as "
":file:`manage.py` and type this command:"
msgstr ""

# 195739c2f20e4a389010d312036e0580
#: ../../../../1.8/docs/intro/tutorial01.txt:314
msgid ""
"That'll create a directory :file:`polls`, which is laid out like this::"
msgstr ""

# 6a30a803897f4e7391218522292bffb6
#: ../../../../1.8/docs/intro/tutorial01.txt:325
msgid "This directory structure will house the poll application."
msgstr ""

# 87eb380a1fcc4fc1b05b3a64056c495c
#: ../../../../1.8/docs/intro/tutorial01.txt:327
msgid ""
"The first step in writing a database Web app in Django is to define your "
"models -- essentially, your database layout, with additional metadata."
msgstr ""

# f20fe7622ca44638a17ebe23c5f67642
# 222d65199ab0476fb7899fa56a848d33
# 24512d478d1d42609b5000d34e074e03
# 47146ce8233b43efbb437ff5167b5fed
# 093e587c6574428eb11ba4071fcba239
#: ../../../../1.8/docs/intro/tutorial01.txt:330
#: ../../../../1.8/docs/intro/tutorial01.txt:414
#: ../../../../1.8/docs/intro/tutorial02.txt:9
#: ../../../../1.8/docs/intro/tutorial03.txt:10
#: ../../../../1.8/docs/intro/tutorial03.txt:486
msgid "Philosophy"
msgstr ""

# 80cd696e5f2e4ba0ae9edf3a799e0522
#: ../../../../1.8/docs/intro/tutorial01.txt:332
msgid ""
"A model is the single, definitive source of truth about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Django follows the :ref:`DRY Principle <dry>`. The goal is to define your "
"data model in one place and automatically derive things from it."
msgstr ""

# f77a2debbed84de3ba84ad101efb8ede
#: ../../../../1.8/docs/intro/tutorial01.txt:337
msgid ""
"This includes the migrations - unlike in Ruby On Rails, for example, "
"migrations are entirely derived from your models file, and are essentially "
"just a history that Django can roll through to update your database schema "
"to match your current models."
msgstr ""

# 1c6f2f1dc1a14fba9f0b856262f7e2dd
#: ../../../../1.8/docs/intro/tutorial01.txt:342
msgid ""
"In our simple poll app, we'll create two models: ``Question`` and "
"``Choice``. A ``Question`` has a question and a publication date. A "
"``Choice`` has two fields: the text of the choice and a vote tally. Each "
"``Choice`` is associated with a ``Question``."
msgstr ""

# c02972e2e46d483f94af7a0ab77a7302
#: ../../../../1.8/docs/intro/tutorial01.txt:347
msgid ""
"These concepts are represented by simple Python classes. Edit the "
":file:`polls/models.py` file so it looks like this:"
msgstr ""

# a0b175041ae14b0cb6a9bc808afbdb48
#: ../../../../1.8/docs/intro/tutorial01.txt:366
msgid ""
"The code is straightforward. Each model is represented by a class that "
"subclasses :class:`django.db.models.Model`. Each model has a number of class"
" variables, each of which represents a database field in the model."
msgstr ""

# 338ac26441c545639071f16f3465a319
#: ../../../../1.8/docs/intro/tutorial01.txt:370
msgid ""
"Each field is represented by an instance of a "
":class:`~django.db.models.Field` class -- e.g., "
":class:`~django.db.models.CharField` for character fields and "
":class:`~django.db.models.DateTimeField` for datetimes. This tells Django "
"what type of data each field holds."
msgstr ""

# 46fb809d69af4722ac460b818ebca7c5
#: ../../../../1.8/docs/intro/tutorial01.txt:375
msgid ""
"The name of each :class:`~django.db.models.Field` instance (e.g. "
"``question_text`` or ``pub_date``) is the field's name, in machine-friendly "
"format. You'll use this value in your Python code, and your database will "
"use it as the column name."
msgstr ""

# 67dad4aea12c4ee096cfeb5278864097
#: ../../../../1.8/docs/intro/tutorial01.txt:379
msgid ""
"You can use an optional first positional argument to a "
":class:`~django.db.models.Field` to designate a human-readable name. That's "
"used in a couple of introspective parts of Django, and it doubles as "
"documentation. If this field isn't provided, Django will use the machine-"
"readable name. In this example, we've only defined a human-readable name for"
" ``Question.pub_date``. For all other fields in this model, the field's "
"machine-readable name will suffice as its human-readable name."
msgstr ""

# 292e092fecd1406db4f051f5b9f87bde
#: ../../../../1.8/docs/intro/tutorial01.txt:387
msgid ""
"Some :class:`~django.db.models.Field` classes have required arguments. "
":class:`~django.db.models.CharField`, for example, requires that you give it"
" a :attr:`~django.db.models.CharField.max_length`. That's used not only in "
"the database schema, but in validation, as we'll soon see."
msgstr ""

# 10f01f9a3c204907b429e12a1bb200c1
#: ../../../../1.8/docs/intro/tutorial01.txt:392
msgid ""
"A :class:`~django.db.models.Field` can also have various optional arguments;"
" in this case, we've set the :attr:`~django.db.models.Field.default` value "
"of ``votes`` to 0."
msgstr ""

# 497a493bbe3047f4bc48e3be7d6154da
#: ../../../../1.8/docs/intro/tutorial01.txt:396
msgid ""
"Finally, note a relationship is defined, using "
":class:`~django.db.models.ForeignKey`. That tells Django each ``Choice`` is "
"related to a single ``Question``. Django supports all the common database "
"relationships: many-to-one, many-to-many and one-to-one."
msgstr ""

# b1f074b150d4458c9f6b55ea4acb8fcd
#: ../../../../1.8/docs/intro/tutorial01.txt:404
msgid "Activating models"
msgstr ""

# e7fec407332a4e279d3d225e8fdb8a0e
#: ../../../../1.8/docs/intro/tutorial01.txt:406
msgid ""
"That small bit of model code gives Django a lot of information. With it, "
"Django is able to:"
msgstr ""

# 81757f696a9946c1a5a42cdc05ec5a5c
#: ../../../../1.8/docs/intro/tutorial01.txt:409
msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""

# 772283b4e59b4beba6c69597c3cd5078
#: ../../../../1.8/docs/intro/tutorial01.txt:410
msgid ""
"Create a Python database-access API for accessing ``Question`` and "
"``Choice`` objects."
msgstr ""

# fcbd238a00da4cef8abe7e75a58c81c6
#: ../../../../1.8/docs/intro/tutorial01.txt:412
msgid ""
"But first we need to tell our project that the ``polls`` app is installed."
msgstr ""

# d774d24971e542ba82498e347e382a24
#: ../../../../1.8/docs/intro/tutorial01.txt:416
msgid ""
"Django apps are \"pluggable\": You can use an app in multiple projects, and "
"you can distribute apps, because they don't have to be tied to a given "
"Django installation."
msgstr ""

# 17484d184fc045fb8e553cfbeb3a4d7a
#: ../../../../1.8/docs/intro/tutorial01.txt:420
msgid ""
"Edit the :file:`mysite/settings.py` file again, and change the "
":setting:`INSTALLED_APPS` setting to include the string ``'polls'``. So "
"it'll look like this:"
msgstr ""

# d907722b63c14f47a734c68e1bc22b9b
#: ../../../../1.8/docs/intro/tutorial01.txt:437
msgid ""
"Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""

# f138c211a485490599468fb2ad9f9493
#: ../../../../1.8/docs/intro/tutorial01.txt:443
msgid "You should see something similar to the following:"
msgstr ""

# 69980338ac9649e2bce55531df87374f
#: ../../../../1.8/docs/intro/tutorial01.txt:453
msgid ""
"By running ``makemigrations``, you're telling Django that you've made some "
"changes to your models (in this case, you've made new ones) and that you'd "
"like the changes to be stored as a *migration*."
msgstr ""

# d52a89031aef419387195b4be5e10597
#: ../../../../1.8/docs/intro/tutorial01.txt:457
msgid ""
"Migrations are how Django stores changes to your models (and thus your "
"database schema) - they're just files on disk. You can read the migration "
"for your new model if you like; it's the file "
"``polls/migrations/0001_initial.py``. Don't worry, you're not expected to "
"read them every time Django makes one, but they're designed to be human-"
"editable in case you want to manually tweak how Django changes things."
msgstr ""

# d6eec0f3d1444dba817bebdbee7dc473
#: ../../../../1.8/docs/intro/tutorial01.txt:464
msgid ""
"There's a command that will run the migrations for you and manage your "
"database schema automatically - that's called :djadmin:`migrate`, and we'll "
"come to it in a moment - but first, let's see what SQL that migration would "
"run. The :djadmin:`sqlmigrate` command takes migration names and returns "
"their SQL:"
msgstr ""

# fea30fa50f4f429cb12b4beba59add32
#: ../../../../1.8/docs/intro/tutorial01.txt:473
msgid ""
"You should see something similar to the following (we've reformatted it for "
"readability):"
msgstr ""

# d208b75429c24d7fa871310e154636ab
#: ../../../../1.8/docs/intro/tutorial01.txt:500
msgid "Note the following:"
msgstr ""

# a92b1ee2517d406f9d9fabfe2bc83d37
#: ../../../../1.8/docs/intro/tutorial01.txt:502
msgid ""
"The exact output will vary depending on the database you are using. The "
"example above is generated for PostgreSQL."
msgstr ""

# 5ca9861e5ce8448ca22d1e92b0bc024b
#: ../../../../1.8/docs/intro/tutorial01.txt:505
msgid ""
"Table names are automatically generated by combining the name of the app "
"(``polls``) and the lowercase name of the model -- ``question`` and "
"``choice``. (You can override this behavior.)"
msgstr ""

# 8304a53e370646f7893401fc8cd7af7d
#: ../../../../1.8/docs/intro/tutorial01.txt:509
msgid ""
"Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""

# 05f85a6905954769befaea6e5eff68e9
#: ../../../../1.8/docs/intro/tutorial01.txt:511
msgid ""
"By convention, Django appends ``\"_id\"`` to the foreign key field name. "
"(Yes, you can override this, as well.)"
msgstr ""

# 8c61fb05f01749ec8976421e31580f2c
#: ../../../../1.8/docs/intro/tutorial01.txt:514
msgid ""
"The foreign key relationship is made explicit by a ``FOREIGN KEY`` "
"constraint. Don't worry about the ``DEFERRABLE`` parts; that's just telling "
"PostgreSQL to not enforce the foreign key until the end of the transaction."
msgstr ""

# 99df6bcb724c41ebb0e48ea3b6e2dd69
#: ../../../../1.8/docs/intro/tutorial01.txt:518
msgid ""
"It's tailored to the database you're using, so database-specific field types"
" such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer "
"primary key autoincrement`` (SQLite) are handled for you automatically. Same"
" goes for the quoting of field names -- e.g., using double quotes or single "
"quotes."
msgstr ""

# 0b708c665d96402cbd0523b762be00b2
#: ../../../../1.8/docs/intro/tutorial01.txt:524
msgid ""
"The :djadmin:`sqlmigrate` command doesn't actually run the migration on your"
" database - it just prints it to the screen so that you can see what SQL "
"Django thinks is required. It's useful for checking what Django is going to "
"do or if you have database administrators who require SQL scripts for "
"changes."
msgstr ""

# 848a69cf77aa45c5a0d26b4d3c6f2d0c
#: ../../../../1.8/docs/intro/tutorial01.txt:530
msgid ""
"If you're interested, you can also run :djadmin:`python manage.py check "
"<check>`; this checks for any problems in your project without making "
"migrations or touching the database."
msgstr ""

# 9e532a7beae245a4b6c94af5fba5f4a7
#: ../../../../1.8/docs/intro/tutorial01.txt:534
msgid ""
"Now, run :djadmin:`migrate` again to create those model tables in your "
"database:"
msgstr ""

# 96e8e66d01ba4d6a95fbe16217bf9500
#: ../../../../1.8/docs/intro/tutorial01.txt:550
msgid ""
"The :djadmin:`migrate` command takes all the migrations that haven't been "
"applied (Django tracks which ones are applied using a special table in your "
"database called ``django_migrations``) and runs them against your database -"
" essentially, synchronizing the changes you made to your models with the "
"schema in the database."
msgstr ""

# 1143b2333316429dbabd3ccdf4203656
#: ../../../../1.8/docs/intro/tutorial01.txt:556
msgid ""
"Migrations are very powerful and let you change your models over time, as "
"you develop your project, without the need to delete your database or tables"
" and make new ones - it specializes in upgrading your database live, without"
" losing data. We'll cover them in more depth in a later part of the "
"tutorial, but for now, remember the three-step guide to making model "
"changes:"
msgstr ""

# fbfe28c0c13641ae8370d563eec2c625
#: ../../../../1.8/docs/intro/tutorial01.txt:562
msgid "Change your models (in ``models.py``)."
msgstr ""

# 8a7b2416d0704b6d8c8c1864f42436b1
#: ../../../../1.8/docs/intro/tutorial01.txt:563
msgid ""
"Run :djadmin:`python manage.py makemigrations <makemigrations>` to create "
"migrations for those changes"
msgstr ""

# fae818527eb04862bd3c803d4251388e
#: ../../../../1.8/docs/intro/tutorial01.txt:565
msgid ""
"Run :djadmin:`python manage.py migrate <migrate>` to apply those changes to "
"the database."
msgstr ""

# 3c3b278f0c5a44e7bbcd83b1abcf8366
#: ../../../../1.8/docs/intro/tutorial01.txt:568
msgid ""
"The reason that there are separate commands to make and apply migrations is "
"because you'll commit migrations to your version control system and ship "
"them with your app; they not only make your development easier, they're also"
" useable by other developers and in production."
msgstr ""

# 9ba855f9622846059e2b839c4fdf3876
#: ../../../../1.8/docs/intro/tutorial01.txt:573
msgid ""
"Read the :doc:`django-admin documentation </ref/django-admin>` for full "
"information on what the ``manage.py`` utility can do."
msgstr ""

# 9fb5e913ade24b21b239f493b7dd026d
#: ../../../../1.8/docs/intro/tutorial01.txt:577
msgid "Playing with the API"
msgstr ""

# 1bea9bcf6be646f08a752915c24e04b4
#: ../../../../1.8/docs/intro/tutorial01.txt:579
msgid ""
"Now, let's hop into the interactive Python shell and play around with the "
"free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""

# 7003aa11f62145a2bf6eb8e0ab0a1c2b
#: ../../../../1.8/docs/intro/tutorial01.txt:586
msgid ""
"We're using this instead of simply typing \"python\", because "
":file:`manage.py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, "
"which gives Django the Python import path to your :file:`mysite/settings.py`"
" file."
msgstr ""

# f2f439c66d3f408583e0905591e8c489
#: ../../../../1.8/docs/intro/tutorial01.txt:590
msgid "Bypassing manage.py"
msgstr ""

# 23d8c5e369eb46fb80b1e4048935ef63
#: ../../../../1.8/docs/intro/tutorial01.txt:592
msgid ""
"If you'd rather not use :file:`manage.py`, no problem. Just set the "
":envvar:`DJANGO_SETTINGS_MODULE` environment variable to "
"``mysite.settings``, start a plain Python shell, and set up Django:"
msgstr ""

# 7e07775c43cf45a3a78629b24f7fb888
#: ../../../../1.8/docs/intro/tutorial01.txt:601
msgid ""
"If this raises an :exc:`AttributeError`, you're probably using a version of "
"Django that doesn't match this tutorial version. You'll want to either "
"switch to the older tutorial or the newer Django version."
msgstr ""

# 5d57ffb8f7e9466fa8d030ab6c3fc974
#: ../../../../1.8/docs/intro/tutorial01.txt:605
msgid ""
"You must run ``python`` from the same directory :file:`manage.py` is in, or "
"ensure that directory is on the Python path, so that ``import mysite`` "
"works."
msgstr ""

# 8ef7fcb7224b4e9f81ef23882fbcb5c3
#: ../../../../1.8/docs/intro/tutorial01.txt:609
msgid ""
"For more information on all of this, see the :doc:`django-admin "
"documentation </ref/django-admin>`."
msgstr ""

# 0dfd24bfcae14876b13cb7542f74bd5a
#: ../../../../1.8/docs/intro/tutorial01.txt:612
msgid ""
"Once you're in the shell, explore the :doc:`database API "
"</topics/db/queries>`::"
msgstr ""

# 7514c734767d4c88942bfb5759e5e116
#: ../../../../1.8/docs/intro/tutorial01.txt:652
msgid ""
"Wait a minute. ``<Question: Question object>`` is, utterly, an unhelpful "
"representation of this object. Let's fix that by editing the ``Question`` "
"model (in the ``polls/models.py`` file) and adding a "
":meth:`~django.db.models.Model.__str__` method to both ``Question`` and "
"``Choice``:"
msgstr ""

# f0925e44ecd54bd596edf6c69ac1739d
#: ../../../../1.8/docs/intro/tutorial01.txt:673
msgid ""
"It's important to add :meth:`~django.db.models.Model.__str__` methods to "
"your models, not only for your own convenience when dealing with the "
"interactive prompt, but also because objects' representations are used "
"throughout Django's automatically-generated admin."
msgstr ""

# 1dc1d6ceb3fa42138d0f1de13f5d45e2
#: ../../../../1.8/docs/intro/tutorial01.txt:678
msgid "``__str__`` or ``__unicode__``?"
msgstr ""

# 6b081907a7b24088b1229d3dac557c86
#: ../../../../1.8/docs/intro/tutorial01.txt:680
msgid ""
"On Python 3, it's easy, just use :meth:`~django.db.models.Model.__str__`."
msgstr ""

# f77ada2b74bf4255b754cb33e19217b0
#: ../../../../1.8/docs/intro/tutorial01.txt:683
msgid ""
"On Python 2, you should define :meth:`~django.db.models.Model.__unicode__` "
"methods returning ``unicode`` values instead. Django models have a default "
":meth:`~django.db.models.Model.__str__` method that calls "
":meth:`~django.db.models.Model.__unicode__` and converts the result to a "
"UTF-8 bytestring. This means that ``unicode(p)`` will return a Unicode "
"string, and ``str(p)`` will return a bytestring, with characters encoded as "
"UTF-8. Python does the opposite: ``object`` has a ``__unicode__`` method "
"that calls ``__str__`` and interprets the result as an ASCII bytestring. "
"This difference can create confusion."
msgstr ""

# b9de4edfa9d1457abdde78e6fff041b6
#: ../../../../1.8/docs/intro/tutorial01.txt:693
msgid "If all of this is gibberish to you, just use Python 3."
msgstr ""

# 63c0b782d9a14206b01849e755826dd6
#: ../../../../1.8/docs/intro/tutorial01.txt:695
msgid ""
"Note these are normal Python methods. Let's add a custom method, just for "
"demonstration:"
msgstr ""

# 8701bc0acb67444db20091663a15604a
#: ../../../../1.8/docs/intro/tutorial01.txt:712
msgid ""
"Note the addition of ``import datetime`` and ``from django.utils import "
"timezone``, to reference Python's standard :mod:`datetime` module and "
"Django's time-zone-related utilities in :mod:`django.utils.timezone`, "
"respectively. If you aren't familiar with time zone handling in Python, you "
"can learn more in the :doc:`time zone support docs "
"</topics/i18n/timezones>`."
msgstr ""

# d400f41a4ef542f9a29bd203efd436d8
#: ../../../../1.8/docs/intro/tutorial01.txt:718
msgid ""
"Save these changes and start a new Python interactive shell by running "
"``python manage.py shell`` again::"
msgstr ""

# c7947844fcb04c7a8baf11b7e901c923
#: ../../../../1.8/docs/intro/tutorial01.txt:797
msgid ""
"For more information on model relations, see :doc:`Accessing related objects"
" </ref/models/relations>`. For more on how to use double underscores to "
"perform field lookups via the API, see :ref:`Field lookups <field-lookups-"
"intro>`. For full details on the database API, see our :doc:`Database API "
"reference </topics/db/queries>`."
msgstr ""

# 527a230c83704181bf547868b261025c
#: ../../../../1.8/docs/intro/tutorial01.txt:803
msgid ""
"When you're comfortable with the API, read :doc:`part 2 of this tutorial "
"</intro/tutorial02>` to get Django's automatic admin working."
msgstr ""

# b1b1b4634c334303b25dcd70c467976d
#: ../../../../1.8/docs/intro/tutorial02.txt:3
msgid "Writing your first Django app, part 2"
msgstr ""

# bff4f5ff092746bb8962115a489345fb
#: ../../../../1.8/docs/intro/tutorial02.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. "
"We're continuing the Web-poll application and will focus on Django's "
"automatically-generated admin site."
msgstr ""

# d1421565935349a7800e0d68020ca5d1
#: ../../../../1.8/docs/intro/tutorial02.txt:11
msgid ""
"Generating admin sites for your staff or clients to add, change and delete "
"content is tedious work that doesn't require much creativity. For that "
"reason, Django entirely automates creation of admin interfaces for models."
msgstr ""

# 14d32070099e4b55acdf40c5e37b90ae
#: ../../../../1.8/docs/intro/tutorial02.txt:15
msgid ""
"Django was written in a newsroom environment, with a very clear separation "
"between \"content publishers\" and the \"public\" site. Site managers use "
"the system to add news stories, events, sports scores, etc., and that "
"content is displayed on the public site. Django solves the problem of "
"creating a unified interface for site administrators to edit content."
msgstr ""

# 476e92b4396f41d3b12915a5ee39b0bf
#: ../../../../1.8/docs/intro/tutorial02.txt:21
msgid ""
"The admin isn't intended to be used by site visitors. It's for site "
"managers."
msgstr ""

# c30e736ea73b487f843ba02d112584e4
#: ../../../../1.8/docs/intro/tutorial02.txt:25
msgid "Creating an admin user"
msgstr ""

# 94b67cbb2a7646e4a30c3e102700bef5
#: ../../../../1.8/docs/intro/tutorial02.txt:27
msgid ""
"First we'll need to create a user who can login to the admin site. Run the "
"following command:"
msgstr ""

# 70269ad7625a4e42ae7232cd9f0e8811
#: ../../../../1.8/docs/intro/tutorial02.txt:34
msgid "Enter your desired username and press enter."
msgstr ""

# 2d80537afddf46eca9e41bdefef2adae
#: ../../../../1.8/docs/intro/tutorial02.txt:40
msgid "You will then be prompted for your desired email address:"
msgstr ""

# fbbab7f8e7b648feb25257fd9b960d87
#: ../../../../1.8/docs/intro/tutorial02.txt:46
msgid ""
"The final step is to enter your password. You will be asked to enter your "
"password twice, the second time as a confirmation of the first."
msgstr ""

# bb06c1149ea94d938d1222b690ecf8e0
#: ../../../../1.8/docs/intro/tutorial02.txt:56
msgid "Start the development server"
msgstr ""

# d2d164e6c68c482c8f5e74d366e7a3f0
#: ../../../../1.8/docs/intro/tutorial02.txt:58
msgid ""
"The Django admin site is activated by default. Let's start the development "
"server and explore it."
msgstr ""

# 1fa3dc9ed37c485ab0cd0858a86e6063
#: ../../../../1.8/docs/intro/tutorial02.txt:61
msgid "Recall from Tutorial 1 that you start the development server like so:"
msgstr ""

# 60f606b718f74fb3a419375523251e0b
#: ../../../../1.8/docs/intro/tutorial02.txt:67
msgid ""
"Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., "
"http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""

# 0b95bb6f36a04888b77e9ee3a25bbd27
#: ../../../../1.8/docs/intro/tutorial02.txt:73
msgid ""
"Since :doc:`translation </topics/i18n/translation>` is turned on by default,"
" the login screen may be displayed in your own language, depending on your "
"browser's settings and on whether Django has a translation for this "
"language."
msgstr ""

# a7f34c210d2c4ed395cfed7da1de08a0
# 4a596eb1d3284e9391c1bdfe345e3b19
#: ../../../../1.8/docs/intro/tutorial02.txt:77
#: ../../../../1.8/docs/intro/tutorial03.txt:118
msgid "Doesn't match what you see?"
msgstr ""

# 1267d760950142b6a63f0b3565d2eced
#: ../../../../1.8/docs/intro/tutorial02.txt:79
msgid ""
"If at this point, instead of the above login page, you get an error page "
"reporting something like::"
msgstr ""

# 9e540db92d6c487c9193673163c5b3e1
#: ../../../../1.8/docs/intro/tutorial02.txt:86
msgid ""
"then you're probably using a version of Django that doesn't match this "
"tutorial version. You'll want to either switch to the older tutorial or the "
"newer Django version."
msgstr ""

# cccec4a2d26d48b98e5894fbcaada796
#: ../../../../1.8/docs/intro/tutorial02.txt:91
msgid "Enter the admin site"
msgstr ""

# 90c1c0d302f649dda413caf3752966df
#: ../../../../1.8/docs/intro/tutorial02.txt:93
msgid ""
"Now, try logging in with the superuser account you created in the previous "
"step. You should see the Django admin index page:"
msgstr ""

# 5c08e81f1d014bf9881c41fb24a29bf0
#: ../../../../1.8/docs/intro/tutorial02.txt:99
msgid ""
"You should see a few types of editable content: groups and users. They are "
"provided by :mod:`django.contrib.auth`, the authentication framework shipped"
" by Django."
msgstr ""

# 554441a6fc534a44bd14a5ccc67c0ae3
#: ../../../../1.8/docs/intro/tutorial02.txt:104
msgid "Make the poll app modifiable in the admin"
msgstr ""

# 16865d8cd56e470ba1b405e7dd461629
#: ../../../../1.8/docs/intro/tutorial02.txt:106
msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr ""

# 98028ab5109e4456ad7eeba79e33a08c
#: ../../../../1.8/docs/intro/tutorial02.txt:108
msgid ""
"Just one thing to do: we need to tell the admin that ``Question`` objects "
"have an admin interface. To do this, open the :file:`polls/admin.py` file, "
"and edit it to look like this:"
msgstr ""

# 00307084fb0e4f0d944c67ff1e52015c
#: ../../../../1.8/docs/intro/tutorial02.txt:122
msgid "Explore the free admin functionality"
msgstr ""

# 2ce9dfaa6d0747ecb1e5d48675320748
#: ../../../../1.8/docs/intro/tutorial02.txt:124
msgid ""
"Now that we've registered ``Question``, Django knows that it should be "
"displayed on the admin index page:"
msgstr ""

# dc1d27ffbea64a0a8ca0a055c0617f89
#: ../../../../1.8/docs/intro/tutorial02.txt:130
msgid ""
"Click \"Questions\". Now you're at the \"change list\" page for questions. "
"This page displays all the questions in the database and lets you choose one"
" to change it. There's the \"What's up?\" question we created in the first "
"tutorial:"
msgstr ""

# ddfe64dbc1ac4c6bae53267ffe6d97dd
#: ../../../../1.8/docs/intro/tutorial02.txt:137
msgid "Click the \"What's up?\" question to edit it:"
msgstr ""

# 55a8467e049146d39c280491d00539c6
#: ../../../../1.8/docs/intro/tutorial02.txt:142
msgid "Things to note here:"
msgstr ""

# ef418bc9720d4899860d2c19c2595f5c
#: ../../../../1.8/docs/intro/tutorial02.txt:144
msgid "The form is automatically generated from the ``Question`` model."
msgstr ""

# cffc4a9e7c034bf0a5bbfa9be76fd2bf
#: ../../../../1.8/docs/intro/tutorial02.txt:146
msgid ""
"The different model field types (:class:`~django.db.models.DateTimeField`, "
":class:`~django.db.models.CharField`) correspond to the appropriate HTML "
"input widget. Each type of field knows how to display itself in the Django "
"admin."
msgstr ""

# 1532c5663baa4165840cb36274fd1244
#: ../../../../1.8/docs/intro/tutorial02.txt:151
msgid ""
"Each :class:`~django.db.models.DateTimeField` gets free JavaScript "
"shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get "
"a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""

# b19975db2b42422abb43f2cac00eaa0f
#: ../../../../1.8/docs/intro/tutorial02.txt:155
msgid "The bottom part of the page gives you a couple of options:"
msgstr ""

# b8cf3918aa0843d19da73b40a9485119
#: ../../../../1.8/docs/intro/tutorial02.txt:157
msgid ""
"Save -- Saves changes and returns to the change-list page for this type of "
"object."
msgstr ""

# baeda18649434974803b3466e34e185c
#: ../../../../1.8/docs/intro/tutorial02.txt:160
msgid ""
"Save and continue editing -- Saves changes and reloads the admin page for "
"this object."
msgstr ""

# 7637e962b9b143e5b97ab71db8f305f9
#: ../../../../1.8/docs/intro/tutorial02.txt:163
msgid ""
"Save and add another -- Saves changes and loads a new, blank form for this "
"type of object."
msgstr ""

# 793558968c774ce4b72fac3bd9dc4ea6
#: ../../../../1.8/docs/intro/tutorial02.txt:166
msgid "Delete -- Displays a delete confirmation page."
msgstr ""

# e780187edba84dca9ddca3a33a8c4c00
#: ../../../../1.8/docs/intro/tutorial02.txt:168
msgid ""
"If the value of \"Date published\" doesn't match the time when you created "
"the question in Tutorial 1, it probably means you forgot to set the correct "
"value for the :setting:`TIME_ZONE` setting. Change it, reload the page and "
"check that the correct value appears."
msgstr ""

# c74f003f765244ea9f648a1bf0a1cc98
#: ../../../../1.8/docs/intro/tutorial02.txt:173
msgid ""
"Change the \"Date published\" by clicking the \"Today\" and \"Now\" "
"shortcuts. Then click \"Save and continue editing.\" Then click \"History\" "
"in the upper right. You'll see a page listing all changes made to this "
"object via the Django admin, with the timestamp and username of the person "
"who made the change:"
msgstr ""

# b05a845664ea4194be09022c4ec6c873
#: ../../../../1.8/docs/intro/tutorial02.txt:182
msgid "Customize the admin form"
msgstr ""

# 7c5cae8c9ff64193ab98ef9f27b2a91d
#: ../../../../1.8/docs/intro/tutorial02.txt:184
msgid ""
"Take a few minutes to marvel at all the code you didn't have to write. By "
"registering the ``Question`` model with ``admin.site.register(Question)``, "
"Django was able to construct a default form representation. Often, you'll "
"want to customize how the admin form looks and works. You'll do this by "
"telling Django the options you want when you register the object."
msgstr ""

# 3d15975b75954fdca7233f62fdd1c61f
#: ../../../../1.8/docs/intro/tutorial02.txt:190
msgid ""
"Let's see how this works by re-ordering the fields on the edit form. Replace"
" the ``admin.site.register(Question)`` line with:"
msgstr ""

# 072a903b12e44e5e99ddaaec77a97cc3
#: ../../../../1.8/docs/intro/tutorial02.txt:206
msgid ""
"You'll follow this pattern -- create a model admin object, then pass it as "
"the second argument to ``admin.site.register()`` -- any time you need to "
"change the admin options for an object."
msgstr ""

# e6af66d21884495c871e03e6819584a0
#: ../../../../1.8/docs/intro/tutorial02.txt:210
msgid ""
"This particular change above makes the \"Publication date\" come before the "
"\"Question\" field:"
msgstr ""

# 9b39d210f34f4e1794c9870adc352b72
#: ../../../../1.8/docs/intro/tutorial02.txt:216
msgid ""
"This isn't impressive with only two fields, but for admin forms with dozens "
"of fields, choosing an intuitive order is an important usability detail."
msgstr ""

# 5f42a96af5164ab3a3207afa3cbc839c
#: ../../../../1.8/docs/intro/tutorial02.txt:219
msgid ""
"And speaking of forms with dozens of fields, you might want to split the "
"form up into fieldsets:"
msgstr ""

# 943e23243a554045b971033738096c54
#: ../../../../1.8/docs/intro/tutorial02.txt:238
msgid ""
"The first element of each tuple in "
":attr:`~django.contrib.admin.ModelAdmin.fieldsets` is the title of the "
"fieldset. Here's what our form looks like now:"
msgstr ""

# a9a58c60c7974bcf9450b32d5754b359
#: ../../../../1.8/docs/intro/tutorial02.txt:245
msgid ""
"You can assign arbitrary HTML classes to each fieldset. Django provides a "
"``\"collapse\"`` class that displays a particular fieldset initially "
"collapsed. This is useful when you have a long form that contains a number "
"of fields that aren't commonly used:"
msgstr ""

# 08161b74e19547b3bd15e5035f41113d
#: ../../../../1.8/docs/intro/tutorial02.txt:270
msgid "Adding related objects"
msgstr ""

# ebc80a5121f2419bb85c6604433d03a7
#: ../../../../1.8/docs/intro/tutorial02.txt:272
msgid ""
"OK, we have our Question admin page. But a ``Question`` has multiple "
"``Choices``, and the admin page doesn't display choices."
msgstr ""

# d3a565d8208f4bf38909a0416364eecd
#: ../../../../1.8/docs/intro/tutorial02.txt:275
msgid "Yet."
msgstr ""

# ae45d57fbdb64d55b38998273ae5f028
#: ../../../../1.8/docs/intro/tutorial02.txt:277
msgid ""
"There are two ways to solve this problem. The first is to register "
"``Choice`` with the admin just as we did with ``Question``. That's easy:"
msgstr ""

# 77a963b2471d4b029ac1ace032467314
#: ../../../../1.8/docs/intro/tutorial02.txt:289
msgid ""
"Now \"Choices\" is an available option in the Django admin. The \"Add "
"choice\" form looks like this:"
msgstr ""

# fe5d6ce9c89f4323932a08d141940a7d
#: ../../../../1.8/docs/intro/tutorial02.txt:295
msgid ""
"In that form, the \"Question\" field is a select box containing every "
"question in the database. Django knows that a "
":class:`~django.db.models.ForeignKey` should be represented in the admin as "
"a ``<select>`` box. In our case, only one question exists at this point."
msgstr ""

# aae1781d94cb4ed792fb59813ef26a8c
#: ../../../../1.8/docs/intro/tutorial02.txt:300
msgid ""
"Also note the \"Add Another\" link next to \"Question.\" Every object with a"
" ``ForeignKey`` relationship to another gets this for free. When you click "
"\"Add Another,\" you'll get a popup window with the \"Add question\" form. "
"If you add a question in that window and click \"Save,\" Django will save "
"the question to the database and dynamically add it as the selected choice "
"on the \"Add choice\" form you're looking at."
msgstr ""

# 6c59c53412344e91be9028834748dcac
#: ../../../../1.8/docs/intro/tutorial02.txt:307
msgid ""
"But, really, this is an inefficient way of adding ``Choice`` objects to the "
"system. It'd be better if you could add a bunch of Choices directly when you"
" create the ``Question`` object. Let's make that happen."
msgstr ""

# 9a759c24aa374b7994da0af6bf2fc41d
#: ../../../../1.8/docs/intro/tutorial02.txt:311
msgid ""
"Remove the ``register()`` call for the ``Choice`` model. Then, edit the "
"``Question`` registration code to read:"
msgstr ""

# 6925952897b247a98136375d54eab649
#: ../../../../1.8/docs/intro/tutorial02.txt:336
msgid ""
"This tells Django: \"``Choice`` objects are edited on the ``Question`` admin"
" page. By default, provide enough fields for 3 choices.\""
msgstr ""

# e1f39e60addd45d6a9972bfca7e222b1
#: ../../../../1.8/docs/intro/tutorial02.txt:339
msgid "Load the \"Add question\" page to see how that looks:"
msgstr ""

# 484f0218237f49cdaa3ca8c7f263e0a6
#: ../../../../1.8/docs/intro/tutorial02.txt:344
msgid ""
"It works like this: There are three slots for related Choices -- as "
"specified by ``extra`` -- and each time you come back to the \"Change\" page"
" for an already-created object, you get another three extra slots."
msgstr ""

# 6a12e00f25314b1aab4fa8f55d8b9e6e
#: ../../../../1.8/docs/intro/tutorial02.txt:348
msgid ""
"At the end of the three current slots you will find an \"Add another "
"Choice\" link.  If you click on it, a new slot will be added. If you want to"
" remove the added slot, you can click on the X to the top right of the added"
" slot. Note that you can't remove the original three slots. This image shows"
" an added slot:"
msgstr ""

# 45376398ce4649df85533b858d5fd60e
#: ../../../../1.8/docs/intro/tutorial02.txt:356
msgid ""
"One small problem, though. It takes a lot of screen space to display all the"
" fields for entering related ``Choice`` objects. For that reason, Django "
"offers a tabular way of displaying inline related objects; you just need to "
"change the ``ChoiceInline`` declaration to read:"
msgstr ""

# c55526a1719647e1b7fee743ebe06fe1
#: ../../../../1.8/docs/intro/tutorial02.txt:367
msgid ""
"With that ``TabularInline`` (instead of ``StackedInline``), the related "
"objects are displayed in a more compact, table-based format:"
msgstr ""

# d641caf76fc142338665fb66c2dca4ab
#: ../../../../1.8/docs/intro/tutorial02.txt:373
msgid ""
"Note that there is an extra \"Delete?\" column that allows removing rows "
"added using the \"Add Another Choice\" button and rows that have already "
"been saved."
msgstr ""

# ea27698af3904e7eaed72370ff27dda4
#: ../../../../1.8/docs/intro/tutorial02.txt:377
msgid "Customize the admin change list"
msgstr ""

# 500424b58bfb42db8c64329208a7742b
#: ../../../../1.8/docs/intro/tutorial02.txt:379
msgid ""
"Now that the Question admin page is looking good, let's make some tweaks to "
"the \"change list\" page -- the one that displays all the questions in the "
"system."
msgstr ""

# b9c74447ec7f4b69a4c577fb913f796e
#: ../../../../1.8/docs/intro/tutorial02.txt:382
msgid "Here's what it looks like at this point:"
msgstr ""

# e7cc858d372d495a9a93f929a9742f41
#: ../../../../1.8/docs/intro/tutorial02.txt:387
msgid ""
"By default, Django displays the ``str()`` of each object. But sometimes it'd"
" be more helpful if we could display individual fields. To do that, use the "
":attr:`~django.contrib.admin.ModelAdmin.list_display` admin option, which is"
" a tuple of field names to display, as columns, on the change list page for "
"the object:"
msgstr ""

# 962bede956d3467e8a4b0a5a648b7fce
#: ../../../../1.8/docs/intro/tutorial02.txt:400
msgid ""
"Just for good measure, let's also include the ``was_published_recently`` "
"custom method from Tutorial 1:"
msgstr ""

# 682219a3cad9473997e9ab2738de0473
#: ../../../../1.8/docs/intro/tutorial02.txt:410
msgid "Now the question change list page looks like this:"
msgstr ""

# f0ff917cf57949d8b9f9c89514af7d73
#: ../../../../1.8/docs/intro/tutorial02.txt:415
msgid ""
"You can click on the column headers to sort by those values -- except in the"
" case of the ``was_published_recently`` header, because sorting by the "
"output of an arbitrary method is not supported. Also note that the column "
"header for ``was_published_recently`` is, by default, the name of the method"
" (with underscores replaced with spaces), and that each line contains the "
"string representation of the output."
msgstr ""

# 926c456c8be94815949b0afdb79ed2e2
#: ../../../../1.8/docs/intro/tutorial02.txt:422
msgid ""
"You can improve that by giving that method (in :file:`polls/models.py`) a "
"few attributes, as follows:"
msgstr ""

# 2f732d8064cc4b08b973f520454351b9
#: ../../../../1.8/docs/intro/tutorial02.txt:436
msgid ""
"For more information on these method properties, see "
":attr:`~django.contrib.admin.ModelAdmin.list_display`."
msgstr ""

# f499a8a8e64b45fa9b25d60122524448
#: ../../../../1.8/docs/intro/tutorial02.txt:439
msgid ""
"Edit your :file:`polls/admin.py` file again and add an improvement to the "
"``Question`` change list page: filters using the "
":attr:`~django.contrib.admin.ModelAdmin.list_filter`. Add the following line"
" to ``QuestionAdmin``::"
msgstr ""

# b3628d4e72e7403aaac4d73a9d13ee04
#: ../../../../1.8/docs/intro/tutorial02.txt:446
msgid ""
"That adds a \"Filter\" sidebar that lets people filter the change list by "
"the ``pub_date`` field:"
msgstr ""

# eb78c9ef885f4d549349613bfc2d1c2e
#: ../../../../1.8/docs/intro/tutorial02.txt:452
msgid ""
"The type of filter displayed depends on the type of field you're filtering "
"on. Because ``pub_date`` is a :class:`~django.db.models.DateTimeField`, "
"Django knows to give appropriate filter options: \"Any date,\" \"Today,\" "
"\"Past 7 days,\" \"This month,\" \"This year.\""
msgstr ""

# d138eafca8564e5d89084f1f15c3c62c
#: ../../../../1.8/docs/intro/tutorial02.txt:457
msgid "This is shaping up well. Let's add some search capability::"
msgstr ""

# a93c7e5ff2024a849a9f77380865c67c
#: ../../../../1.8/docs/intro/tutorial02.txt:461
msgid ""
"That adds a search box at the top of the change list. When somebody enters "
"search terms, Django will search the ``question_text`` field. You can use as"
" many fields as you'd like -- although because it uses a ``LIKE`` query "
"behind the scenes, limiting the number of search fields to a reasonable "
"number will make it easier for your database to do the search."
msgstr ""

# 45fe37ca8d844acc837c624496769878
#: ../../../../1.8/docs/intro/tutorial02.txt:467
msgid ""
"Now's also a good time to note that change lists give you free pagination. "
"The default is to display 100 items per page. :attr:`Change list pagination "
"<django.contrib.admin.ModelAdmin.list_per_page>`, :attr:`search boxes "
"<django.contrib.admin.ModelAdmin.search_fields>`, :attr:`filters "
"<django.contrib.admin.ModelAdmin.list_filter>`, :attr:`date-hierarchies "
"<django.contrib.admin.ModelAdmin.date_hierarchy>`, and :attr:`column-header-"
"ordering <django.contrib.admin.ModelAdmin.list_display>` all work together "
"like you think they should."
msgstr ""

# 25a792025e834d8d89a507a78bf9d9af
#: ../../../../1.8/docs/intro/tutorial02.txt:477
msgid "Customize the admin look and feel"
msgstr ""

# 37328b5418ad4d91af974b993aa0f2ff
#: ../../../../1.8/docs/intro/tutorial02.txt:479
msgid ""
"Clearly, having \"Django administration\" at the top of each admin page is "
"ridiculous. It's just placeholder text."
msgstr ""

# 2ffc3014e64d4b578b18ad90b805b348
#: ../../../../1.8/docs/intro/tutorial02.txt:482
msgid ""
"That's easy to change, though, using Django's template system. The Django "
"admin is powered by Django itself, and its interfaces use Django's own "
"template system."
msgstr ""

# ee6c2ff16f3e4c639b5aa1e070cf114f
#: ../../../../1.8/docs/intro/tutorial02.txt:489
msgid "Customizing your *project's* templates"
msgstr ""

# 688a8ad5b1b94d6fa6d19403e1828a7e
#: ../../../../1.8/docs/intro/tutorial02.txt:491
msgid ""
"Create a ``templates`` directory in your project directory (the one that "
"contains ``manage.py``). Templates can live anywhere on your filesystem that"
" Django can access. (Django runs as whatever user your server runs.) "
"However, keeping your templates within the project is a good convention to "
"follow."
msgstr ""

# ddc2cd06c04e4423b1e735362b7bb6f9
#: ../../../../1.8/docs/intro/tutorial02.txt:496
msgid ""
"Open your settings file (:file:`mysite/settings.py`, remember) and add a "
":setting:`DIRS <TEMPLATES-DIRS>` option in the :setting:`TEMPLATES` setting:"
msgstr ""

# eba21de2953246ca9b466978c2b346db
#: ../../../../1.8/docs/intro/tutorial02.txt:518
msgid ""
":setting:`DIRS <TEMPLATES-DIRS>` is a list of filesystem directories to "
"check when loading Django templates; it's a search path."
msgstr ""

# 3a8ce517f09f44298aced86202aa79dd
#: ../../../../1.8/docs/intro/tutorial02.txt:521
msgid ""
"Now create a directory called ``admin`` inside ``templates``, and copy the "
"template ``admin/base_site.html`` from within the default Django admin "
"template directory in the source code of Django itself "
"(``django/contrib/admin/templates``) into that directory."
msgstr ""

# 987e47737cba4cd282145165a7fc7e99
#: ../../../../1.8/docs/intro/tutorial02.txt:526
msgid "Where are the Django source files?"
msgstr "¿Dónde están los archivos de origen de Django?"

# cfe2088009f24f4ebc390f452e006111
#: ../../../../1.8/docs/intro/tutorial02.txt:528
msgid ""
"If you have difficulty finding where the Django source files are located on "
"your system, run the following command:"
msgstr ""

# f5933269cd704f32ade33cd3360e697a
#: ../../../../1.8/docs/intro/tutorial02.txt:539
msgid ""
"Then, just edit the file and replace ``{{ site_header|default:_('Django "
"administration') }}`` (including the curly braces) with your own site's name"
" as you see fit. You should end up with a section of code like:"
msgstr ""

# 68f8060ec6954724b47698891c45b24e
#: ../../../../1.8/docs/intro/tutorial02.txt:550
msgid ""
"We use this approach to teach you how to override templates. In an actual "
"project, you would probably use the "
":attr:`django.contrib.admin.AdminSite.site_header` attribute to more easily "
"make this particular customization."
msgstr ""

# fb6b3abec95b463db4ed091514808ce9
#: ../../../../1.8/docs/intro/tutorial02.txt:555
msgid ""
"This template file contains lots of text like ``{% block branding %}`` and "
"``{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template "
"language. When Django renders ``admin/base_site.html``, this template "
"language will be evaluated to produce the final HTML page. Don't worry if "
"you can't make any sense of the template right now -- we'll delve into "
"Django's templating language in Tutorial 3."
msgstr ""

# 76000144578d4a5081f6966fe4c65070
#: ../../../../1.8/docs/intro/tutorial02.txt:562
msgid ""
"Note that any of Django's default admin templates can be overridden. To "
"override a template, just do the same thing you did with ``base_site.html`` "
"-- copy it from the default directory into your custom directory, and make "
"changes."
msgstr ""

# 5d3a40c038a140ab8b31c30863d88579
#: ../../../../1.8/docs/intro/tutorial02.txt:568
msgid "Customizing your *application's* templates"
msgstr ""

# 0a0777a1481e4b3f8ff44c34b2cf14c8
#: ../../../../1.8/docs/intro/tutorial02.txt:570
msgid ""
"Astute readers will ask: But if :setting:`DIRS <TEMPLATES-DIRS>` was empty "
"by default, how was Django finding the default admin templates? The answer "
"is that, since :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is set to ``True``, "
"Django automatically looks for a ``templates/`` subdirectory within each "
"application package, for use as a fallback (don't forget that "
"``django.contrib.admin`` is an application)."
msgstr ""

# 44bf8fd9e7cd4ea9901484907c29de2f
#: ../../../../1.8/docs/intro/tutorial02.txt:577
msgid ""
"Our poll application is not very complex and doesn't need custom admin "
"templates. But if it grew more sophisticated and required modification of "
"Django's standard admin templates for some of its functionality, it would be"
" more sensible to modify the *application's* templates, rather than those in"
" the *project*. That way, you could include the polls application in any new"
" project and be assured that it would find the custom templates it needed."
msgstr ""

# 29c162998cb84836b09b4c29f4c1eacb
#: ../../../../1.8/docs/intro/tutorial02.txt:584
msgid ""
"See the :ref:`template loading documentation <template-loading>` for more "
"information about how Django finds its templates."
msgstr ""

# 447526ba57d44e1eb524bbbeab6f96f0
#: ../../../../1.8/docs/intro/tutorial02.txt:588
msgid "Customize the admin index page"
msgstr ""

# 8a5692f866b44139a73deb837ebab9ce
#: ../../../../1.8/docs/intro/tutorial02.txt:590
msgid ""
"On a similar note, you might want to customize the look and feel of the "
"Django admin index page."
msgstr ""

# 718b29a7a1bd4a0f89b8a50073801491
#: ../../../../1.8/docs/intro/tutorial02.txt:593
msgid ""
"By default, it displays all the apps in :setting:`INSTALLED_APPS` that have "
"been registered with the admin application, in alphabetical order. You may "
"want to make significant changes to the layout. After all, the index is "
"probably the most important page of the admin, and it should be easy to use."
msgstr ""

# 927e63f44f934e45864f7d86ab24d8d8
#: ../../../../1.8/docs/intro/tutorial02.txt:598
msgid ""
"The template to customize is ``admin/index.html``. (Do the same as with "
"``admin/base_site.html`` in the previous section -- copy it from the default"
" directory to your custom template directory.) Edit the file, and you'll see"
" it uses a template variable called ``app_list``. That variable contains "
"every installed Django app. Instead of using that, you can hard-code links "
"to object-specific admin pages in whatever way you think is best. Again, "
"don't worry if you can't understand the template language -- we'll cover "
"that in more detail in Tutorial 3."
msgstr ""

# 436eae12e3364658b110b90b3de24f11
#: ../../../../1.8/docs/intro/tutorial02.txt:607
msgid ""
"When you're comfortable with the admin site, read :doc:`part 3 of this "
"tutorial </intro/tutorial03>` to start working on public poll views."
msgstr ""

# 4d8195df818a4dffa681d4e15c555748
#: ../../../../1.8/docs/intro/tutorial03.txt:3
msgid "Writing your first Django app, part 3"
msgstr "Escribir tu primera aplicación en Django, parte 3"

# 7bfe744eeeeb416183754ec3b56c9878
#: ../../../../1.8/docs/intro/tutorial03.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 2 </intro/tutorial02>` left off. "
"We're continuing the Web-poll application and will focus on creating the "
"public interface -- \"views.\""
msgstr ""

# 607aece1c9084c69a8f9f094f4464d26
#: ../../../../1.8/docs/intro/tutorial03.txt:12
msgid ""
"A view is a \"type\" of Web page in your Django application that generally "
"serves a specific function and has a specific template. For example, in a "
"blog application, you might have the following views:"
msgstr ""

# 4b636d8914b1416391619d69e0c6a09d
#: ../../../../1.8/docs/intro/tutorial03.txt:16
msgid "Blog homepage -- displays the latest few entries."
msgstr ""

# 60a6f54c255545b1909d3f9e4c07b108
#: ../../../../1.8/docs/intro/tutorial03.txt:18
msgid "Entry \"detail\" page -- permalink page for a single entry."
msgstr ""

# 1134c908e3fd4779b8c9ab6c13e4d445
#: ../../../../1.8/docs/intro/tutorial03.txt:20
msgid ""
"Year-based archive page -- displays all months with entries in the given "
"year."
msgstr ""

# d07b4b2f8cbd4c498c8db47ddd8dbd37
#: ../../../../1.8/docs/intro/tutorial03.txt:23
msgid ""
"Month-based archive page -- displays all days with entries in the given "
"month."
msgstr ""

# 4af45d0f563b4f9ab1cc1eda48628b79
#: ../../../../1.8/docs/intro/tutorial03.txt:26
msgid "Day-based archive page -- displays all entries in the given day."
msgstr ""

# 4b705991f3824986b2375ee5f07b2aa4
#: ../../../../1.8/docs/intro/tutorial03.txt:28
msgid "Comment action -- handles posting comments to a given entry."
msgstr ""

# 3704622c288346599449a1011f05443a
#: ../../../../1.8/docs/intro/tutorial03.txt:30
msgid "In our poll application, we'll have the following four views:"
msgstr ""

# f703bdacfd084391b3519749c181997a
#: ../../../../1.8/docs/intro/tutorial03.txt:32
msgid "Question \"index\" page -- displays the latest few questions."
msgstr ""

# 1db52d76761443e2b3a72816af7eb08f
#: ../../../../1.8/docs/intro/tutorial03.txt:34
msgid ""
"Question \"detail\" page -- displays a question text, with no results but "
"with a form to vote."
msgstr ""

# 8e9a21ef338e49de997976ac0ea2a1f3
#: ../../../../1.8/docs/intro/tutorial03.txt:37
msgid "Question \"results\" page -- displays results for a particular question."
msgstr ""

# 94c97e8497e9447a85ee6e68f0470298
#: ../../../../1.8/docs/intro/tutorial03.txt:39
msgid ""
"Vote action -- handles voting for a particular choice in a particular "
"question."
msgstr ""

# 8e43064a57d54816bdb614c717c3927c
#: ../../../../1.8/docs/intro/tutorial03.txt:42
msgid ""
"In Django, web pages and other content are delivered by views. Each view is "
"represented by a simple Python function (or method, in the case of class-"
"based views). Django will choose a view by examining the URL that's "
"requested (to be precise, the part of the URL after the domain name)."
msgstr ""

# 9b9219e21610403d995ab897037ebe30
#: ../../../../1.8/docs/intro/tutorial03.txt:47
msgid ""
"Now in your time on the web you may have come across such beauties as "
"\"ME2/Sites/dirmod.asp?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B\"."
" You will be pleased to know that Django allows us much more elegant *URL "
"patterns* than that."
msgstr ""

# 4780c3489a7d4f99a1dfb389d5c82fbd
#: ../../../../1.8/docs/intro/tutorial03.txt:52
msgid ""
"A URL pattern is simply the general form of a URL - for example: "
"``/newsarchive/<year>/<month>/``."
msgstr ""

# aad9aa6ab4e8499cb6b1466ffc3abe84
#: ../../../../1.8/docs/intro/tutorial03.txt:55
msgid ""
"To get from a URL to a view, Django uses what are known as 'URLconfs'. A "
"URLconf maps URL patterns (described as regular expressions) to views."
msgstr ""

# 45649616ccae472b985414d413bb8aff
#: ../../../../1.8/docs/intro/tutorial03.txt:58
msgid ""
"This tutorial provides basic instruction in the use of URLconfs, and you can"
" refer to :mod:`django.core.urlresolvers` for more information."
msgstr ""

# e0d485de3a4445d2aa9cacadf10a769e
#: ../../../../1.8/docs/intro/tutorial03.txt:62
msgid "Write your first view"
msgstr "Escriba su primera vista"

# f1511d07807d4f69913b7e2eb99af2dd
#: ../../../../1.8/docs/intro/tutorial03.txt:64
msgid ""
"Let's write the first view. Open the file ``polls/views.py`` and put the "
"following Python code in it:"
msgstr "Vamos a escribir la primera vista. Abra el archivo ``polls/views.py`` y ponga el siguiente código Python en ella:"

# c86511e924a24284b5955093dab25249
#: ../../../../1.8/docs/intro/tutorial03.txt:76
msgid ""
"This is the simplest view possible in Django. To call the view, we need to "
"map it to a URL - and for this we need a URLconf."
msgstr "Esta es la vista más simple posible en Django. Para llamar a la vista, tenemos que asignarlo a una URL - y para ello necesitamos una URLconf."

# 0b05f3cae2044ef580ac8acb7e65694c
#: ../../../../1.8/docs/intro/tutorial03.txt:79
msgid ""
"To create a URLconf in the polls directory, create a file called "
"``urls.py``. Your app directory should now look like::"
msgstr ""

# 10c43033c88f4c9a9e7a59dc34e99de4
#: ../../../../1.8/docs/intro/tutorial03.txt:90
msgid "In the ``polls/urls.py`` file include the following code:"
msgstr "En el archivo ``polls/urls.py`` incluir el siguiente código:"

# 308c3e3f16754901a41b1d9af3be9b63
#: ../../../../1.8/docs/intro/tutorial03.txt:103
msgid ""
"The next step is to point the root URLconf at the ``polls.urls`` module. In "
"``mysite/urls.py`` insert an :func:`~django.conf.urls.include`, leaving you "
"with:"
msgstr ""

# b8ddb22206524954949203ae664bfd95
#: ../../../../1.8/docs/intro/tutorial03.txt:120
msgid ""
"If you're seeing ``admin.autodiscover()`` before the definition of "
"``urlpatterns``, you're probably using a version of Django that doesn't "
"match this tutorial version.  You'll want to either switch to the older "
"tutorial or the newer Django version."
msgstr ""

# 7e0f5a4cdf3f41dba61ef80699d7d935
#: ../../../../1.8/docs/intro/tutorial03.txt:125
msgid ""
"You have now wired an ``index`` view into the URLconf. Go to "
"http://localhost:8000/polls/ in your browser, and you should see the text "
"\"*Hello, world. You're at the polls index.*\", which you defined in the "
"``index`` view."
msgstr ""

# d00a2c4d643c41259f89663b162a674c
#: ../../../../1.8/docs/intro/tutorial03.txt:130
msgid ""
"The :func:`~django.conf.urls.url` function is passed four arguments, two "
"required: ``regex`` and ``view``, and two optional: ``kwargs``, and "
"``name``. At this point, it's worth reviewing what these arguments are for."
msgstr ""

# 67097bae8ed34c9aa1cfb486382e3842
#: ../../../../1.8/docs/intro/tutorial03.txt:135
msgid ":func:`~django.conf.urls.url` argument: regex"
msgstr ""

# b3147ac3a3bd4b6284b7368008551585
#: ../../../../1.8/docs/intro/tutorial03.txt:137
msgid ""
"The term \"regex\" is a commonly used short form meaning \"regular "
"expression\", which is a syntax for matching patterns in strings, or in this"
" case, url patterns. Django starts at the first regular expression and makes"
" its way down the list,  comparing the requested URL against each regular "
"expression until it finds one that matches."
msgstr ""

# 46efc4f93ea74466ba4f6cfb40073f19
#: ../../../../1.8/docs/intro/tutorial03.txt:143
msgid ""
"Note that these regular expressions do not search GET and POST parameters, "
"or the domain name. For example, in a request to "
"``http://www.example.com/myapp/``, the URLconf will look for ``myapp/``. In "
"a request to ``http://www.example.com/myapp/?page=3``, the URLconf will also"
" look for ``myapp/``."
msgstr ""

# db6dbae66e91414ca4a4dd664c8aa398
#: ../../../../1.8/docs/intro/tutorial03.txt:149
msgid ""
"If you need help with regular expressions, see `Wikipedia's entry`_ and the "
"documentation of the :mod:`re` module. Also, the O'Reilly book \"Mastering "
"Regular Expressions\" by Jeffrey Friedl is fantastic. In practice, however, "
"you don't need to be an expert on regular expressions, as you really only "
"need to know how to capture simple patterns. In fact, complex regexes can "
"have poor lookup performance, so you probably shouldn't rely on the full "
"power of regexes."
msgstr ""

# ae812e43329c4b249999a9c3ec5bd9c1
#: ../../../../1.8/docs/intro/tutorial03.txt:156
msgid ""
"Finally, a performance note: these regular expressions are compiled the "
"first time the URLconf module is loaded. They're super fast (as long as the "
"lookups aren't too complex as noted above)."
msgstr ""

# 4b04b272f2c747f983b65a3a858f8ad0
#: ../../../../1.8/docs/intro/tutorial03.txt:163
msgid ":func:`~django.conf.urls.url` argument: view"
msgstr ""

# 84cc0dc6736344e9b6fc0f72dfdb6277
#: ../../../../1.8/docs/intro/tutorial03.txt:165
msgid ""
"When Django finds a regular expression match, Django calls the specified "
"view function, with an :class:`~django.http.HttpRequest` object as the first"
" argument and any “captured” values from the regular expression as other "
"arguments. If the regex uses simple captures, values are passed as "
"positional arguments; if it uses named captures, values are passed as "
"keyword arguments. We'll give an example of this in a bit."
msgstr ""

# 7e76a650a3ae480888c4dec3a9e4cc1d
#: ../../../../1.8/docs/intro/tutorial03.txt:173
msgid ":func:`~django.conf.urls.url` argument: kwargs"
msgstr ""

# e896482147d041f38d916c07df142e0a
#: ../../../../1.8/docs/intro/tutorial03.txt:175
msgid ""
"Arbitrary keyword arguments can be passed in a dictionary to the target "
"view. We aren't going to use this feature of Django in the tutorial."
msgstr ""

# 8ead9b6fd59d4d69b456a60d954b510a
#: ../../../../1.8/docs/intro/tutorial03.txt:179
msgid ":func:`~django.conf.urls.url` argument: name"
msgstr ""

# 9507def22f9a4fd2ba96e3ff142d6afd
#: ../../../../1.8/docs/intro/tutorial03.txt:181
msgid ""
"Naming your URL lets you refer to it unambiguously from elsewhere in Django "
"especially templates. This powerful feature allows you to make  global "
"changes to the url patterns of your project while only touching a single "
"file."
msgstr ""

# 20ef8ddad5694f55a669abd430eb3797
#: ../../../../1.8/docs/intro/tutorial03.txt:186
msgid "Writing more views"
msgstr "Escribir más vistas"

# 0bb8df96d9ee4a96a890e8b675beebb3
#: ../../../../1.8/docs/intro/tutorial03.txt:188
msgid ""
"Now let's add a few more views to ``polls/views.py``. These views are "
"slightly different, because they take an argument:"
msgstr ""

# 9e6384f15c664439848cb270dcdf6c5e
#: ../../../../1.8/docs/intro/tutorial03.txt:204
msgid ""
"Wire these new views into the ``polls.urls`` module by adding the following "
":func:`~django.conf.urls.url` calls:"
msgstr ""

# 5983ba78a4144c158cd4b00781e05eba
#: ../../../../1.8/docs/intro/tutorial03.txt:225
msgid ""
"Take a look in your browser, at \"/polls/34/\". It'll run the ``detail()`` "
"method and display whatever ID you provide in the URL. Try "
"\"/polls/34/results/\" and \"/polls/34/vote/\" too -- these will display the"
" placeholder results and voting pages."
msgstr ""

# 38713fbf0331499e861fb62026565fc7
#: ../../../../1.8/docs/intro/tutorial03.txt:230
msgid ""
"When somebody requests a page from your Web site -- say, \"/polls/34/\", "
"Django will load the ``mysite.urls`` Python module because it's pointed to "
"by the :setting:`ROOT_URLCONF` setting. It finds the variable named "
"``urlpatterns`` and traverses the regular expressions in order. The "
":func:`~django.conf.urls.include` functions we are using simply reference "
"other URLconfs. Note that the regular expressions for the "
":func:`~django.conf.urls.include` functions don't have a ``$`` (end-of-"
"string match character) but rather a trailing slash. Whenever Django "
"encounters :func:`~django.conf.urls.include`, it chops off whatever part of "
"the URL matched up to that point and sends the remaining string to the "
"included URLconf for further processing."
msgstr ""

# 3d98280ba3794a37b4f5d248a0e07cf3
#: ../../../../1.8/docs/intro/tutorial03.txt:242
msgid ""
"The idea behind :func:`~django.conf.urls.include` is to make it easy to "
"plug-and-play URLs. Since polls are in their own URLconf "
"(``polls/urls.py``), they can be placed under \"/polls/\", or under "
"\"/fun_polls/\", or under \"/content/polls/\", or any other path root, and "
"the app will still work."
msgstr ""

# 8bea8d2888a34b25893ab55d069953df
#: ../../../../1.8/docs/intro/tutorial03.txt:248
msgid "Here's what happens if a user goes to \"/polls/34/\" in this system:"
msgstr ""

# 52f9396891f445f2a897948b18a4aa59
#: ../../../../1.8/docs/intro/tutorial03.txt:250
msgid "Django will find the match at ``'^polls/'``"
msgstr ""

# 81ae1350a72c4c119729dd41cab9ad7d
#: ../../../../1.8/docs/intro/tutorial03.txt:252
msgid ""
"Then, Django will strip off the matching text (``\"polls/\"``) and send the "
"remaining text -- ``\"34/\"`` -- to the 'polls.urls' URLconf for further "
"processing which matches ``r'^(?P<question_id>[0-9]+)/$'`` resulting in a "
"call to the ``detail()`` view like so::"
msgstr ""

# 50915a34ef4d4f2bb6e3b8b0ae183534
#: ../../../../1.8/docs/intro/tutorial03.txt:259
msgid ""
"The ``question_id='34'`` part comes from ``(?P<question_id>[0-9]+)``. Using "
"parentheses around a pattern \"captures\" the text matched by that pattern "
"and sends it as an argument to the view function; ``?P<question_id>`` "
"defines the name that will be used to identify the matched pattern; and "
"``[0-9]+`` is a regular expression to match a sequence of digits (i.e., a "
"number)."
msgstr ""

# aa6af3a3095d4af1906480e15fe56e3d
#: ../../../../1.8/docs/intro/tutorial03.txt:265
msgid ""
"Because the URL patterns are regular expressions, there really is no limit "
"on what you can do with them. And there's no need to add URL cruft such as "
"``.html`` -- unless you want to, in which case you can do something like "
"this::"
msgstr ""

# 6a2e0ae3a66c4af49a61c0e456131a41
#: ../../../../1.8/docs/intro/tutorial03.txt:272
msgid "But, don't do that. It's silly."
msgstr "Pero, no hagas eso. Es una tontería."

# 35c418f60f384d73bf48ea230ba8f033
#: ../../../../1.8/docs/intro/tutorial03.txt:275
msgid "Write views that actually do something"
msgstr ""

# dfbfa7b616114d699bf45c289604bc16
#: ../../../../1.8/docs/intro/tutorial03.txt:277
msgid ""
"Each view is responsible for doing one of two things: returning an "
":class:`~django.http.HttpResponse` object containing the content for the "
"requested page, or raising an exception such as :exc:`~django.http.Http404`."
" The rest is up to you."
msgstr ""

# 05dedb8a3c334ebbbe6fb1d1cf245974
#: ../../../../1.8/docs/intro/tutorial03.txt:282
msgid ""
"Your view can read records from a database, or not. It can use a template "
"system such as Django's -- or a third-party Python template system -- or "
"not. It can generate a PDF file, output XML, create a ZIP file on the fly, "
"anything you want, using whatever Python libraries you want."
msgstr ""

# cefdf63f469b40c7a6063a86648e60c1
#: ../../../../1.8/docs/intro/tutorial03.txt:287
msgid ""
"All Django wants is that :class:`~django.http.HttpResponse`. Or an "
"exception."
msgstr ""

# 89ea8fc5d2cb45d494c4edc432390bb4
#: ../../../../1.8/docs/intro/tutorial03.txt:289
msgid ""
"Because it's convenient, let's use Django's own database API, which we "
"covered in :doc:`Tutorial 1 </intro/tutorial01>`. Here's one stab at a new "
"``index()`` view, which displays the latest 5 poll questions in the system, "
"separated by commas, according to publication date:"
msgstr ""

# 89e0c6533b2c4036a659e5dcaa609ae5
#: ../../../../1.8/docs/intro/tutorial03.txt:309
msgid ""
"There's a problem here, though: the page's design is hard-coded in the view."
" If you want to change the way the page looks, you'll have to edit this "
"Python code. So let's use Django's template system to separate the design "
"from Python by creating a template that the view can use."
msgstr ""

# d2250f9ac7d04684b44eaecbbb957a9e
#: ../../../../1.8/docs/intro/tutorial03.txt:314
msgid ""
"First, create a directory called ``templates`` in your ``polls`` directory. "
"Django will look for templates in there."
msgstr ""

# 9a8e8b9435924571aa11d0cacfd97a9f
#: ../../../../1.8/docs/intro/tutorial03.txt:317
msgid ""
"Your project's :setting:`TEMPLATES` setting describes how Django will load "
"and render templates. The default settings file configures a "
"``DjangoTemplates`` backend whose :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` "
"option is set to ``True``. By convention ``DjangoTemplates`` looks for a "
"\"templates\" subdirectory in each of the :setting:`INSTALLED_APPS`. This is"
" how Django knows to find the polls templates even though we didn't modify "
"the :setting:`DIRS <TEMPLATES-DIRS>` option, as we did in :ref:`Tutorial 2 "
"<ref-customizing-your-projects-templates>`."
msgstr ""

# 753f36c181c24bcf8999c6af7405c12d
#: ../../../../1.8/docs/intro/tutorial03.txt:326
msgid "Organizing templates"
msgstr ""

# 66152672036b4225b4458336204fe8aa
#: ../../../../1.8/docs/intro/tutorial03.txt:328
msgid ""
"We *could* have all our templates together, in one big templates directory, "
"and it would work perfectly well. However, this template belongs to the "
"polls application, so unlike the admin template we created in the previous "
"tutorial, we'll put this one in the application's template directory "
"(``polls/templates``) rather than the project's (``templates``). We'll "
"discuss in more detail in the :doc:`reusable apps tutorial </intro/reusable-"
"apps>` *why* we do this."
msgstr ""

# 528008659d4c42e4af26b40a01135d3e
#: ../../../../1.8/docs/intro/tutorial03.txt:336
msgid ""
"Within the ``templates`` directory you have just created, create another "
"directory called ``polls``, and within that create a file called "
"``index.html``. In other words, your template should be at "
"``polls/templates/polls/index.html``. Because of how the ``app_directories``"
" template loader works as described above, you can refer to this template "
"within Django simply as ``polls/index.html``."
msgstr ""

# cb21032088a54aefbcde4c7e1d400507
#: ../../../../1.8/docs/intro/tutorial03.txt:343
msgid "Template namespacing"
msgstr ""

# a02458c72daf4df1b88ce452fd8bdebd
#: ../../../../1.8/docs/intro/tutorial03.txt:345
msgid ""
"Now we *might* be able to get away with putting our templates directly in "
"``polls/templates`` (rather than creating another ``polls`` subdirectory), "
"but it would actually be a bad idea. Django will choose the first template "
"it finds whose name matches, and if you had a template with the same name in"
" a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the easiest "
"way to ensure this is by *namespacing* them. That is, by putting those "
"templates inside *another* directory named for the application itself."
msgstr ""

# 46fe260a5aba4e49bb34fcbb88cca28a
#: ../../../../1.8/docs/intro/tutorial03.txt:354
msgid "Put the following code in that template:"
msgstr ""

# d725aa33592f4f6e9cf7919708f48b45
#: ../../../../1.8/docs/intro/tutorial03.txt:369
msgid ""
"Now let's update our ``index`` view in ``polls/views.py`` to use the "
"template:"
msgstr ""

# 7faf757d57bd4afcac2e2f1e3b1ef6cf
#: ../../../../1.8/docs/intro/tutorial03.txt:388
msgid ""
"That code loads the template called  ``polls/index.html`` and passes it a "
"context. The context is a dictionary mapping template variable names to "
"Python objects."
msgstr ""

# 328bd16409884f999ba2297fe01f32c0
#: ../../../../1.8/docs/intro/tutorial03.txt:392
msgid ""
"Load the page by pointing your browser at \"/polls/\", and you should see a "
"bulleted-list containing the \"What's up\" question from Tutorial 1. The "
"link points to the question's detail page."
msgstr ""

# 1cd594c83b374b55a9c542380a88a61c
#: ../../../../1.8/docs/intro/tutorial03.txt:397
msgid "A shortcut: :func:`~django.shortcuts.render`"
msgstr ""

# c7ad0a3d921e41659e182d61b4940b82
#: ../../../../1.8/docs/intro/tutorial03.txt:399
msgid ""
"It's a very common idiom to load a template, fill a context and return an "
":class:`~django.http.HttpResponse` object with the result of the rendered "
"template. Django provides a shortcut. Here's the full ``index()`` view, "
"rewritten:"
msgstr ""

# 8ff48f720b8d493ea88c648ff340cc25
#: ../../../../1.8/docs/intro/tutorial03.txt:417
msgid ""
"Note that once we've done this in all these views, we no longer need to "
"import :mod:`~django.template.loader`, "
":class:`~django.template.RequestContext` and "
":class:`~django.http.HttpResponse` (you'll want to keep ``HttpResponse`` if "
"you still have the stub methods for ``detail``, ``results``, and ``vote``)."
msgstr ""

# 42da60052d7f458bbedc413e015777e9
#: ../../../../1.8/docs/intro/tutorial03.txt:422
msgid ""
"The :func:`~django.shortcuts.render` function takes the request object as "
"its first argument, a template name as its second argument and a dictionary "
"as its optional third argument. It returns an "
":class:`~django.http.HttpResponse` object of the given template rendered "
"with the given context."
msgstr ""

# e0b7447488bc46988b546555931db521
#: ../../../../1.8/docs/intro/tutorial03.txt:428
msgid "Raising a 404 error"
msgstr ""

# 3e8310d7c0a34069bcea5408da9d6cf9
#: ../../../../1.8/docs/intro/tutorial03.txt:430
msgid ""
"Now, let's tackle the question detail view -- the page that displays the "
"question text for a given poll. Here's the view:"
msgstr ""

# 25ed2832e4504c05a6175db08768eddd
#: ../../../../1.8/docs/intro/tutorial03.txt:448
msgid ""
"The new concept here: The view raises the :exc:`~django.http.Http404` "
"exception if a question with the requested ID doesn't exist."
msgstr ""

# 5fc897d3578d4778a0b98ca9f1c6ff1b
#: ../../../../1.8/docs/intro/tutorial03.txt:451
msgid ""
"We'll discuss what you could put in that ``polls/detail.html`` template a "
"bit later, but if you'd like to quickly get the above example working, a "
"file containing just:"
msgstr ""

# a9051436c8b14e8da62fdffa8d368e63
#: ../../../../1.8/docs/intro/tutorial03.txt:460
msgid "will get you started for now."
msgstr ""

# 05fa88a9f7f244de8c116ed8d03a3644
#: ../../../../1.8/docs/intro/tutorial03.txt:463
msgid "A shortcut: :func:`~django.shortcuts.get_object_or_404`"
msgstr ""

# bc1462282e5f4fbe9610ad0bcde6a372
#: ../../../../1.8/docs/intro/tutorial03.txt:465
msgid ""
"It's a very common idiom to use :meth:`~django.db.models.query.QuerySet.get`"
" and raise :exc:`~django.http.Http404` if the object doesn't exist. Django "
"provides a shortcut. Here's the ``detail()`` view, rewritten:"
msgstr ""

# 5bfb97a997454261baa4a1f6b2542313
#: ../../../../1.8/docs/intro/tutorial03.txt:480
msgid ""
"The :func:`~django.shortcuts.get_object_or_404` function takes a Django "
"model as its first argument and an arbitrary number of keyword arguments, "
"which it passes to the :meth:`~django.db.models.query.QuerySet.get` function"
" of the model's manager. It raises :exc:`~django.http.Http404` if the object"
" doesn't exist."
msgstr ""

# ecdf3a1a856a45c3b705bad51fcb44ea
#: ../../../../1.8/docs/intro/tutorial03.txt:488
msgid ""
"Why do we use a helper function :func:`~django.shortcuts.get_object_or_404` "
"instead of automatically catching the "
":exc:`~django.core.exceptions.ObjectDoesNotExist` exceptions at a higher "
"level, or having the model API raise :exc:`~django.http.Http404` instead of "
":exc:`~django.core.exceptions.ObjectDoesNotExist`?"
msgstr ""

# 0cfe12ccf06f442ea26a16cec8f343df
#: ../../../../1.8/docs/intro/tutorial03.txt:494
msgid ""
"Because that would couple the model layer to the view layer. One of the "
"foremost design goals of Django is to maintain loose coupling. Some "
"controlled coupling is introduced in the :mod:`django.shortcuts` module."
msgstr ""

# f6ab56f6ab8f41758692d23e5b702429
#: ../../../../1.8/docs/intro/tutorial03.txt:498
msgid ""
"There's also a :func:`~django.shortcuts.get_list_or_404` function, which "
"works just as :func:`~django.shortcuts.get_object_or_404` -- except using "
":meth:`~django.db.models.query.QuerySet.filter` instead of "
":meth:`~django.db.models.query.QuerySet.get`. It raises "
":exc:`~django.http.Http404` if the list is empty."
msgstr ""

# 16f902fd283c491899e55b3420637421
#: ../../../../1.8/docs/intro/tutorial03.txt:505
msgid "Use the template system"
msgstr ""

# 77b70d4f26cd4056b65cf7ca37694ac4
#: ../../../../1.8/docs/intro/tutorial03.txt:507
msgid ""
"Back to the ``detail()`` view for our poll application. Given the context "
"variable ``question``, here's what the ``polls/detail.html`` template might "
"look like:"
msgstr ""

# 3da5d91788184261aa70fcf04ed601a7
#: ../../../../1.8/docs/intro/tutorial03.txt:521
msgid ""
"The template system uses dot-lookup syntax to access variable attributes. In"
" the example of ``{{ question.question_text }}``, first Django does a "
"dictionary lookup on the object ``question``. Failing that, it tries an "
"attribute lookup -- which works, in this case. If attribute lookup had "
"failed, it would've tried a list-index lookup."
msgstr ""

# 53d0f38cb72f4389a0894526f9055bd4
#: ../../../../1.8/docs/intro/tutorial03.txt:527
msgid ""
"Method-calling happens in the :ttag:`{% for %}<for>` loop: "
"``question.choice_set.all`` is interpreted as the Python code "
"``question.choice_set.all()``, which returns an iterable of ``Choice`` "
"objects and is suitable for use in the :ttag:`{% for %}<for>` tag."
msgstr ""

# 9e417a70d427454481ad3a051d0ef479
#: ../../../../1.8/docs/intro/tutorial03.txt:532
msgid ""
"See the :doc:`template guide </topics/templates>` for more about templates."
msgstr ""

# bab532e3cfe44ed49b300e5a530f1c25
#: ../../../../1.8/docs/intro/tutorial03.txt:535
msgid "Removing hardcoded URLs in templates"
msgstr ""

# 24bfcb5b155a432392dc62a0ede36994
#: ../../../../1.8/docs/intro/tutorial03.txt:537
msgid ""
"Remember, when we wrote the link to a question in the ``polls/index.html`` "
"template, the link was partially hardcoded like this:"
msgstr ""

# ebae5a8be75b4ad9ae905421f6c16671
#: ../../../../1.8/docs/intro/tutorial03.txt:544
msgid ""
"The problem with this hardcoded, tightly-coupled approach is that it becomes"
" challenging to change URLs on projects with a lot of templates. However, "
"since you defined the name argument in the :func:`~django.conf.urls.url` "
"functions in the ``polls.urls`` module, you can remove a reliance on "
"specific URL paths defined in your url configurations by using the ``{% url "
"%}`` template tag:"
msgstr ""

# 0dc1a851d8724974ae0b931827252d66
#: ../../../../1.8/docs/intro/tutorial03.txt:554
msgid ""
"The way this works is by looking up the URL definition as specified in the "
"``polls.urls`` module. You can see exactly where the URL name of 'detail' is"
" defined below::"
msgstr ""

# 1927b5c33dee4c839f4ee653c9e18092
#: ../../../../1.8/docs/intro/tutorial03.txt:563
msgid ""
"If you want to change the URL of the polls detail view to something else, "
"perhaps to something like ``polls/specifics/12/`` instead of doing it in the"
" template (or templates) you would change it in ``polls/urls.py``::"
msgstr ""

# 47a3619a6e3940c7adecd45341d8dab4
#: ../../../../1.8/docs/intro/tutorial03.txt:573
msgid "Namespacing URL names"
msgstr ""

# 144aef3f53a24f99bc7f92441783119c
#: ../../../../1.8/docs/intro/tutorial03.txt:575
msgid ""
"The tutorial project has just one app, ``polls``. In real Django projects, "
"there might be five, ten, twenty apps or more. How does Django differentiate"
" the URL names between them? For example, the ``polls`` app has a ``detail``"
" view, and so might an app on the same project that is for a blog. How does "
"one make it so that Django knows which app view to create for a url when "
"using the ``{% url %}`` template tag?"
msgstr ""

# afb8ae0c8b5a4f9e9bb6cf444b208b3b
#: ../../../../1.8/docs/intro/tutorial03.txt:582
msgid ""
"The answer is to add namespaces to your root URLconf. In the "
"``mysite/urls.py`` file, go ahead and change it to include namespacing:"
msgstr ""

# d98cdc5af97e462eb2518274724e40f2
#: ../../../../1.8/docs/intro/tutorial03.txt:596
msgid "Now change your ``polls/index.html`` template from:"
msgstr ""

# 15adf05b10d943eda9b42213dd241b42
#: ../../../../1.8/docs/intro/tutorial03.txt:603
msgid "to point at the namespaced detail view:"
msgstr ""

# a18d1b7e561c4dbeab608612a96a78ed
#: ../../../../1.8/docs/intro/tutorial03.txt:610
msgid ""
"When you're comfortable with writing views, read :doc:`part 4 of this "
"tutorial </intro/tutorial04>` to learn about simple form processing and "
"generic views."
msgstr ""

# 87f91e8682fe4512846cb3e1256988ce
#: ../../../../1.8/docs/intro/tutorial04.txt:3
msgid "Writing your first Django app, part 4"
msgstr ""

# cbab451ae8444cd89f1e519decd4f93b
#: ../../../../1.8/docs/intro/tutorial04.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. "
"We're continuing the Web-poll application and will focus on simple form "
"processing and cutting down our code."
msgstr ""

# 4569696224274cbcac1c4bd739fae62a
#: ../../../../1.8/docs/intro/tutorial04.txt:10
msgid "Write a simple form"
msgstr ""

# e0d5244c66ed430a9e945cafb5368f5c
#: ../../../../1.8/docs/intro/tutorial04.txt:12
msgid ""
"Let's update our poll detail template (\"polls/detail.html\") from the last "
"tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""

# 600e772538104afcb42eb6f51e657733
#: ../../../../1.8/docs/intro/tutorial04.txt:31
msgid "A quick rundown:"
msgstr "Un rápido resumen:"

# 1ad4bd4574594a9c9cf55511db27532d
#: ../../../../1.8/docs/intro/tutorial04.txt:33
msgid ""
"The above template displays a radio button for each question choice. The "
"``value`` of each radio button is the associated question choice's ID. The "
"``name`` of each radio button is ``\"choice\"``. That means, when somebody "
"selects one of the radio buttons and submits the form, it'll send the POST "
"data ``choice=#`` where # is the ID of the selected choice. This is the "
"basic concept of HTML forms."
msgstr ""

# 2ab1c6e19f864f2c80bec16b63071783
#: ../../../../1.8/docs/intro/tutorial04.txt:40
msgid ""
"We set the form's ``action`` to ``{% url 'polls:vote' question.id %}``, and "
"we set ``method=\"post\"``. Using ``method=\"post\"`` (as opposed to "
"``method=\"get\"``) is very important, because the act of submitting this "
"form will alter data server-side. Whenever you create a form that alters "
"data server-side, use ``method=\"post\"``. This tip isn't specific to "
"Django; it's just good Web development practice."
msgstr ""

# 965e91882bb24c269939dda45acef078
#: ../../../../1.8/docs/intro/tutorial04.txt:47
msgid ""
"``forloop.counter`` indicates how many times the :ttag:`for` tag has gone "
"through its loop"
msgstr ""

# 96d00b481dc44355b6a3b3233e660035
#: ../../../../1.8/docs/intro/tutorial04.txt:50
msgid ""
"Since we're creating a POST form (which can have the effect of modifying "
"data), we need to worry about Cross Site Request Forgeries. Thankfully, you "
"don't have to worry too hard, because Django comes with a very easy-to-use "
"system for protecting against it. In short, all POST forms that are targeted"
" at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` "
"template tag."
msgstr ""

# 0de113685b5a4df89f780b55ec74c49e
#: ../../../../1.8/docs/intro/tutorial04.txt:57
msgid ""
"Now, let's create a Django view that handles the submitted data and does "
"something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we "
"created a URLconf for the polls application that includes this line:"
msgstr ""

# 9a823c486aba42c9bd27ded45a5dc033
#: ../../../../1.8/docs/intro/tutorial04.txt:66
msgid ""
"We also created a dummy implementation of the ``vote()`` function. Let's "
"create a real version. Add the following to ``polls/views.py``:"
msgstr ""

# dc01ab7cf4814825aaca0ef4aadc3836
#: ../../../../1.8/docs/intro/tutorial04.txt:96
msgid ""
"This code includes a few things we haven't covered yet in this tutorial:"
msgstr ""

# a0190e1de9214824b65b557eb59dd3c1
#: ../../../../1.8/docs/intro/tutorial04.txt:98
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like "
"object that lets you access submitted data by key name. In this case, "
"``request.POST['choice']`` returns the ID of the selected choice, as a "
"string. :attr:`request.POST <django.http.HttpRequest.POST>` values are "
"always strings."
msgstr ""

# f8ce21665c69422087dad917f0663761
#: ../../../../1.8/docs/intro/tutorial04.txt:104
msgid ""
"Note that Django also provides :attr:`request.GET "
"<django.http.HttpRequest.GET>` for accessing GET data in the same way -- but"
" we're explicitly using :attr:`request.POST <django.http.HttpRequest.POST>` "
"in our code, to ensure that data is only altered via a POST call."
msgstr ""

# b22422bdb3ea4de38b5dae8d4b3a6c1a
#: ../../../../1.8/docs/intro/tutorial04.txt:110
msgid ""
"``request.POST['choice']`` will raise :exc:`KeyError` if ``choice`` wasn't "
"provided in POST data. The above code checks for :exc:`KeyError` and "
"redisplays the question form with an error message if ``choice`` isn't "
"given."
msgstr ""

# f838f42c7d814a85b13e9a196e5cc3ed
#: ../../../../1.8/docs/intro/tutorial04.txt:115
msgid ""
"After incrementing the choice count, the code returns an "
":class:`~django.http.HttpResponseRedirect` rather than a normal "
":class:`~django.http.HttpResponse`. "
":class:`~django.http.HttpResponseRedirect` takes a single argument: the URL "
"to which the user will be redirected (see the following point for how we "
"construct the URL in this case)."
msgstr ""

# 16601fa104e549fcac0ee9d2bbb0c59c
#: ../../../../1.8/docs/intro/tutorial04.txt:122
msgid ""
"As the Python comment above points out, you should always return an "
":class:`~django.http.HttpResponseRedirect` after successfully dealing with "
"POST data. This tip isn't specific to Django; it's just good Web development"
" practice."
msgstr ""

# 7cae4edd27284db08cd265b81a115615
#: ../../../../1.8/docs/intro/tutorial04.txt:127
msgid ""
"We are using the :func:`~django.core.urlresolvers.reverse` function in the "
":class:`~django.http.HttpResponseRedirect` constructor in this example. This"
" function helps avoid having to hardcode a URL in the view function. It is "
"given the name of the view that we want to pass control to and the variable "
"portion of the URL pattern that points to that view. In this case, using the"
" URLconf we set up in Tutorial 3, this "
":func:`~django.core.urlresolvers.reverse` call will return a string like ::"
msgstr ""

# afd5511213b144f7870829cc6f430604
#: ../../../../1.8/docs/intro/tutorial04.txt:138
msgid ""
"... where the ``3`` is the value of ``p.id``. This redirected URL will then "
"call the ``'results'`` view to display the final page."
msgstr ""

# 9e7b9d83fe754001bfe7f4e5cc31e5e0
#: ../../../../1.8/docs/intro/tutorial04.txt:141
msgid ""
"As mentioned in Tutorial 3, ``request`` is a "
":class:`~django.http.HttpRequest` object. For more on "
":class:`~django.http.HttpRequest` objects, see the :doc:`request and "
"response documentation </ref/request-response>`."
msgstr ""

# 364ee26b3493419d9aa1a5f4f9c20836
#: ../../../../1.8/docs/intro/tutorial04.txt:145
msgid ""
"After somebody votes in a question, the ``vote()`` view redirects to the "
"results page for the question. Let's write that view:"
msgstr ""

# 0a33489a5b104084b33598097bc7e79c
#: ../../../../1.8/docs/intro/tutorial04.txt:158
msgid ""
"This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial"
" 3 </intro/tutorial03>`. The only difference is the template name. We'll fix"
" this redundancy later."
msgstr ""

# cb8ec3f4c61448daa72c499bffcb8920
#: ../../../../1.8/docs/intro/tutorial04.txt:162
msgid "Now, create a ``polls/results.html`` template:"
msgstr ""

# de68a3beee3142deafc475b5e2b7046f
#: ../../../../1.8/docs/intro/tutorial04.txt:177
msgid ""
"Now, go to ``/polls/1/`` in your browser and vote in the question. You "
"should see a results page that gets updated each time you vote. If you "
"submit the form without having chosen a choice, you should see the error "
"message."
msgstr ""

# 3dd56b3a93f54acab5628233dc2604b9
#: ../../../../1.8/docs/intro/tutorial04.txt:182
msgid "Use generic views: Less code is better"
msgstr ""

# e7ee562a1080476b9d83952837bb66cc
#: ../../../../1.8/docs/intro/tutorial04.txt:184
msgid ""
"The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and "
"``results()`` views are very simple -- and, as mentioned above, redundant. "
"The ``index()`` view (also from Tutorial 3), which displays a list of polls,"
" is similar."
msgstr ""

# b1c013b3b5814273a4f29ee92a6556e7
#: ../../../../1.8/docs/intro/tutorial04.txt:188
msgid ""
"These views represent a common case of basic Web development: getting data "
"from the database according to a parameter passed in the URL, loading a "
"template and returning the rendered template. Because this is so common, "
"Django provides a shortcut, called the \"generic views\" system."
msgstr ""

# e89dc6766fd8455388fdb5db347fe952
#: ../../../../1.8/docs/intro/tutorial04.txt:193
msgid ""
"Generic views abstract common patterns to the point where you don't even "
"need to write Python code to write an app."
msgstr ""

# 50aef59379a647019ca6f7c29de895e0
#: ../../../../1.8/docs/intro/tutorial04.txt:196
msgid ""
"Let's convert our poll app to use the generic views system, so we can delete"
" a bunch of our own code. We'll just have to take a few steps to make the "
"conversion. We will:"
msgstr ""

# ea1d9ac438884af0b104b8e4746e7d85
#: ../../../../1.8/docs/intro/tutorial04.txt:200
msgid "Convert the URLconf."
msgstr "Convertir la URLconf."

# 259cd84e2b5a429d8faafa4e4b4e37c3
#: ../../../../1.8/docs/intro/tutorial04.txt:202
msgid "Delete some of the old, unneeded views."
msgstr ""

# 7b5dc82d4d644ed1a20e3a98efd0495a
#: ../../../../1.8/docs/intro/tutorial04.txt:204
msgid "Introduce new views based on Django's generic views."
msgstr ""

# 40ffb42653f5413aba7cd704c83c51e9
#: ../../../../1.8/docs/intro/tutorial04.txt:206
msgid "Read on for details."
msgstr "Siga leyendo para conocer más detalles."

# 838e6927e45f42858da7fbe27b03b54b
#: ../../../../1.8/docs/intro/tutorial04.txt:208
msgid "Why the code-shuffle?"
msgstr ""

# 2545ecb355d245eb9fdc86fe3b9b6d6a
#: ../../../../1.8/docs/intro/tutorial04.txt:210
msgid ""
"Generally, when writing a Django app, you'll evaluate whether generic views "
"are a good fit for your problem, and you'll use them from the beginning, "
"rather than refactoring your code halfway through. But this tutorial "
"intentionally has focused on writing the views \"the hard way\" until now, "
"to focus on core concepts."
msgstr ""

# 41ce165f9d684996bef736162a18162a
#: ../../../../1.8/docs/intro/tutorial04.txt:216
msgid "You should know basic math before you start using a calculator."
msgstr ""

# ff46792dbd054e4494c49426e2504037
#: ../../../../1.8/docs/intro/tutorial04.txt:219
msgid "Amend URLconf"
msgstr ""

# 76bcea699ba6425eb4244d31fed873d6
#: ../../../../1.8/docs/intro/tutorial04.txt:221
msgid "First, open the ``polls/urls.py`` URLconf and change it like so:"
msgstr ""

# b212ccf720e746469f0b677c602ffd63
#: ../../../../1.8/docs/intro/tutorial04.txt:237
msgid ""
"Note that the name of the matched pattern in the regexes of the second and "
"third patterns has changed from ``<question_id>`` to ``<pk>``."
msgstr ""

# 9c9d1ee2a6c548a6897cdeb5e1b3d744
#: ../../../../1.8/docs/intro/tutorial04.txt:243
msgid "Amend views"
msgstr ""

# e4124815a0e34e99b96749262e3537f5
#: ../../../../1.8/docs/intro/tutorial04.txt:245
msgid ""
"Next, we're going to remove our old ``index``, ``detail``, and ``results`` "
"views and use Django's generic views instead. To do so, open the "
"``polls/views.py`` file and change it like so:"
msgstr ""

# 591ad9fd9cd446e28aa401c3fa5d9519
#: ../../../../1.8/docs/intro/tutorial04.txt:282
msgid ""
"We're using two generic views here: "
":class:`~django.views.generic.list.ListView` and "
":class:`~django.views.generic.detail.DetailView`. Respectively, those two "
"views abstract the concepts of \"display a list of objects\" and \"display a"
" detail page for a particular type of object.\""
msgstr ""

# 062030ef7123493fa050b2e15410b395
#: ../../../../1.8/docs/intro/tutorial04.txt:288
msgid ""
"Each generic view needs to know what model it will be acting upon. This is "
"provided using the ``model`` attribute."
msgstr ""

# 2c55a0af2513410881188046237560d8
#: ../../../../1.8/docs/intro/tutorial04.txt:291
msgid ""
"The :class:`~django.views.generic.detail.DetailView` generic view expects "
"the primary key value captured from the URL to be called ``\"pk\"``, so "
"we've changed ``question_id`` to ``pk`` for the generic views."
msgstr ""

# 0adf20a23eb24f81a02601599dc9da6d
#: ../../../../1.8/docs/intro/tutorial04.txt:296
msgid ""
"By default, the :class:`~django.views.generic.detail.DetailView` generic "
"view uses a template called ``<app name>/<model name>_detail.html``. In our "
"case, it would use the template ``\"polls/question_detail.html\"``. The "
"``template_name`` attribute is used to tell Django to use a specific "
"template name instead of the autogenerated default template name. We also "
"specify the ``template_name`` for the ``results`` list view -- this ensures "
"that the results view and the detail view have a different appearance when "
"rendered, even though they're both a "
":class:`~django.views.generic.detail.DetailView` behind the scenes."
msgstr ""

# 398a9fca9a554135b68538cdbc8f6dfe
#: ../../../../1.8/docs/intro/tutorial04.txt:306
msgid ""
"Similarly, the :class:`~django.views.generic.list.ListView` generic view "
"uses a default template called ``<app name>/<model name>_list.html``; we use"
" ``template_name`` to tell :class:`~django.views.generic.list.ListView` to "
"use our existing ``\"polls/index.html\"`` template."
msgstr ""

# bd8b09af34eb46438d10ee98c68ac6e2
#: ../../../../1.8/docs/intro/tutorial04.txt:312
msgid ""
"In previous parts of the tutorial, the templates have been provided with a "
"context that contains the ``question`` and ``latest_question_list`` context "
"variables. For ``DetailView`` the ``question`` variable is provided "
"automatically -- since we're using a Django model (``Question``), Django is "
"able to determine an appropriate name for the context variable. However, for"
" ListView, the automatically generated context variable is "
"``question_list``. To override this we provide the ``context_object_name`` "
"attribute, specifying that we want to use ``latest_question_list`` instead. "
"As an alternative approach, you could change your templates to match the new"
" default context variables -- but it's a lot easier to just tell Django to "
"use the variable you want."
msgstr ""

# 2a3ed75b08214b1d9ced9a4d60e35935
#: ../../../../1.8/docs/intro/tutorial04.txt:324
msgid "Run the server, and use your new polling app based on generic views."
msgstr ""

# 33a65b38d667459f8d4a8509f41fd22c
#: ../../../../1.8/docs/intro/tutorial04.txt:326
msgid ""
"For full details on generic views, see the :doc:`generic views documentation"
" </topics/class-based-views/index>`."
msgstr ""

# d64f9de4f4e14ba496d082a8315b2036
#: ../../../../1.8/docs/intro/tutorial04.txt:329
msgid ""
"When you're comfortable with forms and generic views, read :doc:`part 5 of "
"this tutorial</intro/tutorial05>` to learn about testing our polls app."
msgstr ""

# f45eb320b5ea44679393bac3d0b7377e
#: ../../../../1.8/docs/intro/tutorial05.txt:3
msgid "Writing your first Django app, part 5"
msgstr ""

# 8b0e7a7c96674611983a15abb20f63c7
#: ../../../../1.8/docs/intro/tutorial05.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 4 </intro/tutorial04>` left off. "
"We've built a Web-poll application, and we'll now create some automated "
"tests for it."
msgstr ""

# aef31f3f2d394cf285915c360d3afd79
#: ../../../../1.8/docs/intro/tutorial05.txt:10
msgid "Introducing automated testing"
msgstr ""

# 6028f4659051438c96759013a58e9972
#: ../../../../1.8/docs/intro/tutorial05.txt:13
msgid "What are automated tests?"
msgstr ""

# 7ab59c0e9e1041ea921bf7bde3e8931b
#: ../../../../1.8/docs/intro/tutorial05.txt:15
msgid "Tests are simple routines that check the operation of your code."
msgstr ""

# 56f4118453f943d090ede619a717dcdd
#: ../../../../1.8/docs/intro/tutorial05.txt:17
msgid ""
"Testing operates at different levels. Some tests might apply to a tiny "
"detail (*does a particular model method return values as expected?*) while "
"others examine the overall operation of the software (*does a sequence of "
"user inputs on the site produce the desired result?*). That's no different "
"from the kind of testing you did earlier in :doc:`Tutorial 1 "
"</intro/tutorial01>`, using the :djadmin:`shell` to examine the behavior of "
"a method, or running the application and entering data to check how it "
"behaves."
msgstr ""

# b00c07a5fdff4e2e848a8b2dd8d16908
#: ../../../../1.8/docs/intro/tutorial05.txt:25
msgid ""
"What's different in *automated* tests is that the testing work is done for "
"you by the system. You create a set of tests once, and then as you make "
"changes to your app, you can check that your code still works as you "
"originally intended, without having to perform time consuming manual "
"testing."
msgstr ""

# 8c549c971b6f4b679163a49d4ed1d0f2
#: ../../../../1.8/docs/intro/tutorial05.txt:31
msgid "Why you need to create tests"
msgstr ""

# ab53035effe946569142bd37be32354e
#: ../../../../1.8/docs/intro/tutorial05.txt:33
msgid "So why create tests, and why now?"
msgstr ""

# 550dc339c32c4536be86e97cd8639ab7
#: ../../../../1.8/docs/intro/tutorial05.txt:35
msgid ""
"You may feel that you have quite enough on your plate just learning "
"Python/Django, and having yet another thing to learn and do may seem "
"overwhelming and perhaps unnecessary. After all, our polls application is "
"working quite happily now; going through the trouble of creating automated "
"tests is not going to make it work any better. If creating the polls "
"application is the last bit of Django programming you will ever do, then "
"true, you don't need to know how to create automated tests. But, if that's "
"not the case, now is an excellent time to learn."
msgstr ""

# e4c493dbe88d499f99ae322eb08fcb61
#: ../../../../1.8/docs/intro/tutorial05.txt:45
msgid "Tests will save you time"
msgstr ""

# faaad539b48a4c519857703789f1e955
#: ../../../../1.8/docs/intro/tutorial05.txt:47
msgid ""
"Up to a certain point, 'checking that it seems to work' will be a "
"satisfactory test. In a more sophisticated application, you might have "
"dozens of complex interactions between components."
msgstr ""

# bcd85209b21f4479b2e63178a38d2959
#: ../../../../1.8/docs/intro/tutorial05.txt:51
msgid ""
"A change in any of those components could have unexpected consequences on "
"the application's behavior. Checking that it still 'seems to work' could "
"mean running through your code's functionality with twenty different "
"variations of your test data just to make sure you haven't broken something "
"- not a good use of your time."
msgstr ""

# c4f880ea50784a93bbb2420dc8bd37e1
#: ../../../../1.8/docs/intro/tutorial05.txt:57
msgid ""
"That's especially true when automated tests could do this for you in "
"seconds. If something's gone wrong, tests will also assist in identifying "
"the code that's causing the unexpected behavior."
msgstr ""

# dbc9d0ccff2b41928e59b20eddab91c9
#: ../../../../1.8/docs/intro/tutorial05.txt:61
msgid ""
"Sometimes it may seem a chore to tear yourself away from your productive, "
"creative programming work to face the unglamorous and unexciting business of"
" writing tests, particularly when you know your code is working properly."
msgstr ""

# 8662cc0d9e8a4d6684b414bd4dcf492f
#: ../../../../1.8/docs/intro/tutorial05.txt:65
msgid ""
"However, the task of writing tests is a lot more fulfilling than spending "
"hours testing your application manually or trying to identify the cause of a"
" newly-introduced problem."
msgstr ""

# 28db3da49e3b4d70985f344da21e073e
#: ../../../../1.8/docs/intro/tutorial05.txt:70
msgid "Tests don't just identify problems, they prevent them"
msgstr ""

# 602429ba99d04b31bc6387256b63ed1b
#: ../../../../1.8/docs/intro/tutorial05.txt:72
msgid ""
"It's a mistake to think of tests merely as a negative aspect of development."
msgstr ""

# 0222769e76834f3f8c30b9379731727a
#: ../../../../1.8/docs/intro/tutorial05.txt:74
msgid ""
"Without tests, the purpose or intended behavior of an application might be "
"rather opaque. Even when it's your own code, you will sometimes find "
"yourself poking around in it trying to find out what exactly it's doing."
msgstr ""

# d066fd38a7cc4261ad53abac4d72d821
#: ../../../../1.8/docs/intro/tutorial05.txt:78
msgid ""
"Tests change that; they light up your code from the inside, and when "
"something goes wrong, they focus light on the part that has gone wrong - "
"*even if you hadn't even realized it had gone wrong*."
msgstr ""

# deff624b170c4e868796a39308f669ca
#: ../../../../1.8/docs/intro/tutorial05.txt:83
msgid "Tests make your code more attractive"
msgstr ""

# f636a2f016f147ebab2bb347f88106c9
#: ../../../../1.8/docs/intro/tutorial05.txt:85
msgid ""
"You might have created a brilliant piece of software, but you will find that"
" many other developers will simply refuse to look at it because it lacks "
"tests; without tests, they won't trust it. Jacob Kaplan-Moss, one of "
"Django's original developers, says \"Code without tests is broken by "
"design.\""
msgstr ""

# defb1110c86f4db5b4ca9ace69b1d359
#: ../../../../1.8/docs/intro/tutorial05.txt:90
msgid ""
"That other developers want to see tests in your software before they take it"
" seriously is yet another reason for you to start writing tests."
msgstr ""

# 42e11574298d475ab39a2f396db0f662
#: ../../../../1.8/docs/intro/tutorial05.txt:94
msgid "Tests help teams work together"
msgstr ""

# 7528d6193fd84e4f9a6067c882e0fb01
#: ../../../../1.8/docs/intro/tutorial05.txt:96
msgid ""
"The previous points are written from the point of view of a single developer"
" maintaining an application. Complex applications will be maintained by "
"teams. Tests guarantee that colleagues don't inadvertently break your code "
"(and that you don't break theirs without knowing). If you want to make a "
"living as a Django programmer, you must be good at writing tests!"
msgstr ""

# fd104e55fb094c3aac99c1ad70ee59fe
#: ../../../../1.8/docs/intro/tutorial05.txt:103
msgid "Basic testing strategies"
msgstr ""

# 9d17d0956dad49a08afcede914391c11
#: ../../../../1.8/docs/intro/tutorial05.txt:105
msgid "There are many ways to approach writing tests."
msgstr ""

# 0298a4abd38b4b948866cd3b5ca296e6
#: ../../../../1.8/docs/intro/tutorial05.txt:107
msgid ""
"Some programmers follow a discipline called \"`test-driven development`_\"; "
"they actually write their tests before they write their code. This might "
"seem counter-intuitive, but in fact it's similar to what most people will "
"often do anyway: they describe a problem, then create some code to solve it."
" Test-driven development simply formalizes the problem in a Python test "
"case."
msgstr ""

# 4863c330e6144d2eb88c11137da7efc5
#: ../../../../1.8/docs/intro/tutorial05.txt:113
msgid ""
"More often, a newcomer to testing will create some code and later decide "
"that it should have some tests. Perhaps it would have been better to write "
"some tests earlier, but it's never too late to get started."
msgstr ""

# dbd8e617ffa142559987fda8b06d5031
#: ../../../../1.8/docs/intro/tutorial05.txt:117
msgid ""
"Sometimes it's difficult to figure out where to get started with writing "
"tests. If you have written several thousand lines of Python, choosing "
"something to test might not be easy. In such a case, it's fruitful to write "
"your first test the next time you make a change, either when you add a new "
"feature or fix a bug."
msgstr ""

# 1c1edbe368b745d0bf355b0bd7949bd9
#: ../../../../1.8/docs/intro/tutorial05.txt:122
msgid "So let's do that right away."
msgstr ""

# b8e1f77b273d4a8fa0f824119bbd3fd9
#: ../../../../1.8/docs/intro/tutorial05.txt:127
msgid "Writing our first test"
msgstr ""

# 0ec72feec52a46489e923e4d57c6fbf8
#: ../../../../1.8/docs/intro/tutorial05.txt:130
msgid "We identify a bug"
msgstr ""

# 1ed4910e60d542fb8c0330811500b443
#: ../../../../1.8/docs/intro/tutorial05.txt:132
msgid ""
"Fortunately, there's a little bug in the ``polls`` application for us to fix"
" right away: the ``Question.was_published_recently()`` method returns "
"``True`` if the ``Question`` was published within the last day (which is "
"correct) but also if the ``Question``’s ``pub_date`` field is in the future "
"(which certainly isn't)."
msgstr ""

# 26bd8ab06dfd4dffa1170f91e425f9ef
#: ../../../../1.8/docs/intro/tutorial05.txt:137
msgid ""
"You can see this in the Admin; create a question whose date lies in the "
"future; you'll see that the ``Question`` change list claims it was published"
" recently."
msgstr ""

# 77b661c6ff3348ce9991d9eaf99e126f
#: ../../../../1.8/docs/intro/tutorial05.txt:140
msgid "You can also see this using the :djadmin:`shell`::"
msgstr ""

# f509f5a5556f479280b113b1610fec8e
#: ../../../../1.8/docs/intro/tutorial05.txt:151
msgid "Since things in the future are not 'recent', this is clearly wrong."
msgstr ""

# 8ef1b26cc9f047dd805c29bfc6e666ee
#: ../../../../1.8/docs/intro/tutorial05.txt:154
msgid "Create a test to expose the bug"
msgstr ""

# 87fe1a23dfdd4562be762ebdfd6caee3
#: ../../../../1.8/docs/intro/tutorial05.txt:156
msgid ""
"What we've just done in the :djadmin:`shell` to test for the problem is "
"exactly what we can do in an automated test, so let's turn that into an "
"automated test."
msgstr ""

# 6a44ef9a40f447f5a2ac715b91b53e63
#: ../../../../1.8/docs/intro/tutorial05.txt:159
msgid ""
"A conventional place for an application's tests is in the application's "
"``tests.py`` file; the testing system will automatically find tests in any "
"file whose name begins with ``test``."
msgstr ""

# 1601a311e8a746e4af023db8384dcd51
#: ../../../../1.8/docs/intro/tutorial05.txt:163
msgid ""
"Put the following in the ``tests.py`` file in the ``polls`` application:"
msgstr ""

# 3cd4930b58244e0aad3b001fd6dd3132
#: ../../../../1.8/docs/intro/tutorial05.txt:187
msgid ""
"What we have done here is created a :class:`django.test.TestCase` subclass "
"with a method that creates a ``Question`` instance with a ``pub_date`` in "
"the future. We then check the output of ``was_published_recently()`` - which"
" *ought* to be False."
msgstr ""

# 7ba3ad8866af47fe86096e0ff0cdd1b9
#: ../../../../1.8/docs/intro/tutorial05.txt:193
msgid "Running tests"
msgstr ""

# 99fa409e49de489c9a5d2fe1ddbc9bf4
#: ../../../../1.8/docs/intro/tutorial05.txt:195
msgid "In the terminal, we can run our test::"
msgstr ""

# b559618d41414a30b9c2459afd386d38
#: ../../../../1.8/docs/intro/tutorial05.txt:199
msgid "and you'll see something like::"
msgstr ""

# 9d030284059c402dafc682947308b044
#: ../../../../1.8/docs/intro/tutorial05.txt:217
msgid "What happened is this:"
msgstr ""

# 3ac8cfecc86e4a1fa4c06514f8c5f2a0
#: ../../../../1.8/docs/intro/tutorial05.txt:219
msgid ""
"``python manage.py test polls`` looked for tests in the ``polls`` "
"application"
msgstr ""

# 1f2328de3c5241e7aed39d27ceb077e8
#: ../../../../1.8/docs/intro/tutorial05.txt:221
msgid "it found a subclass of the :class:`django.test.TestCase` class"
msgstr ""

# 5aed17efcc2a4ba6b903caba4015053a
#: ../../../../1.8/docs/intro/tutorial05.txt:223
msgid "it created a special database for the purpose of testing"
msgstr ""

# 85aedc97701843feac5326e2a992b018
#: ../../../../1.8/docs/intro/tutorial05.txt:225
msgid "it looked for test methods - ones whose names begin with ``test``"
msgstr ""

# 97009ceed5c94fe78d74a75b2f8e8071
#: ../../../../1.8/docs/intro/tutorial05.txt:227
msgid ""
"in ``test_was_published_recently_with_future_question`` it created a "
"``Question`` instance whose ``pub_date`` field is 30 days in the future"
msgstr ""

# b94440c4c4a54a338b4ae0352da0a5cd
#: ../../../../1.8/docs/intro/tutorial05.txt:230
msgid ""
"... and using the ``assertEqual()`` method, it discovered that its "
"``was_published_recently()`` returns ``True``, though we wanted it to return"
" ``False``"
msgstr ""

# 8bf29cffbc6743438b42cdba5e0042a2
#: ../../../../1.8/docs/intro/tutorial05.txt:234
msgid ""
"The test informs us which test failed and even the line on which the failure"
" occurred."
msgstr ""

# 9f0393b094894d16b6acf14d7c323fd1
#: ../../../../1.8/docs/intro/tutorial05.txt:238
msgid "Fixing the bug"
msgstr ""

# 477aa686b27c4afc9786ea6571ad9da4
#: ../../../../1.8/docs/intro/tutorial05.txt:240
msgid ""
"We already know what the problem is: ``Question.was_published_recently()`` "
"should return ``False`` if its ``pub_date`` is in the future. Amend the "
"method in ``models.py``, so that it will only return ``True`` if the date is"
" also in the past:"
msgstr ""

# fd265f1150c240e986189913f0740ab3
#: ../../../../1.8/docs/intro/tutorial05.txt:252
msgid "and run the test again::"
msgstr ""

# 7f7f5b5754f041ff86ea9d0968baea84
#: ../../../../1.8/docs/intro/tutorial05.txt:262
msgid ""
"After identifying a bug, we wrote a test that exposes it and corrected the "
"bug in the code so our test passes."
msgstr ""

# 8aa9fb7240664f9ca6e31dab7d391274
#: ../../../../1.8/docs/intro/tutorial05.txt:265
msgid ""
"Many other things might go wrong with our application in the future, but we "
"can be sure that we won't inadvertently reintroduce this bug, because simply"
" running the test will warn us immediately. We can consider this little "
"portion of the application pinned down safely forever."
msgstr ""

# 652a7629f1b347b9afba2199d96ac7ed
#: ../../../../1.8/docs/intro/tutorial05.txt:271
msgid "More comprehensive tests"
msgstr ""

# c51cdfb75e81432b81d0e1396505921f
#: ../../../../1.8/docs/intro/tutorial05.txt:273
msgid ""
"While we're here, we can further pin down the ``was_published_recently()`` "
"method; in fact, it would be positively embarrassing if in fixing one bug we"
" had introduced another."
msgstr ""

# b5f956cf5c8a498b85cca963bb47fe4f
#: ../../../../1.8/docs/intro/tutorial05.txt:277
msgid ""
"Add two more test methods to the same class, to test the behavior of the "
"method more comprehensively:"
msgstr ""

# 242d60a6d0e34a8fbf2dd56d87d5cabb
#: ../../../../1.8/docs/intro/tutorial05.txt:301
msgid ""
"And now we have three tests that confirm that "
"``Question.was_published_recently()`` returns sensible values for past, "
"recent, and future questions."
msgstr ""

# 9758bb8c86694e909cd3b6a7915c6db9
#: ../../../../1.8/docs/intro/tutorial05.txt:304
msgid ""
"Again, ``polls`` is a simple application, but however complex it grows in "
"the future and whatever other code it interacts with, we now have some "
"guarantee that the method we have written tests for will behave in expected "
"ways."
msgstr ""

# adad2ce577414290b09cb686d2803936
#: ../../../../1.8/docs/intro/tutorial05.txt:309
msgid "Test a view"
msgstr ""

# c66f95bd26f34712b8d6f4a3b6e004bf
#: ../../../../1.8/docs/intro/tutorial05.txt:311
msgid ""
"The polls application is fairly undiscriminating: it will publish any "
"question, including ones whose ``pub_date`` field lies in the future. We "
"should improve this. Setting a ``pub_date`` in the future should mean that "
"the Question is published at that moment, but invisible until then."
msgstr ""

# c0cc25b268894d93b0ca9855c224755d
#: ../../../../1.8/docs/intro/tutorial05.txt:317
msgid "A test for a view"
msgstr ""

# 43c0353f33214e7497aace1fb8960d81
#: ../../../../1.8/docs/intro/tutorial05.txt:319
msgid ""
"When we fixed the bug above, we wrote the test first and then the code to "
"fix it. In fact that was a simple example of test-driven development, but it"
" doesn't really matter in which order we do the work."
msgstr ""

# 4be0fdece5a0424b9fa87f60d2f27c6a
#: ../../../../1.8/docs/intro/tutorial05.txt:323
msgid ""
"In our first test, we focused closely on the internal behavior of the code. "
"For this test, we want to check its behavior as it would be experienced by a"
" user through a web browser."
msgstr ""

# 528c0a211a33470fbb4631443bed36b5
#: ../../../../1.8/docs/intro/tutorial05.txt:327
msgid ""
"Before we try to fix anything, let's have a look at the tools at our "
"disposal."
msgstr ""

# eb68e0d43a1242b38e2c670726110b1c
#: ../../../../1.8/docs/intro/tutorial05.txt:330
msgid "The Django test client"
msgstr ""

# 6e8c8cca69964680824aa03aaeda9eb9
#: ../../../../1.8/docs/intro/tutorial05.txt:332
msgid ""
"Django provides a test :class:`~django.test.Client` to simulate a user "
"interacting with the code at the view level.  We can use it in ``tests.py`` "
"or even in the :djadmin:`shell`."
msgstr ""

# d19b9c4bd5a64c83b8bd45a689fd0c15
#: ../../../../1.8/docs/intro/tutorial05.txt:336
msgid ""
"We will start again with the :djadmin:`shell`, where we need to do a couple "
"of things that won't be necessary in ``tests.py``. The first is to set up "
"the test environment in the :djadmin:`shell`::"
msgstr ""

# 8060f3c53b8f4ef0b1802679445a7302
#: ../../../../1.8/docs/intro/tutorial05.txt:343
msgid ""
":meth:`~django.test.utils.setup_test_environment` installs a template "
"renderer which will allow us to examine some additional attributes on "
"responses such as ``response.context`` that otherwise wouldn't be available."
" Note that this method *does not* setup a test database, so the following "
"will be run against the existing database and the output may differ slightly"
" depending on what questions you already created."
msgstr ""

# ac217815063542539b13dc2548644278
#: ../../../../1.8/docs/intro/tutorial05.txt:350
msgid ""
"Next we need to import the test client class (later in ``tests.py`` we will "
"use the :class:`django.test.TestCase` class, which comes with its own "
"client, so this won't be required)::"
msgstr ""

# fdefe8a0419043b2be655d16fbc10476
#: ../../../../1.8/docs/intro/tutorial05.txt:358
msgid "With that ready, we can ask the client to do some work for us::"
msgstr ""

# da705121e15e4c18b18021615982f2c3
#: ../../../../1.8/docs/intro/tutorial05.txt:391
msgid "Improving our view"
msgstr ""

# d4a5c8a38e4d45d89dce0e5bad576e31
#: ../../../../1.8/docs/intro/tutorial05.txt:393
msgid ""
"The list of polls shows polls that aren't published yet (i.e. those that "
"have a ``pub_date`` in the future). Let's fix that."
msgstr ""

# 19e1a92fad5f40f7ae8b9eaf6359b716
#: ../../../../1.8/docs/intro/tutorial05.txt:396
msgid ""
"In :ref:`Tutorial 4 <tutorial04-amend-views>` we introduced a class-based "
"view, based on :class:`~django.views.generic.list.ListView`:"
msgstr ""

# b24c100c2b684911acaf7dba38e52c57
#: ../../../../1.8/docs/intro/tutorial05.txt:410
msgid ""
"``response.context_data['latest_question_list']`` extracts the data this "
"view places into the context."
msgstr ""

# 6fd701663dca47bfa193e3d2c41ed5b8
#: ../../../../1.8/docs/intro/tutorial05.txt:413
msgid ""
"We need to amend the ``get_queryset`` method and change it so that it also "
"checks the date by comparing it with ``timezone.now()``. First we need to "
"add an import:"
msgstr ""

# be3f49f04315411abf0598cb9ecd305e
#: ../../../../1.8/docs/intro/tutorial05.txt:422
msgid "and then we must amend the ``get_queryset`` method like so:"
msgstr ""

# 64c11b0f744f48ad8e2926ed35fbf8b8
#: ../../../../1.8/docs/intro/tutorial05.txt:436
msgid ""
"``Question.objects.filter(pub_date__lte=timezone.now())`` returns a queryset"
" containing ``Question``\\s whose ``pub_date`` is less than or equal to - "
"that is, earlier than or equal to - ``timezone.now``."
msgstr ""

# 6f614f9bc5bc41a29cf4fb5df7a672fa
#: ../../../../1.8/docs/intro/tutorial05.txt:441
msgid "Testing our new view"
msgstr ""

# f7927d6acd454354be55a055fd824ec6
#: ../../../../1.8/docs/intro/tutorial05.txt:443
msgid ""
"Now you can satisfy yourself that this behaves as expected by firing up the "
"runserver, loading the site in your browser, creating ``Questions`` with "
"dates in the past and future, and checking that only those that have been "
"published are listed.  You don't want to have to do that *every single time "
"you make any change that might affect this* - so let's also create a test, "
"based on our :djadmin:`shell` session above."
msgstr ""

# d545d74af93e498bb61cac7d6229c20c
#: ../../../../1.8/docs/intro/tutorial05.txt:450
msgid "Add the following to ``polls/tests.py``:"
msgstr ""

# c236fe84b81d4db19a973283aa7a9c76
#: ../../../../1.8/docs/intro/tutorial05.txt:457
msgid ""
"and we'll create a shortcut function to create questions as well as a new "
"test class:"
msgstr ""

# aefbb24306a642a1b259079ffd0a693a
#: ../../../../1.8/docs/intro/tutorial05.txt:533
msgid "Let's look at some of these more closely."
msgstr ""

# c629e21fc72a47d298de33610d4ace59
#: ../../../../1.8/docs/intro/tutorial05.txt:535
msgid ""
"First is a question shortcut function, ``create_question``, to take some "
"repetition out of the process of creating questions."
msgstr ""

# b91c5eb8fcb94f7a8b29692b95bbb532
#: ../../../../1.8/docs/intro/tutorial05.txt:538
msgid ""
"``test_index_view_with_no_questions`` doesn't create any questions, but "
"checks the message: \"No polls are available.\" and verifies the "
"``latest_question_list`` is empty. Note that the "
":class:`django.test.TestCase` class provides some additional assertion "
"methods. In these examples, we use "
":meth:`~django.test.SimpleTestCase.assertContains()` and "
":meth:`~django.test.TransactionTestCase.assertQuerysetEqual()`."
msgstr ""

# 5cecfb45e229432187533c7c32ba640d
#: ../../../../1.8/docs/intro/tutorial05.txt:545
msgid ""
"In ``test_index_view_with_a_past_question``, we create a question and verify"
" that it appears in the list."
msgstr ""

# 54a90f98c1044166926ef5ca31077347
#: ../../../../1.8/docs/intro/tutorial05.txt:548
msgid ""
"In ``test_index_view_with_a_future_question``, we create a question with a "
"``pub_date`` in the future. The database is reset for each test method, so "
"the first question is no longer there, and so again the index shouldn't have"
" any questions in it."
msgstr ""

# 132556ac824c43a984b54a7e46c21177
#: ../../../../1.8/docs/intro/tutorial05.txt:553
msgid ""
"And so on. In effect, we are using the tests to tell a story of admin input "
"and user experience on the site, and checking that at every state and for "
"every new change in the state of the system, the expected results are "
"published."
msgstr ""

# ab3bdf24660746fd942bd800655d4849
#: ../../../../1.8/docs/intro/tutorial05.txt:558
msgid "Testing the ``DetailView``"
msgstr ""

# 94d58ec794aa41e085d739eea44279c7
#: ../../../../1.8/docs/intro/tutorial05.txt:560
msgid ""
"What we have works well; however, even though future questions don't appear "
"in the *index*, users can still reach them if they know or guess the right "
"URL. So we need to add a similar  constraint to ``DetailView``:"
msgstr ""

# 5a71ae748ba74600810282fcb4850c6d
#: ../../../../1.8/docs/intro/tutorial05.txt:575
msgid ""
"And of course, we will add some tests, to check that a ``Question`` whose "
"``pub_date`` is in the past can be displayed, and that one with a "
"``pub_date`` in the future is not:"
msgstr ""

# 1cd67799fe8842a38fa09c47046f8430
#: ../../../../1.8/docs/intro/tutorial05.txt:608
msgid "Ideas for more tests"
msgstr ""

# f7e53db17c824d19b3cda6c9560d516e
#: ../../../../1.8/docs/intro/tutorial05.txt:610
msgid ""
"We ought to add a similar ``get_queryset`` method to ``ResultsView`` and "
"create a new test class for that view. It'll be very similar to what we have"
" just created; in fact there will be a lot of repetition."
msgstr ""

# b801979fbdcc42518b7fb3f5b0294ff8
#: ../../../../1.8/docs/intro/tutorial05.txt:614
msgid ""
"We could also improve our application in other ways, adding tests along the "
"way. For example, it's silly that ``Questions`` can be published on the site"
" that have no ``Choices``. So, our views could check for this, and exclude "
"such ``Questions``. Our tests would create a ``Question`` without "
"``Choices`` and then test that it's not published, as well as create a "
"similar ``Question`` *with* ``Choices``, and test that it *is* published."
msgstr ""

# bcdeac00d79f4eb288b55b5ec529703a
#: ../../../../1.8/docs/intro/tutorial05.txt:621
msgid ""
"Perhaps logged-in admin users should be allowed to see unpublished "
"``Questions``, but not ordinary visitors. Again: whatever needs to be added "
"to the software to accomplish this should be accompanied by a test, whether "
"you write the test first and then make the code pass the test, or work out "
"the logic in your code first and then write a test to prove it."
msgstr ""

# 44cd93eb69ff4932b153e30adccc05cf
#: ../../../../1.8/docs/intro/tutorial05.txt:627
msgid ""
"At a certain point you are bound to look at your tests and wonder whether "
"your code is suffering from test bloat, which brings us to:"
msgstr ""

# 0abb647645454e00ba16f43a231894ad
#: ../../../../1.8/docs/intro/tutorial05.txt:631
msgid "When testing, more is better"
msgstr ""

# 0151df4883554791a11ef3c461bd9be7
#: ../../../../1.8/docs/intro/tutorial05.txt:633
msgid ""
"It might seem that our tests are growing out of control. At this rate there "
"will soon be more code in our tests than in our application, and the "
"repetition is unaesthetic, compared to the elegant conciseness of the rest "
"of our code."
msgstr ""

# a0e449879e4e45c19ca782085b759bb9
#: ../../../../1.8/docs/intro/tutorial05.txt:637
msgid ""
"**It doesn't matter**. Let them grow. For the most part, you can write a "
"test once and then forget about it. It will continue performing its useful "
"function as you continue to develop your program."
msgstr ""

# d0f46033d0ff46e8bed64d3177cc101a
#: ../../../../1.8/docs/intro/tutorial05.txt:641
msgid ""
"Sometimes tests will need to be updated. Suppose that we amend our views so "
"that only ``Questions`` with ``Choices`` are published. In that case, many "
"of our existing tests will fail - *telling us exactly which tests need to be"
" amended to bring them up to date*, so to that extent tests help look after "
"themselves."
msgstr ""

# 4c564d72de24497998c0d44dc091ed26
#: ../../../../1.8/docs/intro/tutorial05.txt:646
msgid ""
"At worst, as you continue developing, you might find that you have some "
"tests that are now redundant. Even that's not a problem; in testing "
"redundancy is a *good* thing."
msgstr ""

# 02c4d9b1f7674340b3af0a99b2c463ca
#: ../../../../1.8/docs/intro/tutorial05.txt:650
msgid ""
"As long as your tests are sensibly arranged, they won't become unmanageable."
" Good rules-of-thumb include having:"
msgstr ""

# cf0381ef18bd462bba54c67ff70c1a04
#: ../../../../1.8/docs/intro/tutorial05.txt:653
msgid "a separate ``TestClass`` for each model or view"
msgstr ""

# 2d5eda3875214676b48089db7c044531
#: ../../../../1.8/docs/intro/tutorial05.txt:654
msgid "a separate test method for each set of conditions you want to test"
msgstr ""

# 968f5fa3f1264ec681f71d1a26da4d72
#: ../../../../1.8/docs/intro/tutorial05.txt:655
msgid "test method names that describe their function"
msgstr ""

# ecb7bf1397484c85af6becf6ff5532ac
#: ../../../../1.8/docs/intro/tutorial05.txt:658
msgid "Further testing"
msgstr ""

# e3633f1908ec46a0aa04e9385f690efb
#: ../../../../1.8/docs/intro/tutorial05.txt:660
msgid ""
"This tutorial only introduces some of the basics of testing. There's a great"
" deal more you can do, and a number of very useful tools at your disposal to"
" achieve some very clever things."
msgstr ""

# 88695598540f49eba5065b443a50e3b4
#: ../../../../1.8/docs/intro/tutorial05.txt:664
msgid ""
"For example, while our tests here have covered some of the internal logic of"
" a model and the way our views publish information, you can use an \"in-"
"browser\" framework such as Selenium_ to test the way your HTML actually "
"renders in a browser. These tools allow you to check not just the behavior "
"of your Django code, but also, for example, of your JavaScript. It's quite "
"something to see the tests launch a browser, and start interacting with your"
" site, as if a human being were driving it! Django includes "
":class:`~django.test.LiveServerTestCase` to facilitate integration with "
"tools like Selenium."
msgstr ""

# 39d988ac257d446b8be31ac9999b33af
#: ../../../../1.8/docs/intro/tutorial05.txt:673
msgid ""
"If you have a complex application, you may want to run tests automatically "
"with every commit for the purposes of `continuous integration`_, so that "
"quality control is itself - at least partially - automated."
msgstr ""

# 9d29eb453a9d459d806203a09f821a91
#: ../../../../1.8/docs/intro/tutorial05.txt:677
msgid ""
"A good way to spot untested parts of your application is to check code "
"coverage. This also helps identify fragile or even dead code. If you can't "
"test a piece of code, it usually means that code should be refactored or "
"removed. Coverage will help to identify dead code. See :ref:`topics-testing-"
"code-coverage` for details."
msgstr ""

# dda733e65eeb471d928e02b0ee6226e0
#: ../../../../1.8/docs/intro/tutorial05.txt:683
msgid ""
":doc:`Testing in Django </topics/testing/index>` has comprehensive "
"information about testing."
msgstr ""

# 61e41cf860174be78bae618832df3dd7
#: ../../../../1.8/docs/intro/tutorial05.txt:692
msgid ""
"For full details on testing, see :doc:`Testing in Django "
"</topics/testing/index>`."
msgstr ""

# 346be4befcc243edac4af1bf601508d1
#: ../../../../1.8/docs/intro/tutorial05.txt:695
msgid ""
"When you're comfortable with testing Django views, read :doc:`part 6 of this"
" tutorial</intro/tutorial06>` to learn about static files management."
msgstr ""

# ceef4849142c4869bc94954abbb8e4d4
#: ../../../../1.8/docs/intro/tutorial06.txt:3
msgid "Writing your first Django app, part 6"
msgstr ""

# a5322f4397b249c3b428f8959a1e95bc
#: ../../../../1.8/docs/intro/tutorial06.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 5 </intro/tutorial05>` left off. "
"We've built a tested Web-poll application, and we'll now add a stylesheet "
"and an image."
msgstr ""

# 7c2a46ca582a41738dc7f21c2472e95d
#: ../../../../1.8/docs/intro/tutorial06.txt:9
msgid ""
"Aside from the HTML generated by the server, web applications generally need"
" to serve additional files — such as images, JavaScript, or CSS — necessary "
"to render the complete web page. In Django, we refer to these files as "
"\"static files\"."
msgstr ""

# 0efe29e50197465284d36c37fbbb011a
#: ../../../../1.8/docs/intro/tutorial06.txt:14
msgid ""
"For small projects, this isn't a big deal, because you can just keep the "
"static files somewhere your web server can find it. However, in bigger "
"projects -- especially those comprised of multiple apps -- dealing with the "
"multiple sets of static files provided by each application starts to get "
"tricky."
msgstr ""

# 0dd750ce0bd34ef9ab65a5a4837d0767
#: ../../../../1.8/docs/intro/tutorial06.txt:20
msgid ""
"That's what ``django.contrib.staticfiles`` is for: it collects static files "
"from each of your applications (and any other places you specify) into a "
"single location that can easily be served in production."
msgstr ""

# d6410238603b404790aa905fb15c20a1
#: ../../../../1.8/docs/intro/tutorial06.txt:25
msgid "Customize your *app's* look and feel"
msgstr ""

# ecbfac2d0b3d4545bc9f3e396351f408
#: ../../../../1.8/docs/intro/tutorial06.txt:27
msgid ""
"First, create a directory called ``static`` in your ``polls`` directory. "
"Django will look for static files there, similarly to how Django finds "
"templates inside ``polls/templates/``."
msgstr ""

# 67f405647ac74e5aa96b8518232ed61f
#: ../../../../1.8/docs/intro/tutorial06.txt:31
msgid ""
"Django's :setting:`STATICFILES_FINDERS` setting contains a list of finders "
"that know how to discover static files from various sources. One of the "
"defaults is ``AppDirectoriesFinder`` which looks for a \"static\" "
"subdirectory in each of the :setting:`INSTALLED_APPS`, like the one in "
"``polls`` we just created. The admin site uses the same directory structure "
"for its static files."
msgstr ""

# 6388faf47e894992bec156bca95775c3
#: ../../../../1.8/docs/intro/tutorial06.txt:38
msgid ""
"Within the ``static`` directory you have just created, create another "
"directory called ``polls`` and within that create a file called "
"``style.css``. In other words, your stylesheet should be at "
"``polls/static/polls/style.css``. Because of how the "
"``AppDirectoriesFinder`` staticfile finder works, you can refer to this "
"static file in Django simply as ``polls/style.css``, similar to how you "
"reference the path for templates."
msgstr ""

# 04b86e217335464fa0fa478bfabd60fe
#: ../../../../1.8/docs/intro/tutorial06.txt:45
msgid "Static file namespacing"
msgstr ""

# 3d524f4a99634c5f80a464563358bda6
#: ../../../../1.8/docs/intro/tutorial06.txt:47
msgid ""
"Just like templates, we *might* be able to get away with putting our static "
"files directly in ``polls/static`` (rather than creating another ``polls`` "
"subdirectory), but it would actually be a bad idea. Django will choose the "
"first static file it finds whose name matches, and if you had a static file "
"with the same name in a *different* application, Django would be unable to "
"distinguish between them. We need to be able to point Django at the right "
"one, and the easiest way to ensure this is by *namespacing* them. That is, "
"by putting those static files inside *another* directory named for the "
"application itself."
msgstr ""

# c9201cebb2a444818acdc0ad97370711
#: ../../../../1.8/docs/intro/tutorial06.txt:57
msgid ""
"Put the following code in that stylesheet "
"(``polls/static/polls/style.css``):"
msgstr ""

# 2db39942fd7543c9afd1c13c58d4da4f
#: ../../../../1.8/docs/intro/tutorial06.txt:66
msgid ""
"Next, add the following at the top of ``polls/templates/polls/index.html``:"
msgstr ""

# 2b1fb6e8893a45ef89f0fd958de566d7
#: ../../../../1.8/docs/intro/tutorial06.txt:75
msgid ""
"``{% load staticfiles %}`` loads the :ttag:`{% static %} <staticfiles-"
"static>` template tag from the ``staticfiles`` template library. The ``{% "
"static %}`` template tag generates the absolute URL of the static file."
msgstr ""

# 0a3aafa2200f4762b262a2482c7b9e6c
#: ../../../../1.8/docs/intro/tutorial06.txt:79
msgid ""
"That's all you need to do for development. Reload "
"``http://localhost:8000/polls/`` and you should see that the question links "
"are green (Django style!) which means that your stylesheet was properly "
"loaded."
msgstr ""

# d8b507c28dbb4061abc4a645cf0428b7
#: ../../../../1.8/docs/intro/tutorial06.txt:84
msgid "Adding a background-image"
msgstr ""

# 4e1dd8a6b19944e8b9b2f503b9212032
#: ../../../../1.8/docs/intro/tutorial06.txt:86
msgid ""
"Next, we'll create a subdirectory for images. Create an ``images`` "
"subdirectory in the ``polls/static/polls/`` directory. Inside this "
"directory, put an image called ``background.gif``. In other words, put your "
"image in ``polls/static/polls/images/background.gif``."
msgstr ""

# 69b0622f85144586b783fa8116a2c0d8
#: ../../../../1.8/docs/intro/tutorial06.txt:91
msgid "Then, add to your stylesheet (``polls/static/polls/style.css``):"
msgstr ""

# e54427940cd44692820654603af62dd8
#: ../../../../1.8/docs/intro/tutorial06.txt:100
msgid ""
"Reload ``http://localhost:8000/polls/`` and you should see the background "
"loaded in the bottom right of the screen."
msgstr ""

# 504213aefccc4fcc9ee38e1c36129bd9
#: ../../../../1.8/docs/intro/tutorial06.txt:105
msgid ""
"Of course the ``{% static %}`` template tag is not available for use in "
"static files like your stylesheet which aren't generated by Django. You "
"should always use **relative paths** to link your static files between each "
"other, because then you can change :setting:`STATIC_URL` (used by the "
":ttag:`static` template tag to generate its URLs) without having to modify a"
" bunch of paths in your static files as well."
msgstr ""

# b976b435060e451aba0f13fa4951789d
#: ../../../../1.8/docs/intro/tutorial06.txt:112
msgid ""
"These are the **basics**. For more details on settings and other bits "
"included with the framework see :doc:`the static files howto </howto/static-"
"files/index>` and :doc:`the staticfiles reference "
"</ref/contrib/staticfiles>`. :doc:`Deploying static files </howto/static-"
"files/deployment>` discusses how to use static files on a real server."
msgstr ""

# 06d0b80db9b94d6797cea8c967cd9600
#: ../../../../1.8/docs/intro/tutorial06.txt:122
msgid ""
"The beginner tutorial ends here for the time being. In the meantime, you "
"might want to check out some pointers on :doc:`where to go from here "
"</intro/whatsnext>`."
msgstr ""

# ea08d6cdf7e14c10add0c297d69d2053
#: ../../../../1.8/docs/intro/tutorial06.txt:126
msgid ""
"If you are familiar with Python packaging and interested in learning how to "
"turn polls into a \"reusable app\", check out :doc:`Advanced tutorial: How "
"to write reusable apps</intro/reusable-apps>`."
msgstr ""

# 75bc1941b5e94e849bc41534a5519446
#: ../../../../1.8/docs/intro/whatsnext.txt:3
msgid "What to read next"
msgstr "Qué leer después"

# 6cd8a470b41c4435a1e69c9e7ab81f8c
#: ../../../../1.8/docs/intro/whatsnext.txt:5
msgid ""
"So you've read all the :doc:`introductory material </intro/index>` and have "
"decided you'd like to keep using Django. We've only just scratched the "
"surface with this intro (in fact, if you've read every single word, you've "
"read about 5% of the overall documentation)."
msgstr ""

# d60d5c56eb554406a271e79ec97aaabb
#: ../../../../1.8/docs/intro/whatsnext.txt:10
msgid "So what's next?"
msgstr ""

# fab5c108066d4f72a0d463ef444e3961
#: ../../../../1.8/docs/intro/whatsnext.txt:12
msgid ""
"Well, we've always been big fans of learning by doing. At this point you "
"should know enough to start a project of your own and start fooling around. "
"As you need to learn new tricks, come back to the documentation."
msgstr ""

# afb5ae1b437d4d53a98db26617b97b08
#: ../../../../1.8/docs/intro/whatsnext.txt:16
msgid ""
"We've put a lot of effort into making Django's documentation useful, easy to"
" read and as complete as possible. The rest of this document explains more "
"about how the documentation works so that you can get the most out of it."
msgstr ""

# 197aa5c2c8f346e8914a4868c9cbe387
#: ../../../../1.8/docs/intro/whatsnext.txt:20
msgid ""
"(Yes, this is documentation about documentation. Rest assured we have no "
"plans to write a document about how to read the document about "
"documentation.)"
msgstr ""

# 57ea8d7034274cab995e7507c544a6ce
#: ../../../../1.8/docs/intro/whatsnext.txt:24
msgid "Finding documentation"
msgstr ""

# 6e93a38cbfa145d5ab72ccd9ca97aba1
#: ../../../../1.8/docs/intro/whatsnext.txt:26
msgid ""
"Django's got a *lot* of documentation -- almost 450,000 words and counting "
"-- so finding what you need can sometimes be tricky. A few good places to "
"start are the :ref:`search` and the :ref:`genindex`."
msgstr ""

# 38b4528db98044d3b3be9a35251b0e46
#: ../../../../1.8/docs/intro/whatsnext.txt:30
msgid "Or you can just browse around!"
msgstr ""

# 46b75f261b6647bc82ee3e837dd7b81c
#: ../../../../1.8/docs/intro/whatsnext.txt:33
msgid "How the documentation is organized"
msgstr "Cómo está organizada la documentación"

# 159768908d5f4011b5af29720dbbaa28
#: ../../../../1.8/docs/intro/whatsnext.txt:35
msgid ""
"Django's main documentation is broken up into \"chunks\" designed to fill "
"different needs:"
msgstr ""

# f0da2d4bdd724fe8b9c161e18488720c
#: ../../../../1.8/docs/intro/whatsnext.txt:38
msgid ""
"The :doc:`introductory material </intro/index>` is designed for people new "
"to Django -- or to Web development in general. It doesn't cover anything in "
"depth, but instead gives a high-level overview of how developing in Django "
"\"feels\"."
msgstr ""

# c383e40cf5d44dbf969233410eb3aa87
#: ../../../../1.8/docs/intro/whatsnext.txt:43
msgid ""
"The :doc:`topic guides </topics/index>`, on the other hand, dive deep into "
"individual parts of Django. There are complete guides to Django's "
":doc:`model system </topics/db/index>`, :doc:`template engine "
"</topics/templates>`, :doc:`forms framework </topics/forms/index>`, and much"
" more."
msgstr ""

# dd74199f0eef4a19b8c9eef0f364b6b9
#: ../../../../1.8/docs/intro/whatsnext.txt:49
msgid ""
"This is probably where you'll want to spend most of your time; if you work "
"your way through these guides you should come out knowing pretty much "
"everything there is to know about Django."
msgstr ""

# c6a2447fcc734432b3e5fcf65a35f340
#: ../../../../1.8/docs/intro/whatsnext.txt:53
msgid ""
"Web development is often broad, not deep -- problems span many domains. "
"We've written a set of :doc:`how-to guides </howto/index>` that answer "
"common \"How do I ...?\" questions. Here you'll find information about "
":doc:`generating PDFs with Django </howto/outputting-pdf>`, :doc:`writing "
"custom template tags </howto/custom-template-tags>`, and more."
msgstr ""

# 66d223396a2341d9930e46441a461c27
#: ../../../../1.8/docs/intro/whatsnext.txt:59
msgid ""
"Answers to really common questions can also be found in the :doc:`FAQ "
"</faq/index>`."
msgstr "Respuestas a preguntas muy comunes también se pueden encontrar en el: doc:`FAQ </faq/index>`."

# 8e5e8800181c4cf38adf1782624619e3
#: ../../../../1.8/docs/intro/whatsnext.txt:62
msgid ""
"The guides and how-to's don't cover every single class, function, and method"
" available in Django -- that would be overwhelming when you're trying to "
"learn. Instead, details about individual classes, functions, methods, and "
"modules are kept in the :doc:`reference </ref/index>`. This is where you'll "
"turn to find the details of a particular function or whatever you need."
msgstr ""

# 18280100757c4a76adcbd5933b22c2b8
#: ../../../../1.8/docs/intro/whatsnext.txt:69
msgid ""
"If you are interested in deploying a project for public use, our docs have "
":doc:`several guides</howto/deployment/index>` for various deployment setups"
" as well as a :doc:`deployment checklist</howto/deployment/checklist>` for "
"some things you'll need to think about."
msgstr ""

# 1b0ab05dc76344be906d76560de86e33
#: ../../../../1.8/docs/intro/whatsnext.txt:74
msgid ""
"Finally, there's some \"specialized\" documentation not usually relevant to "
"most developers. This includes the :doc:`release notes </releases/index>` "
"and :doc:`internals documentation </internals/index>` for those who want to "
"add code to Django itself, and a :doc:`few other things that simply don't "
"fit elsewhere </misc/index>`."
msgstr ""

# a22bad91127149adb3be1b37bd063fd1
#: ../../../../1.8/docs/intro/whatsnext.txt:82
msgid "How documentation is updated"
msgstr "Cómo se actualiza la documentación"

# b9bef7f226774cbf9d99f5cee6121a37
#: ../../../../1.8/docs/intro/whatsnext.txt:84
msgid ""
"Just as the Django code base is developed and improved on a daily basis, our"
" documentation is consistently improving. We improve documentation for "
"several reasons:"
msgstr ""

# a577af0fe66b4670a12def64beb2f8b8
#: ../../../../1.8/docs/intro/whatsnext.txt:88
msgid "To make content fixes, such as grammar/typo corrections."
msgstr "Para hacer correcciones de contenido, como correcciones gramaticales."

# 06f6eebc7e814ca799804e47c61d7e54
#: ../../../../1.8/docs/intro/whatsnext.txt:90
msgid ""
"To add information and/or examples to existing sections that need to be "
"expanded."
msgstr ""

# 5f6a07777b8940af8ed56a83880582d2
#: ../../../../1.8/docs/intro/whatsnext.txt:93
msgid ""
"To document Django features that aren't yet documented. (The list of such "
"features is shrinking but exists nonetheless.)"
msgstr ""

# 03aacc4a209e419fadb978239d0cf4aa
#: ../../../../1.8/docs/intro/whatsnext.txt:96
msgid ""
"To add documentation for new features as new features get added, or as "
"Django APIs or behaviors change."
msgstr ""

# 6e9796c5cf3348a7bd162e305857bd2b
#: ../../../../1.8/docs/intro/whatsnext.txt:99
msgid ""
"Django's documentation is kept in the same source control system as its "
"code. It lives in the `docs`_ directory of our Git repository. Each document"
" online is a separate text file in the repository."
msgstr ""

# 3106e5b199ca4ddf861fe152b0a350b6
#: ../../../../1.8/docs/intro/whatsnext.txt:106
msgid "Where to get it"
msgstr "Dónde conseguirlo"

# 3700483c23a040218fd32e192ed130ff
#: ../../../../1.8/docs/intro/whatsnext.txt:108
msgid ""
"You can read Django documentation in several ways. They are, in order of "
"preference:"
msgstr "Usted puede leer la documentación de Django de varias maneras. Ellos son, en orden de preferencia:"

# ddef0650469941cd8bbe40e33785787e
#: ../../../../1.8/docs/intro/whatsnext.txt:112
msgid "On the Web"
msgstr "En la Web"

# 6c273ad30039448a84391da1dd34cd57
#: ../../../../1.8/docs/intro/whatsnext.txt:114
msgid ""
"The most recent version of the Django documentation lives at "
"https://docs.djangoproject.com/en/dev/. These HTML pages are generated "
"automatically from the text files in source control. That means they reflect"
" the \"latest and greatest\" in Django -- they include the very latest "
"corrections and additions, and they discuss the latest Django features, "
"which may only be available to users of the Django development version. (See"
" \"Differences between versions\" below.)"
msgstr ""

# 0ceb93c710ed4f60a313557074b54ee9
#: ../../../../1.8/docs/intro/whatsnext.txt:122
msgid ""
"We encourage you to help improve the docs by submitting changes, corrections"
" and suggestions in the `ticket system`_. The Django developers actively "
"monitor the ticket system and use your feedback to improve the documentation"
" for everybody."
msgstr ""

# 68be2c4aa20f49279e9e0baa07c53124
#: ../../../../1.8/docs/intro/whatsnext.txt:126
msgid ""
"Note, however, that tickets should explicitly relate to the documentation, "
"rather than asking broad tech-support questions. If you need help with your "
"particular Django setup, try the |django-users| mailing list or the `#django"
" IRC channel`_ instead."
msgstr ""

# 290134646d8344f68fa19dbe4890da6d
#: ../../../../1.8/docs/intro/whatsnext.txt:135
msgid "In plain text"
msgstr "En texto sin formato"

# ec52f5938c4e42938535a35f8e80a88a
#: ../../../../1.8/docs/intro/whatsnext.txt:137
msgid ""
"For offline reading, or just for convenience, you can read the Django "
"documentation in plain text."
msgstr ""

# 6ce6148bbad34ca2a31ea93c6b1e559f
#: ../../../../1.8/docs/intro/whatsnext.txt:140
msgid ""
"If you're using an official release of Django, note that the zipped package "
"(tarball) of the code includes a ``docs/`` directory, which contains all the"
" documentation for that release."
msgstr ""

# e90912aac4d44d7c856739fb1f4bc6c5
#: ../../../../1.8/docs/intro/whatsnext.txt:144
msgid ""
"If you're using the development version of Django (aka \"trunk\"), note that"
" the ``docs/`` directory contains all of the documentation. You can update "
"your Git checkout to get the latest changes."
msgstr ""

# 8fdeb76b65b044749c8ad1715b972a52
#: ../../../../1.8/docs/intro/whatsnext.txt:148
msgid ""
"One low-tech way of taking advantage of the text documentation is by using "
"the Unix ``grep`` utility to search for a phrase in all of the "
"documentation. For example, this will show you each mention of the phrase "
"\"max_length\" in any Django document:"
msgstr ""

# a248accb9e02402788c26a89b61f2b80
#: ../../../../1.8/docs/intro/whatsnext.txt:158
msgid "As HTML, locally"
msgstr "Como HTML, localmente"

# 851ec03b58c74179a4414dab0ab1709c
#: ../../../../1.8/docs/intro/whatsnext.txt:160
msgid ""
"You can get a local copy of the HTML documentation following a few easy "
"steps:"
msgstr ""

# 4e3e25e930274971ac104afcd50e1a05
#: ../../../../1.8/docs/intro/whatsnext.txt:162
msgid ""
"Django's documentation uses a system called Sphinx__ to convert from plain "
"text to HTML. You'll need to install Sphinx by either downloading and "
"installing the package from the Sphinx Web site, or with ``pip``:"
msgstr ""

# a17a9ec2965646c7a9cc258fd480acef
#: ../../../../1.8/docs/intro/whatsnext.txt:170
msgid ""
"Then, just use the included ``Makefile`` to turn the documentation into "
"HTML:"
msgstr ""

# ffa6804c20654bec95d6b4c4b5e54f74
#: ../../../../1.8/docs/intro/whatsnext.txt:178
msgid "You'll need `GNU Make`__ installed for this."
msgstr ""

# a8e6e9d26f70479a8164f67f42544600
#: ../../../../1.8/docs/intro/whatsnext.txt:180
msgid ""
"If you're on Windows you can alternatively use the included batch file:"
msgstr ""

# 72e18737d348463480983f7f84b1150c
#: ../../../../1.8/docs/intro/whatsnext.txt:187
msgid "The HTML documentation will be placed in ``docs/_build/html``."
msgstr "La documentación HTML se situará en '' docs/_build/html ''."

# cc029509cd754b7aaf478914de17b045
#: ../../../../1.8/docs/intro/whatsnext.txt:191
msgid ""
"Generation of the Django documentation will work with Sphinx version 0.6 or "
"newer, but we recommend going straight to Sphinx 1.0.2 or newer."
msgstr ""

# 96fb5d384f30427694146e6f11cfe987
#: ../../../../1.8/docs/intro/whatsnext.txt:200
msgid "Differences between versions"
msgstr "Diferencias entre versiones"

# 644137b947c447cdb6fd4640b79d15df
#: ../../../../1.8/docs/intro/whatsnext.txt:202
msgid ""
"As previously mentioned, the text documentation in our Git repository "
"contains the \"latest and greatest\" changes and additions. These changes "
"often include documentation of new features added in the Django development "
"version -- the Git (\"trunk\") version of Django. For that reason, it's "
"worth pointing out our policy on keeping straight the documentation for "
"various versions of the framework."
msgstr ""

# 8f8e0e8b33a1411db8f803c76cf54c7f
#: ../../../../1.8/docs/intro/whatsnext.txt:209
msgid "We follow this policy:"
msgstr "Seguimos esta política:"

# 8aec9753adbb42e1928fc979e4531e6f
#: ../../../../1.8/docs/intro/whatsnext.txt:211
msgid ""
"The primary documentation on djangoproject.com is an HTML version of the "
"latest docs in Git. These docs always correspond to the latest official "
"Django release, plus whatever features we've added/changed in the framework "
"*since* the latest release."
msgstr ""

# 33016d2f147d4d8da649359f9aeba256
#: ../../../../1.8/docs/intro/whatsnext.txt:216
msgid ""
"As we add features to Django's development version, we try to update the "
"documentation in the same Git commit transaction."
msgstr ""

# f66da1a94f0a4947ac30d02b542c0ea8
#: ../../../../1.8/docs/intro/whatsnext.txt:219
msgid ""
"To distinguish feature changes/additions in the docs, we use the phrase: "
"\"New in version X.Y\", being X.Y the next release version (hence, the one "
"being developed)."
msgstr ""

# f5b5faad80504802854e82f027111395
#: ../../../../1.8/docs/intro/whatsnext.txt:223
msgid ""
"Documentation fixes and improvements may be backported to the last release "
"branch, at the discretion of the committer, however, once a version of "
"Django is :ref:`no longer supported<backwards-compatibility-policy>`, that "
"version of the docs won't get any further updates."
msgstr ""

# 87131abb7ecc47e3b4c89ac61b2c14ba
#: ../../../../1.8/docs/intro/whatsnext.txt:228
msgid ""
"The `main documentation Web page`_ includes links to documentation for all "
"previous versions. Be sure you are using the version of the docs "
"corresponding to the version of Django you are using!"
msgstr ""
